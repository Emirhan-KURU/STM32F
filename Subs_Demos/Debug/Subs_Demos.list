
Subs_Demos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017adc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  08017c70  08017c70  00027c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018a38  08018a38  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08018a38  08018a38  00028a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a40  08018a40  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018a40  08018a40  00028a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a48  08018a48  00028a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08018a4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030110  2**0
                  CONTENTS
 10 .bss          0000df00  20000110  20000110  00030110  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000e010  2000e010  00030110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 13 .comment      00000076  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022bcb  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005176  00000000  00000000  00052d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ba8  00000000  00000000  00057ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001553  00000000  00000000  00059aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a394  00000000  00000000  0005aff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002344f  00000000  00000000  00065387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e269e  00000000  00000000  000887d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000828c  00000000  00000000  0016ae74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00173100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017c54 	.word	0x08017c54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	08017c54 	.word	0x08017c54

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9bb 	b.w	8000638 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b970 	b.w	8000638 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9e08      	ldr	r6, [sp, #32]
 8000376:	460d      	mov	r5, r1
 8000378:	4604      	mov	r4, r0
 800037a:	460f      	mov	r7, r1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d14a      	bne.n	8000416 <__udivmoddi4+0xa6>
 8000380:	428a      	cmp	r2, r1
 8000382:	4694      	mov	ip, r2
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0xe2>
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	b143      	cbz	r3, 800039e <__udivmoddi4+0x2e>
 800038c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000390:	f1c3 0220 	rsb	r2, r3, #32
 8000394:	409f      	lsls	r7, r3
 8000396:	fa20 f202 	lsr.w	r2, r0, r2
 800039a:	4317      	orrs	r7, r2
 800039c:	409c      	lsls	r4, r3
 800039e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a2:	fa1f f58c 	uxth.w	r5, ip
 80003a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003aa:	0c22      	lsrs	r2, r4, #16
 80003ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80003b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003b4:	fb01 f005 	mul.w	r0, r1, r5
 80003b8:	4290      	cmp	r0, r2
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x62>
 80003bc:	eb1c 0202 	adds.w	r2, ip, r2
 80003c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003c4:	f080 811c 	bcs.w	8000600 <__udivmoddi4+0x290>
 80003c8:	4290      	cmp	r0, r2
 80003ca:	f240 8119 	bls.w	8000600 <__udivmoddi4+0x290>
 80003ce:	3902      	subs	r1, #2
 80003d0:	4462      	add	r2, ip
 80003d2:	1a12      	subs	r2, r2, r0
 80003d4:	b2a4      	uxth	r4, r4
 80003d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003da:	fb0e 2210 	mls	r2, lr, r0, r2
 80003de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e2:	fb00 f505 	mul.w	r5, r0, r5
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	d90a      	bls.n	8000400 <__udivmoddi4+0x90>
 80003ea:	eb1c 0404 	adds.w	r4, ip, r4
 80003ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f2:	f080 8107 	bcs.w	8000604 <__udivmoddi4+0x294>
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	f240 8104 	bls.w	8000604 <__udivmoddi4+0x294>
 80003fc:	4464      	add	r4, ip
 80003fe:	3802      	subs	r0, #2
 8000400:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	2100      	movs	r1, #0
 8000408:	b11e      	cbz	r6, 8000412 <__udivmoddi4+0xa2>
 800040a:	40dc      	lsrs	r4, r3
 800040c:	2300      	movs	r3, #0
 800040e:	e9c6 4300 	strd	r4, r3, [r6]
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	428b      	cmp	r3, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0xbc>
 800041a:	2e00      	cmp	r6, #0
 800041c:	f000 80ed 	beq.w	80005fa <__udivmoddi4+0x28a>
 8000420:	2100      	movs	r1, #0
 8000422:	e9c6 0500 	strd	r0, r5, [r6]
 8000426:	4608      	mov	r0, r1
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	fab3 f183 	clz	r1, r3
 8000430:	2900      	cmp	r1, #0
 8000432:	d149      	bne.n	80004c8 <__udivmoddi4+0x158>
 8000434:	42ab      	cmp	r3, r5
 8000436:	d302      	bcc.n	800043e <__udivmoddi4+0xce>
 8000438:	4282      	cmp	r2, r0
 800043a:	f200 80f8 	bhi.w	800062e <__udivmoddi4+0x2be>
 800043e:	1a84      	subs	r4, r0, r2
 8000440:	eb65 0203 	sbc.w	r2, r5, r3
 8000444:	2001      	movs	r0, #1
 8000446:	4617      	mov	r7, r2
 8000448:	2e00      	cmp	r6, #0
 800044a:	d0e2      	beq.n	8000412 <__udivmoddi4+0xa2>
 800044c:	e9c6 4700 	strd	r4, r7, [r6]
 8000450:	e7df      	b.n	8000412 <__udivmoddi4+0xa2>
 8000452:	b902      	cbnz	r2, 8000456 <__udivmoddi4+0xe6>
 8000454:	deff      	udf	#255	; 0xff
 8000456:	fab2 f382 	clz	r3, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	f040 8090 	bne.w	8000580 <__udivmoddi4+0x210>
 8000460:	1a8a      	subs	r2, r1, r2
 8000462:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000466:	fa1f fe8c 	uxth.w	lr, ip
 800046a:	2101      	movs	r1, #1
 800046c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000470:	fb07 2015 	mls	r0, r7, r5, r2
 8000474:	0c22      	lsrs	r2, r4, #16
 8000476:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800047a:	fb0e f005 	mul.w	r0, lr, r5
 800047e:	4290      	cmp	r0, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x124>
 8000482:	eb1c 0202 	adds.w	r2, ip, r2
 8000486:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x122>
 800048c:	4290      	cmp	r0, r2
 800048e:	f200 80cb 	bhi.w	8000628 <__udivmoddi4+0x2b8>
 8000492:	4645      	mov	r5, r8
 8000494:	1a12      	subs	r2, r2, r0
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb2 f0f7 	udiv	r0, r2, r7
 800049c:	fb07 2210 	mls	r2, r7, r0, r2
 80004a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004a4:	fb0e fe00 	mul.w	lr, lr, r0
 80004a8:	45a6      	cmp	lr, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x14e>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004b4:	d202      	bcs.n	80004bc <__udivmoddi4+0x14c>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f200 80bb 	bhi.w	8000632 <__udivmoddi4+0x2c2>
 80004bc:	4610      	mov	r0, r2
 80004be:	eba4 040e 	sub.w	r4, r4, lr
 80004c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004c6:	e79f      	b.n	8000408 <__udivmoddi4+0x98>
 80004c8:	f1c1 0720 	rsb	r7, r1, #32
 80004cc:	408b      	lsls	r3, r1
 80004ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80004d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004d6:	fa05 f401 	lsl.w	r4, r5, r1
 80004da:	fa20 f307 	lsr.w	r3, r0, r7
 80004de:	40fd      	lsrs	r5, r7
 80004e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004e4:	4323      	orrs	r3, r4
 80004e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ea:	fa1f fe8c 	uxth.w	lr, ip
 80004ee:	fb09 5518 	mls	r5, r9, r8, r5
 80004f2:	0c1c      	lsrs	r4, r3, #16
 80004f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004f8:	fb08 f50e 	mul.w	r5, r8, lr
 80004fc:	42a5      	cmp	r5, r4
 80004fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000502:	fa00 f001 	lsl.w	r0, r0, r1
 8000506:	d90b      	bls.n	8000520 <__udivmoddi4+0x1b0>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000510:	f080 8088 	bcs.w	8000624 <__udivmoddi4+0x2b4>
 8000514:	42a5      	cmp	r5, r4
 8000516:	f240 8085 	bls.w	8000624 <__udivmoddi4+0x2b4>
 800051a:	f1a8 0802 	sub.w	r8, r8, #2
 800051e:	4464      	add	r4, ip
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	b29d      	uxth	r5, r3
 8000524:	fbb4 f3f9 	udiv	r3, r4, r9
 8000528:	fb09 4413 	mls	r4, r9, r3, r4
 800052c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000530:	fb03 fe0e 	mul.w	lr, r3, lr
 8000534:	45a6      	cmp	lr, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x1da>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000540:	d26c      	bcs.n	800061c <__udivmoddi4+0x2ac>
 8000542:	45a6      	cmp	lr, r4
 8000544:	d96a      	bls.n	800061c <__udivmoddi4+0x2ac>
 8000546:	3b02      	subs	r3, #2
 8000548:	4464      	add	r4, ip
 800054a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800054e:	fba3 9502 	umull	r9, r5, r3, r2
 8000552:	eba4 040e 	sub.w	r4, r4, lr
 8000556:	42ac      	cmp	r4, r5
 8000558:	46c8      	mov	r8, r9
 800055a:	46ae      	mov	lr, r5
 800055c:	d356      	bcc.n	800060c <__udivmoddi4+0x29c>
 800055e:	d053      	beq.n	8000608 <__udivmoddi4+0x298>
 8000560:	b156      	cbz	r6, 8000578 <__udivmoddi4+0x208>
 8000562:	ebb0 0208 	subs.w	r2, r0, r8
 8000566:	eb64 040e 	sbc.w	r4, r4, lr
 800056a:	fa04 f707 	lsl.w	r7, r4, r7
 800056e:	40ca      	lsrs	r2, r1
 8000570:	40cc      	lsrs	r4, r1
 8000572:	4317      	orrs	r7, r2
 8000574:	e9c6 7400 	strd	r7, r4, [r6]
 8000578:	4618      	mov	r0, r3
 800057a:	2100      	movs	r1, #0
 800057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000580:	f1c3 0120 	rsb	r1, r3, #32
 8000584:	fa02 fc03 	lsl.w	ip, r2, r3
 8000588:	fa20 f201 	lsr.w	r2, r0, r1
 800058c:	fa25 f101 	lsr.w	r1, r5, r1
 8000590:	409d      	lsls	r5, r3
 8000592:	432a      	orrs	r2, r5
 8000594:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fbb1 f0f7 	udiv	r0, r1, r7
 80005a0:	fb07 1510 	mls	r5, r7, r0, r1
 80005a4:	0c11      	lsrs	r1, r2, #16
 80005a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005aa:	fb00 f50e 	mul.w	r5, r0, lr
 80005ae:	428d      	cmp	r5, r1
 80005b0:	fa04 f403 	lsl.w	r4, r4, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x258>
 80005b6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005be:	d22f      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005c0:	428d      	cmp	r5, r1
 80005c2:	d92d      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005c4:	3802      	subs	r0, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1b49      	subs	r1, r1, r5
 80005ca:	b292      	uxth	r2, r2
 80005cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005d0:	fb07 1115 	mls	r1, r7, r5, r1
 80005d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005d8:	fb05 f10e 	mul.w	r1, r5, lr
 80005dc:	4291      	cmp	r1, r2
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x282>
 80005e0:	eb1c 0202 	adds.w	r2, ip, r2
 80005e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005e8:	d216      	bcs.n	8000618 <__udivmoddi4+0x2a8>
 80005ea:	4291      	cmp	r1, r2
 80005ec:	d914      	bls.n	8000618 <__udivmoddi4+0x2a8>
 80005ee:	3d02      	subs	r5, #2
 80005f0:	4462      	add	r2, ip
 80005f2:	1a52      	subs	r2, r2, r1
 80005f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005f8:	e738      	b.n	800046c <__udivmoddi4+0xfc>
 80005fa:	4631      	mov	r1, r6
 80005fc:	4630      	mov	r0, r6
 80005fe:	e708      	b.n	8000412 <__udivmoddi4+0xa2>
 8000600:	4639      	mov	r1, r7
 8000602:	e6e6      	b.n	80003d2 <__udivmoddi4+0x62>
 8000604:	4610      	mov	r0, r2
 8000606:	e6fb      	b.n	8000400 <__udivmoddi4+0x90>
 8000608:	4548      	cmp	r0, r9
 800060a:	d2a9      	bcs.n	8000560 <__udivmoddi4+0x1f0>
 800060c:	ebb9 0802 	subs.w	r8, r9, r2
 8000610:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000614:	3b01      	subs	r3, #1
 8000616:	e7a3      	b.n	8000560 <__udivmoddi4+0x1f0>
 8000618:	4645      	mov	r5, r8
 800061a:	e7ea      	b.n	80005f2 <__udivmoddi4+0x282>
 800061c:	462b      	mov	r3, r5
 800061e:	e794      	b.n	800054a <__udivmoddi4+0x1da>
 8000620:	4640      	mov	r0, r8
 8000622:	e7d1      	b.n	80005c8 <__udivmoddi4+0x258>
 8000624:	46d0      	mov	r8, sl
 8000626:	e77b      	b.n	8000520 <__udivmoddi4+0x1b0>
 8000628:	3d02      	subs	r5, #2
 800062a:	4462      	add	r2, ip
 800062c:	e732      	b.n	8000494 <__udivmoddi4+0x124>
 800062e:	4608      	mov	r0, r1
 8000630:	e70a      	b.n	8000448 <__udivmoddi4+0xd8>
 8000632:	4464      	add	r4, ip
 8000634:	3802      	subs	r0, #2
 8000636:	e742      	b.n	80004be <__udivmoddi4+0x14e>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000648:	f008 f802 	bl	8008650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800064c:	4b58      	ldr	r3, [pc, #352]	; (80007b0 <pvPortMallocMicroROS+0x174>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000654:	f000 f980 	bl	8000958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000658:	4b56      	ldr	r3, [pc, #344]	; (80007b4 <pvPortMallocMicroROS+0x178>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4013      	ands	r3, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	f040 808e 	bne.w	8000782 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d01d      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800066c:	2208      	movs	r2, #8
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	2b00      	cmp	r3, #0
 800067c:	d014      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f023 0307 	bic.w	r3, r3, #7
 8000684:	3308      	adds	r3, #8
 8000686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00a      	beq.n	80006a8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006a4:	bf00      	nop
 80006a6:	e7fe      	b.n	80006a6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d069      	beq.n	8000782 <pvPortMallocMicroROS+0x146>
 80006ae:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d864      	bhi.n	8000782 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006b8:	4b40      	ldr	r3, [pc, #256]	; (80007bc <pvPortMallocMicroROS+0x180>)
 80006ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006bc:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <pvPortMallocMicroROS+0x180>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006c2:	e004      	b.n	80006ce <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d903      	bls.n	80006e0 <pvPortMallocMicroROS+0xa4>
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f1      	bne.n	80006c4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <pvPortMallocMicroROS+0x174>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d04b      	beq.n	8000782 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2208      	movs	r2, #8
 80006f0:	4413      	add	r3, r2
 80006f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80006f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1ad2      	subs	r2, r2, r3
 8000704:	2308      	movs	r3, #8
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	429a      	cmp	r2, r3
 800070a:	d91f      	bls.n	800074c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800070c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00a      	beq.n	8000734 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000722:	f383 8811 	msr	BASEPRI, r3
 8000726:	f3bf 8f6f 	isb	sy
 800072a:	f3bf 8f4f 	dsb	sy
 800072e:	613b      	str	r3, [r7, #16]
}
 8000730:	bf00      	nop
 8000732:	e7fe      	b.n	8000732 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000746:	69b8      	ldr	r0, [r7, #24]
 8000748:	f000 f968 	bl	8000a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 8000758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <pvPortMallocMicroROS+0x184>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d203      	bcs.n	800076e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <pvPortMallocMicroROS+0x17c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <pvPortMallocMicroROS+0x184>)
 800076c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <pvPortMallocMicroROS+0x178>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	431a      	orrs	r2, r3
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000782:	f007 ff73 	bl	800866c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00a      	beq.n	80007a6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	60fb      	str	r3, [r7, #12]
}
 80007a2:	bf00      	nop
 80007a4:	e7fe      	b.n	80007a4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007a6:	69fb      	ldr	r3, [r7, #28]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20003d34 	.word	0x20003d34
 80007b4:	20003d40 	.word	0x20003d40
 80007b8:	20003d38 	.word	0x20003d38
 80007bc:	20003d2c 	.word	0x20003d2c
 80007c0:	20003d3c 	.word	0x20003d3c

080007c4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d048      	beq.n	8000868 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007d6:	2308      	movs	r3, #8
 80007d8:	425b      	negs	r3, r3
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	4413      	add	r3, r2
 80007de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <vPortFreeMicroROS+0xac>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4013      	ands	r3, r2
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10a      	bne.n	8000808 <vPortFreeMicroROS+0x44>
	__asm volatile
 80007f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f6:	f383 8811 	msr	BASEPRI, r3
 80007fa:	f3bf 8f6f 	isb	sy
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	60fb      	str	r3, [r7, #12]
}
 8000804:	bf00      	nop
 8000806:	e7fe      	b.n	8000806 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00a      	beq.n	8000826 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000814:	f383 8811 	msr	BASEPRI, r3
 8000818:	f3bf 8f6f 	isb	sy
 800081c:	f3bf 8f4f 	dsb	sy
 8000820:	60bb      	str	r3, [r7, #8]
}
 8000822:	bf00      	nop
 8000824:	e7fe      	b.n	8000824 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <vPortFreeMicroROS+0xac>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4013      	ands	r3, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	d019      	beq.n	8000868 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d115      	bne.n	8000868 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <vPortFreeMicroROS+0xac>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800084c:	f007 ff00 	bl	8008650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <vPortFreeMicroROS+0xb0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4413      	add	r3, r2
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <vPortFreeMicroROS+0xb0>)
 800085c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800085e:	6938      	ldr	r0, [r7, #16]
 8000860:	f000 f8dc 	bl	8000a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000864:	f007 ff02 	bl	800866c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20003d40 	.word	0x20003d40
 8000874:	20003d38 	.word	0x20003d38

08000878 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000884:	2308      	movs	r3, #8
 8000886:	425b      	negs	r3, r3
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <getBlockSize+0x38>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	43db      	mvns	r3, r3
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]

	return count;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20003d40 	.word	0x20003d40

080008b4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008be:	f007 fec7 	bl	8008650 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f7ff feba 	bl	800063c <pvPortMallocMicroROS>
 80008c8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d017      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d014      	beq.n	8000900 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffce 	bl	8000878 <getBlockSize>
 80008dc:	4603      	mov	r3, r0
 80008de:	2208      	movs	r2, #8
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d201      	bcs.n	80008f0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	68b8      	ldr	r0, [r7, #8]
 80008f6:	f016 facf 	bl	8016e98 <memcpy>

		vPortFreeMicroROS(pv);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff62 	bl	80007c4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000900:	f007 feb4 	bl	800866c <xTaskResumeAll>

	return newmem;
 8000904:	68bb      	ldr	r3, [r7, #8]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000918:	f007 fe9a 	bl	8008650 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	fb02 f303 	mul.w	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff fe88 	bl	800063c <pvPortMallocMicroROS>
 800092c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000932:	e004      	b.n	800093e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	613a      	str	r2, [r7, #16]
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	617a      	str	r2, [r7, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f5      	bne.n	8000934 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000948:	f007 fe90 	bl	800866c <xTaskResumeAll>
  	return mem;
 800094c:	68fb      	ldr	r3, [r7, #12]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800095e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <prvHeapInit+0xac>)
 8000966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00c      	beq.n	800098c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3307      	adds	r3, #7
 8000976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 0307 	bic.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <prvHeapInit+0xac>)
 8000988:	4413      	add	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <prvHeapInit+0xb0>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <prvHeapInit+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	4413      	add	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009a4:	2208      	movs	r2, #8
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f023 0307 	bic.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <prvHeapInit+0xb4>)
 80009b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <prvHeapInit+0xb4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <prvHeapInit+0xb4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	1ad2      	subs	r2, r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <prvHeapInit+0xb4>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <prvHeapInit+0xb8>)
 80009e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <prvHeapInit+0xbc>)
 80009ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <prvHeapInit+0xc0>)
 80009f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	2000012c 	.word	0x2000012c
 8000a08:	20003d2c 	.word	0x20003d2c
 8000a0c:	20003d34 	.word	0x20003d34
 8000a10:	20003d3c 	.word	0x20003d3c
 8000a14:	20003d38 	.word	0x20003d38
 8000a18:	20003d40 	.word	0x20003d40

08000a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <prvInsertBlockIntoFreeList+0xac>)
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e002      	b.n	8000a30 <prvInsertBlockIntoFreeList+0x14>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d8f7      	bhi.n	8000a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4413      	add	r3, r2
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d108      	bne.n	8000a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	441a      	add	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	441a      	add	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d118      	bne.n	8000aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d00d      	beq.n	8000a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	441a      	add	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e008      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <prvInsertBlockIntoFreeList+0xb0>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e003      	b.n	8000aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d002      	beq.n	8000aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20003d2c 	.word	0x20003d2c
 8000acc:	20003d34 	.word	0x20003d34

08000ad0 <timer_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	e9c7 2300 	strd	r2, r3, [r7]
	(void) last_call_time;
	if (timer != NULL) {
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d018      	beq.n	8000b14 <timer_callback+0x44>
		RCSOFTCHECK(rcl_publish(&publisher, &msg, NULL));
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	490d      	ldr	r1, [pc, #52]	; (8000b1c <timer_callback+0x4c>)
 8000ae6:	480e      	ldr	r0, [pc, #56]	; (8000b20 <timer_callback+0x50>)
 8000ae8:	f009 fd8c 	bl	800a604 <rcl_publish>
 8000aec:	6178      	str	r0, [r7, #20]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d004      	beq.n	8000afe <timer_callback+0x2e>
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	2165      	movs	r1, #101	; 0x65
 8000af8:	480a      	ldr	r0, [pc, #40]	; (8000b24 <timer_callback+0x54>)
 8000afa:	f016 f819 	bl	8016b30 <iprintf>
		printf("Sent: %d\n", msg.data);
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <timer_callback+0x4c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <timer_callback+0x58>)
 8000b06:	f016 f813 	bl	8016b30 <iprintf>
		msg.data++;
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <timer_callback+0x4c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a02      	ldr	r2, [pc, #8]	; (8000b1c <timer_callback+0x4c>)
 8000b12:	6013      	str	r3, [r2, #0]
	}
}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20003d48 	.word	0x20003d48
 8000b20:	20003d44 	.word	0x20003d44
 8000b24:	08017c7c 	.word	0x08017c7c
 8000b28:	08017ca8 	.word	0x08017ca8

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b30:	b0c6      	sub	sp, #280	; 0x118
 8000b32:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f001 f922 	bl	8001d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f938 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f000 fa86 	bl	800104c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b40:	f000 fa5c 	bl	8000ffc <MX_DMA_Init>
  MX_I2C1_Init();
 8000b44:	f000 f99c 	bl	8000e80 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b48:	f000 f9c8 	bl	8000edc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b4c:	f000 f9f6 	bl	8000f3c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b50:	f000 fa2a 	bl	8000fa8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  rcl_allocator_t allocator = rcl_get_default_allocator();
 8000b54:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00a fcd3 	bl	800b504 <rcutils_get_default_allocator>
  	rclc_support_t support;

  	// create init_options
  	RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 8000b5e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000b62:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f00a fbad 	bl	800b2c8 <rclc_support_init>
 8000b6e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8000b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d007      	beq.n	8000b8a <main+0x5e>
 8000b7a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000b7e:	2192      	movs	r1, #146	; 0x92
 8000b80:	4880      	ldr	r0, [pc, #512]	; (8000d84 <main+0x258>)
 8000b82:	f015 ffd5 	bl	8016b30 <iprintf>
 8000b86:	2301      	movs	r3, #1
 8000b88:	e0f5      	b.n	8000d76 <main+0x24a>

  	// create node
  	rcl_node_t node;
  	RCCHECK(rclc_node_init_default(&node, "int32_publisher_rclc", "", &support));
 8000b8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b8e:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8000b92:	4a7d      	ldr	r2, [pc, #500]	; (8000d88 <main+0x25c>)
 8000b94:	497d      	ldr	r1, [pc, #500]	; (8000d8c <main+0x260>)
 8000b96:	f00a fbe1 	bl	800b35c <rclc_node_init_default>
 8000b9a:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8000b9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d007      	beq.n	8000bb6 <main+0x8a>
 8000ba6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000baa:	2196      	movs	r1, #150	; 0x96
 8000bac:	4875      	ldr	r0, [pc, #468]	; (8000d84 <main+0x258>)
 8000bae:	f015 ffbf 	bl	8016b30 <iprintf>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e0df      	b.n	8000d76 <main+0x24a>

  	// create publisher
  	RCCHECK(rclc_publisher_init_default(
 8000bb6:	f00b fe63 	bl	800c880 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8000bc0:	4b73      	ldr	r3, [pc, #460]	; (8000d90 <main+0x264>)
 8000bc2:	4874      	ldr	r0, [pc, #464]	; (8000d94 <main+0x268>)
 8000bc4:	f00a fc06 	bl	800b3d4 <rclc_publisher_init_default>
 8000bc8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8000bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <main+0xb8>
 8000bd4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000bd8:	2199      	movs	r1, #153	; 0x99
 8000bda:	486a      	ldr	r0, [pc, #424]	; (8000d84 <main+0x258>)
 8000bdc:	f015 ffa8 	bl	8016b30 <iprintf>
 8000be0:	2301      	movs	r3, #1
 8000be2:	e0c8      	b.n	8000d76 <main+0x24a>
  		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
  		"std_msgs_msg_Int32"));

  	// create timer,
  	rcl_timer_t timer;
  	const unsigned int timer_timeout = 1000;
 8000be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  	RCCHECK(rclc_timer_init_default(
 8000bec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	469a      	mov	sl, r3
 8000bf4:	4693      	mov	fp, r2
 8000bf6:	4652      	mov	r2, sl
 8000bf8:	465b      	mov	r3, fp
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	f04f 0100 	mov.w	r1, #0
 8000c02:	0159      	lsls	r1, r3, #5
 8000c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000c08:	0150      	lsls	r0, r2, #5
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	ebb2 040a 	subs.w	r4, r2, sl
 8000c12:	eb63 050b 	sbc.w	r5, r3, fp
 8000c16:	f04f 0200 	mov.w	r2, #0
 8000c1a:	f04f 0300 	mov.w	r3, #0
 8000c1e:	026b      	lsls	r3, r5, #9
 8000c20:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8000c24:	0262      	lsls	r2, r4, #9
 8000c26:	4614      	mov	r4, r2
 8000c28:	461d      	mov	r5, r3
 8000c2a:	eb14 080a 	adds.w	r8, r4, sl
 8000c2e:	eb45 090b 	adc.w	r9, r5, fp
 8000c32:	f04f 0200 	mov.w	r2, #0
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000c3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000c42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000c46:	ebb2 0108 	subs.w	r1, r2, r8
 8000c4a:	6039      	str	r1, [r7, #0]
 8000c4c:	eb63 0309 	sbc.w	r3, r3, r9
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000c56:	460b      	mov	r3, r1
 8000c58:	eb13 030a 	adds.w	r3, r3, sl
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	eb43 030b 	adc.w	r3, r3, fp
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c6a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000c6e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8000c72:	4c49      	ldr	r4, [pc, #292]	; (8000d98 <main+0x26c>)
 8000c74:	9400      	str	r4, [sp, #0]
 8000c76:	f00a fbe1 	bl	800b43c <rclc_timer_init_default>
 8000c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8000c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d007      	beq.n	8000c96 <main+0x16a>
 8000c86:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000c8a:	21a2      	movs	r1, #162	; 0xa2
 8000c8c:	483d      	ldr	r0, [pc, #244]	; (8000d84 <main+0x258>)
 8000c8e:	f015 ff4f 	bl	8016b30 <iprintf>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e06f      	b.n	8000d76 <main+0x24a>
  		&support,
  		RCL_MS_TO_NS(timer_timeout),
  		timer_callback));

  	// create executor
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8000c96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00a f83e 	bl	800ad20 <rclc_executor_get_zero_initialized_executor>
  	RCCHECK(rclc_executor_init(&executor, &support.context, 1, &allocator));
 8000ca4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000ca8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000cac:	f107 0010 	add.w	r0, r7, #16
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f00a f841 	bl	800ad38 <rclc_executor_init>
 8000cb6:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8000cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d007      	beq.n	8000cd2 <main+0x1a6>
 8000cc2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000cc6:	21aa      	movs	r1, #170	; 0xaa
 8000cc8:	482e      	ldr	r0, [pc, #184]	; (8000d84 <main+0x258>)
 8000cca:	f015 ff31 	bl	8016b30 <iprintf>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e051      	b.n	8000d76 <main+0x24a>
  	RCCHECK(rclc_executor_add_timer(&executor, &timer));
 8000cd2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00a f89b 	bl	800ae18 <rclc_executor_add_timer>
 8000ce2:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8000ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d007      	beq.n	8000cfe <main+0x1d2>
 8000cee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000cf2:	21ab      	movs	r1, #171	; 0xab
 8000cf4:	4823      	ldr	r0, [pc, #140]	; (8000d84 <main+0x258>)
 8000cf6:	f015 ff1b 	bl	8016b30 <iprintf>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e03b      	b.n	8000d76 <main+0x24a>

  	msg.data = 0;
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <main+0x270>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]

    	rclc_executor_spin(&executor);
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f00a fa9b 	bl	800b244 <rclc_executor_spin>

  	RCCHECK(rcl_publisher_fini(&publisher, &node));
 8000d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d12:	4619      	mov	r1, r3
 8000d14:	481f      	ldr	r0, [pc, #124]	; (8000d94 <main+0x268>)
 8000d16:	f009 fc1b 	bl	800a550 <rcl_publisher_fini>
 8000d1a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8000d1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d007      	beq.n	8000d36 <main+0x20a>
 8000d26:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000d2a:	21b1      	movs	r1, #177	; 0xb1
 8000d2c:	4815      	ldr	r0, [pc, #84]	; (8000d84 <main+0x258>)
 8000d2e:	f015 feff 	bl	8016b30 <iprintf>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e01f      	b.n	8000d76 <main+0x24a>
  	RCCHECK(rcl_node_fini(&node));
 8000d36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f009 fae6 	bl	800a30c <rcl_node_fini>
 8000d40:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8000d44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d007      	beq.n	8000d5c <main+0x230>
 8000d4c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000d50:	21b2      	movs	r1, #178	; 0xb2
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <main+0x258>)
 8000d54:	f015 feec 	bl	8016b30 <iprintf>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e00c      	b.n	8000d76 <main+0x24a>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d5c:	f006 fb10 	bl	8007380 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d60:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <main+0x274>)
 8000d62:	2100      	movs	r1, #0
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <main+0x278>)
 8000d66:	f006 fb55 	bl	8007414 <osThreadNew>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <main+0x27c>)
 8000d6e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
osKernelStart();
 8000d70:	f006 fb2a 	bl	80073c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <main+0x248>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d82:	bf00      	nop
 8000d84:	08017cb4 	.word	0x08017cb4
 8000d88:	08017ce0 	.word	0x08017ce0
 8000d8c:	08017ce4 	.word	0x08017ce4
 8000d90:	08017cfc 	.word	0x08017cfc
 8000d94:	20003d44 	.word	0x20003d44
 8000d98:	08000ad1 	.word	0x08000ad1
 8000d9c:	20003d48 	.word	0x20003d48
 8000da0:	08017d70 	.word	0x08017d70
 8000da4:	08001249 	.word	0x08001249
 8000da8:	20003f44 	.word	0x20003f44

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b094      	sub	sp, #80	; 0x50
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	2230      	movs	r2, #48	; 0x30
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f015 ffa4 	bl	8016d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <SystemClock_Config+0xcc>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <SystemClock_Config+0xcc>)
 8000dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dde:	6413      	str	r3, [r2, #64]	; 0x40
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <SystemClock_Config+0xcc>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <SystemClock_Config+0xd0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <SystemClock_Config+0xd0>)
 8000df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <SystemClock_Config+0xd0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e12:	2302      	movs	r3, #2
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e20:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fdec 	bl	8004a10 <HAL_RCC_OscConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e3e:	f000 fa47 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	230f      	movs	r3, #15
 8000e44:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e46:	2302      	movs	r3, #2
 8000e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2105      	movs	r1, #5
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 f84d 	bl	8004f00 <HAL_RCC_ClockConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e6c:	f000 fa30 	bl	80012d0 <Error_Handler>
  }
}
 8000e70:	bf00      	nop
 8000e72:	3750      	adds	r7, #80	; 0x50
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40007000 	.word	0x40007000

08000e80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e86:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <MX_I2C1_Init+0x54>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e8c:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_I2C1_Init+0x58>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000ebe:	f002 ffc3 	bl	8003e48 <HAL_I2C_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ec8:	f000 fa02 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20003d4c 	.word	0x20003d4c
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	000186a0 	.word	0x000186a0

08000edc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_I2S3_Init+0x54>)
 8000ee2:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <MX_I2S3_Init+0x58>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_I2S3_Init+0x54>)
 8000ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_I2S3_Init+0x54>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_I2S3_Init+0x54>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <MX_I2S3_Init+0x54>)
 8000efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f00:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_I2S3_Init+0x54>)
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <MX_I2S3_Init+0x5c>)
 8000f06:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_I2S3_Init+0x54>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_I2S3_Init+0x54>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_I2S3_Init+0x54>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_I2S3_Init+0x54>)
 8000f1c:	f003 f8d8 	bl	80040d0 <HAL_I2S_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f26:	f000 f9d3 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20003da0 	.word	0x20003da0
 8000f34:	40003c00 	.word	0x40003c00
 8000f38:	00017700 	.word	0x00017700

08000f3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f42:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <MX_SPI1_Init+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f88:	220a      	movs	r2, #10
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_SPI1_Init+0x64>)
 8000f8e:	f004 fb17 	bl	80055c0 <HAL_SPI_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f98:	f000 f99a 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20003de8 	.word	0x20003de8
 8000fa4:	40013000 	.word	0x40013000

08000fa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_USART2_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USART2_UART_Init+0x4c>)
 8000fe0:	f004 fb77 	bl	80056d2 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f000 f971 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20003e40 	.word	0x20003e40
 8000ff8:	40004400 	.word	0x40004400

08000ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_DMA_Init+0x4c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <MX_DMA_Init+0x4c>)
 800100c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <MX_DMA_Init+0x4c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2105      	movs	r1, #5
 8001022:	2010      	movs	r0, #16
 8001024:	f000 fff7 	bl	8002016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001028:	2010      	movs	r0, #16
 800102a:	f001 f810 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2105      	movs	r1, #5
 8001032:	2011      	movs	r0, #17
 8001034:	f000 ffef 	bl	8002016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001038:	2011      	movs	r0, #17
 800103a:	f001 f808 	bl	800204e <HAL_NVIC_EnableIRQ>

}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	4b72      	ldr	r3, [pc, #456]	; (8001230 <MX_GPIO_Init+0x1e4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a71      	ldr	r2, [pc, #452]	; (8001230 <MX_GPIO_Init+0x1e4>)
 800106c:	f043 0310 	orr.w	r3, r3, #16
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b6f      	ldr	r3, [pc, #444]	; (8001230 <MX_GPIO_Init+0x1e4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	4b6b      	ldr	r3, [pc, #428]	; (8001230 <MX_GPIO_Init+0x1e4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a6a      	ldr	r2, [pc, #424]	; (8001230 <MX_GPIO_Init+0x1e4>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b68      	ldr	r3, [pc, #416]	; (8001230 <MX_GPIO_Init+0x1e4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b64      	ldr	r3, [pc, #400]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a63      	ldr	r2, [pc, #396]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b61      	ldr	r3, [pc, #388]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b5d      	ldr	r3, [pc, #372]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a5c      	ldr	r2, [pc, #368]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b56      	ldr	r3, [pc, #344]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a55      	ldr	r2, [pc, #340]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b53      	ldr	r3, [pc, #332]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <MX_GPIO_Init+0x1e4>)
 80010f8:	f043 0308 	orr.w	r3, r3, #8
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <MX_GPIO_Init+0x1e4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2108      	movs	r1, #8
 800110e:	4849      	ldr	r0, [pc, #292]	; (8001234 <MX_GPIO_Init+0x1e8>)
 8001110:	f001 fd56 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2101      	movs	r1, #1
 8001118:	4847      	ldr	r0, [pc, #284]	; (8001238 <MX_GPIO_Init+0x1ec>)
 800111a:	f001 fd51 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800111e:	2200      	movs	r2, #0
 8001120:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001124:	4845      	ldr	r0, [pc, #276]	; (800123c <MX_GPIO_Init+0x1f0>)
 8001126:	f001 fd4b 	bl	8002bc0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800112a:	2308      	movs	r3, #8
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	483c      	ldr	r0, [pc, #240]	; (8001234 <MX_GPIO_Init+0x1e8>)
 8001142:	f001 fba1 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001146:	2301      	movs	r3, #1
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4836      	ldr	r0, [pc, #216]	; (8001238 <MX_GPIO_Init+0x1ec>)
 800115e:	f001 fb93 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001162:	2308      	movs	r3, #8
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001172:	2305      	movs	r3, #5
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	482e      	ldr	r0, [pc, #184]	; (8001238 <MX_GPIO_Init+0x1ec>)
 800117e:	f001 fb83 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001182:	2301      	movs	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001186:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	482a      	ldr	r0, [pc, #168]	; (8001240 <MX_GPIO_Init+0x1f4>)
 8001198:	f001 fb76 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800119c:	2304      	movs	r3, #4
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4825      	ldr	r0, [pc, #148]	; (8001244 <MX_GPIO_Init+0x1f8>)
 80011b0:	f001 fb6a 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80011b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c6:	2305      	movs	r3, #5
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	481c      	ldr	r0, [pc, #112]	; (8001244 <MX_GPIO_Init+0x1f8>)
 80011d2:	f001 fb59 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4813      	ldr	r0, [pc, #76]	; (800123c <MX_GPIO_Init+0x1f0>)
 80011f0:	f001 fb4a 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011f4:	2320      	movs	r3, #32
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_GPIO_Init+0x1f0>)
 8001208:	f001 fb3e 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800120c:	2302      	movs	r3, #2
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001210:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_GPIO_Init+0x1e8>)
 8001222:	f001 fb31 	bl	8002888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001226:	bf00      	nop
 8001228:	3730      	adds	r7, #48	; 0x30
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40021000 	.word	0x40021000
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400

08001248 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af02      	add	r7, sp, #8
 800124e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */

  rmw_uros_set_custom_transport(
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <StartDefaultTask+0x60>)
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <StartDefaultTask+0x64>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <StartDefaultTask+0x68>)
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <StartDefaultTask+0x6c>)
 800125c:	4916      	ldr	r1, [pc, #88]	; (80012b8 <StartDefaultTask+0x70>)
 800125e:	2001      	movs	r0, #1
 8001260:	f00a fc2c 	bl	800babc <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4618      	mov	r0, r3
 800126a:	f00a f91f 	bl	800b4ac <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <StartDefaultTask+0x74>)
 8001270:	60fb      	str	r3, [r7, #12]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <StartDefaultTask+0x78>)
 8001274:	613b      	str	r3, [r7, #16]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <StartDefaultTask+0x7c>)
 8001278:	617b      	str	r3, [r7, #20]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <StartDefaultTask+0x80>)
 800127c:	61bb      	str	r3, [r7, #24]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4618      	mov	r0, r3
 8001284:	f00a f920 	bl	800b4c8 <rcutils_set_default_allocator>
 8001288:	4603      	mov	r3, r0
 800128a:	f083 0301 	eor.w	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <StartDefaultTask+0x56>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8001294:	f240 2135 	movw	r1, #565	; 0x235
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <StartDefaultTask+0x84>)
 800129a:	f015 fc49 	bl	8016b30 <iprintf>
  }

}
 800129e:	bf00      	nop
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	08001c81 	.word	0x08001c81
 80012ac:	08001c19 	.word	0x08001c19
 80012b0:	08001bf9 	.word	0x08001bf9
 80012b4:	08001bcd 	.word	0x08001bcd
 80012b8:	20003e40 	.word	0x20003e40
 80012bc:	080012dd 	.word	0x080012dd
 80012c0:	08001321 	.word	0x08001321
 80012c4:	08001359 	.word	0x08001359
 80012c8:	080013c5 	.word	0x080013c5
 80012cc:	08017d10 	.word	0x08017d10

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <microros_allocate+0x3c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <microros_allocate+0x3c>)
 80012f4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <microros_allocate+0x40>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <microros_allocate+0x40>)
 8001304:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff f998 	bl	800063c <pvPortMallocMicroROS>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20003f48 	.word	0x20003f48
 800131c:	20003f4c 	.word	0x20003f4c

08001320 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00c      	beq.n	800134a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff faa1 	bl	8000878 <getBlockSize>
 8001336:	4603      	mov	r3, r0
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <microros_deallocate+0x34>)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	461a      	mov	r2, r3
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <microros_deallocate+0x34>)
 8001342:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fa3d 	bl	80007c4 <vPortFreeMicroROS>
  }
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20003f4c 	.word	0x20003f4c

08001358 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <microros_reallocate+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	4413      	add	r3, r2
 800136e:	461a      	mov	r2, r3
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <microros_reallocate+0x64>)
 8001372:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <microros_reallocate+0x68>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4413      	add	r3, r2
 800137e:	461a      	mov	r2, r3
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <microros_reallocate+0x68>)
 8001382:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d104      	bne.n	8001394 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800138a:	68b8      	ldr	r0, [r7, #8]
 800138c:	f7ff f956 	bl	800063c <pvPortMallocMicroROS>
 8001390:	4603      	mov	r3, r0
 8001392:	e00e      	b.n	80013b2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f7ff fa6f 	bl	8000878 <getBlockSize>
 800139a:	4603      	mov	r3, r0
 800139c:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <microros_reallocate+0x68>)
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <microros_reallocate+0x68>)
 80013a6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f7ff fa82 	bl	80008b4 <pvPortReallocMicroROS>
 80013b0:	4603      	mov	r3, r0
  }
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20003f48 	.word	0x20003f48
 80013c0:	20003f4c 	.word	0x20003f4c

080013c4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <microros_zero_allocate+0x48>)
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	461a      	mov	r2, r3
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <microros_zero_allocate+0x48>)
 80013e2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <microros_zero_allocate+0x4c>)
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <microros_zero_allocate+0x4c>)
 80013f6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff fa87 	bl	800090e <pvPortCallocMicroROS>
 8001400:	4603      	mov	r3, r0
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20003f48 	.word	0x20003f48
 8001410:	20003f4c 	.word	0x20003f4c
 8001414:	00000000 	.word	0x00000000

08001418 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800142a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800142e:	a320      	add	r3, pc, #128	; (adr r3, 80014b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7fe ff34 	bl	80002a0 <__aeabi_ldivmod>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001446:	a31a      	add	r3, pc, #104	; (adr r3, 80014b0 <UTILS_NanosecondsToTimespec+0x98>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7fe ff28 	bl	80002a0 <__aeabi_ldivmod>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	da20      	bge.n	800149e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <UTILS_NanosecondsToTimespec+0x90>)
 8001462:	fb82 1203 	smull	r1, r2, r2, r3
 8001466:	1712      	asrs	r2, r2, #28
 8001468:	17db      	asrs	r3, r3, #31
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	6979      	ldr	r1, [r7, #20]
 8001478:	17c8      	asrs	r0, r1, #31
 800147a:	460c      	mov	r4, r1
 800147c:	4605      	mov	r5, r0
 800147e:	ebb2 0804 	subs.w	r8, r2, r4
 8001482:	eb63 0905 	sbc.w	r9, r3, r5
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	4906      	ldr	r1, [pc, #24]	; (80014ac <UTILS_NanosecondsToTimespec+0x94>)
 8001494:	fb01 f303 	mul.w	r3, r1, r3
 8001498:	441a      	add	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]
    }
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014a8:	44b82fa1 	.word	0x44b82fa1
 80014ac:	3b9aca00 	.word	0x3b9aca00
 80014b0:	3b9aca00 	.word	0x3b9aca00
 80014b4:	00000000 	.word	0x00000000

080014b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80014b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014bc:	b08e      	sub	sp, #56	; 0x38
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6278      	str	r0, [r7, #36]	; 0x24
 80014c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80014c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014c8:	2300      	movs	r3, #0
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80014da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014de:	4618      	mov	r0, r3
 80014e0:	f007 fb3e 	bl	8008b60 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80014e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e6:	17da      	asrs	r2, r3, #31
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	61fa      	str	r2, [r7, #28]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	69b9      	ldr	r1, [r7, #24]
 80014f6:	000b      	movs	r3, r1
 80014f8:	2200      	movs	r2, #0
 80014fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	2200      	movs	r2, #0
 8001502:	461c      	mov	r4, r3
 8001504:	4615      	mov	r5, r2
 8001506:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800150a:	1911      	adds	r1, r2, r4
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	416b      	adcs	r3, r5
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001516:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800151a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	f04f 0400 	mov.w	r4, #0
 8001526:	f04f 0500 	mov.w	r5, #0
 800152a:	015d      	lsls	r5, r3, #5
 800152c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001530:	0154      	lsls	r4, r2, #5
 8001532:	4622      	mov	r2, r4
 8001534:	462b      	mov	r3, r5
 8001536:	ebb2 0800 	subs.w	r8, r2, r0
 800153a:	eb63 0901 	sbc.w	r9, r3, r1
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800154a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800154e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001552:	4690      	mov	r8, r2
 8001554:	4699      	mov	r9, r3
 8001556:	eb18 0a00 	adds.w	sl, r8, r0
 800155a:	eb49 0b01 	adc.w	fp, r9, r1
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800156a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800156e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001572:	ebb2 040a 	subs.w	r4, r2, sl
 8001576:	603c      	str	r4, [r7, #0]
 8001578:	eb63 030b 	sbc.w	r3, r3, fp
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001582:	4623      	mov	r3, r4
 8001584:	181b      	adds	r3, r3, r0
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	462b      	mov	r3, r5
 800158a:	eb41 0303 	adc.w	r3, r1, r3
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	6a3a      	ldr	r2, [r7, #32]
 8001592:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001596:	f7ff ff3f 	bl	8001418 <UTILS_NanosecondsToTimespec>

    return 0;
 800159a:	2300      	movs	r3, #0
 800159c:	4618      	mov	r0, r3
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <HAL_MspInit+0x4c>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_MspInit+0x4c>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_I2C_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12c      	bne.n	8001674 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_I2C_MspInit+0x88>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_I2C_MspInit+0x88>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_I2C_MspInit+0x88>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001636:	f44f 7310 	mov.w	r3, #576	; 0x240
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163c:	2312      	movs	r3, #18
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001640:	2301      	movs	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001648:	2304      	movs	r3, #4
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	480c      	ldr	r0, [pc, #48]	; (8001684 <HAL_I2C_MspInit+0x8c>)
 8001654:	f001 f918 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_I2C_MspInit+0x88>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_I2C_MspInit+0x88>)
 8001662:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_I2C_MspInit+0x88>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40005400 	.word	0x40005400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400

08001688 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	; 0x38
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a31      	ldr	r2, [pc, #196]	; (8001778 <HAL_I2S_MspInit+0xf0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d15a      	bne.n	800176e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80016b8:	2301      	movs	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80016bc:	23c0      	movs	r3, #192	; 0xc0
 80016be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fe39 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80016d4:	f7ff fdfc 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_I2S_MspInit+0xf4>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	4a26      	ldr	r2, [pc, #152]	; (800177c <HAL_I2S_MspInit+0xf4>)
 80016e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e6:	6413      	str	r3, [r2, #64]	; 0x40
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_I2S_MspInit+0xf4>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_I2S_MspInit+0xf4>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	4a1f      	ldr	r2, [pc, #124]	; (800177c <HAL_I2S_MspInit+0xf4>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6313      	str	r3, [r2, #48]	; 0x30
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_I2S_MspInit+0xf4>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_I2S_MspInit+0xf4>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4a18      	ldr	r2, [pc, #96]	; (800177c <HAL_I2S_MspInit+0xf4>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_I2S_MspInit+0xf4>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800172c:	2310      	movs	r3, #16
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800173c:	2306      	movs	r3, #6
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	480e      	ldr	r0, [pc, #56]	; (8001780 <HAL_I2S_MspInit+0xf8>)
 8001748:	f001 f89e 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800174c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800175e:	2306      	movs	r3, #6
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4806      	ldr	r0, [pc, #24]	; (8001784 <HAL_I2S_MspInit+0xfc>)
 800176a:	f001 f88d 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3738      	adds	r7, #56	; 0x38
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40003c00 	.word	0x40003c00
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020800 	.word	0x40020800

08001788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_SPI_MspInit+0x84>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12b      	bne.n	8001802 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_SPI_MspInit+0x88>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_SPI_MspInit+0x88>)
 80017b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_SPI_MspInit+0x88>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_SPI_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_SPI_MspInit+0x88>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_SPI_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017e2:	23e0      	movs	r3, #224	; 0xe0
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017f2:	2305      	movs	r3, #5
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_SPI_MspInit+0x8c>)
 80017fe:	f001 f843 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40013000 	.word	0x40013000
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000

08001818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_UART_MspInit+0x150>)
 8001836:	4293      	cmp	r3, r2
 8001838:	f040 8092 	bne.w	8001960 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	4b4a      	ldr	r3, [pc, #296]	; (800196c <HAL_UART_MspInit+0x154>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	4a49      	ldr	r2, [pc, #292]	; (800196c <HAL_UART_MspInit+0x154>)
 8001846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184a:	6413      	str	r3, [r2, #64]	; 0x40
 800184c:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_UART_MspInit+0x154>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_UART_MspInit+0x154>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	4a42      	ldr	r2, [pc, #264]	; (800196c <HAL_UART_MspInit+0x154>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6313      	str	r3, [r2, #48]	; 0x30
 8001868:	4b40      	ldr	r3, [pc, #256]	; (800196c <HAL_UART_MspInit+0x154>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001874:	230c      	movs	r3, #12
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001884:	2307      	movs	r3, #7
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	4838      	ldr	r0, [pc, #224]	; (8001970 <HAL_UART_MspInit+0x158>)
 8001890:	f000 fffa 	bl	8002888 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001894:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_UART_MspInit+0x15c>)
 8001896:	4a38      	ldr	r2, [pc, #224]	; (8001978 <HAL_UART_MspInit+0x160>)
 8001898:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800189a:	4b36      	ldr	r3, [pc, #216]	; (8001974 <HAL_UART_MspInit+0x15c>)
 800189c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a8:	4b32      	ldr	r3, [pc, #200]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018bc:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018ce:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018d6:	4827      	ldr	r0, [pc, #156]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018d8:	f000 fbd4 	bl	8002084 <HAL_DMA_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80018e2:	f7ff fcf5 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a22      	ldr	r2, [pc, #136]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018ea:	639a      	str	r2, [r3, #56]	; 0x38
 80018ec:	4a21      	ldr	r2, [pc, #132]	; (8001974 <HAL_UART_MspInit+0x15c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80018f2:	4b22      	ldr	r3, [pc, #136]	; (800197c <HAL_UART_MspInit+0x164>)
 80018f4:	4a22      	ldr	r2, [pc, #136]	; (8001980 <HAL_UART_MspInit+0x168>)
 80018f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80018f8:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_UART_MspInit+0x164>)
 80018fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_UART_MspInit+0x164>)
 8001902:	2240      	movs	r2, #64	; 0x40
 8001904:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_UART_MspInit+0x164>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_UART_MspInit+0x164>)
 800190e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001912:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_UART_MspInit+0x164>)
 8001916:	2200      	movs	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_UART_MspInit+0x164>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_UART_MspInit+0x164>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_UART_MspInit+0x164>)
 8001928:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800192c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_UART_MspInit+0x164>)
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001934:	4811      	ldr	r0, [pc, #68]	; (800197c <HAL_UART_MspInit+0x164>)
 8001936:	f000 fba5 	bl	8002084 <HAL_DMA_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001940:	f7ff fcc6 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_UART_MspInit+0x164>)
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
 800194a:	4a0c      	ldr	r2, [pc, #48]	; (800197c <HAL_UART_MspInit+0x164>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2105      	movs	r1, #5
 8001954:	2026      	movs	r0, #38	; 0x26
 8001956:	f000 fb5e 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800195a:	2026      	movs	r0, #38	; 0x26
 800195c:	f000 fb77 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40004400 	.word	0x40004400
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000
 8001974:	20003e84 	.word	0x20003e84
 8001978:	40026088 	.word	0x40026088
 800197c:	20003ee4 	.word	0x20003ee4
 8001980:	400260a0 	.word	0x400260a0

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler+0x4>

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f000 fa34 	bl	8001e20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80019b8:	f007 fa52 	bl	8008e60 <xTaskGetSchedulerState>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d001      	beq.n	80019c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80019c2:	f008 f839 	bl	8009a38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <DMA1_Stream5_IRQHandler+0x10>)
 80019d2:	f000 fcef 	bl	80023b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20003e84 	.word	0x20003e84

080019e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <DMA1_Stream6_IRQHandler+0x10>)
 80019e6:	f000 fce5 	bl	80023b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20003ee4 	.word	0x20003ee4

080019f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <USART2_IRQHandler+0x10>)
 80019fa:	f003 ffe5 	bl	80059c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20003e40 	.word	0x20003e40

08001a08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <OTG_FS_IRQHandler+0x10>)
 8001a0e:	f001 f8f0 	bl	8002bf2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200090b4 	.word	0x200090b4

08001a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_kill>:

int _kill(int pid, int sig)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a36:	f015 f9fb 	bl	8016e30 <__errno>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2216      	movs	r2, #22
 8001a3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_exit>:

void _exit (int status)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffe7 	bl	8001a2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a5e:	e7fe      	b.n	8001a5e <_exit+0x12>

08001a60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e00a      	b.n	8001a88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a72:	f3af 8000 	nop.w
 8001a76:	4601      	mov	r1, r0
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	b2ca      	uxtb	r2, r1
 8001a80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf0      	blt.n	8001a72 <_read+0x12>
  }

  return len;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e009      	b.n	8001ac0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbf1      	blt.n	8001aac <_write+0x12>
  }
  return len;
 8001ac8:	687b      	ldr	r3, [r7, #4]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_close>:

int _close(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afa:	605a      	str	r2, [r3, #4]
  return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_isatty>:

int _isatty(int file)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f015 f960 	bl	8016e30 <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20020000 	.word	0x20020000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	20003f54 	.word	0x20003f54
 8001ba4:	2000e010 	.word	0x2000e010

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001bda:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001be0:	4904      	ldr	r1, [pc, #16]	; (8001bf4 <cubemx_transport_open+0x28>)
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f003 fe40 	bl	8005868 <HAL_UART_Receive_DMA>
    return true;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20003f58 	.word	0x20003f58

08001bf8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001c06:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f003 fe5d 	bl	80058c8 <HAL_UART_DMAStop>
    return true;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001c2c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d11c      	bne.n	8001c74 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f003 fd92 	bl	800576c <HAL_UART_Transmit_DMA>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001c4c:	e002      	b.n	8001c54 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f005 fc72 	bl	8007538 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001c54:	7cfb      	ldrb	r3, [r7, #19]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <cubemx_transport_write+0x4e>
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d1f3      	bne.n	8001c4e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001c66:	7cfb      	ldrb	r3, [r7, #19]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <cubemx_transport_write+0x58>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	e002      	b.n	8001c76 <cubemx_transport_write+0x5e>
 8001c70:	2300      	movs	r3, #0
 8001c72:	e000      	b.n	8001c76 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001c74:	2300      	movs	r3, #0
    }
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001c94:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9a:	b672      	cpsid	i
}
 8001c9c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <cubemx_transport_read+0x9c>)
 8001cac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cae:	b662      	cpsie	i
}
 8001cb0:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f005 fc3d 	bl	8007538 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <cubemx_transport_read+0xa0>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <cubemx_transport_read+0x9c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d103      	bne.n	8001cd2 <cubemx_transport_read+0x52>
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dbe3      	blt.n	8001c9a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001cd6:	e011      	b.n	8001cfc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <cubemx_transport_read+0xa0>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	440b      	add	r3, r1
 8001ce2:	4910      	ldr	r1, [pc, #64]	; (8001d24 <cubemx_transport_read+0xa4>)
 8001ce4:	5c8a      	ldrb	r2, [r1, r2]
 8001ce6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <cubemx_transport_read+0xa0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <cubemx_transport_read+0xa0>)
 8001cf4:	6013      	str	r3, [r2, #0]
        wrote++;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <cubemx_transport_read+0xa0>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <cubemx_transport_read+0x9c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d003      	beq.n	8001d10 <cubemx_transport_read+0x90>
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d3e3      	bcc.n	8001cd8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001d10:	69bb      	ldr	r3, [r7, #24]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000475c 	.word	0x2000475c
 8001d20:	20004758 	.word	0x20004758
 8001d24:	20003f58 	.word	0x20003f58

08001d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2e:	490e      	ldr	r1, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d44:	4c0b      	ldr	r4, [pc, #44]	; (8001d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d52:	f7ff ff29 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f015 f871 	bl	8016e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5a:	f7fe fee7 	bl	8000b2c <main>
  bx  lr    
 8001d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001d6c:	08018a4c 	.word	0x08018a4c
  ldr r2, =_sbss
 8001d70:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001d74:	2000e010 	.word	0x2000e010

08001d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <HAL_Init+0x40>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_Init+0x40>)
 8001d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_Init+0x40>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 f92b 	bl	8002000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f000 f808 	bl	8001dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fbfa 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x54>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x58>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f943 	bl	800206a <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00e      	b.n	8001e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d80a      	bhi.n	8001e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dfc:	f000 f90b 	bl	8002016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_InitTick+0x5c>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000004 	.word	0x20000004
 8001e18:	2000000c 	.word	0x2000000c
 8001e1c:	20000008 	.word	0x20000008

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	2000000c 	.word	0x2000000c
 8001e44:	20004760 	.word	0x20004760

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20004760 	.word	0x20004760

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <__NVIC_EnableIRQ+0x38>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fcc:	d301      	bcc.n	8001fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <SysTick_Config+0x40>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fda:	210f      	movs	r1, #15
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe0:	f7ff ff8e 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <SysTick_Config+0x40>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <SysTick_Config+0x40>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff29 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002028:	f7ff ff3e 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 800202c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7ff ff8e 	bl	8001f54 <NVIC_EncodePriority>
 8002038:	4602      	mov	r2, r0
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff5d 	bl	8001f00 <__NVIC_SetPriority>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff31 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffa2 	bl	8001fbc <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff feda 	bl	8001e48 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e099      	b.n	80021d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c0:	e00f      	b.n	80020e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c2:	f7ff fec1 	bl	8001e48 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d908      	bls.n	80020e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2203      	movs	r2, #3
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e078      	b.n	80021d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e8      	bne.n	80020c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_DMA_Init+0x158>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b04      	cmp	r3, #4
 800213a:	d107      	bne.n	800214c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4313      	orrs	r3, r2
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f023 0307 	bic.w	r3, r3, #7
 8002162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2b04      	cmp	r3, #4
 8002174:	d117      	bne.n	80021a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fb01 	bl	8002790 <DMA_CheckFifoParam>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021a2:	2301      	movs	r3, #1
 80021a4:	e016      	b.n	80021d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fab8 	bl	8002724 <DMA_CalcBaseAndBitshift>
 80021b4:	4603      	mov	r3, r0
 80021b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	223f      	movs	r2, #63	; 0x3f
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	f010803f 	.word	0xf010803f

080021e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_DMA_Start_IT+0x26>
 8002202:	2302      	movs	r3, #2
 8002204:	e040      	b.n	8002288 <HAL_DMA_Start_IT+0xa8>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d12f      	bne.n	800227a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2202      	movs	r2, #2
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fa4a 	bl	80026c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	223f      	movs	r2, #63	; 0x3f
 800223a:	409a      	lsls	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0216 	orr.w	r2, r2, #22
 800224e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0208 	orr.w	r2, r2, #8
 8002266:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e005      	b.n	8002286 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002286:	7dfb      	ldrb	r3, [r7, #23]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800229e:	f7ff fdd3 	bl	8001e48 <HAL_GetTick>
 80022a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d008      	beq.n	80022c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2280      	movs	r2, #128	; 0x80
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e052      	b.n	8002368 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0216 	bic.w	r2, r2, #22
 80022d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <HAL_DMA_Abort+0x62>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0208 	bic.w	r2, r2, #8
 8002300:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0201 	bic.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002312:	e013      	b.n	800233c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002314:	f7ff fd98 	bl	8001e48 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b05      	cmp	r3, #5
 8002320:	d90c      	bls.n	800233c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2203      	movs	r2, #3
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e015      	b.n	8002368 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1e4      	bne.n	8002314 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	223f      	movs	r2, #63	; 0x3f
 8002350:	409a      	lsls	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d004      	beq.n	800238e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e00c      	b.n	80023a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2205      	movs	r2, #5
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023c0:	4b8e      	ldr	r3, [pc, #568]	; (80025fc <HAL_DMA_IRQHandler+0x248>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a8e      	ldr	r2, [pc, #568]	; (8002600 <HAL_DMA_IRQHandler+0x24c>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0a9b      	lsrs	r3, r3, #10
 80023cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	2208      	movs	r2, #8
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d01a      	beq.n	8002420 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0204 	bic.w	r2, r2, #4
 8002406:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	2208      	movs	r2, #8
 800240e:	409a      	lsls	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	2201      	movs	r2, #1
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d012      	beq.n	8002456 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	2201      	movs	r2, #1
 8002444:	409a      	lsls	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2204      	movs	r2, #4
 800245c:	409a      	lsls	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d012      	beq.n	800248c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00b      	beq.n	800248c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	2204      	movs	r2, #4
 800247a:	409a      	lsls	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	f043 0204 	orr.w	r2, r3, #4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	2210      	movs	r2, #16
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d043      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d03c      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2210      	movs	r2, #16
 80024b0:	409a      	lsls	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d018      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d108      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d024      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
 80024e2:	e01f      	b.n	8002524 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01b      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
 80024f4:	e016      	b.n	8002524 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0208 	bic.w	r2, r2, #8
 8002512:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	2220      	movs	r2, #32
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 808f 	beq.w	8002654 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8087 	beq.w	8002654 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	2220      	movs	r2, #32
 800254c:	409a      	lsls	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b05      	cmp	r3, #5
 800255c:	d136      	bne.n	80025cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0216 	bic.w	r2, r2, #22
 800256c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <HAL_DMA_IRQHandler+0x1da>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0208 	bic.w	r2, r2, #8
 800259c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	223f      	movs	r2, #63	; 0x3f
 80025a4:	409a      	lsls	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d07e      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4798      	blx	r3
        }
        return;
 80025ca:	e079      	b.n	80026c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01d      	beq.n	8002616 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10d      	bne.n	8002604 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d031      	beq.n	8002654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
 80025f8:	e02c      	b.n	8002654 <HAL_DMA_IRQHandler+0x2a0>
 80025fa:	bf00      	nop
 80025fc:	20000004 	.word	0x20000004
 8002600:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d023      	beq.n	8002654 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
 8002614:	e01e      	b.n	8002654 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10f      	bne.n	8002644 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0210 	bic.w	r2, r2, #16
 8002632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	2b00      	cmp	r3, #0
 800265a:	d032      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d022      	beq.n	80026ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2205      	movs	r2, #5
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3301      	adds	r3, #1
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	d307      	bcc.n	800269c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f2      	bne.n	8002680 <HAL_DMA_IRQHandler+0x2cc>
 800269a:	e000      	b.n	800269e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800269c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
 80026be:	e000      	b.n	80026c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026c0:	bf00      	nop
    }
  }
}
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d108      	bne.n	8002708 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002706:	e007      	b.n	8002718 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	60da      	str	r2, [r3, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3b10      	subs	r3, #16
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <DMA_CalcBaseAndBitshift+0x64>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <DMA_CalcBaseAndBitshift+0x68>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d909      	bls.n	8002766 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800275a:	f023 0303 	bic.w	r3, r3, #3
 800275e:	1d1a      	adds	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	659a      	str	r2, [r3, #88]	; 0x58
 8002764:	e007      	b.n	8002776 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800276e:	f023 0303 	bic.w	r3, r3, #3
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	aaaaaaab 	.word	0xaaaaaaab
 800278c:	08017dac 	.word	0x08017dac

08002790 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d11f      	bne.n	80027ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d856      	bhi.n	800285e <DMA_CheckFifoParam+0xce>
 80027b0:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <DMA_CheckFifoParam+0x28>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027db 	.word	0x080027db
 80027c0:	080027c9 	.word	0x080027c9
 80027c4:	0800285f 	.word	0x0800285f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d046      	beq.n	8002862 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d8:	e043      	b.n	8002862 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027e2:	d140      	bne.n	8002866 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e8:	e03d      	b.n	8002866 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f2:	d121      	bne.n	8002838 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d837      	bhi.n	800286a <DMA_CheckFifoParam+0xda>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <DMA_CheckFifoParam+0x70>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002811 	.word	0x08002811
 8002804:	08002817 	.word	0x08002817
 8002808:	08002811 	.word	0x08002811
 800280c:	08002829 	.word	0x08002829
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e030      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d025      	beq.n	800286e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002826:	e022      	b.n	800286e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002830:	d11f      	bne.n	8002872 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002836:	e01c      	b.n	8002872 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d903      	bls.n	8002846 <DMA_CheckFifoParam+0xb6>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d003      	beq.n	800284c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002844:	e018      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
      break;
 800284a:	e015      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00e      	beq.n	8002876 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      break;
 800285c:	e00b      	b.n	8002876 <DMA_CheckFifoParam+0xe6>
      break;
 800285e:	bf00      	nop
 8002860:	e00a      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;
 8002862:	bf00      	nop
 8002864:	e008      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;
 8002866:	bf00      	nop
 8002868:	e006      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;
 800286a:	bf00      	nop
 800286c:	e004      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
 8002870:	e002      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;   
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <DMA_CheckFifoParam+0xe8>
      break;
 8002876:	bf00      	nop
    }
  } 
  
  return status; 
 8002878:	7bfb      	ldrb	r3, [r7, #15]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e16b      	b.n	8002b7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	429a      	cmp	r2, r3
 80028be:	f040 815a 	bne.w	8002b76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d005      	beq.n	80028da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d130      	bne.n	800293c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 0201 	and.w	r2, r3, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b03      	cmp	r3, #3
 8002946:	d017      	beq.n	8002978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d123      	bne.n	80029cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	69b9      	ldr	r1, [r7, #24]
 80029c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80b4 	beq.w	8002b76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b60      	ldr	r3, [pc, #384]	; (8002b94 <HAL_GPIO_Init+0x30c>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	4a5f      	ldr	r2, [pc, #380]	; (8002b94 <HAL_GPIO_Init+0x30c>)
 8002a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1e:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <HAL_GPIO_Init+0x30c>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2a:	4a5b      	ldr	r2, [pc, #364]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	220f      	movs	r2, #15
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_GPIO_Init+0x314>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d02b      	beq.n	8002aae <HAL_GPIO_Init+0x226>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a51      	ldr	r2, [pc, #324]	; (8002ba0 <HAL_GPIO_Init+0x318>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d025      	beq.n	8002aaa <HAL_GPIO_Init+0x222>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a50      	ldr	r2, [pc, #320]	; (8002ba4 <HAL_GPIO_Init+0x31c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01f      	beq.n	8002aa6 <HAL_GPIO_Init+0x21e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4f      	ldr	r2, [pc, #316]	; (8002ba8 <HAL_GPIO_Init+0x320>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d019      	beq.n	8002aa2 <HAL_GPIO_Init+0x21a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4e      	ldr	r2, [pc, #312]	; (8002bac <HAL_GPIO_Init+0x324>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_GPIO_Init+0x216>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4d      	ldr	r2, [pc, #308]	; (8002bb0 <HAL_GPIO_Init+0x328>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00d      	beq.n	8002a9a <HAL_GPIO_Init+0x212>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4c      	ldr	r2, [pc, #304]	; (8002bb4 <HAL_GPIO_Init+0x32c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <HAL_GPIO_Init+0x20e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4b      	ldr	r2, [pc, #300]	; (8002bb8 <HAL_GPIO_Init+0x330>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_GPIO_Init+0x20a>
 8002a8e:	2307      	movs	r3, #7
 8002a90:	e00e      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002a92:	2308      	movs	r3, #8
 8002a94:	e00c      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002a96:	2306      	movs	r3, #6
 8002a98:	e00a      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002a9a:	2305      	movs	r3, #5
 8002a9c:	e008      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e004      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_GPIO_Init+0x228>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f002 0203 	and.w	r2, r2, #3
 8002ab6:	0092      	lsls	r2, r2, #2
 8002ab8:	4093      	lsls	r3, r2
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac0:	4935      	ldr	r1, [pc, #212]	; (8002b98 <HAL_GPIO_Init+0x310>)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af2:	4a32      	ldr	r2, [pc, #200]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af8:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b1c:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b70:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b0f      	cmp	r3, #15
 8002b80:	f67f ae90 	bls.w	80028a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	40020c00 	.word	0x40020c00
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40021400 	.word	0x40021400
 8002bb4:	40021800 	.word	0x40021800
 8002bb8:	40021c00 	.word	0x40021c00
 8002bbc:	40013c00 	.word	0x40013c00

08002bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bdc:	e003      	b.n	8002be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	041a      	lsls	r2, r3, #16
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f004 f8c2 	bl	8006d92 <USB_GetMode>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f040 80f6 	bne.w	8002e02 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f004 f8a6 	bl	8006d6c <USB_ReadInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80ec 	beq.w	8002e00 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f004 f89d 	bl	8006d6c <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c3c:	d104      	bne.n	8002c48 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c46:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f004 f88d 	bl	8006d6c <USB_ReadInterrupts>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c5c:	d104      	bne.n	8002c68 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 f87d 	bl	8006d6c <USB_ReadInterrupts>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c7c:	d104      	bne.n	8002c88 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c86:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f004 f86d 	bl	8006d6c <USB_ReadInterrupts>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d103      	bne.n	8002ca4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f004 f85f 	bl	8006d6c <USB_ReadInterrupts>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb8:	d11c      	bne.n	8002cf4 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cc2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10f      	bne.n	8002cf4 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002cd4:	2110      	movs	r1, #16
 8002cd6:	6938      	ldr	r0, [r7, #16]
 8002cd8:	f003 ff8c 	bl	8006bf4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002cdc:	6938      	ldr	r0, [r7, #16]
 8002cde:	f003 ffbd 	bl	8006c5c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 f860 	bl	8006dae <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f007 f938 	bl	8009f64 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 f837 	bl	8006d6c <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d08:	d102      	bne.n	8002d10 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f001 f829 	bl	8003d62 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 f829 	bl	8006d6c <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d106      	bne.n	8002d32 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f007 f901 	bl	8009f2c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2208      	movs	r2, #8
 8002d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 f818 	bl	8006d6c <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d101      	bne.n	8002d4a <HAL_HCD_IRQHandler+0x158>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_HCD_IRQHandler+0x15a>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0210 	bic.w	r2, r2, #16
 8002d5e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 ff2c 	bl	8003bbe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0210 	orr.w	r2, r2, #16
 8002d74:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 fff6 	bl	8006d6c <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d8a:	d13a      	bne.n	8002e02 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f004 f846 	bl	8006e22 <USB_HC_ReadInterrupt>
 8002d96:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e025      	b.n	8002dea <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d018      	beq.n	8002de4 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc8:	d106      	bne.n	8002dd8 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f836 	bl	8002e42 <HCD_HC_IN_IRQHandler>
 8002dd6:	e005      	b.n	8002de4 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fb84 	bl	80034ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3301      	adds	r3, #1
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d3d4      	bcc.n	8002d9e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfc:	615a      	str	r2, [r3, #20]
 8002dfe:	e000      	b.n	8002e02 <HAL_HCD_IRQHandler+0x210>
      return;
 8002e00:	bf00      	nop
    }
  }
}
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_HCD_Stop+0x16>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e00d      	b.n	8002e3a <HAL_HCD_Stop+0x32>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f004 f906 	bl	800703c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d11a      	bne.n	8002ea8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2304      	movs	r3, #4
 8002e82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3361      	adds	r3, #97	; 0x61
 8002e92:	2206      	movs	r2, #6
 8002e94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 ffcf 	bl	8006e44 <USB_HC_Halt>
 8002ea6:	e0af      	b.n	8003008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ebe:	d11b      	bne.n	8002ef8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3361      	adds	r3, #97	; 0x61
 8002ee2:	2207      	movs	r2, #7
 8002ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 ffa7 	bl	8006e44 <USB_HC_Halt>
 8002ef6:	e087      	b.n	8003008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d109      	bne.n	8002f22 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	6093      	str	r3, [r2, #8]
 8002f20:	e072      	b.n	8003008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d11a      	bne.n	8002f6e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	461a      	mov	r2, r3
 8002f46:	2308      	movs	r3, #8
 8002f48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	3361      	adds	r3, #97	; 0x61
 8002f58:	2205      	movs	r2, #5
 8002f5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 ff6c 	bl	8006e44 <USB_HC_Halt>
 8002f6c:	e04c      	b.n	8003008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f84:	d11b      	bne.n	8002fbe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	461a      	mov	r2, r3
 8002f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3361      	adds	r3, #97	; 0x61
 8002fa8:	2208      	movs	r2, #8
 8002faa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 ff44 	bl	8006e44 <USB_HC_Halt>
 8002fbc:	e024      	b.n	8003008 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b80      	cmp	r3, #128	; 0x80
 8002fd2:	d119      	bne.n	8003008 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3361      	adds	r3, #97	; 0x61
 8002ff4:	2206      	movs	r2, #6
 8002ff6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f003 ff1e 	bl	8006e44 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301e:	d112      	bne.n	8003046 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f003 ff0a 	bl	8006e44 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303c:	461a      	mov	r2, r3
 800303e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003042:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003044:	e24e      	b.n	80034e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	f040 80df 	bne.w	800321c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d019      	beq.n	800309a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3348      	adds	r3, #72	; 0x48
 8003074:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	0159      	lsls	r1, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	440b      	add	r3, r1
 800307e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003088:	1ad2      	subs	r2, r2, r3
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	202c      	movs	r0, #44	; 0x2c
 8003090:	fb00 f303 	mul.w	r3, r0, r3
 8003094:	440b      	add	r3, r1
 8003096:	3350      	adds	r3, #80	; 0x50
 8003098:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3361      	adds	r3, #97	; 0x61
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	335c      	adds	r3, #92	; 0x5c
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	461a      	mov	r2, r3
 80030cc:	2301      	movs	r3, #1
 80030ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	333f      	adds	r3, #63	; 0x3f
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d009      	beq.n	80030f8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	333f      	adds	r3, #63	; 0x3f
 80030f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d111      	bne.n	800311c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fe9e 	bl	8006e44 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	461a      	mov	r2, r3
 8003116:	2310      	movs	r3, #16
 8003118:	6093      	str	r3, [r2, #8]
 800311a:	e03a      	b.n	8003192 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	333f      	adds	r3, #63	; 0x3f
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d009      	beq.n	8003144 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	212c      	movs	r1, #44	; 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	333f      	adds	r3, #63	; 0x3f
 800313e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003140:	2b01      	cmp	r3, #1
 8003142:	d126      	bne.n	8003192 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	0151      	lsls	r1, r2, #5
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	440a      	add	r2, r1
 800315a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003162:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3360      	adds	r3, #96	; 0x60
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	b2d9      	uxtb	r1, r3
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	202c      	movs	r0, #44	; 0x2c
 8003180:	fb00 f303 	mul.w	r3, r0, r3
 8003184:	4413      	add	r3, r2
 8003186:	3360      	adds	r3, #96	; 0x60
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f006 fef7 	bl	8009f80 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d12b      	bne.n	80031f2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3348      	adds	r3, #72	; 0x48
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	202c      	movs	r0, #44	; 0x2c
 80031b0:	fb00 f202 	mul.w	r2, r0, r2
 80031b4:	440a      	add	r2, r1
 80031b6:	3240      	adds	r2, #64	; 0x40
 80031b8:	8812      	ldrh	r2, [r2, #0]
 80031ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 818e 	beq.w	80034e4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3354      	adds	r3, #84	; 0x54
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f083 0301 	eor.w	r3, r3, #1
 80031dc:	b2d8      	uxtb	r0, r3
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	3354      	adds	r3, #84	; 0x54
 80031ec:	4602      	mov	r2, r0
 80031ee:	701a      	strb	r2, [r3, #0]
}
 80031f0:	e178      	b.n	80034e4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3354      	adds	r3, #84	; 0x54
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	f083 0301 	eor.w	r3, r3, #1
 8003206:	b2d8      	uxtb	r0, r3
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	212c      	movs	r1, #44	; 0x2c
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	3354      	adds	r3, #84	; 0x54
 8003216:	4602      	mov	r2, r0
 8003218:	701a      	strb	r2, [r3, #0]
}
 800321a:	e163      	b.n	80034e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	f040 80f6 	bne.w	8003420 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3361      	adds	r3, #97	; 0x61
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d109      	bne.n	800325c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	3360      	adds	r3, #96	; 0x60
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e0c9      	b.n	80033f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3361      	adds	r3, #97	; 0x61
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b05      	cmp	r3, #5
 800326e:	d109      	bne.n	8003284 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3360      	adds	r3, #96	; 0x60
 800327e:	2205      	movs	r2, #5
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e0b5      	b.n	80033f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3361      	adds	r3, #97	; 0x61
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b06      	cmp	r3, #6
 8003296:	d009      	beq.n	80032ac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3361      	adds	r3, #97	; 0x61
 80032a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d150      	bne.n	800334e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	335c      	adds	r3, #92	; 0x5c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	202c      	movs	r0, #44	; 0x2c
 80032c4:	fb00 f303 	mul.w	r3, r0, r3
 80032c8:	440b      	add	r3, r1
 80032ca:	335c      	adds	r3, #92	; 0x5c
 80032cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	212c      	movs	r1, #44	; 0x2c
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	335c      	adds	r3, #92	; 0x5c
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d912      	bls.n	8003308 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	335c      	adds	r3, #92	; 0x5c
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3360      	adds	r3, #96	; 0x60
 8003302:	2204      	movs	r2, #4
 8003304:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003306:	e073      	b.n	80033f0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3360      	adds	r3, #96	; 0x60
 8003316:	2202      	movs	r2, #2
 8003318:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003330:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003338:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800334c:	e050      	b.n	80033f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3361      	adds	r3, #97	; 0x61
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d122      	bne.n	80033a8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3360      	adds	r3, #96	; 0x60
 8003370:	2202      	movs	r2, #2
 8003372:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800338a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003392:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	461a      	mov	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e023      	b.n	80033f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	3361      	adds	r3, #97	; 0x61
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b07      	cmp	r3, #7
 80033ba:	d119      	bne.n	80033f0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	335c      	adds	r3, #92	; 0x5c
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	202c      	movs	r0, #44	; 0x2c
 80033d4:	fb00 f303 	mul.w	r3, r0, r3
 80033d8:	440b      	add	r3, r1
 80033da:	335c      	adds	r3, #92	; 0x5c
 80033dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3360      	adds	r3, #96	; 0x60
 80033ec:	2204      	movs	r2, #4
 80033ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	461a      	mov	r2, r3
 80033fe:	2302      	movs	r3, #2
 8003400:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	b2d9      	uxtb	r1, r3
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	202c      	movs	r0, #44	; 0x2c
 800340c:	fb00 f303 	mul.w	r3, r0, r3
 8003410:	4413      	add	r3, r2
 8003412:	3360      	adds	r3, #96	; 0x60
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f006 fdb1 	bl	8009f80 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800341e:	e061      	b.n	80034e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b10      	cmp	r3, #16
 8003434:	d156      	bne.n	80034e4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	333f      	adds	r3, #63	; 0x3f
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d111      	bne.n	800346e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	212c      	movs	r1, #44	; 0x2c
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	4413      	add	r3, r2
 8003456:	335c      	adds	r3, #92	; 0x5c
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f003 fcec 	bl	8006e44 <USB_HC_Halt>
 800346c:	e031      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	333f      	adds	r3, #63	; 0x3f
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	333f      	adds	r3, #63	; 0x3f
 8003490:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003492:	2b02      	cmp	r3, #2
 8003494:	d11d      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	335c      	adds	r3, #92	; 0x5c
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d110      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	3361      	adds	r3, #97	; 0x61
 80034be:	2203      	movs	r2, #3
 80034c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f003 fcb9 	bl	8006e44 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034de:	461a      	mov	r2, r3
 80034e0:	2310      	movs	r3, #16
 80034e2:	6093      	str	r3, [r2, #8]
}
 80034e4:	bf00      	nop
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b04      	cmp	r3, #4
 800351a:	d11a      	bne.n	8003552 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	461a      	mov	r2, r3
 800352a:	2304      	movs	r3, #4
 800352c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3361      	adds	r3, #97	; 0x61
 800353c:	2206      	movs	r2, #6
 800353e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f003 fc7a 	bl	8006e44 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003550:	e331      	b.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b20      	cmp	r3, #32
 8003566:	d12e      	bne.n	80035c6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003574:	461a      	mov	r2, r3
 8003576:	2320      	movs	r3, #32
 8003578:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	333d      	adds	r3, #61	; 0x3d
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	f040 8313 	bne.w	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	212c      	movs	r1, #44	; 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	333d      	adds	r3, #61	; 0x3d
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	3360      	adds	r3, #96	; 0x60
 80035b0:	2202      	movs	r2, #2
 80035b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f003 fc40 	bl	8006e44 <USB_HC_Halt>
}
 80035c4:	e2f7      	b.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d112      	bne.n	8003604 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ea:	461a      	mov	r2, r3
 80035ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f003 fc21 	bl	8006e44 <USB_HC_Halt>
}
 8003602:	e2d8      	b.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	4413      	add	r3, r2
 800360c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d140      	bne.n	800369c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	335c      	adds	r3, #92	; 0x5c
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d111      	bne.n	8003666 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	333d      	adds	r3, #61	; 0x3d
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	4413      	add	r3, r2
 800365c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003660:	461a      	mov	r2, r3
 8003662:	2340      	movs	r3, #64	; 0x40
 8003664:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	461a      	mov	r2, r3
 8003674:	2301      	movs	r3, #1
 8003676:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3361      	adds	r3, #97	; 0x61
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f003 fbd5 	bl	8006e44 <USB_HC_Halt>
}
 800369a:	e28c      	b.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d12c      	bne.n	800370c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	3361      	adds	r3, #97	; 0x61
 80036c0:	2204      	movs	r2, #4
 80036c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	333d      	adds	r3, #61	; 0x3d
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	335c      	adds	r3, #92	; 0x5c
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 fba6 	bl	8006e44 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	2340      	movs	r3, #64	; 0x40
 8003708:	6093      	str	r3, [r2, #8]
}
 800370a:	e254      	b.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d11a      	bne.n	8003758 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	461a      	mov	r2, r3
 8003730:	2308      	movs	r3, #8
 8003732:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3361      	adds	r3, #97	; 0x61
 8003742:	2205      	movs	r2, #5
 8003744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f003 fb77 	bl	8006e44 <USB_HC_Halt>
}
 8003756:	e22e      	b.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b10      	cmp	r3, #16
 800376c:	d140      	bne.n	80037f0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	335c      	adds	r3, #92	; 0x5c
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	3361      	adds	r3, #97	; 0x61
 800378e:	2203      	movs	r2, #3
 8003790:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	333d      	adds	r3, #61	; 0x3d
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d112      	bne.n	80037cc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	212c      	movs	r1, #44	; 0x2c
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	333c      	adds	r3, #60	; 0x3c
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	212c      	movs	r1, #44	; 0x2c
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	333d      	adds	r3, #61	; 0x3d
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f003 fb34 	bl	8006e44 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	461a      	mov	r2, r3
 80037ea:	2310      	movs	r3, #16
 80037ec:	6093      	str	r3, [r2, #8]
}
 80037ee:	e1e2      	b.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d164      	bne.n	80038d0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d111      	bne.n	8003832 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	3361      	adds	r3, #97	; 0x61
 800381c:	2206      	movs	r2, #6
 800381e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f003 fb0a 	bl	8006e44 <USB_HC_Halt>
 8003830:	e044      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	335c      	adds	r3, #92	; 0x5c
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	202c      	movs	r0, #44	; 0x2c
 800384a:	fb00 f303 	mul.w	r3, r0, r3
 800384e:	440b      	add	r3, r1
 8003850:	335c      	adds	r3, #92	; 0x5c
 8003852:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	335c      	adds	r3, #92	; 0x5c
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d920      	bls.n	80038aa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	212c      	movs	r1, #44	; 0x2c
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	335c      	adds	r3, #92	; 0x5c
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	3360      	adds	r3, #96	; 0x60
 8003888:	2204      	movs	r2, #4
 800388a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	b2d9      	uxtb	r1, r3
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	202c      	movs	r0, #44	; 0x2c
 8003896:	fb00 f303 	mul.w	r3, r0, r3
 800389a:	4413      	add	r3, r2
 800389c:	3360      	adds	r3, #96	; 0x60
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f006 fb6c 	bl	8009f80 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038a8:	e008      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3360      	adds	r3, #96	; 0x60
 80038b8:	2202      	movs	r2, #2
 80038ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	461a      	mov	r2, r3
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	6093      	str	r3, [r2, #8]
}
 80038ce:	e172      	b.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	d11b      	bne.n	8003920 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3361      	adds	r3, #97	; 0x61
 80038f6:	2208      	movs	r2, #8
 80038f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fa9d 	bl	8006e44 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	461a      	mov	r2, r3
 8003918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800391c:	6093      	str	r3, [r2, #8]
}
 800391e:	e14a      	b.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	f040 813f 	bne.w	8003bb6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3361      	adds	r3, #97	; 0x61
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d17d      	bne.n	8003a48 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3360      	adds	r3, #96	; 0x60
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	333f      	adds	r3, #63	; 0x3f
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d00a      	beq.n	8003988 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	333f      	adds	r3, #63	; 0x3f
 8003980:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003982:	2b03      	cmp	r3, #3
 8003984:	f040 8100 	bne.w	8003b88 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d113      	bne.n	80039b8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	3355      	adds	r3, #85	; 0x55
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	f083 0301 	eor.w	r3, r3, #1
 80039a4:	b2d8      	uxtb	r0, r3
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	3355      	adds	r3, #85	; 0x55
 80039b4:	4602      	mov	r2, r0
 80039b6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	f040 80e3 	bne.w	8003b88 <HCD_HC_OUT_IRQHandler+0x69c>
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	334c      	adds	r3, #76	; 0x4c
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80d8 	beq.w	8003b88 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	212c      	movs	r1, #44	; 0x2c
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	334c      	adds	r3, #76	; 0x4c
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	202c      	movs	r0, #44	; 0x2c
 80039ee:	fb00 f202 	mul.w	r2, r0, r2
 80039f2:	440a      	add	r2, r1
 80039f4:	3240      	adds	r2, #64	; 0x40
 80039f6:	8812      	ldrh	r2, [r2, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	202c      	movs	r0, #44	; 0x2c
 8003a02:	fb00 f202 	mul.w	r2, r0, r2
 8003a06:	440a      	add	r2, r1
 8003a08:	3240      	adds	r2, #64	; 0x40
 8003a0a:	8812      	ldrh	r2, [r2, #0]
 8003a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80b5 	beq.w	8003b88 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	3355      	adds	r3, #85	; 0x55
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	f083 0301 	eor.w	r3, r3, #1
 8003a32:	b2d8      	uxtb	r0, r3
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3355      	adds	r3, #85	; 0x55
 8003a42:	4602      	mov	r2, r0
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e09f      	b.n	8003b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	212c      	movs	r1, #44	; 0x2c
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	4413      	add	r3, r2
 8003a54:	3361      	adds	r3, #97	; 0x61
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d109      	bne.n	8003a70 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3360      	adds	r3, #96	; 0x60
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	e08b      	b.n	8003b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	212c      	movs	r1, #44	; 0x2c
 8003a76:	fb01 f303 	mul.w	r3, r1, r3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3361      	adds	r3, #97	; 0x61
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d109      	bne.n	8003a98 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	212c      	movs	r1, #44	; 0x2c
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3360      	adds	r3, #96	; 0x60
 8003a92:	2202      	movs	r2, #2
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e077      	b.n	8003b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	212c      	movs	r1, #44	; 0x2c
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3361      	adds	r3, #97	; 0x61
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d109      	bne.n	8003ac0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3360      	adds	r3, #96	; 0x60
 8003aba:	2205      	movs	r2, #5
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	e063      	b.n	8003b88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3361      	adds	r3, #97	; 0x61
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b06      	cmp	r3, #6
 8003ad2:	d009      	beq.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3361      	adds	r3, #97	; 0x61
 8003ae2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d14f      	bne.n	8003b88 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	335c      	adds	r3, #92	; 0x5c
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	202c      	movs	r0, #44	; 0x2c
 8003b00:	fb00 f303 	mul.w	r3, r0, r3
 8003b04:	440b      	add	r3, r1
 8003b06:	335c      	adds	r3, #92	; 0x5c
 8003b08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	212c      	movs	r1, #44	; 0x2c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	335c      	adds	r3, #92	; 0x5c
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d912      	bls.n	8003b44 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	335c      	adds	r3, #92	; 0x5c
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	212c      	movs	r1, #44	; 0x2c
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3360      	adds	r3, #96	; 0x60
 8003b3e:	2204      	movs	r2, #4
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e021      	b.n	8003b88 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	212c      	movs	r1, #44	; 0x2c
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	3360      	adds	r3, #96	; 0x60
 8003b52:	2202      	movs	r2, #2
 8003b54:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b6c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b74:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b82:	461a      	mov	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b94:	461a      	mov	r2, r3
 8003b96:	2302      	movs	r3, #2
 8003b98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	b2d9      	uxtb	r1, r3
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	202c      	movs	r0, #44	; 0x2c
 8003ba4:	fb00 f303 	mul.w	r3, r0, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	3360      	adds	r3, #96	; 0x60
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f006 f9e5 	bl	8009f80 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003bb6:	bf00      	nop
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b08a      	sub	sp, #40	; 0x28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	0c5b      	lsrs	r3, r3, #17
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bf2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d004      	beq.n	8003c04 <HCD_RXQLVL_IRQHandler+0x46>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	f000 80a9 	beq.w	8003d54 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c02:	e0aa      	b.n	8003d5a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80a6 	beq.w	8003d58 <HCD_RXQLVL_IRQHandler+0x19a>
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	212c      	movs	r1, #44	; 0x2c
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	3344      	adds	r3, #68	; 0x44
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 809b 	beq.w	8003d58 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	212c      	movs	r1, #44	; 0x2c
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3350      	adds	r3, #80	; 0x50
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	441a      	add	r2, r3
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	202c      	movs	r0, #44	; 0x2c
 8003c3c:	fb00 f303 	mul.w	r3, r0, r3
 8003c40:	440b      	add	r3, r1
 8003c42:	334c      	adds	r3, #76	; 0x4c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d87a      	bhi.n	8003d40 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	212c      	movs	r1, #44	; 0x2c
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	4413      	add	r3, r2
 8003c5a:	3344      	adds	r3, #68	; 0x44
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	b292      	uxth	r2, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f003 f82a 	bl	8006cbc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3344      	adds	r3, #68	; 0x44
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	441a      	add	r2, r3
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	202c      	movs	r0, #44	; 0x2c
 8003c82:	fb00 f303 	mul.w	r3, r0, r3
 8003c86:	440b      	add	r3, r1
 8003c88:	3344      	adds	r3, #68	; 0x44
 8003c8a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3350      	adds	r3, #80	; 0x50
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	202c      	movs	r0, #44	; 0x2c
 8003ca6:	fb00 f303 	mul.w	r3, r0, r3
 8003caa:	440b      	add	r3, r1
 8003cac:	3350      	adds	r3, #80	; 0x50
 8003cae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	0cdb      	lsrs	r3, r3, #19
 8003cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	212c      	movs	r1, #44	; 0x2c
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3340      	adds	r3, #64	; 0x40
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d13c      	bne.n	8003d58 <HCD_RXQLVL_IRQHandler+0x19a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d039      	beq.n	8003d58 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cfa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d02:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	3354      	adds	r3, #84	; 0x54
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	f083 0301 	eor.w	r3, r3, #1
 8003d2a:	b2d8      	uxtb	r0, r3
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	212c      	movs	r1, #44	; 0x2c
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	4413      	add	r3, r2
 8003d38:	3354      	adds	r3, #84	; 0x54
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	701a      	strb	r2, [r3, #0]
      break;
 8003d3e:	e00b      	b.n	8003d58 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	212c      	movs	r1, #44	; 0x2c
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3360      	adds	r3, #96	; 0x60
 8003d4e:	2204      	movs	r2, #4
 8003d50:	701a      	strb	r2, [r3, #0]
      break;
 8003d52:	e001      	b.n	8003d58 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003d54:	bf00      	nop
 8003d56:	e000      	b.n	8003d5a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003d58:	bf00      	nop
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	3728      	adds	r7, #40	; 0x28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d8e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d10b      	bne.n	8003db2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d102      	bne.n	8003daa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f006 f8cf 	bl	8009f48 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f043 0302 	orr.w	r3, r3, #2
 8003db0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d132      	bne.n	8003e22 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f043 0308 	orr.w	r3, r3, #8
 8003dc2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d126      	bne.n	8003e1c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d113      	bne.n	8003dfe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003de0:	d106      	bne.n	8003df0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2102      	movs	r1, #2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f002 ffe0 	bl	8006dae <USB_InitFSLSPClkSel>
 8003dee:	e011      	b.n	8003e14 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f002 ffd9 	bl	8006dae <USB_InitFSLSPClkSel>
 8003dfc:	e00a      	b.n	8003e14 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d106      	bne.n	8003e14 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e12:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f006 f8c5 	bl	8009fa4 <HAL_HCD_PortEnabled_Callback>
 8003e1a:	e002      	b.n	8003e22 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f006 f8cf 	bl	8009fc0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d103      	bne.n	8003e34 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f043 0320 	orr.w	r3, r3, #32
 8003e32:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e12b      	b.n	80040b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd fbc2 	bl	80015f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2224      	movs	r2, #36	; 0x24
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eac:	f001 fa20 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8003eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4a81      	ldr	r2, [pc, #516]	; (80040bc <HAL_I2C_Init+0x274>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d807      	bhi.n	8003ecc <HAL_I2C_Init+0x84>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a80      	ldr	r2, [pc, #512]	; (80040c0 <HAL_I2C_Init+0x278>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	bf94      	ite	ls
 8003ec4:	2301      	movls	r3, #1
 8003ec6:	2300      	movhi	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e006      	b.n	8003eda <HAL_I2C_Init+0x92>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a7d      	ldr	r2, [pc, #500]	; (80040c4 <HAL_I2C_Init+0x27c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	bf94      	ite	ls
 8003ed4:	2301      	movls	r3, #1
 8003ed6:	2300      	movhi	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0e7      	b.n	80040b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a78      	ldr	r2, [pc, #480]	; (80040c8 <HAL_I2C_Init+0x280>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	0c9b      	lsrs	r3, r3, #18
 8003eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a6a      	ldr	r2, [pc, #424]	; (80040bc <HAL_I2C_Init+0x274>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d802      	bhi.n	8003f1c <HAL_I2C_Init+0xd4>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	e009      	b.n	8003f30 <HAL_I2C_Init+0xe8>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	4a69      	ldr	r2, [pc, #420]	; (80040cc <HAL_I2C_Init+0x284>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	099b      	lsrs	r3, r3, #6
 8003f2e:	3301      	adds	r3, #1
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	495c      	ldr	r1, [pc, #368]	; (80040bc <HAL_I2C_Init+0x274>)
 8003f4c:	428b      	cmp	r3, r1
 8003f4e:	d819      	bhi.n	8003f84 <HAL_I2C_Init+0x13c>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1e59      	subs	r1, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f5e:	1c59      	adds	r1, r3, #1
 8003f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f64:	400b      	ands	r3, r1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_I2C_Init+0x138>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1e59      	subs	r1, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7e:	e051      	b.n	8004024 <HAL_I2C_Init+0x1dc>
 8003f80:	2304      	movs	r3, #4
 8003f82:	e04f      	b.n	8004024 <HAL_I2C_Init+0x1dc>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d111      	bne.n	8003fb0 <HAL_I2C_Init+0x168>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1e58      	subs	r0, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	440b      	add	r3, r1
 8003f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e012      	b.n	8003fd6 <HAL_I2C_Init+0x18e>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e58      	subs	r0, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	0099      	lsls	r1, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Init+0x196>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e022      	b.n	8004024 <HAL_I2C_Init+0x1dc>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10e      	bne.n	8004004 <HAL_I2C_Init+0x1bc>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1e58      	subs	r0, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	440b      	add	r3, r1
 8003ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004002:	e00f      	b.n	8004024 <HAL_I2C_Init+0x1dc>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1e58      	subs	r0, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	0099      	lsls	r1, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	fbb0 f3f3 	udiv	r3, r0, r3
 800401a:	3301      	adds	r3, #1
 800401c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	6809      	ldr	r1, [r1, #0]
 8004028:	4313      	orrs	r3, r2
 800402a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6911      	ldr	r1, [r2, #16]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68d2      	ldr	r2, [r2, #12]
 800405e:	4311      	orrs	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	430b      	orrs	r3, r1
 8004066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	000186a0 	.word	0x000186a0
 80040c0:	001e847f 	.word	0x001e847f
 80040c4:	003d08ff 	.word	0x003d08ff
 80040c8:	431bde83 	.word	0x431bde83
 80040cc:	10624dd3 	.word	0x10624dd3

080040d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e128      	b.n	8004334 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a90      	ldr	r2, [pc, #576]	; (800433c <HAL_I2S_Init+0x26c>)
 80040fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fd fac3 	bl	8001688 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004118:	f023 030f 	bic.w	r3, r3, #15
 800411c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2202      	movs	r2, #2
 8004124:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d060      	beq.n	80041f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004136:	2310      	movs	r3, #16
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	e001      	b.n	8004140 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800413c:	2320      	movs	r3, #32
 800413e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b20      	cmp	r3, #32
 8004146:	d802      	bhi.n	800414e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800414e:	2001      	movs	r0, #1
 8004150:	f001 f9d8 	bl	8005504 <HAL_RCCEx_GetPeriphCLKFreq>
 8004154:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415e:	d125      	bne.n	80041ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	461a      	mov	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	3305      	adds	r3, #5
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	e01f      	b.n	80041ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	fbb2 f2f3 	udiv	r2, r2, r3
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	461a      	mov	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	3305      	adds	r3, #5
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	e00e      	b.n	80041ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	461a      	mov	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	3305      	adds	r3, #5
 80041c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4a5c      	ldr	r2, [pc, #368]	; (8004340 <HAL_I2S_Init+0x270>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	08db      	lsrs	r3, r3, #3
 80041d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	085b      	lsrs	r3, r3, #1
 80041e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	e003      	b.n	80041f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80041f0:	2302      	movs	r3, #2
 80041f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d902      	bls.n	8004204 <HAL_I2S_Init+0x134>
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2bff      	cmp	r3, #255	; 0xff
 8004202:	d907      	bls.n	8004214 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	f043 0210 	orr.w	r2, r3, #16
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e08f      	b.n	8004334 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	ea42 0103 	orr.w	r1, r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	430a      	orrs	r2, r1
 8004226:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004232:	f023 030f 	bic.w	r3, r3, #15
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6851      	ldr	r1, [r2, #4]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6892      	ldr	r2, [r2, #8]
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68d2      	ldr	r2, [r2, #12]
 8004244:	4311      	orrs	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6992      	ldr	r2, [r2, #24]
 800424a:	430a      	orrs	r2, r1
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004256:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d161      	bne.n	8004324 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a38      	ldr	r2, [pc, #224]	; (8004344 <HAL_I2S_Init+0x274>)
 8004264:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a37      	ldr	r2, [pc, #220]	; (8004348 <HAL_I2S_Init+0x278>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <HAL_I2S_Init+0x1a4>
 8004270:	4b36      	ldr	r3, [pc, #216]	; (800434c <HAL_I2S_Init+0x27c>)
 8004272:	e001      	b.n	8004278 <HAL_I2S_Init+0x1a8>
 8004274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	4932      	ldr	r1, [pc, #200]	; (8004348 <HAL_I2S_Init+0x278>)
 8004280:	428a      	cmp	r2, r1
 8004282:	d101      	bne.n	8004288 <HAL_I2S_Init+0x1b8>
 8004284:	4a31      	ldr	r2, [pc, #196]	; (800434c <HAL_I2S_Init+0x27c>)
 8004286:	e001      	b.n	800428c <HAL_I2S_Init+0x1bc>
 8004288:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800428c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004290:	f023 030f 	bic.w	r3, r3, #15
 8004294:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2b      	ldr	r2, [pc, #172]	; (8004348 <HAL_I2S_Init+0x278>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_I2S_Init+0x1d4>
 80042a0:	4b2a      	ldr	r3, [pc, #168]	; (800434c <HAL_I2S_Init+0x27c>)
 80042a2:	e001      	b.n	80042a8 <HAL_I2S_Init+0x1d8>
 80042a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042a8:	2202      	movs	r2, #2
 80042aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a25      	ldr	r2, [pc, #148]	; (8004348 <HAL_I2S_Init+0x278>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_I2S_Init+0x1ea>
 80042b6:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_I2S_Init+0x27c>)
 80042b8:	e001      	b.n	80042be <HAL_I2S_Init+0x1ee>
 80042ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ca:	d003      	beq.n	80042d4 <HAL_I2S_Init+0x204>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80042d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e001      	b.n	80042e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042ea:	4313      	orrs	r3, r2
 80042ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042f4:	4313      	orrs	r3, r2
 80042f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042fe:	4313      	orrs	r3, r2
 8004300:	b29a      	uxth	r2, r3
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	4313      	orrs	r3, r2
 8004306:	b29b      	uxth	r3, r3
 8004308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800430c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a0d      	ldr	r2, [pc, #52]	; (8004348 <HAL_I2S_Init+0x278>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d101      	bne.n	800431c <HAL_I2S_Init+0x24c>
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_I2S_Init+0x27c>)
 800431a:	e001      	b.n	8004320 <HAL_I2S_Init+0x250>
 800431c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004320:	897a      	ldrh	r2, [r7, #10]
 8004322:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	08004447 	.word	0x08004447
 8004340:	cccccccd 	.word	0xcccccccd
 8004344:	0800455d 	.word	0x0800455d
 8004348:	40003800 	.word	0x40003800
 800434c:	40003400 	.word	0x40003400

08004350 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	1c9a      	adds	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10e      	bne.n	80043e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ffb8 	bl	8004350 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	b292      	uxth	r2, r2
 80043fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	1c9a      	adds	r2, r3, #2
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10e      	bne.n	800443e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800442e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ff93 	bl	8004364 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b04      	cmp	r3, #4
 8004460:	d13a      	bne.n	80044d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d109      	bne.n	8004480 <I2S_IRQHandler+0x3a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b40      	cmp	r3, #64	; 0x40
 8004478:	d102      	bne.n	8004480 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff ffb4 	bl	80043e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b40      	cmp	r3, #64	; 0x40
 8004488:	d126      	bne.n	80044d8 <I2S_IRQHandler+0x92>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b20      	cmp	r3, #32
 8004496:	d11f      	bne.n	80044d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	f043 0202 	orr.w	r2, r3, #2
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ff50 	bl	8004378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d136      	bne.n	8004552 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d109      	bne.n	8004502 <I2S_IRQHandler+0xbc>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f8:	2b80      	cmp	r3, #128	; 0x80
 80044fa:	d102      	bne.n	8004502 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff45 	bl	800438c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b08      	cmp	r3, #8
 800450a:	d122      	bne.n	8004552 <I2S_IRQHandler+0x10c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b20      	cmp	r3, #32
 8004518:	d11b      	bne.n	8004552 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004528:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	f043 0204 	orr.w	r2, r3, #4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff ff13 	bl	8004378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a92      	ldr	r2, [pc, #584]	; (80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d101      	bne.n	800457a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004576:	4b92      	ldr	r3, [pc, #584]	; (80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004578:	e001      	b.n	800457e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800457a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a8b      	ldr	r2, [pc, #556]	; (80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004594:	4b8a      	ldr	r3, [pc, #552]	; (80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004596:	e001      	b.n	800459c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a8:	d004      	beq.n	80045b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 8099 	bne.w	80046e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d107      	bne.n	80045ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f925 	bl	8004818 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d107      	bne.n	80045e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f9c8 	bl	8004978 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d13a      	bne.n	8004668 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d035      	beq.n	8004668 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a6e      	ldr	r2, [pc, #440]	; (80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004606:	4b6e      	ldr	r3, [pc, #440]	; (80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004608:	e001      	b.n	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800460a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4969      	ldr	r1, [pc, #420]	; (80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004616:	428b      	cmp	r3, r1
 8004618:	d101      	bne.n	800461e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800461a:	4b69      	ldr	r3, [pc, #420]	; (80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800461c:	e001      	b.n	8004622 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800461e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004626:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004636:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	f043 0202 	orr.w	r2, r3, #2
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fe88 	bl	8004378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b08      	cmp	r3, #8
 8004670:	f040 80c3 	bne.w	80047fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 80bd 	beq.w	80047fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800468e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a49      	ldr	r2, [pc, #292]	; (80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800469a:	4b49      	ldr	r3, [pc, #292]	; (80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800469c:	e001      	b.n	80046a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800469e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4944      	ldr	r1, [pc, #272]	; (80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046aa:	428b      	cmp	r3, r1
 80046ac:	d101      	bne.n	80046b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80046ae:	4b44      	ldr	r3, [pc, #272]	; (80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046b0:	e001      	b.n	80046b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80046b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046bc:	2300      	movs	r3, #0
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	f043 0204 	orr.w	r2, r3, #4
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fe4a 	bl	8004378 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046e4:	e089      	b.n	80047fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d107      	bne.n	8004700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8be 	bl	800487c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b01      	cmp	r3, #1
 8004708:	d107      	bne.n	800471a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8fd 	bl	8004914 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004720:	2b40      	cmp	r3, #64	; 0x40
 8004722:	d12f      	bne.n	8004784 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d02a      	beq.n	8004784 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800473c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d101      	bne.n	800474c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004748:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800474a:	e001      	b.n	8004750 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800474c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4919      	ldr	r1, [pc, #100]	; (80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004758:	428b      	cmp	r3, r1
 800475a:	d101      	bne.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800475c:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800475e:	e001      	b.n	8004764 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004764:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004768:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f043 0202 	orr.w	r2, r3, #2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fdfa 	bl	8004378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b08      	cmp	r3, #8
 800478c:	d136      	bne.n	80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d031      	beq.n	80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a07      	ldr	r2, [pc, #28]	; (80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047a4:	e001      	b.n	80047aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80047a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4902      	ldr	r1, [pc, #8]	; (80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047b2:	428b      	cmp	r3, r1
 80047b4:	d106      	bne.n	80047c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80047b6:	4b02      	ldr	r3, [pc, #8]	; (80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047b8:	e006      	b.n	80047c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80047ba:	bf00      	nop
 80047bc:	40003800 	.word	0x40003800
 80047c0:	40003400 	.word	0x40003400
 80047c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	f043 0204 	orr.w	r2, r3, #4
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff fdc0 	bl	8004378 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047f8:	e000      	b.n	80047fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047fa:	bf00      	nop
}
 80047fc:	bf00      	nop
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	1c99      	adds	r1, r3, #2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6251      	str	r1, [r2, #36]	; 0x24
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d113      	bne.n	8004872 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004858:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff ffc9 	bl	8004804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	1c99      	adds	r1, r3, #2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6251      	str	r1, [r2, #36]	; 0x24
 800488e:	8819      	ldrh	r1, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1d      	ldr	r2, [pc, #116]	; (800490c <I2SEx_TxISR_I2SExt+0x90>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <I2SEx_TxISR_I2SExt+0x22>
 800489a:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <I2SEx_TxISR_I2SExt+0x94>)
 800489c:	e001      	b.n	80048a2 <I2SEx_TxISR_I2SExt+0x26>
 800489e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048a2:	460a      	mov	r2, r1
 80048a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d121      	bne.n	8004902 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a12      	ldr	r2, [pc, #72]	; (800490c <I2SEx_TxISR_I2SExt+0x90>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d101      	bne.n	80048cc <I2SEx_TxISR_I2SExt+0x50>
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <I2SEx_TxISR_I2SExt+0x94>)
 80048ca:	e001      	b.n	80048d0 <I2SEx_TxISR_I2SExt+0x54>
 80048cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	490d      	ldr	r1, [pc, #52]	; (800490c <I2SEx_TxISR_I2SExt+0x90>)
 80048d8:	428b      	cmp	r3, r1
 80048da:	d101      	bne.n	80048e0 <I2SEx_TxISR_I2SExt+0x64>
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <I2SEx_TxISR_I2SExt+0x94>)
 80048de:	e001      	b.n	80048e4 <I2SEx_TxISR_I2SExt+0x68>
 80048e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ff81 	bl	8004804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40003800 	.word	0x40003800
 8004910:	40003400 	.word	0x40003400

08004914 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68d8      	ldr	r0, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	1c99      	adds	r1, r3, #2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800492c:	b282      	uxth	r2, r0
 800492e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d113      	bne.n	8004970 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004956:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff ff4a 	bl	8004804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <I2SEx_RxISR_I2SExt+0x90>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d101      	bne.n	800498e <I2SEx_RxISR_I2SExt+0x16>
 800498a:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <I2SEx_RxISR_I2SExt+0x94>)
 800498c:	e001      	b.n	8004992 <I2SEx_RxISR_I2SExt+0x1a>
 800498e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004992:	68d8      	ldr	r0, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	1c99      	adds	r1, r3, #2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800499e:	b282      	uxth	r2, r0
 80049a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d121      	bne.n	80049fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <I2SEx_RxISR_I2SExt+0x90>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <I2SEx_RxISR_I2SExt+0x50>
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <I2SEx_RxISR_I2SExt+0x94>)
 80049c6:	e001      	b.n	80049cc <I2SEx_RxISR_I2SExt+0x54>
 80049c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	490d      	ldr	r1, [pc, #52]	; (8004a08 <I2SEx_RxISR_I2SExt+0x90>)
 80049d4:	428b      	cmp	r3, r1
 80049d6:	d101      	bne.n	80049dc <I2SEx_RxISR_I2SExt+0x64>
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <I2SEx_RxISR_I2SExt+0x94>)
 80049da:	e001      	b.n	80049e0 <I2SEx_RxISR_I2SExt+0x68>
 80049dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d106      	bne.n	80049fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff ff03 	bl	8004804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40003800 	.word	0x40003800
 8004a0c:	40003400 	.word	0x40003400

08004a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e267      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d075      	beq.n	8004b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a2e:	4b88      	ldr	r3, [pc, #544]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d00c      	beq.n	8004a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3a:	4b85      	ldr	r3, [pc, #532]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d112      	bne.n	8004a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a46:	4b82      	ldr	r3, [pc, #520]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	4b7e      	ldr	r3, [pc, #504]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d05b      	beq.n	8004b18 <HAL_RCC_OscConfig+0x108>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d157      	bne.n	8004b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e242      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a74:	d106      	bne.n	8004a84 <HAL_RCC_OscConfig+0x74>
 8004a76:	4b76      	ldr	r3, [pc, #472]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a75      	ldr	r2, [pc, #468]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e01d      	b.n	8004ac0 <HAL_RCC_OscConfig+0xb0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x98>
 8004a8e:	4b70      	ldr	r3, [pc, #448]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6f      	ldr	r2, [pc, #444]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b6d      	ldr	r3, [pc, #436]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a6c      	ldr	r2, [pc, #432]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCC_OscConfig+0xb0>
 8004aa8:	4b69      	ldr	r3, [pc, #420]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a68      	ldr	r2, [pc, #416]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4b66      	ldr	r3, [pc, #408]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a65      	ldr	r2, [pc, #404]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d013      	beq.n	8004af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fd f9be 	bl	8001e48 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fd f9ba 	bl	8001e48 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e207      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	4b5b      	ldr	r3, [pc, #364]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0xc0>
 8004aee:	e014      	b.n	8004b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fd f9aa 	bl	8001e48 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fd f9a6 	bl	8001e48 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	; 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e1f3      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0a:	4b51      	ldr	r3, [pc, #324]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0xe8>
 8004b16:	e000      	b.n	8004b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d063      	beq.n	8004bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b26:	4b4a      	ldr	r3, [pc, #296]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b32:	4b47      	ldr	r3, [pc, #284]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d11c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b3e:	4b44      	ldr	r3, [pc, #272]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d116      	bne.n	8004b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4a:	4b41      	ldr	r3, [pc, #260]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_RCC_OscConfig+0x152>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e1c7      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b62:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4937      	ldr	r1, [pc, #220]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b76:	e03a      	b.n	8004bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b80:	4b34      	ldr	r3, [pc, #208]	; (8004c54 <HAL_RCC_OscConfig+0x244>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fd f95f 	bl	8001e48 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b8e:	f7fd f95b 	bl	8001e48 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e1a8      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bac:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4925      	ldr	r1, [pc, #148]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
 8004bc0:	e015      	b.n	8004bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc2:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <HAL_RCC_OscConfig+0x244>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd f93e 	bl	8001e48 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd0:	f7fd f93a 	bl	8001e48 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e187      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be2:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d036      	beq.n	8004c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <HAL_RCC_OscConfig+0x248>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fd f91e 	bl	8001e48 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c10:	f7fd f91a 	bl	8001e48 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e167      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x200>
 8004c2e:	e01b      	b.n	8004c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <HAL_RCC_OscConfig+0x248>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c36:	f7fd f907 	bl	8001e48 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c3c:	e00e      	b.n	8004c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c3e:	f7fd f903 	bl	8001e48 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d907      	bls.n	8004c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e150      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
 8004c50:	40023800 	.word	0x40023800
 8004c54:	42470000 	.word	0x42470000
 8004c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c5c:	4b88      	ldr	r3, [pc, #544]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ea      	bne.n	8004c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8097 	beq.w	8004da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7a:	4b81      	ldr	r3, [pc, #516]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	4b7d      	ldr	r3, [pc, #500]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a7c      	ldr	r2, [pc, #496]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
 8004c96:	4b7a      	ldr	r3, [pc, #488]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca6:	4b77      	ldr	r3, [pc, #476]	; (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d118      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb2:	4b74      	ldr	r3, [pc, #464]	; (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a73      	ldr	r2, [pc, #460]	; (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cbe:	f7fd f8c3 	bl	8001e48 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc6:	f7fd f8bf 	bl	8001e48 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e10c      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	4b6a      	ldr	r3, [pc, #424]	; (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x2ea>
 8004cec:	4b64      	ldr	r3, [pc, #400]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	4a63      	ldr	r2, [pc, #396]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf8:	e01c      	b.n	8004d34 <HAL_RCC_OscConfig+0x324>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b05      	cmp	r3, #5
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x30c>
 8004d02:	4b5f      	ldr	r3, [pc, #380]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	4a5e      	ldr	r2, [pc, #376]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d08:	f043 0304 	orr.w	r3, r3, #4
 8004d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0e:	4b5c      	ldr	r3, [pc, #368]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	4a5b      	ldr	r2, [pc, #364]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0x324>
 8004d1c:	4b58      	ldr	r3, [pc, #352]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	4a57      	ldr	r2, [pc, #348]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	6713      	str	r3, [r2, #112]	; 0x70
 8004d28:	4b55      	ldr	r3, [pc, #340]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2c:	4a54      	ldr	r2, [pc, #336]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	f023 0304 	bic.w	r3, r3, #4
 8004d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fd f884 	bl	8001e48 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f7fd f880 	bl	8001e48 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0cb      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5a:	4b49      	ldr	r3, [pc, #292]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0ee      	beq.n	8004d44 <HAL_RCC_OscConfig+0x334>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d68:	f7fd f86e 	bl	8001e48 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d70:	f7fd f86a 	bl	8001e48 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0b5      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d86:	4b3e      	ldr	r3, [pc, #248]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1ee      	bne.n	8004d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4b39      	ldr	r3, [pc, #228]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	4a38      	ldr	r2, [pc, #224]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a1 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dae:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d05c      	beq.n	8004e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d141      	bne.n	8004e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc2:	4b31      	ldr	r3, [pc, #196]	; (8004e88 <HAL_RCC_OscConfig+0x478>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fd f83e 	bl	8001e48 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fd f83a 	bl	8001e48 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e087      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de2:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69da      	ldr	r2, [r3, #28]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	019b      	lsls	r3, r3, #6
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	3b01      	subs	r3, #1
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	491b      	ldr	r1, [pc, #108]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_RCC_OscConfig+0x478>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7fd f813 	bl	8001e48 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e26:	f7fd f80f 	bl	8001e48 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e05c      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x416>
 8004e44:	e054      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <HAL_RCC_OscConfig+0x478>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4c:	f7fc fffc 	bl	8001e48 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fc fff8 	bl	8001e48 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e045      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x444>
 8004e72:	e03d      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e038      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
 8004e80:	40023800 	.word	0x40023800
 8004e84:	40007000 	.word	0x40007000
 8004e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <HAL_RCC_OscConfig+0x4ec>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d028      	beq.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d121      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d11a      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d111      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d107      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40023800 	.word	0x40023800

08004f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0cc      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f14:	4b68      	ldr	r3, [pc, #416]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d90c      	bls.n	8004f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f22:	4b65      	ldr	r3, [pc, #404]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	4b63      	ldr	r3, [pc, #396]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0b8      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f54:	4b59      	ldr	r3, [pc, #356]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4a58      	ldr	r2, [pc, #352]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f6c:	4b53      	ldr	r3, [pc, #332]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4a52      	ldr	r2, [pc, #328]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f78:	4b50      	ldr	r3, [pc, #320]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	494d      	ldr	r1, [pc, #308]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d044      	beq.n	8005020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d107      	bne.n	8004fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	4b47      	ldr	r3, [pc, #284]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d119      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e07f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbe:	4b3f      	ldr	r3, [pc, #252]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e06f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e067      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b37      	ldr	r3, [pc, #220]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4934      	ldr	r1, [pc, #208]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fc ff2a 	bl	8001e48 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fc ff26 	bl	8001e48 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	; 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e04f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b25      	ldr	r3, [pc, #148]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d20c      	bcs.n	8005048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e032      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005054:	4b19      	ldr	r3, [pc, #100]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4916      	ldr	r1, [pc, #88]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	490e      	ldr	r1, [pc, #56]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005086:	f000 f821 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 800508a:	4602      	mov	r2, r0
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	091b      	lsrs	r3, r3, #4
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	490a      	ldr	r1, [pc, #40]	; (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005098:	5ccb      	ldrb	r3, [r1, r3]
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 80050a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050a2:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc fe8a 	bl	8001dc0 <HAL_InitTick>

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40023c00 	.word	0x40023c00
 80050bc:	40023800 	.word	0x40023800
 80050c0:	08017d94 	.word	0x08017d94
 80050c4:	20000004 	.word	0x20000004
 80050c8:	20000008 	.word	0x20000008

080050cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d0:	b094      	sub	sp, #80	; 0x50
 80050d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	647b      	str	r3, [r7, #68]	; 0x44
 80050d8:	2300      	movs	r3, #0
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050dc:	2300      	movs	r3, #0
 80050de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050e4:	4b79      	ldr	r3, [pc, #484]	; (80052cc <HAL_RCC_GetSysClockFreq+0x200>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 030c 	and.w	r3, r3, #12
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d00d      	beq.n	800510c <HAL_RCC_GetSysClockFreq+0x40>
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	f200 80e1 	bhi.w	80052b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x34>
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d003      	beq.n	8005106 <HAL_RCC_GetSysClockFreq+0x3a>
 80050fe:	e0db      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005100:	4b73      	ldr	r3, [pc, #460]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005102:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005104:	e0db      	b.n	80052be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005106:	4b73      	ldr	r3, [pc, #460]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005108:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800510a:	e0d8      	b.n	80052be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800510c:	4b6f      	ldr	r3, [pc, #444]	; (80052cc <HAL_RCC_GetSysClockFreq+0x200>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005114:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005116:	4b6d      	ldr	r3, [pc, #436]	; (80052cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d063      	beq.n	80051ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005122:	4b6a      	ldr	r3, [pc, #424]	; (80052cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	2200      	movs	r2, #0
 800512a:	63bb      	str	r3, [r7, #56]	; 0x38
 800512c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005134:	633b      	str	r3, [r7, #48]	; 0x30
 8005136:	2300      	movs	r3, #0
 8005138:	637b      	str	r3, [r7, #52]	; 0x34
 800513a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800513e:	4622      	mov	r2, r4
 8005140:	462b      	mov	r3, r5
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f04f 0100 	mov.w	r1, #0
 800514a:	0159      	lsls	r1, r3, #5
 800514c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005150:	0150      	lsls	r0, r2, #5
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4621      	mov	r1, r4
 8005158:	1a51      	subs	r1, r2, r1
 800515a:	6139      	str	r1, [r7, #16]
 800515c:	4629      	mov	r1, r5
 800515e:	eb63 0301 	sbc.w	r3, r3, r1
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005170:	4659      	mov	r1, fp
 8005172:	018b      	lsls	r3, r1, #6
 8005174:	4651      	mov	r1, sl
 8005176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800517a:	4651      	mov	r1, sl
 800517c:	018a      	lsls	r2, r1, #6
 800517e:	4651      	mov	r1, sl
 8005180:	ebb2 0801 	subs.w	r8, r2, r1
 8005184:	4659      	mov	r1, fp
 8005186:	eb63 0901 	sbc.w	r9, r3, r1
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800519a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800519e:	4690      	mov	r8, r2
 80051a0:	4699      	mov	r9, r3
 80051a2:	4623      	mov	r3, r4
 80051a4:	eb18 0303 	adds.w	r3, r8, r3
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	462b      	mov	r3, r5
 80051ac:	eb49 0303 	adc.w	r3, r9, r3
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051be:	4629      	mov	r1, r5
 80051c0:	024b      	lsls	r3, r1, #9
 80051c2:	4621      	mov	r1, r4
 80051c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051c8:	4621      	mov	r1, r4
 80051ca:	024a      	lsls	r2, r1, #9
 80051cc:	4610      	mov	r0, r2
 80051ce:	4619      	mov	r1, r3
 80051d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d2:	2200      	movs	r2, #0
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051dc:	f7fb f8b0 	bl	8000340 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4613      	mov	r3, r2
 80051e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e8:	e058      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ea:	4b38      	ldr	r3, [pc, #224]	; (80052cc <HAL_RCC_GetSysClockFreq+0x200>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	099b      	lsrs	r3, r3, #6
 80051f0:	2200      	movs	r2, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	4611      	mov	r1, r2
 80051f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051fa:	623b      	str	r3, [r7, #32]
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005200:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005204:	4642      	mov	r2, r8
 8005206:	464b      	mov	r3, r9
 8005208:	f04f 0000 	mov.w	r0, #0
 800520c:	f04f 0100 	mov.w	r1, #0
 8005210:	0159      	lsls	r1, r3, #5
 8005212:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005216:	0150      	lsls	r0, r2, #5
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4641      	mov	r1, r8
 800521e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005222:	4649      	mov	r1, r9
 8005224:	eb63 0b01 	sbc.w	fp, r3, r1
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005234:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005238:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800523c:	ebb2 040a 	subs.w	r4, r2, sl
 8005240:	eb63 050b 	sbc.w	r5, r3, fp
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	00eb      	lsls	r3, r5, #3
 800524e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005252:	00e2      	lsls	r2, r4, #3
 8005254:	4614      	mov	r4, r2
 8005256:	461d      	mov	r5, r3
 8005258:	4643      	mov	r3, r8
 800525a:	18e3      	adds	r3, r4, r3
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	464b      	mov	r3, r9
 8005260:	eb45 0303 	adc.w	r3, r5, r3
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005272:	4629      	mov	r1, r5
 8005274:	028b      	lsls	r3, r1, #10
 8005276:	4621      	mov	r1, r4
 8005278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800527c:	4621      	mov	r1, r4
 800527e:	028a      	lsls	r2, r1, #10
 8005280:	4610      	mov	r0, r2
 8005282:	4619      	mov	r1, r3
 8005284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005286:	2200      	movs	r2, #0
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	61fa      	str	r2, [r7, #28]
 800528c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005290:	f7fb f856 	bl	8000340 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4613      	mov	r3, r2
 800529a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800529c:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_RCC_GetSysClockFreq+0x200>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	3301      	adds	r3, #1
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052b6:	e002      	b.n	80052be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80052ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3750      	adds	r7, #80	; 0x50
 80052c4:	46bd      	mov	sp, r7
 80052c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ca:	bf00      	nop
 80052cc:	40023800 	.word	0x40023800
 80052d0:	00f42400 	.word	0x00f42400
 80052d4:	007a1200 	.word	0x007a1200

080052d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <HAL_RCC_GetHCLKFreq+0x14>)
 80052de:	681b      	ldr	r3, [r3, #0]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000004 	.word	0x20000004

080052f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052f4:	f7ff fff0 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	0a9b      	lsrs	r3, r3, #10
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4903      	ldr	r1, [pc, #12]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40023800 	.word	0x40023800
 8005314:	08017da4 	.word	0x08017da4

08005318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800531c:	f7ff ffdc 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 8005320:	4602      	mov	r2, r0
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	0b5b      	lsrs	r3, r3, #13
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	4903      	ldr	r1, [pc, #12]	; (800533c <HAL_RCC_GetPCLK2Freq+0x24>)
 800532e:	5ccb      	ldrb	r3, [r1, r3]
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40023800 	.word	0x40023800
 800533c:	08017da4 	.word	0x08017da4

08005340 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005364:	2b00      	cmp	r3, #0
 8005366:	d035      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005368:	4b62      	ldr	r3, [pc, #392]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800536e:	f7fc fd6b 	bl	8001e48 <HAL_GetTick>
 8005372:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005376:	f7fc fd67 	bl	8001e48 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e0b0      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005388:	4b5b      	ldr	r3, [pc, #364]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f0      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	019a      	lsls	r2, r3, #6
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	071b      	lsls	r3, r3, #28
 80053a0:	4955      	ldr	r1, [pc, #340]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053a8:	4b52      	ldr	r3, [pc, #328]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ae:	f7fc fd4b 	bl	8001e48 <HAL_GetTick>
 80053b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053b4:	e008      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053b6:	f7fc fd47 	bl	8001e48 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e090      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053c8:	4b4b      	ldr	r3, [pc, #300]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0f0      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8083 	beq.w	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	4b44      	ldr	r3, [pc, #272]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	4a43      	ldr	r2, [pc, #268]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6413      	str	r3, [r2, #64]	; 0x40
 80053f2:	4b41      	ldr	r3, [pc, #260]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053fe:	4b3f      	ldr	r3, [pc, #252]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a3e      	ldr	r2, [pc, #248]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005408:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800540a:	f7fc fd1d 	bl	8001e48 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005412:	f7fc fd19 	bl	8001e48 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e062      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005424:	4b35      	ldr	r3, [pc, #212]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005430:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005438:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d02f      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	429a      	cmp	r2, r3
 800544c:	d028      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800544e:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005456:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005458:	4b29      	ldr	r3, [pc, #164]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800545e:	4b28      	ldr	r3, [pc, #160]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005464:	4a24      	ldr	r2, [pc, #144]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800546a:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b01      	cmp	r3, #1
 8005474:	d114      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005476:	f7fc fce7 	bl	8001e48 <HAL_GetTick>
 800547a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547c:	e00a      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800547e:	f7fc fce3 	bl	8001e48 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	f241 3288 	movw	r2, #5000	; 0x1388
 800548c:	4293      	cmp	r3, r2
 800548e:	d901      	bls.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e02a      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005494:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0ee      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ac:	d10d      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80054ae:	4b12      	ldr	r3, [pc, #72]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c2:	490d      	ldr	r1, [pc, #52]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	608b      	str	r3, [r1, #8]
 80054c8:	e005      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054ca:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054d4:	6093      	str	r3, [r2, #8]
 80054d6:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e2:	4905      	ldr	r1, [pc, #20]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	42470068 	.word	0x42470068
 80054f8:	40023800 	.word	0x40023800
 80054fc:	40007000 	.word	0x40007000
 8005500:	42470e40 	.word	0x42470e40

08005504 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d13e      	bne.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005522:	4b23      	ldr	r3, [pc, #140]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d12f      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005538:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800553a:	617b      	str	r3, [r7, #20]
          break;
 800553c:	e02f      	b.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800553e:	4b1c      	ldr	r3, [pc, #112]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800554a:	d108      	bne.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800554c:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005556:	fbb2 f3f3 	udiv	r3, r2, r3
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e007      	b.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005566:	4a15      	ldr	r2, [pc, #84]	; (80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800556e:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005574:	099b      	lsrs	r3, r3, #6
 8005576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005582:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005588:	0f1b      	lsrs	r3, r3, #28
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	fbb2 f3f3 	udiv	r3, r2, r3
 8005594:	617b      	str	r3, [r7, #20]
          break;
 8005596:	e002      	b.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
          break;
 800559c:	bf00      	nop
        }
      }
      break;
 800559e:	bf00      	nop
    }
  }
  return frequency;
 80055a0:	697b      	ldr	r3, [r7, #20]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	00bb8000 	.word	0x00bb8000
 80055b8:	007a1200 	.word	0x007a1200
 80055bc:	00f42400 	.word	0x00f42400

080055c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e07b      	b.n	80056ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d108      	bne.n	80055ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055e2:	d009      	beq.n	80055f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	61da      	str	r2, [r3, #28]
 80055ea:	e005      	b.n	80055f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc f8b8 	bl	8001788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	ea42 0103 	orr.w	r1, r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	f003 0104 	and.w	r1, r3, #4
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	f003 0210 	and.w	r2, r3, #16
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e03f      	b.n	8005764 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fc f88d 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	; 0x24
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005714:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 ffd6 	bl	80066c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800572a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800573a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800574a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b20      	cmp	r3, #32
 8005784:	d165      	bne.n	8005852 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_UART_Transmit_DMA+0x26>
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e05e      	b.n	8005854 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_UART_Transmit_DMA+0x38>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e057      	b.n	8005854 <HAL_UART_Transmit_DMA+0xe8>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2221      	movs	r2, #33	; 0x21
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d0:	4a22      	ldr	r2, [pc, #136]	; (800585c <HAL_UART_Transmit_DMA+0xf0>)
 80057d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d8:	4a21      	ldr	r2, [pc, #132]	; (8005860 <HAL_UART_Transmit_DMA+0xf4>)
 80057da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	4a20      	ldr	r2, [pc, #128]	; (8005864 <HAL_UART_Transmit_DMA+0xf8>)
 80057e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e8:	2200      	movs	r2, #0
 80057ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80057ec:	f107 0308 	add.w	r3, r7, #8
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	6819      	ldr	r1, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3304      	adds	r3, #4
 8005800:	461a      	mov	r2, r3
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	f7fc fcec 	bl	80021e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005810:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3314      	adds	r3, #20
 8005820:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	617b      	str	r3, [r7, #20]
   return(result);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3314      	adds	r3, #20
 8005838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800583a:	627a      	str	r2, [r7, #36]	; 0x24
 800583c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6a39      	ldr	r1, [r7, #32]
 8005840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	61fb      	str	r3, [r7, #28]
   return(result);
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e5      	bne.n	800581a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e000      	b.n	8005854 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005852:	2302      	movs	r3, #2
  }
}
 8005854:	4618      	mov	r0, r3
 8005856:	3730      	adds	r7, #48	; 0x30
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	08005f61 	.word	0x08005f61
 8005860:	08005ffb 	.word	0x08005ffb
 8005864:	08006173 	.word	0x08006173

08005868 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b20      	cmp	r3, #32
 8005880:	d11d      	bne.n	80058be <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <HAL_UART_Receive_DMA+0x26>
 8005888:	88fb      	ldrh	r3, [r7, #6]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e016      	b.n	80058c0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_UART_Receive_DMA+0x38>
 800589c:	2302      	movs	r3, #2
 800589e:	e00f      	b.n	80058c0 <HAL_UART_Receive_DMA+0x58>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	461a      	mov	r2, r3
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fca7 	bl	8006208 <UART_Start_Receive_DMA>
 80058ba:	4603      	mov	r3, r0
 80058bc:	e000      	b.n	80058c0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
  }
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b090      	sub	sp, #64	; 0x40
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b80      	cmp	r3, #128	; 0x80
 80058e0:	bf0c      	ite	eq
 80058e2:	2301      	moveq	r3, #1
 80058e4:	2300      	movne	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b21      	cmp	r3, #33	; 0x21
 80058f4:	d128      	bne.n	8005948 <HAL_UART_DMAStop+0x80>
 80058f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d025      	beq.n	8005948 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3314      	adds	r3, #20
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	623b      	str	r3, [r7, #32]
   return(result);
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005912:	63bb      	str	r3, [r7, #56]	; 0x38
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3314      	adds	r3, #20
 800591a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800591c:	633a      	str	r2, [r7, #48]	; 0x30
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e5      	bne.n	80058fc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	4618      	mov	r0, r3
 800593e:	f7fc fca7 	bl	8002290 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fcfe 	bl	8006344 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b40      	cmp	r3, #64	; 0x40
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b22      	cmp	r3, #34	; 0x22
 8005968:	d128      	bne.n	80059bc <HAL_UART_DMAStop+0xf4>
 800596a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d025      	beq.n	80059bc <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3314      	adds	r3, #20
 8005976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3314      	adds	r3, #20
 800598e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005990:	61fa      	str	r2, [r7, #28]
 8005992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	617b      	str	r3, [r7, #20]
   return(result);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e5      	bne.n	8005970 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fc fc6d 	bl	8002290 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fcec 	bl	8006394 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3740      	adds	r7, #64	; 0x40
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b0ba      	sub	sp, #232	; 0xe8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10f      	bne.n	8005a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <HAL_UART_IRQHandler+0x66>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fd93 	bl	8006552 <UART_Receive_IT>
      return;
 8005a2c:	e256      	b.n	8005edc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 80de 	beq.w	8005bf4 <HAL_UART_IRQHandler+0x22c>
 8005a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80d1 	beq.w	8005bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00b      	beq.n	8005a76 <HAL_UART_IRQHandler+0xae>
 8005a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f043 0201 	orr.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00b      	beq.n	8005a9a <HAL_UART_IRQHandler+0xd2>
 8005a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f043 0202 	orr.w	r2, r3, #2
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00b      	beq.n	8005abe <HAL_UART_IRQHandler+0xf6>
 8005aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f043 0204 	orr.w	r2, r3, #4
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d011      	beq.n	8005aee <HAL_UART_IRQHandler+0x126>
 8005aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d105      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f043 0208 	orr.w	r2, r3, #8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 81ed 	beq.w	8005ed2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_UART_IRQHandler+0x14e>
 8005b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fd1e 	bl	8006552 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	bf0c      	ite	eq
 8005b24:	2301      	moveq	r3, #1
 8005b26:	2300      	movne	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <HAL_UART_IRQHandler+0x17a>
 8005b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d04f      	beq.n	8005be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fc26 	bl	8006394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b40      	cmp	r3, #64	; 0x40
 8005b54:	d141      	bne.n	8005bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3314      	adds	r3, #20
 8005b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1d9      	bne.n	8005b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d013      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	4a7d      	ldr	r2, [pc, #500]	; (8005da4 <HAL_UART_IRQHandler+0x3dc>)
 8005bb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fc fbda 	bl	8002370 <HAL_DMA_Abort_IT>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bcc:	4610      	mov	r0, r2
 8005bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	e00e      	b.n	8005bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f9ae 	bl	8005f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	e00a      	b.n	8005bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9aa 	bl	8005f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be0:	e006      	b.n	8005bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9a6 	bl	8005f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005bee:	e170      	b.n	8005ed2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf0:	bf00      	nop
    return;
 8005bf2:	e16e      	b.n	8005ed2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	f040 814a 	bne.w	8005e92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 8143 	beq.w	8005e92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 813c 	beq.w	8005e92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	f040 80b4 	bne.w	8005da8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8140 	beq.w	8005ed6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	f080 8139 	bcs.w	8005ed6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c76:	f000 8088 	beq.w	8005d8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1d9      	bne.n	8005c7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3314      	adds	r3, #20
 8005ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cd8:	f023 0301 	bic.w	r3, r3, #1
 8005cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3314      	adds	r3, #20
 8005ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e1      	bne.n	8005cc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3314      	adds	r3, #20
 8005d08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3314      	adds	r3, #20
 8005d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e3      	bne.n	8005d02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5a:	f023 0310 	bic.w	r3, r3, #16
 8005d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	330c      	adds	r3, #12
 8005d68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e3      	bne.n	8005d48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fc fa83 	bl	8002290 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f8d4 	bl	8005f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005da0:	e099      	b.n	8005ed6 <HAL_UART_IRQHandler+0x50e>
 8005da2:	bf00      	nop
 8005da4:	0800645b 	.word	0x0800645b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 808b 	beq.w	8005eda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8086 	beq.w	8005eda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005df2:	647a      	str	r2, [r7, #68]	; 0x44
 8005df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e3      	bne.n	8005dce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3314      	adds	r3, #20
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	623b      	str	r3, [r7, #32]
   return(result);
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3314      	adds	r3, #20
 8005e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e3      	bne.n	8005e06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0310 	bic.w	r3, r3, #16
 8005e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e70:	61fa      	str	r2, [r7, #28]
 8005e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	69b9      	ldr	r1, [r7, #24]
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e3      	bne.n	8005e4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f85c 	bl	8005f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e90:	e023      	b.n	8005eda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x4ea>
 8005e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fae9 	bl	8006482 <UART_Transmit_IT>
    return;
 8005eb0:	e014      	b.n	8005edc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00e      	beq.n	8005edc <HAL_UART_IRQHandler+0x514>
 8005ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d008      	beq.n	8005edc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fb29 	bl	8006522 <UART_EndTransmit_IT>
    return;
 8005ed0:	e004      	b.n	8005edc <HAL_UART_IRQHandler+0x514>
    return;
 8005ed2:	bf00      	nop
 8005ed4:	e002      	b.n	8005edc <HAL_UART_IRQHandler+0x514>
      return;
 8005ed6:	bf00      	nop
 8005ed8:	e000      	b.n	8005edc <HAL_UART_IRQHandler+0x514>
      return;
 8005eda:	bf00      	nop
  }
}
 8005edc:	37e8      	adds	r7, #232	; 0xe8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop

08005ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b090      	sub	sp, #64	; 0x40
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d137      	bne.n	8005fec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7e:	2200      	movs	r2, #0
 8005f80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3314      	adds	r3, #20
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	623b      	str	r3, [r7, #32]
   return(result);
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3314      	adds	r3, #20
 8005fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa2:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e5      	bne.n	8005f82 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	330c      	adds	r3, #12
 8005fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd6:	61fa      	str	r2, [r7, #28]
 8005fd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	69b9      	ldr	r1, [r7, #24]
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e5      	bne.n	8005fb6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fea:	e002      	b.n	8005ff2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005fec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005fee:	f7ff ff79 	bl	8005ee4 <HAL_UART_TxCpltCallback>
}
 8005ff2:	bf00      	nop
 8005ff4:	3740      	adds	r7, #64	; 0x40
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f7ff ff75 	bl	8005ef8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800600e:	bf00      	nop
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b09c      	sub	sp, #112	; 0x70
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d172      	bne.n	8006118 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006034:	2200      	movs	r2, #0
 8006036:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800604e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	330c      	adds	r3, #12
 8006056:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006058:	65ba      	str	r2, [r7, #88]	; 0x58
 800605a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800605e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e5      	bne.n	8006038 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3314      	adds	r3, #20
 8006072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	667b      	str	r3, [r7, #100]	; 0x64
 8006084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3314      	adds	r3, #20
 800608a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800608c:	647a      	str	r2, [r7, #68]	; 0x44
 800608e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800609a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e5      	bne.n	800606c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3314      	adds	r3, #20
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	623b      	str	r3, [r7, #32]
   return(result);
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b6:	663b      	str	r3, [r7, #96]	; 0x60
 80060b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3314      	adds	r3, #20
 80060be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060c0:	633a      	str	r2, [r7, #48]	; 0x30
 80060c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e5      	bne.n	80060a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d119      	bne.n	8006118 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	330c      	adds	r3, #12
 80060ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0310 	bic.w	r3, r3, #16
 80060fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006104:	61fa      	str	r2, [r7, #28]
 8006106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	69b9      	ldr	r1, [r7, #24]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	617b      	str	r3, [r7, #20]
   return(result);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e5      	bne.n	80060e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	2b01      	cmp	r3, #1
 800611e:	d106      	bne.n	800612e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006122:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006124:	4619      	mov	r1, r3
 8006126:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006128:	f7ff ff0e 	bl	8005f48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800612c:	e002      	b.n	8006134 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800612e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006130:	f7ff feec 	bl	8005f0c <HAL_UART_RxCpltCallback>
}
 8006134:	bf00      	nop
 8006136:	3770      	adds	r7, #112	; 0x70
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614e:	2b01      	cmp	r3, #1
 8006150:	d108      	bne.n	8006164 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	b29b      	uxth	r3, r3
 800615a:	4619      	mov	r1, r3
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff fef3 	bl	8005f48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006162:	e002      	b.n	800616a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7ff fedb 	bl	8005f20 <HAL_UART_RxHalfCpltCallback>
}
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618e:	2b80      	cmp	r3, #128	; 0x80
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b21      	cmp	r3, #33	; 0x21
 80061a4:	d108      	bne.n	80061b8 <UART_DMAError+0x46>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2200      	movs	r2, #0
 80061b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80061b2:	68b8      	ldr	r0, [r7, #8]
 80061b4:	f000 f8c6 	bl	8006344 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	bf0c      	ite	eq
 80061c6:	2301      	moveq	r3, #1
 80061c8:	2300      	movne	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b22      	cmp	r3, #34	; 0x22
 80061d8:	d108      	bne.n	80061ec <UART_DMAError+0x7a>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2200      	movs	r2, #0
 80061e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80061e6:	68b8      	ldr	r0, [r7, #8]
 80061e8:	f000 f8d4 	bl	8006394 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	f043 0210 	orr.w	r2, r3, #16
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061f8:	68b8      	ldr	r0, [r7, #8]
 80061fa:	f7ff fe9b 	bl	8005f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b098      	sub	sp, #96	; 0x60
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	88fa      	ldrh	r2, [r7, #6]
 8006220:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2222      	movs	r2, #34	; 0x22
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	4a40      	ldr	r2, [pc, #256]	; (8006338 <UART_Start_Receive_DMA+0x130>)
 8006236:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	4a3f      	ldr	r2, [pc, #252]	; (800633c <UART_Start_Receive_DMA+0x134>)
 800623e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	4a3e      	ldr	r2, [pc, #248]	; (8006340 <UART_Start_Receive_DMA+0x138>)
 8006246:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	2200      	movs	r2, #0
 800624e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006250:	f107 0308 	add.w	r3, r7, #8
 8006254:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3304      	adds	r3, #4
 8006260:	4619      	mov	r1, r3
 8006262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	f7fb ffba 	bl	80021e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d019      	beq.n	80062c6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	330c      	adds	r3, #12
 80062b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80062b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80062b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80062c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	657b      	str	r3, [r7, #84]	; 0x54
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3314      	adds	r3, #20
 80062e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80062ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e5      	bne.n	80062c6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3314      	adds	r3, #20
 8006300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	617b      	str	r3, [r7, #20]
   return(result);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006310:	653b      	str	r3, [r7, #80]	; 0x50
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3314      	adds	r3, #20
 8006318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800631a:	627a      	str	r2, [r7, #36]	; 0x24
 800631c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	6a39      	ldr	r1, [r7, #32]
 8006320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	61fb      	str	r3, [r7, #28]
   return(result);
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e5      	bne.n	80062fa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3760      	adds	r7, #96	; 0x60
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	08006017 	.word	0x08006017
 800633c:	0800613d 	.word	0x0800613d
 8006340:	08006173 	.word	0x08006173

08006344 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006344:	b480      	push	{r7}
 8006346:	b089      	sub	sp, #36	; 0x24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	60bb      	str	r3, [r7, #8]
   return(result);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	330c      	adds	r3, #12
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	61ba      	str	r2, [r7, #24]
 800636e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6979      	ldr	r1, [r7, #20]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	613b      	str	r3, [r7, #16]
   return(result);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e5      	bne.n	800634c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006388:	bf00      	nop
 800638a:	3724      	adds	r7, #36	; 0x24
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b095      	sub	sp, #84	; 0x54
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063bc:	643a      	str	r2, [r7, #64]	; 0x40
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e5      	bne.n	800639c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3314      	adds	r3, #20
 80063ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e5      	bne.n	80063d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	2b01      	cmp	r3, #1
 800640a:	d119      	bne.n	8006440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	60bb      	str	r3, [r7, #8]
   return(result);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	647b      	str	r3, [r7, #68]	; 0x44
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	330c      	adds	r3, #12
 800642a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800642c:	61ba      	str	r2, [r7, #24]
 800642e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6979      	ldr	r1, [r7, #20]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	613b      	str	r3, [r7, #16]
   return(result);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e5      	bne.n	800640c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800644e:	bf00      	nop
 8006450:	3754      	adds	r7, #84	; 0x54
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff fd5d 	bl	8005f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b21      	cmp	r3, #33	; 0x21
 8006494:	d13e      	bne.n	8006514 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649e:	d114      	bne.n	80064ca <UART_Transmit_IT+0x48>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d110      	bne.n	80064ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	1c9a      	adds	r2, r3, #2
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	621a      	str	r2, [r3, #32]
 80064c8:	e008      	b.n	80064dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	1c59      	adds	r1, r3, #1
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6211      	str	r1, [r2, #32]
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	4619      	mov	r1, r3
 80064ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10f      	bne.n	8006510 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800650e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e000      	b.n	8006516 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006538:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fcce 	bl	8005ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b08c      	sub	sp, #48	; 0x30
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b22      	cmp	r3, #34	; 0x22
 8006564:	f040 80ab 	bne.w	80066be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006570:	d117      	bne.n	80065a2 <UART_Receive_IT+0x50>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d113      	bne.n	80065a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800657a:	2300      	movs	r3, #0
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b29b      	uxth	r3, r3
 800658c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006590:	b29a      	uxth	r2, r3
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	1c9a      	adds	r2, r3, #2
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	629a      	str	r2, [r3, #40]	; 0x28
 80065a0:	e026      	b.n	80065f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b4:	d007      	beq.n	80065c6 <UART_Receive_IT+0x74>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <UART_Receive_IT+0x82>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e008      	b.n	80065e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4619      	mov	r1, r3
 80065fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006600:	2b00      	cmp	r3, #0
 8006602:	d15a      	bne.n	80066ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0220 	bic.w	r2, r2, #32
 8006612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	2b01      	cmp	r3, #1
 8006642:	d135      	bne.n	80066b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	613b      	str	r3, [r7, #16]
   return(result);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f023 0310 	bic.w	r3, r3, #16
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	330c      	adds	r3, #12
 8006668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666a:	623a      	str	r2, [r7, #32]
 800666c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	69f9      	ldr	r1, [r7, #28]
 8006670:	6a3a      	ldr	r2, [r7, #32]
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	61bb      	str	r3, [r7, #24]
   return(result);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b10      	cmp	r3, #16
 800668a:	d10a      	bne.n	80066a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff fc4d 	bl	8005f48 <HAL_UARTEx_RxEventCallback>
 80066ae:	e002      	b.n	80066b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff fc2b 	bl	8005f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e002      	b.n	80066c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e000      	b.n	80066c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80066be:	2302      	movs	r3, #2
  }
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3730      	adds	r7, #48	; 0x30
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066cc:	b0c0      	sub	sp, #256	; 0x100
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	68d9      	ldr	r1, [r3, #12]
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	ea40 0301 	orr.w	r3, r0, r1
 80066f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	431a      	orrs	r2, r3
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	431a      	orrs	r2, r3
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006720:	f021 010c 	bic.w	r1, r1, #12
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800672e:	430b      	orrs	r3, r1
 8006730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800673e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006742:	6999      	ldr	r1, [r3, #24]
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	ea40 0301 	orr.w	r3, r0, r1
 800674e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4b8f      	ldr	r3, [pc, #572]	; (8006994 <UART_SetConfig+0x2cc>)
 8006758:	429a      	cmp	r2, r3
 800675a:	d005      	beq.n	8006768 <UART_SetConfig+0xa0>
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b8d      	ldr	r3, [pc, #564]	; (8006998 <UART_SetConfig+0x2d0>)
 8006764:	429a      	cmp	r2, r3
 8006766:	d104      	bne.n	8006772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006768:	f7fe fdd6 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 800676c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006770:	e003      	b.n	800677a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006772:	f7fe fdbd 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8006776:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006784:	f040 810c 	bne.w	80069a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800678c:	2200      	movs	r2, #0
 800678e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006792:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	1891      	adds	r1, r2, r2
 80067a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80067a2:	415b      	adcs	r3, r3
 80067a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067aa:	4621      	mov	r1, r4
 80067ac:	eb12 0801 	adds.w	r8, r2, r1
 80067b0:	4629      	mov	r1, r5
 80067b2:	eb43 0901 	adc.w	r9, r3, r1
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ca:	4690      	mov	r8, r2
 80067cc:	4699      	mov	r9, r3
 80067ce:	4623      	mov	r3, r4
 80067d0:	eb18 0303 	adds.w	r3, r8, r3
 80067d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067d8:	462b      	mov	r3, r5
 80067da:	eb49 0303 	adc.w	r3, r9, r3
 80067de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067f6:	460b      	mov	r3, r1
 80067f8:	18db      	adds	r3, r3, r3
 80067fa:	653b      	str	r3, [r7, #80]	; 0x50
 80067fc:	4613      	mov	r3, r2
 80067fe:	eb42 0303 	adc.w	r3, r2, r3
 8006802:	657b      	str	r3, [r7, #84]	; 0x54
 8006804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800680c:	f7f9 fd98 	bl	8000340 <__aeabi_uldivmod>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4b61      	ldr	r3, [pc, #388]	; (800699c <UART_SetConfig+0x2d4>)
 8006816:	fba3 2302 	umull	r2, r3, r3, r2
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	011c      	lsls	r4, r3, #4
 800681e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006822:	2200      	movs	r2, #0
 8006824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006828:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800682c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006830:	4642      	mov	r2, r8
 8006832:	464b      	mov	r3, r9
 8006834:	1891      	adds	r1, r2, r2
 8006836:	64b9      	str	r1, [r7, #72]	; 0x48
 8006838:	415b      	adcs	r3, r3
 800683a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800683c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006840:	4641      	mov	r1, r8
 8006842:	eb12 0a01 	adds.w	sl, r2, r1
 8006846:	4649      	mov	r1, r9
 8006848:	eb43 0b01 	adc.w	fp, r3, r1
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800685c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006860:	4692      	mov	sl, r2
 8006862:	469b      	mov	fp, r3
 8006864:	4643      	mov	r3, r8
 8006866:	eb1a 0303 	adds.w	r3, sl, r3
 800686a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800686e:	464b      	mov	r3, r9
 8006870:	eb4b 0303 	adc.w	r3, fp, r3
 8006874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006884:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800688c:	460b      	mov	r3, r1
 800688e:	18db      	adds	r3, r3, r3
 8006890:	643b      	str	r3, [r7, #64]	; 0x40
 8006892:	4613      	mov	r3, r2
 8006894:	eb42 0303 	adc.w	r3, r2, r3
 8006898:	647b      	str	r3, [r7, #68]	; 0x44
 800689a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800689e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068a2:	f7f9 fd4d 	bl	8000340 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4611      	mov	r1, r2
 80068ac:	4b3b      	ldr	r3, [pc, #236]	; (800699c <UART_SetConfig+0x2d4>)
 80068ae:	fba3 2301 	umull	r2, r3, r3, r1
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	2264      	movs	r2, #100	; 0x64
 80068b6:	fb02 f303 	mul.w	r3, r2, r3
 80068ba:	1acb      	subs	r3, r1, r3
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80068c2:	4b36      	ldr	r3, [pc, #216]	; (800699c <UART_SetConfig+0x2d4>)
 80068c4:	fba3 2302 	umull	r2, r3, r3, r2
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068d0:	441c      	add	r4, r3
 80068d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068e4:	4642      	mov	r2, r8
 80068e6:	464b      	mov	r3, r9
 80068e8:	1891      	adds	r1, r2, r2
 80068ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80068ec:	415b      	adcs	r3, r3
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068f4:	4641      	mov	r1, r8
 80068f6:	1851      	adds	r1, r2, r1
 80068f8:	6339      	str	r1, [r7, #48]	; 0x30
 80068fa:	4649      	mov	r1, r9
 80068fc:	414b      	adcs	r3, r1
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800690c:	4659      	mov	r1, fp
 800690e:	00cb      	lsls	r3, r1, #3
 8006910:	4651      	mov	r1, sl
 8006912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006916:	4651      	mov	r1, sl
 8006918:	00ca      	lsls	r2, r1, #3
 800691a:	4610      	mov	r0, r2
 800691c:	4619      	mov	r1, r3
 800691e:	4603      	mov	r3, r0
 8006920:	4642      	mov	r2, r8
 8006922:	189b      	adds	r3, r3, r2
 8006924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006928:	464b      	mov	r3, r9
 800692a:	460a      	mov	r2, r1
 800692c:	eb42 0303 	adc.w	r3, r2, r3
 8006930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006940:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006948:	460b      	mov	r3, r1
 800694a:	18db      	adds	r3, r3, r3
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
 800694e:	4613      	mov	r3, r2
 8006950:	eb42 0303 	adc.w	r3, r2, r3
 8006954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800695a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800695e:	f7f9 fcef 	bl	8000340 <__aeabi_uldivmod>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4b0d      	ldr	r3, [pc, #52]	; (800699c <UART_SetConfig+0x2d4>)
 8006968:	fba3 1302 	umull	r1, r3, r3, r2
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	2164      	movs	r1, #100	; 0x64
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	3332      	adds	r3, #50	; 0x32
 800697a:	4a08      	ldr	r2, [pc, #32]	; (800699c <UART_SetConfig+0x2d4>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	f003 0207 	and.w	r2, r3, #7
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4422      	add	r2, r4
 800698e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006990:	e106      	b.n	8006ba0 <UART_SetConfig+0x4d8>
 8006992:	bf00      	nop
 8006994:	40011000 	.word	0x40011000
 8006998:	40011400 	.word	0x40011400
 800699c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80069ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80069b2:	4642      	mov	r2, r8
 80069b4:	464b      	mov	r3, r9
 80069b6:	1891      	adds	r1, r2, r2
 80069b8:	6239      	str	r1, [r7, #32]
 80069ba:	415b      	adcs	r3, r3
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
 80069be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069c2:	4641      	mov	r1, r8
 80069c4:	1854      	adds	r4, r2, r1
 80069c6:	4649      	mov	r1, r9
 80069c8:	eb43 0501 	adc.w	r5, r3, r1
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	00eb      	lsls	r3, r5, #3
 80069d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069da:	00e2      	lsls	r2, r4, #3
 80069dc:	4614      	mov	r4, r2
 80069de:	461d      	mov	r5, r3
 80069e0:	4643      	mov	r3, r8
 80069e2:	18e3      	adds	r3, r4, r3
 80069e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069e8:	464b      	mov	r3, r9
 80069ea:	eb45 0303 	adc.w	r3, r5, r3
 80069ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a0e:	4629      	mov	r1, r5
 8006a10:	008b      	lsls	r3, r1, #2
 8006a12:	4621      	mov	r1, r4
 8006a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a18:	4621      	mov	r1, r4
 8006a1a:	008a      	lsls	r2, r1, #2
 8006a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a20:	f7f9 fc8e 	bl	8000340 <__aeabi_uldivmod>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4b60      	ldr	r3, [pc, #384]	; (8006bac <UART_SetConfig+0x4e4>)
 8006a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	011c      	lsls	r4, r3, #4
 8006a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a44:	4642      	mov	r2, r8
 8006a46:	464b      	mov	r3, r9
 8006a48:	1891      	adds	r1, r2, r2
 8006a4a:	61b9      	str	r1, [r7, #24]
 8006a4c:	415b      	adcs	r3, r3
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a54:	4641      	mov	r1, r8
 8006a56:	1851      	adds	r1, r2, r1
 8006a58:	6139      	str	r1, [r7, #16]
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	414b      	adcs	r3, r1
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	00cb      	lsls	r3, r1, #3
 8006a70:	4651      	mov	r1, sl
 8006a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a76:	4651      	mov	r1, sl
 8006a78:	00ca      	lsls	r2, r1, #3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4642      	mov	r2, r8
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a88:	464b      	mov	r3, r9
 8006a8a:	460a      	mov	r2, r1
 8006a8c:	eb42 0303 	adc.w	r3, r2, r3
 8006a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006aac:	4649      	mov	r1, r9
 8006aae:	008b      	lsls	r3, r1, #2
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ab6:	4641      	mov	r1, r8
 8006ab8:	008a      	lsls	r2, r1, #2
 8006aba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006abe:	f7f9 fc3f 	bl	8000340 <__aeabi_uldivmod>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4b38      	ldr	r3, [pc, #224]	; (8006bac <UART_SetConfig+0x4e4>)
 8006aca:	fba3 2301 	umull	r2, r3, r3, r1
 8006ace:	095b      	lsrs	r3, r3, #5
 8006ad0:	2264      	movs	r2, #100	; 0x64
 8006ad2:	fb02 f303 	mul.w	r3, r2, r3
 8006ad6:	1acb      	subs	r3, r1, r3
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	3332      	adds	r3, #50	; 0x32
 8006adc:	4a33      	ldr	r2, [pc, #204]	; (8006bac <UART_SetConfig+0x4e4>)
 8006ade:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ae8:	441c      	add	r4, r3
 8006aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aee:	2200      	movs	r2, #0
 8006af0:	673b      	str	r3, [r7, #112]	; 0x70
 8006af2:	677a      	str	r2, [r7, #116]	; 0x74
 8006af4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006af8:	4642      	mov	r2, r8
 8006afa:	464b      	mov	r3, r9
 8006afc:	1891      	adds	r1, r2, r2
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	415b      	adcs	r3, r3
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b08:	4641      	mov	r1, r8
 8006b0a:	1851      	adds	r1, r2, r1
 8006b0c:	6039      	str	r1, [r7, #0]
 8006b0e:	4649      	mov	r1, r9
 8006b10:	414b      	adcs	r3, r1
 8006b12:	607b      	str	r3, [r7, #4]
 8006b14:	f04f 0200 	mov.w	r2, #0
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b20:	4659      	mov	r1, fp
 8006b22:	00cb      	lsls	r3, r1, #3
 8006b24:	4651      	mov	r1, sl
 8006b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b2a:	4651      	mov	r1, sl
 8006b2c:	00ca      	lsls	r2, r1, #3
 8006b2e:	4610      	mov	r0, r2
 8006b30:	4619      	mov	r1, r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	4642      	mov	r2, r8
 8006b36:	189b      	adds	r3, r3, r2
 8006b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	460a      	mov	r2, r1
 8006b3e:	eb42 0303 	adc.w	r3, r2, r3
 8006b42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b4e:	667a      	str	r2, [r7, #100]	; 0x64
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	008b      	lsls	r3, r1, #2
 8006b60:	4641      	mov	r1, r8
 8006b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b66:	4641      	mov	r1, r8
 8006b68:	008a      	lsls	r2, r1, #2
 8006b6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b6e:	f7f9 fbe7 	bl	8000340 <__aeabi_uldivmod>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <UART_SetConfig+0x4e4>)
 8006b78:	fba3 1302 	umull	r1, r3, r3, r2
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	2164      	movs	r1, #100	; 0x64
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	3332      	adds	r3, #50	; 0x32
 8006b8a:	4a08      	ldr	r2, [pc, #32]	; (8006bac <UART_SetConfig+0x4e4>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	f003 020f 	and.w	r2, r3, #15
 8006b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4422      	add	r2, r4
 8006b9e:	609a      	str	r2, [r3, #8]
}
 8006ba0:	bf00      	nop
 8006ba2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bac:	51eb851f 	.word	0x51eb851f

08006bb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f043 0201 	orr.w	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f023 0201 	bic.w	r2, r3, #1
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a13      	ldr	r2, [pc, #76]	; (8006c58 <USB_FlushTxFifo+0x64>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d901      	bls.n	8006c14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e01b      	b.n	8006c4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	daf2      	bge.n	8006c02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	019b      	lsls	r3, r3, #6
 8006c24:	f043 0220 	orr.w	r2, r3, #32
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4a08      	ldr	r2, [pc, #32]	; (8006c58 <USB_FlushTxFifo+0x64>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d901      	bls.n	8006c3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e006      	b.n	8006c4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d0f0      	beq.n	8006c2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	00030d40 	.word	0x00030d40

08006c5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a11      	ldr	r2, [pc, #68]	; (8006cb8 <USB_FlushRxFifo+0x5c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d901      	bls.n	8006c7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e018      	b.n	8006cac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	daf2      	bge.n	8006c68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2210      	movs	r2, #16
 8006c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4a08      	ldr	r2, [pc, #32]	; (8006cb8 <USB_FlushRxFifo+0x5c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d901      	bls.n	8006c9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e006      	b.n	8006cac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0310 	and.w	r3, r3, #16
 8006ca6:	2b10      	cmp	r3, #16
 8006ca8:	d0f0      	beq.n	8006c8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	00030d40 	.word	0x00030d40

08006cbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b08b      	sub	sp, #44	; 0x2c
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	089b      	lsrs	r3, r3, #2
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	e014      	b.n	8006d12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	3301      	adds	r3, #1
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	3301      	adds	r3, #1
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	623b      	str	r3, [r7, #32]
 8006d12:	6a3a      	ldr	r2, [r7, #32]
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d3e6      	bcc.n	8006ce8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d1a:	8bfb      	ldrh	r3, [r7, #30]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01e      	beq.n	8006d5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f107 0310 	add.w	r3, r7, #16
 8006d30:	6812      	ldr	r2, [r2, #0]
 8006d32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	701a      	strb	r2, [r3, #0]
      i++;
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	3301      	adds	r3, #1
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d52:	8bfb      	ldrh	r3, [r7, #30]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d58:	8bfb      	ldrh	r3, [r7, #30]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1ea      	bne.n	8006d34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	372c      	adds	r7, #44	; 0x2c
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4013      	ands	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d84:	68fb      	ldr	r3, [r7, #12]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b085      	sub	sp, #20
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dcc:	f023 0303 	bic.w	r3, r3, #3
 8006dd0:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	68f9      	ldr	r1, [r7, #12]
 8006de2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006de6:	4313      	orrs	r3, r2
 8006de8:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d107      	bne.n	8006e00 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006df6:	461a      	mov	r2, r3
 8006df8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006dfc:	6053      	str	r3, [r2, #4]
 8006dfe:	e009      	b.n	8006e14 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d106      	bne.n	8006e14 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f241 7370 	movw	r3, #6000	; 0x1770
 8006e12:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b085      	sub	sp, #20
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	b29b      	uxth	r3, r3
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b089      	sub	sp, #36	; 0x24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e54:	78fb      	ldrb	r3, [r7, #3]
 8006e56:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	0c9b      	lsrs	r3, r3, #18
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	0fdb      	lsrs	r3, r3, #31
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d104      	bne.n	8006e9e <USB_HC_Halt+0x5a>
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e0c8      	b.n	8007030 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <USB_HC_Halt+0x66>
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d163      	bne.n	8006f72 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ec8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f040 80ab 	bne.w	800702e <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d133      	bne.n	8006f4c <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f02:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f22:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f30:	d81d      	bhi.n	8006f6e <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f48:	d0ec      	beq.n	8006f24 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f4a:	e070      	b.n	800702e <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f6a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f6c:	e05f      	b.n	800702e <USB_HC_Halt+0x1ea>
            break;
 8006f6e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f70:	e05d      	b.n	800702e <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	0151      	lsls	r1, r2, #5
 8006f84:	69fa      	ldr	r2, [r7, #28]
 8006f86:	440a      	add	r2, r1
 8006f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f90:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d133      	bne.n	800700a <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fc0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fe0:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fee:	d81d      	bhi.n	800702c <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007006:	d0ec      	beq.n	8006fe2 <USB_HC_Halt+0x19e>
 8007008:	e011      	b.n	800702e <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	e000      	b.n	800702e <USB_HC_Halt+0x1ea>
          break;
 800702c:	bf00      	nop
    }
  }

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3724      	adds	r7, #36	; 0x24
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff fdbe 	bl	8006bd2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007056:	2110      	movs	r1, #16
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff fdcb 	bl	8006bf4 <USB_FlushTxFifo>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff fdf7 	bl	8006c5c <USB_FlushRxFifo>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007078:	2300      	movs	r3, #0
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	e01f      	b.n	80070be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	4413      	add	r3, r2
 8007086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007094:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800709c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b2:	461a      	mov	r2, r3
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	3301      	adds	r3, #1
 80070bc:	61bb      	str	r3, [r7, #24]
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b0f      	cmp	r3, #15
 80070c2:	d9dc      	bls.n	800707e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80070c4:	2300      	movs	r3, #0
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	e034      	b.n	8007134 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fe:	461a      	mov	r2, r3
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007110:	d80c      	bhi.n	800712c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	4413      	add	r3, r2
 800711a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007128:	d0ec      	beq.n	8007104 <USB_StopHost+0xc8>
 800712a:	e000      	b.n	800712e <USB_StopHost+0xf2>
        break;
 800712c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	3301      	adds	r3, #1
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b0f      	cmp	r3, #15
 8007138:	d9c7      	bls.n	80070ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007140:	461a      	mov	r2, r3
 8007142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007146:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800714e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff fd2d 	bl	8006bb0 <USB_EnableGlobalInt>

  return ret;
 8007156:	7ffb      	ldrb	r3, [r7, #31]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3720      	adds	r7, #32
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f804 	bl	8007184 <USBH_HandleSof>
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b0b      	cmp	r3, #11
 8007194:	d10a      	bne.n	80071ac <USBH_HandleSof+0x28>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	4798      	blx	r3
  }
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80071d8:	2300      	movs	r3, #0
 80071da:	2200      	movs	r2, #0
 80071dc:	f000 f9c8 	bl	8007570 <osMessageQueuePut>
#endif
#endif

  return;
 80071e0:	bf00      	nop
}
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80071f8:	bf00      	nop
}
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007238:	2300      	movs	r3, #0
 800723a:	2200      	movs	r2, #0
 800723c:	f000 f998 	bl	8007570 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f002 feb6 	bl	8009fdc <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	791b      	ldrb	r3, [r3, #4]
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f830 	bl	80072dc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	795b      	ldrb	r3, [r3, #5]
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f82a 	bl	80072dc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800729c:	2300      	movs	r3, #0
 800729e:	2200      	movs	r2, #0
 80072a0:	f000 f966 	bl	8007570 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072ca:	2300      	movs	r3, #0
 80072cc:	2200      	movs	r2, #0
 80072ce:	f000 f94f 	bl	8007570 <osMessageQueuePut>
#endif

  return USBH_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	2b0f      	cmp	r3, #15
 80072ec:	d80d      	bhi.n	800730a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	33e0      	adds	r3, #224	; 0xe0
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	33e0      	adds	r3, #224	; 0xe0
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <__NVIC_SetPriority>:
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	4603      	mov	r3, r0
 8007320:	6039      	str	r1, [r7, #0]
 8007322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007328:	2b00      	cmp	r3, #0
 800732a:	db0a      	blt.n	8007342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	b2da      	uxtb	r2, r3
 8007330:	490c      	ldr	r1, [pc, #48]	; (8007364 <__NVIC_SetPriority+0x4c>)
 8007332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007336:	0112      	lsls	r2, r2, #4
 8007338:	b2d2      	uxtb	r2, r2
 800733a:	440b      	add	r3, r1
 800733c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007340:	e00a      	b.n	8007358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	b2da      	uxtb	r2, r3
 8007346:	4908      	ldr	r1, [pc, #32]	; (8007368 <__NVIC_SetPriority+0x50>)
 8007348:	79fb      	ldrb	r3, [r7, #7]
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	3b04      	subs	r3, #4
 8007350:	0112      	lsls	r2, r2, #4
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	440b      	add	r3, r1
 8007356:	761a      	strb	r2, [r3, #24]
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	e000e100 	.word	0xe000e100
 8007368:	e000ed00 	.word	0xe000ed00

0800736c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007370:	2100      	movs	r1, #0
 8007372:	f06f 0004 	mvn.w	r0, #4
 8007376:	f7ff ffcf 	bl	8007318 <__NVIC_SetPriority>
#endif
}
 800737a:	bf00      	nop
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007386:	f3ef 8305 	mrs	r3, IPSR
 800738a:	603b      	str	r3, [r7, #0]
  return(result);
 800738c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007392:	f06f 0305 	mvn.w	r3, #5
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	e00c      	b.n	80073b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800739a:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <osKernelInitialize+0x44>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d105      	bne.n	80073ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073a2:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <osKernelInitialize+0x44>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	e002      	b.n	80073b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073b4:	687b      	ldr	r3, [r7, #4]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20004764 	.word	0x20004764

080073c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ce:	f3ef 8305 	mrs	r3, IPSR
 80073d2:	603b      	str	r3, [r7, #0]
  return(result);
 80073d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80073da:	f06f 0305 	mvn.w	r3, #5
 80073de:	607b      	str	r3, [r7, #4]
 80073e0:	e010      	b.n	8007404 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073e2:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <osKernelStart+0x48>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d109      	bne.n	80073fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073ea:	f7ff ffbf 	bl	800736c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073ee:	4b08      	ldr	r3, [pc, #32]	; (8007410 <osKernelStart+0x48>)
 80073f0:	2202      	movs	r2, #2
 80073f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073f4:	f001 f8c6 	bl	8008584 <vTaskStartScheduler>
      stat = osOK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	607b      	str	r3, [r7, #4]
 80073fc:	e002      	b.n	8007404 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007402:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007404:	687b      	ldr	r3, [r7, #4]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20004764 	.word	0x20004764

08007414 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	; 0x38
 8007418:	af04      	add	r7, sp, #16
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007420:	2300      	movs	r3, #0
 8007422:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007424:	f3ef 8305 	mrs	r3, IPSR
 8007428:	617b      	str	r3, [r7, #20]
  return(result);
 800742a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800742c:	2b00      	cmp	r3, #0
 800742e:	d17e      	bne.n	800752e <osThreadNew+0x11a>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d07b      	beq.n	800752e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007436:	2380      	movs	r3, #128	; 0x80
 8007438:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800743a:	2318      	movs	r3, #24
 800743c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007446:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d045      	beq.n	80074da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <osThreadNew+0x48>
        name = attr->name;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <osThreadNew+0x6e>
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	2b38      	cmp	r3, #56	; 0x38
 8007474:	d805      	bhi.n	8007482 <osThreadNew+0x6e>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <osThreadNew+0x72>
        return (NULL);
 8007482:	2300      	movs	r3, #0
 8007484:	e054      	b.n	8007530 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	089b      	lsrs	r3, r3, #2
 8007494:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00e      	beq.n	80074bc <osThreadNew+0xa8>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	2b5b      	cmp	r3, #91	; 0x5b
 80074a4:	d90a      	bls.n	80074bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d006      	beq.n	80074bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <osThreadNew+0xa8>
        mem = 1;
 80074b6:	2301      	movs	r3, #1
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e010      	b.n	80074de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10c      	bne.n	80074de <osThreadNew+0xca>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d108      	bne.n	80074de <osThreadNew+0xca>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <osThreadNew+0xca>
          mem = 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
 80074d8:	e001      	b.n	80074de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d110      	bne.n	8007506 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074ec:	9202      	str	r2, [sp, #8]
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fe6c 	bl	80081d8 <xTaskCreateStatic>
 8007500:	4603      	mov	r3, r0
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	e013      	b.n	800752e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d110      	bne.n	800752e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	b29a      	uxth	r2, r3
 8007510:	f107 0310 	add.w	r3, r7, #16
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 feb7 	bl	8008292 <xTaskCreate>
 8007524:	4603      	mov	r3, r0
 8007526:	2b01      	cmp	r3, #1
 8007528:	d001      	beq.n	800752e <osThreadNew+0x11a>
            hTask = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800752e:	693b      	ldr	r3, [r7, #16]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3728      	adds	r7, #40	; 0x28
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007540:	f3ef 8305 	mrs	r3, IPSR
 8007544:	60bb      	str	r3, [r7, #8]
  return(result);
 8007546:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <osDelay+0x1c>
    stat = osErrorISR;
 800754c:	f06f 0305 	mvn.w	r3, #5
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	e007      	b.n	8007564 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <osDelay+0x2c>
      vTaskDelay(ticks);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 ffdc 	bl	800851c <vTaskDelay>
    }
  }

  return (stat);
 8007564:	68fb      	ldr	r3, [r7, #12]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	4613      	mov	r3, r2
 800757e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007584:	2300      	movs	r3, #0
 8007586:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007588:	f3ef 8305 	mrs	r3, IPSR
 800758c:	617b      	str	r3, [r7, #20]
  return(result);
 800758e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007590:	2b00      	cmp	r3, #0
 8007592:	d028      	beq.n	80075e6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d005      	beq.n	80075a6 <osMessageQueuePut+0x36>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <osMessageQueuePut+0x36>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80075a6:	f06f 0303 	mvn.w	r3, #3
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	e038      	b.n	8007620 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80075ae:	2300      	movs	r3, #0
 80075b0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80075b2:	f107 0210 	add.w	r2, r7, #16
 80075b6:	2300      	movs	r3, #0
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	69b8      	ldr	r0, [r7, #24]
 80075bc:	f000 fb22 	bl	8007c04 <xQueueGenericSendFromISR>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d003      	beq.n	80075ce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80075c6:	f06f 0302 	mvn.w	r3, #2
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	e028      	b.n	8007620 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d025      	beq.n	8007620 <osMessageQueuePut+0xb0>
 80075d4:	4b15      	ldr	r3, [pc, #84]	; (800762c <osMessageQueuePut+0xbc>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	e01c      	b.n	8007620 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <osMessageQueuePut+0x82>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d103      	bne.n	80075fa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80075f2:	f06f 0303 	mvn.w	r3, #3
 80075f6:	61fb      	str	r3, [r7, #28]
 80075f8:	e012      	b.n	8007620 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80075fa:	2300      	movs	r3, #0
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	68b9      	ldr	r1, [r7, #8]
 8007600:	69b8      	ldr	r0, [r7, #24]
 8007602:	f000 fa01 	bl	8007a08 <xQueueGenericSend>
 8007606:	4603      	mov	r3, r0
 8007608:	2b01      	cmp	r3, #1
 800760a:	d009      	beq.n	8007620 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007612:	f06f 0301 	mvn.w	r3, #1
 8007616:	61fb      	str	r3, [r7, #28]
 8007618:	e002      	b.n	8007620 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800761a:	f06f 0302 	mvn.w	r3, #2
 800761e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007620:	69fb      	ldr	r3, [r7, #28]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3720      	adds	r7, #32
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	e000ed04 	.word	0xe000ed04

08007630 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4a07      	ldr	r2, [pc, #28]	; (800765c <vApplicationGetIdleTaskMemory+0x2c>)
 8007640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	4a06      	ldr	r2, [pc, #24]	; (8007660 <vApplicationGetIdleTaskMemory+0x30>)
 8007646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2280      	movs	r2, #128	; 0x80
 800764c:	601a      	str	r2, [r3, #0]
}
 800764e:	bf00      	nop
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	20004768 	.word	0x20004768
 8007660:	200047c4 	.word	0x200047c4

08007664 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4a07      	ldr	r2, [pc, #28]	; (8007690 <vApplicationGetTimerTaskMemory+0x2c>)
 8007674:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	4a06      	ldr	r2, [pc, #24]	; (8007694 <vApplicationGetTimerTaskMemory+0x30>)
 800767a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	200049c4 	.word	0x200049c4
 8007694:	20004a20 	.word	0x20004a20

08007698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f103 0208 	add.w	r2, r3, #8
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f103 0208 	add.w	r2, r3, #8
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 0208 	add.w	r2, r3, #8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	601a      	str	r2, [r3, #0]
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007750:	d103      	bne.n	800775a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	e00c      	b.n	8007774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3308      	adds	r3, #8
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	e002      	b.n	8007768 <vListInsert+0x2e>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	d2f6      	bcs.n	8007762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	601a      	str	r2, [r3, #0]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6892      	ldr	r2, [r2, #8]
 80077c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6852      	ldr	r2, [r2, #4]
 80077cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d103      	bne.n	80077e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	1e5a      	subs	r2, r3, #1
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10a      	bne.n	800782a <xQueueGenericReset+0x2a>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	60bb      	str	r3, [r7, #8]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800782a:	f002 f873 	bl	8009914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007836:	68f9      	ldr	r1, [r7, #12]
 8007838:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800783a:	fb01 f303 	mul.w	r3, r1, r3
 800783e:	441a      	add	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785a:	3b01      	subs	r3, #1
 800785c:	68f9      	ldr	r1, [r7, #12]
 800785e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	441a      	add	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	22ff      	movs	r2, #255	; 0xff
 800786e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d114      	bne.n	80078aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01a      	beq.n	80078be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3310      	adds	r3, #16
 800788c:	4618      	mov	r0, r3
 800788e:	f001 f903 	bl	8008a98 <xTaskRemoveFromEventList>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d012      	beq.n	80078be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <xQueueGenericReset+0xcc>)
 800789a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	e009      	b.n	80078be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3310      	adds	r3, #16
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fef2 	bl	8007698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3324      	adds	r3, #36	; 0x24
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff feed 	bl	8007698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078be:	f002 f859 	bl	8009974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078c2:	2301      	movs	r3, #1
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08e      	sub	sp, #56	; 0x38
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10a      	bne.n	80078fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078f6:	bf00      	nop
 80078f8:	e7fe      	b.n	80078f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <xQueueGenericCreateStatic+0x52>
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <xQueueGenericCreateStatic+0x56>
 8007922:	2301      	movs	r3, #1
 8007924:	e000      	b.n	8007928 <xQueueGenericCreateStatic+0x58>
 8007926:	2300      	movs	r3, #0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	623b      	str	r3, [r7, #32]
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d102      	bne.n	800794e <xQueueGenericCreateStatic+0x7e>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <xQueueGenericCreateStatic+0x82>
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <xQueueGenericCreateStatic+0x84>
 8007952:	2300      	movs	r3, #0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	61fb      	str	r3, [r7, #28]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800796e:	2350      	movs	r3, #80	; 0x50
 8007970:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b50      	cmp	r3, #80	; 0x50
 8007976:	d00a      	beq.n	800798e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	61bb      	str	r3, [r7, #24]
}
 800798a:	bf00      	nop
 800798c:	e7fe      	b.n	800798c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800798e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00d      	beq.n	80079b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	4613      	mov	r3, r2
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f805 	bl	80079c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3730      	adds	r7, #48	; 0x30
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d103      	bne.n	80079dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	e002      	b.n	80079e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079ee:	2101      	movs	r1, #1
 80079f0:	69b8      	ldr	r0, [r7, #24]
 80079f2:	f7ff ff05 	bl	8007800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	78fa      	ldrb	r2, [r7, #3]
 80079fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08e      	sub	sp, #56	; 0x38
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10a      	bne.n	8007a3a <xQueueGenericSend+0x32>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a36:	bf00      	nop
 8007a38:	e7fe      	b.n	8007a38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d103      	bne.n	8007a48 <xQueueGenericSend+0x40>
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <xQueueGenericSend+0x44>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e000      	b.n	8007a4e <xQueueGenericSend+0x46>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <xQueueGenericSend+0x60>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d103      	bne.n	8007a76 <xQueueGenericSend+0x6e>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <xQueueGenericSend+0x72>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <xQueueGenericSend+0x74>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <xQueueGenericSend+0x8e>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	623b      	str	r3, [r7, #32]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a96:	f001 f9e3 	bl	8008e60 <xTaskGetSchedulerState>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d102      	bne.n	8007aa6 <xQueueGenericSend+0x9e>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <xQueueGenericSend+0xa2>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <xQueueGenericSend+0xa4>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10a      	bne.n	8007ac6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	61fb      	str	r3, [r7, #28]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ac6:	f001 ff25 	bl	8009914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d302      	bcc.n	8007adc <xQueueGenericSend+0xd4>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d129      	bne.n	8007b30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ae2:	f000 fa0b 	bl	8007efc <prvCopyDataToQueue>
 8007ae6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d010      	beq.n	8007b12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	3324      	adds	r3, #36	; 0x24
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 ffcf 	bl	8008a98 <xTaskRemoveFromEventList>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d013      	beq.n	8007b28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b00:	4b3f      	ldr	r3, [pc, #252]	; (8007c00 <xQueueGenericSend+0x1f8>)
 8007b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	e00a      	b.n	8007b28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d007      	beq.n	8007b28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b18:	4b39      	ldr	r3, [pc, #228]	; (8007c00 <xQueueGenericSend+0x1f8>)
 8007b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b28:	f001 ff24 	bl	8009974 <vPortExitCritical>
				return pdPASS;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e063      	b.n	8007bf8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d103      	bne.n	8007b3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b36:	f001 ff1d 	bl	8009974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e05c      	b.n	8007bf8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d106      	bne.n	8007b52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b44:	f107 0314 	add.w	r3, r7, #20
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 f82f 	bl	8008bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b52:	f001 ff0f 	bl	8009974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b56:	f000 fd7b 	bl	8008650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b5a:	f001 fedb 	bl	8009914 <vPortEnterCritical>
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b64:	b25b      	sxtb	r3, r3
 8007b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b6a:	d103      	bne.n	8007b74 <xQueueGenericSend+0x16c>
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b7a:	b25b      	sxtb	r3, r3
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b80:	d103      	bne.n	8007b8a <xQueueGenericSend+0x182>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b8a:	f001 fef3 	bl	8009974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b8e:	1d3a      	adds	r2, r7, #4
 8007b90:	f107 0314 	add.w	r3, r7, #20
 8007b94:	4611      	mov	r1, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 f81e 	bl	8008bd8 <xTaskCheckForTimeOut>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d124      	bne.n	8007bec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ba4:	f000 faa2 	bl	80080ec <prvIsQueueFull>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d018      	beq.n	8007be0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	3310      	adds	r3, #16
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 ff1e 	bl	80089f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bbe:	f000 fa2d 	bl	800801c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bc2:	f000 fd53 	bl	800866c <xTaskResumeAll>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f47f af7c 	bne.w	8007ac6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007bce:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <xQueueGenericSend+0x1f8>)
 8007bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	e772      	b.n	8007ac6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007be2:	f000 fa1b 	bl	800801c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007be6:	f000 fd41 	bl	800866c <xTaskResumeAll>
 8007bea:	e76c      	b.n	8007ac6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bee:	f000 fa15 	bl	800801c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bf2:	f000 fd3b 	bl	800866c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3738      	adds	r7, #56	; 0x38
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b090      	sub	sp, #64	; 0x40
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c2e:	bf00      	nop
 8007c30:	e7fe      	b.n	8007c30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d103      	bne.n	8007c40 <xQueueGenericSendFromISR+0x3c>
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <xQueueGenericSendFromISR+0x40>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <xQueueGenericSendFromISR+0x42>
 8007c44:	2300      	movs	r3, #0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d103      	bne.n	8007c6e <xQueueGenericSendFromISR+0x6a>
 8007c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <xQueueGenericSendFromISR+0x6e>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <xQueueGenericSendFromISR+0x70>
 8007c72:	2300      	movs	r3, #0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	623b      	str	r3, [r7, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c8e:	f001 ff23 	bl	8009ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c92:	f3ef 8211 	mrs	r2, BASEPRI
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	61fa      	str	r2, [r7, #28]
 8007ca8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007caa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d302      	bcc.n	8007cc0 <xQueueGenericSendFromISR+0xbc>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d12f      	bne.n	8007d20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cd6:	f000 f911 	bl	8007efc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce2:	d112      	bne.n	8007d0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d016      	beq.n	8007d1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cee:	3324      	adds	r3, #36	; 0x24
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fed1 	bl	8008a98 <xTaskRemoveFromEventList>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00e      	beq.n	8007d1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00b      	beq.n	8007d1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	e007      	b.n	8007d1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d0e:	3301      	adds	r3, #1
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	b25a      	sxtb	r2, r3
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d1e:	e001      	b.n	8007d24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d20:	2300      	movs	r3, #0
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d26:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3740      	adds	r7, #64	; 0x40
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08c      	sub	sp, #48	; 0x30
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10a      	bne.n	8007d6c <xQueueReceive+0x30>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	623b      	str	r3, [r7, #32]
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d103      	bne.n	8007d7a <xQueueReceive+0x3e>
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <xQueueReceive+0x42>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e000      	b.n	8007d80 <xQueueReceive+0x44>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <xQueueReceive+0x5e>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	61fb      	str	r3, [r7, #28]
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d9a:	f001 f861 	bl	8008e60 <xTaskGetSchedulerState>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d102      	bne.n	8007daa <xQueueReceive+0x6e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <xQueueReceive+0x72>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e000      	b.n	8007db0 <xQueueReceive+0x74>
 8007dae:	2300      	movs	r3, #0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <xQueueReceive+0x8e>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	61bb      	str	r3, [r7, #24]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dca:	f001 fda3 	bl	8009914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01f      	beq.n	8007e1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dde:	f000 f8f7 	bl	8007fd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	1e5a      	subs	r2, r3, #1
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00f      	beq.n	8007e12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	3310      	adds	r3, #16
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fe4e 	bl	8008a98 <xTaskRemoveFromEventList>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d007      	beq.n	8007e12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e02:	4b3d      	ldr	r3, [pc, #244]	; (8007ef8 <xQueueReceive+0x1bc>)
 8007e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e12:	f001 fdaf 	bl	8009974 <vPortExitCritical>
				return pdPASS;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e069      	b.n	8007eee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d103      	bne.n	8007e28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e20:	f001 fda8 	bl	8009974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e24:	2300      	movs	r3, #0
 8007e26:	e062      	b.n	8007eee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d106      	bne.n	8007e3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e2e:	f107 0310 	add.w	r3, r7, #16
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 feba 	bl	8008bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e3c:	f001 fd9a 	bl	8009974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e40:	f000 fc06 	bl	8008650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e44:	f001 fd66 	bl	8009914 <vPortEnterCritical>
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e4e:	b25b      	sxtb	r3, r3
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e54:	d103      	bne.n	8007e5e <xQueueReceive+0x122>
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e6a:	d103      	bne.n	8007e74 <xQueueReceive+0x138>
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e74:	f001 fd7e 	bl	8009974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e78:	1d3a      	adds	r2, r7, #4
 8007e7a:	f107 0310 	add.w	r3, r7, #16
 8007e7e:	4611      	mov	r1, r2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fea9 	bl	8008bd8 <xTaskCheckForTimeOut>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d123      	bne.n	8007ed4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e8e:	f000 f917 	bl	80080c0 <prvIsQueueEmpty>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d017      	beq.n	8007ec8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	3324      	adds	r3, #36	; 0x24
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fda9 	bl	80089f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea8:	f000 f8b8 	bl	800801c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007eac:	f000 fbde 	bl	800866c <xTaskResumeAll>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d189      	bne.n	8007dca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007eb6:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <xQueueReceive+0x1bc>)
 8007eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	e780      	b.n	8007dca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eca:	f000 f8a7 	bl	800801c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ece:	f000 fbcd 	bl	800866c <xTaskResumeAll>
 8007ed2:	e77a      	b.n	8007dca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed6:	f000 f8a1 	bl	800801c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eda:	f000 fbc7 	bl	800866c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee0:	f000 f8ee 	bl	80080c0 <prvIsQueueEmpty>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f43f af6f 	beq.w	8007dca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007eec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3730      	adds	r7, #48	; 0x30
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	e000ed04 	.word	0xe000ed04

08007efc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10d      	bne.n	8007f36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d14d      	bne.n	8007fbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 ffb8 	bl	8008e9c <xTaskPriorityDisinherit>
 8007f2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	609a      	str	r2, [r3, #8]
 8007f34:	e043      	b.n	8007fbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d119      	bne.n	8007f70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6858      	ldr	r0, [r3, #4]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	461a      	mov	r2, r3
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	f00e ffa6 	bl	8016e98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	441a      	add	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d32b      	bcc.n	8007fbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	605a      	str	r2, [r3, #4]
 8007f6e:	e026      	b.n	8007fbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68d8      	ldr	r0, [r3, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	f00e ff8c 	bl	8016e98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	425b      	negs	r3, r3
 8007f8a:	441a      	add	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d207      	bcs.n	8007fac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	425b      	negs	r3, r3
 8007fa6:	441a      	add	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d105      	bne.n	8007fbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007fc6:	697b      	ldr	r3, [r7, #20]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d018      	beq.n	8008014 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	441a      	add	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d303      	bcc.n	8008004 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68d9      	ldr	r1, [r3, #12]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	461a      	mov	r2, r3
 800800e:	6838      	ldr	r0, [r7, #0]
 8008010:	f00e ff42 	bl	8016e98 <memcpy>
	}
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008024:	f001 fc76 	bl	8009914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800802e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008030:	e011      	b.n	8008056 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	2b00      	cmp	r3, #0
 8008038:	d012      	beq.n	8008060 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3324      	adds	r3, #36	; 0x24
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fd2a 	bl	8008a98 <xTaskRemoveFromEventList>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800804a:	f000 fe27 	bl	8008c9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	3b01      	subs	r3, #1
 8008052:	b2db      	uxtb	r3, r3
 8008054:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800805a:	2b00      	cmp	r3, #0
 800805c:	dce9      	bgt.n	8008032 <prvUnlockQueue+0x16>
 800805e:	e000      	b.n	8008062 <prvUnlockQueue+0x46>
					break;
 8008060:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	22ff      	movs	r2, #255	; 0xff
 8008066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800806a:	f001 fc83 	bl	8009974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800806e:	f001 fc51 	bl	8009914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008078:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800807a:	e011      	b.n	80080a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d012      	beq.n	80080aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3310      	adds	r3, #16
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fd05 	bl	8008a98 <xTaskRemoveFromEventList>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008094:	f000 fe02 	bl	8008c9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	3b01      	subs	r3, #1
 800809c:	b2db      	uxtb	r3, r3
 800809e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dce9      	bgt.n	800807c <prvUnlockQueue+0x60>
 80080a8:	e000      	b.n	80080ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	22ff      	movs	r2, #255	; 0xff
 80080b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080b4:	f001 fc5e 	bl	8009974 <vPortExitCritical>
}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080c8:	f001 fc24 	bl	8009914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	e001      	b.n	80080de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080de:	f001 fc49 	bl	8009974 <vPortExitCritical>

	return xReturn;
 80080e2:	68fb      	ldr	r3, [r7, #12]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080f4:	f001 fc0e 	bl	8009914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008100:	429a      	cmp	r2, r3
 8008102:	d102      	bne.n	800810a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	e001      	b.n	800810e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800810e:	f001 fc31 	bl	8009974 <vPortExitCritical>

	return xReturn;
 8008112:	68fb      	ldr	r3, [r7, #12]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	e014      	b.n	8008156 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800812c:	4a0f      	ldr	r2, [pc, #60]	; (800816c <vQueueAddToRegistry+0x50>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008138:	490c      	ldr	r1, [pc, #48]	; (800816c <vQueueAddToRegistry+0x50>)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008142:	4a0a      	ldr	r2, [pc, #40]	; (800816c <vQueueAddToRegistry+0x50>)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	4413      	add	r3, r2
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800814e:	e006      	b.n	800815e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b07      	cmp	r3, #7
 800815a:	d9e7      	bls.n	800812c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800815c:	bf00      	nop
 800815e:	bf00      	nop
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	20004e20 	.word	0x20004e20

08008170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008180:	f001 fbc8 	bl	8009914 <vPortEnterCritical>
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800818a:	b25b      	sxtb	r3, r3
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008190:	d103      	bne.n	800819a <vQueueWaitForMessageRestricted+0x2a>
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081a0:	b25b      	sxtb	r3, r3
 80081a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081a6:	d103      	bne.n	80081b0 <vQueueWaitForMessageRestricted+0x40>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081b0:	f001 fbe0 	bl	8009974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d106      	bne.n	80081ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	3324      	adds	r3, #36	; 0x24
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fc3b 	bl	8008a40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081ca:	6978      	ldr	r0, [r7, #20]
 80081cc:	f7ff ff26 	bl	800801c <prvUnlockQueue>
	}
 80081d0:	bf00      	nop
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08e      	sub	sp, #56	; 0x38
 80081dc:	af04      	add	r7, sp, #16
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <xTaskCreateStatic+0x2a>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	623b      	str	r3, [r7, #32]
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <xTaskCreateStatic+0x46>
	__asm volatile
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	61fb      	str	r3, [r7, #28]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800821e:	235c      	movs	r3, #92	; 0x5c
 8008220:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b5c      	cmp	r3, #92	; 0x5c
 8008226:	d00a      	beq.n	800823e <xTaskCreateStatic+0x66>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	61bb      	str	r3, [r7, #24]
}
 800823a:	bf00      	nop
 800823c:	e7fe      	b.n	800823c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800823e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01e      	beq.n	8008284 <xTaskCreateStatic+0xac>
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01b      	beq.n	8008284 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008254:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	2202      	movs	r2, #2
 800825a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800825e:	2300      	movs	r3, #0
 8008260:	9303      	str	r3, [sp, #12]
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	9302      	str	r3, [sp, #8]
 8008266:	f107 0314 	add.w	r3, r7, #20
 800826a:	9301      	str	r3, [sp, #4]
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 f850 	bl	800831c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800827c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800827e:	f000 f8dd 	bl	800843c <prvAddNewTaskToReadyList>
 8008282:	e001      	b.n	8008288 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008284:	2300      	movs	r3, #0
 8008286:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008288:	697b      	ldr	r3, [r7, #20]
	}
 800828a:	4618      	mov	r0, r3
 800828c:	3728      	adds	r7, #40	; 0x28
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008292:	b580      	push	{r7, lr}
 8008294:	b08c      	sub	sp, #48	; 0x30
 8008296:	af04      	add	r7, sp, #16
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	603b      	str	r3, [r7, #0]
 800829e:	4613      	mov	r3, r2
 80082a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082a2:	88fb      	ldrh	r3, [r7, #6]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f001 fc56 	bl	8009b58 <pvPortMalloc>
 80082ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00e      	beq.n	80082d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082b4:	205c      	movs	r0, #92	; 0x5c
 80082b6:	f001 fc4f 	bl	8009b58 <pvPortMalloc>
 80082ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	631a      	str	r2, [r3, #48]	; 0x30
 80082c8:	e005      	b.n	80082d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082ca:	6978      	ldr	r0, [r7, #20]
 80082cc:	f001 fd10 	bl	8009cf0 <vPortFree>
 80082d0:	e001      	b.n	80082d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d017      	beq.n	800830c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082e4:	88fa      	ldrh	r2, [r7, #6]
 80082e6:	2300      	movs	r3, #0
 80082e8:	9303      	str	r3, [sp, #12]
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	9302      	str	r3, [sp, #8]
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	68b9      	ldr	r1, [r7, #8]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 f80e 	bl	800831c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008300:	69f8      	ldr	r0, [r7, #28]
 8008302:	f000 f89b 	bl	800843c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008306:	2301      	movs	r3, #1
 8008308:	61bb      	str	r3, [r7, #24]
 800830a:	e002      	b.n	8008312 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800830c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008310:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008312:	69bb      	ldr	r3, [r7, #24]
	}
 8008314:	4618      	mov	r0, r3
 8008316:	3720      	adds	r7, #32
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	461a      	mov	r2, r3
 8008334:	21a5      	movs	r1, #165	; 0xa5
 8008336:	f00e fce7 	bl	8016d08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008344:	3b01      	subs	r3, #1
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	f023 0307 	bic.w	r3, r3, #7
 8008352:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <prvInitialiseNewTask+0x58>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	617b      	str	r3, [r7, #20]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d01f      	beq.n	80083ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800837a:	2300      	movs	r3, #0
 800837c:	61fb      	str	r3, [r7, #28]
 800837e:	e012      	b.n	80083a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	7819      	ldrb	r1, [r3, #0]
 8008388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	4413      	add	r3, r2
 800838e:	3334      	adds	r3, #52	; 0x34
 8008390:	460a      	mov	r2, r1
 8008392:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	4413      	add	r3, r2
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d006      	beq.n	80083ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	3301      	adds	r3, #1
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	2b0f      	cmp	r3, #15
 80083aa:	d9e9      	bls.n	8008380 <prvInitialiseNewTask+0x64>
 80083ac:	e000      	b.n	80083b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80083ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083b8:	e003      	b.n	80083c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c4:	2b37      	cmp	r3, #55	; 0x37
 80083c6:	d901      	bls.n	80083cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083c8:	2337      	movs	r3, #55	; 0x37
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	2200      	movs	r2, #0
 80083dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	3304      	adds	r3, #4
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff f978 	bl	80076d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	3318      	adds	r3, #24
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7ff f973 	bl	80076d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008406:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	2200      	movs	r2, #0
 800840c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	68f9      	ldr	r1, [r7, #12]
 800841a:	69b8      	ldr	r0, [r7, #24]
 800841c:	f001 f94e 	bl	80096bc <pxPortInitialiseStack>
 8008420:	4602      	mov	r2, r0
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008430:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008432:	bf00      	nop
 8008434:	3720      	adds	r7, #32
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008444:	f001 fa66 	bl	8009914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008448:	4b2d      	ldr	r3, [pc, #180]	; (8008500 <prvAddNewTaskToReadyList+0xc4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3301      	adds	r3, #1
 800844e:	4a2c      	ldr	r2, [pc, #176]	; (8008500 <prvAddNewTaskToReadyList+0xc4>)
 8008450:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008452:	4b2c      	ldr	r3, [pc, #176]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800845a:	4a2a      	ldr	r2, [pc, #168]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008460:	4b27      	ldr	r3, [pc, #156]	; (8008500 <prvAddNewTaskToReadyList+0xc4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d110      	bne.n	800848a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008468:	f000 fc3c 	bl	8008ce4 <prvInitialiseTaskLists>
 800846c:	e00d      	b.n	800848a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800846e:	4b26      	ldr	r3, [pc, #152]	; (8008508 <prvAddNewTaskToReadyList+0xcc>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d109      	bne.n	800848a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008476:	4b23      	ldr	r3, [pc, #140]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	429a      	cmp	r2, r3
 8008482:	d802      	bhi.n	800848a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008484:	4a1f      	ldr	r2, [pc, #124]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800848a:	4b20      	ldr	r3, [pc, #128]	; (800850c <prvAddNewTaskToReadyList+0xd0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3301      	adds	r3, #1
 8008490:	4a1e      	ldr	r2, [pc, #120]	; (800850c <prvAddNewTaskToReadyList+0xd0>)
 8008492:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008494:	4b1d      	ldr	r3, [pc, #116]	; (800850c <prvAddNewTaskToReadyList+0xd0>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4b1b      	ldr	r3, [pc, #108]	; (8008510 <prvAddNewTaskToReadyList+0xd4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d903      	bls.n	80084b0 <prvAddNewTaskToReadyList+0x74>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	4a18      	ldr	r2, [pc, #96]	; (8008510 <prvAddNewTaskToReadyList+0xd4>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4a15      	ldr	r2, [pc, #84]	; (8008514 <prvAddNewTaskToReadyList+0xd8>)
 80084be:	441a      	add	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7ff f913 	bl	80076f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084cc:	f001 fa52 	bl	8009974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084d0:	4b0d      	ldr	r3, [pc, #52]	; (8008508 <prvAddNewTaskToReadyList+0xcc>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00e      	beq.n	80084f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d207      	bcs.n	80084f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <prvAddNewTaskToReadyList+0xdc>)
 80084e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084f6:	bf00      	nop
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20005334 	.word	0x20005334
 8008504:	20004e60 	.word	0x20004e60
 8008508:	20005340 	.word	0x20005340
 800850c:	20005350 	.word	0x20005350
 8008510:	2000533c 	.word	0x2000533c
 8008514:	20004e64 	.word	0x20004e64
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d017      	beq.n	800855e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800852e:	4b13      	ldr	r3, [pc, #76]	; (800857c <vTaskDelay+0x60>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <vTaskDelay+0x30>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60bb      	str	r3, [r7, #8]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800854c:	f000 f880 	bl	8008650 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008550:	2100      	movs	r1, #0
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fd10 	bl	8008f78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008558:	f000 f888 	bl	800866c <xTaskResumeAll>
 800855c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d107      	bne.n	8008574 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008564:	4b06      	ldr	r3, [pc, #24]	; (8008580 <vTaskDelay+0x64>)
 8008566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	2000535c 	.word	0x2000535c
 8008580:	e000ed04 	.word	0xe000ed04

08008584 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08a      	sub	sp, #40	; 0x28
 8008588:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800858a:	2300      	movs	r3, #0
 800858c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008592:	463a      	mov	r2, r7
 8008594:	1d39      	adds	r1, r7, #4
 8008596:	f107 0308 	add.w	r3, r7, #8
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff f848 	bl	8007630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	9202      	str	r2, [sp, #8]
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	2300      	movs	r3, #0
 80085b0:	460a      	mov	r2, r1
 80085b2:	4921      	ldr	r1, [pc, #132]	; (8008638 <vTaskStartScheduler+0xb4>)
 80085b4:	4821      	ldr	r0, [pc, #132]	; (800863c <vTaskStartScheduler+0xb8>)
 80085b6:	f7ff fe0f 	bl	80081d8 <xTaskCreateStatic>
 80085ba:	4603      	mov	r3, r0
 80085bc:	4a20      	ldr	r2, [pc, #128]	; (8008640 <vTaskStartScheduler+0xbc>)
 80085be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085c0:	4b1f      	ldr	r3, [pc, #124]	; (8008640 <vTaskStartScheduler+0xbc>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085c8:	2301      	movs	r3, #1
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	e001      	b.n	80085d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d102      	bne.n	80085de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085d8:	f000 fd22 	bl	8009020 <xTimerCreateTimerTask>
 80085dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d116      	bne.n	8008612 <vTaskStartScheduler+0x8e>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	613b      	str	r3, [r7, #16]
}
 80085f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085f8:	4b12      	ldr	r3, [pc, #72]	; (8008644 <vTaskStartScheduler+0xc0>)
 80085fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008600:	4b11      	ldr	r3, [pc, #68]	; (8008648 <vTaskStartScheduler+0xc4>)
 8008602:	2201      	movs	r2, #1
 8008604:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008606:	4b11      	ldr	r3, [pc, #68]	; (800864c <vTaskStartScheduler+0xc8>)
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800860c:	f001 f8e0 	bl	80097d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008610:	e00e      	b.n	8008630 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008618:	d10a      	bne.n	8008630 <vTaskStartScheduler+0xac>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	60fb      	str	r3, [r7, #12]
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <vTaskStartScheduler+0xaa>
}
 8008630:	bf00      	nop
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	08017d38 	.word	0x08017d38
 800863c:	08008cb5 	.word	0x08008cb5
 8008640:	20005358 	.word	0x20005358
 8008644:	20005354 	.word	0x20005354
 8008648:	20005340 	.word	0x20005340
 800864c:	20005338 	.word	0x20005338

08008650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008650:	b480      	push	{r7}
 8008652:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <vTaskSuspendAll+0x18>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3301      	adds	r3, #1
 800865a:	4a03      	ldr	r2, [pc, #12]	; (8008668 <vTaskSuspendAll+0x18>)
 800865c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800865e:	bf00      	nop
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	2000535c 	.word	0x2000535c

0800866c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008676:	2300      	movs	r3, #0
 8008678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800867a:	4b42      	ldr	r3, [pc, #264]	; (8008784 <xTaskResumeAll+0x118>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <xTaskResumeAll+0x2c>
	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	603b      	str	r3, [r7, #0]
}
 8008694:	bf00      	nop
 8008696:	e7fe      	b.n	8008696 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008698:	f001 f93c 	bl	8009914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800869c:	4b39      	ldr	r3, [pc, #228]	; (8008784 <xTaskResumeAll+0x118>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	4a38      	ldr	r2, [pc, #224]	; (8008784 <xTaskResumeAll+0x118>)
 80086a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086a6:	4b37      	ldr	r3, [pc, #220]	; (8008784 <xTaskResumeAll+0x118>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d162      	bne.n	8008774 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086ae:	4b36      	ldr	r3, [pc, #216]	; (8008788 <xTaskResumeAll+0x11c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d05e      	beq.n	8008774 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086b6:	e02f      	b.n	8008718 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b8:	4b34      	ldr	r3, [pc, #208]	; (800878c <xTaskResumeAll+0x120>)
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3318      	adds	r3, #24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff f871 	bl	80077ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3304      	adds	r3, #4
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff f86c 	bl	80077ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d8:	4b2d      	ldr	r3, [pc, #180]	; (8008790 <xTaskResumeAll+0x124>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d903      	bls.n	80086e8 <xTaskResumeAll+0x7c>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	4a2a      	ldr	r2, [pc, #168]	; (8008790 <xTaskResumeAll+0x124>)
 80086e6:	6013      	str	r3, [r2, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4a27      	ldr	r2, [pc, #156]	; (8008794 <xTaskResumeAll+0x128>)
 80086f6:	441a      	add	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3304      	adds	r3, #4
 80086fc:	4619      	mov	r1, r3
 80086fe:	4610      	mov	r0, r2
 8008700:	f7fe fff7 	bl	80076f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008708:	4b23      	ldr	r3, [pc, #140]	; (8008798 <xTaskResumeAll+0x12c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870e:	429a      	cmp	r2, r3
 8008710:	d302      	bcc.n	8008718 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008712:	4b22      	ldr	r3, [pc, #136]	; (800879c <xTaskResumeAll+0x130>)
 8008714:	2201      	movs	r2, #1
 8008716:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008718:	4b1c      	ldr	r3, [pc, #112]	; (800878c <xTaskResumeAll+0x120>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1cb      	bne.n	80086b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008726:	f000 fb7b 	bl	8008e20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800872a:	4b1d      	ldr	r3, [pc, #116]	; (80087a0 <xTaskResumeAll+0x134>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d010      	beq.n	8008758 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008736:	f000 f847 	bl	80087c8 <xTaskIncrementTick>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008740:	4b16      	ldr	r3, [pc, #88]	; (800879c <xTaskResumeAll+0x130>)
 8008742:	2201      	movs	r2, #1
 8008744:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3b01      	subs	r3, #1
 800874a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1f1      	bne.n	8008736 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008752:	4b13      	ldr	r3, [pc, #76]	; (80087a0 <xTaskResumeAll+0x134>)
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008758:	4b10      	ldr	r3, [pc, #64]	; (800879c <xTaskResumeAll+0x130>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d009      	beq.n	8008774 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008764:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <xTaskResumeAll+0x138>)
 8008766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008774:	f001 f8fe 	bl	8009974 <vPortExitCritical>

	return xAlreadyYielded;
 8008778:	68bb      	ldr	r3, [r7, #8]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	2000535c 	.word	0x2000535c
 8008788:	20005334 	.word	0x20005334
 800878c:	200052f4 	.word	0x200052f4
 8008790:	2000533c 	.word	0x2000533c
 8008794:	20004e64 	.word	0x20004e64
 8008798:	20004e60 	.word	0x20004e60
 800879c:	20005348 	.word	0x20005348
 80087a0:	20005344 	.word	0x20005344
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087ae:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <xTaskGetTickCount+0x1c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087b4:	687b      	ldr	r3, [r7, #4]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	20005338 	.word	0x20005338

080087c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087ce:	2300      	movs	r3, #0
 80087d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d2:	4b4f      	ldr	r3, [pc, #316]	; (8008910 <xTaskIncrementTick+0x148>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f040 808f 	bne.w	80088fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087dc:	4b4d      	ldr	r3, [pc, #308]	; (8008914 <xTaskIncrementTick+0x14c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3301      	adds	r3, #1
 80087e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087e4:	4a4b      	ldr	r2, [pc, #300]	; (8008914 <xTaskIncrementTick+0x14c>)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d120      	bne.n	8008832 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087f0:	4b49      	ldr	r3, [pc, #292]	; (8008918 <xTaskIncrementTick+0x150>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <xTaskIncrementTick+0x48>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	603b      	str	r3, [r7, #0]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <xTaskIncrementTick+0x46>
 8008810:	4b41      	ldr	r3, [pc, #260]	; (8008918 <xTaskIncrementTick+0x150>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	4b41      	ldr	r3, [pc, #260]	; (800891c <xTaskIncrementTick+0x154>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a3f      	ldr	r2, [pc, #252]	; (8008918 <xTaskIncrementTick+0x150>)
 800881c:	6013      	str	r3, [r2, #0]
 800881e:	4a3f      	ldr	r2, [pc, #252]	; (800891c <xTaskIncrementTick+0x154>)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	4b3e      	ldr	r3, [pc, #248]	; (8008920 <xTaskIncrementTick+0x158>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3301      	adds	r3, #1
 800882a:	4a3d      	ldr	r2, [pc, #244]	; (8008920 <xTaskIncrementTick+0x158>)
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	f000 faf7 	bl	8008e20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008832:	4b3c      	ldr	r3, [pc, #240]	; (8008924 <xTaskIncrementTick+0x15c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	429a      	cmp	r2, r3
 800883a:	d349      	bcc.n	80088d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800883c:	4b36      	ldr	r3, [pc, #216]	; (8008918 <xTaskIncrementTick+0x150>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d104      	bne.n	8008850 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008846:	4b37      	ldr	r3, [pc, #220]	; (8008924 <xTaskIncrementTick+0x15c>)
 8008848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800884c:	601a      	str	r2, [r3, #0]
					break;
 800884e:	e03f      	b.n	80088d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008850:	4b31      	ldr	r3, [pc, #196]	; (8008918 <xTaskIncrementTick+0x150>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	429a      	cmp	r2, r3
 8008866:	d203      	bcs.n	8008870 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008868:	4a2e      	ldr	r2, [pc, #184]	; (8008924 <xTaskIncrementTick+0x15c>)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800886e:	e02f      	b.n	80088d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	3304      	adds	r3, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe ff99 	bl	80077ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887e:	2b00      	cmp	r3, #0
 8008880:	d004      	beq.n	800888c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	3318      	adds	r3, #24
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe ff90 	bl	80077ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008890:	4b25      	ldr	r3, [pc, #148]	; (8008928 <xTaskIncrementTick+0x160>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d903      	bls.n	80088a0 <xTaskIncrementTick+0xd8>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	4a22      	ldr	r2, [pc, #136]	; (8008928 <xTaskIncrementTick+0x160>)
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4a1f      	ldr	r2, [pc, #124]	; (800892c <xTaskIncrementTick+0x164>)
 80088ae:	441a      	add	r2, r3
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f7fe ff1b 	bl	80076f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c0:	4b1b      	ldr	r3, [pc, #108]	; (8008930 <xTaskIncrementTick+0x168>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d3b8      	bcc.n	800883c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80088ca:	2301      	movs	r3, #1
 80088cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ce:	e7b5      	b.n	800883c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088d0:	4b17      	ldr	r3, [pc, #92]	; (8008930 <xTaskIncrementTick+0x168>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d6:	4915      	ldr	r1, [pc, #84]	; (800892c <xTaskIncrementTick+0x164>)
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	440b      	add	r3, r1
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d901      	bls.n	80088ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80088e8:	2301      	movs	r3, #1
 80088ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088ec:	4b11      	ldr	r3, [pc, #68]	; (8008934 <xTaskIncrementTick+0x16c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d007      	beq.n	8008904 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80088f4:	2301      	movs	r3, #1
 80088f6:	617b      	str	r3, [r7, #20]
 80088f8:	e004      	b.n	8008904 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088fa:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <xTaskIncrementTick+0x170>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3301      	adds	r3, #1
 8008900:	4a0d      	ldr	r2, [pc, #52]	; (8008938 <xTaskIncrementTick+0x170>)
 8008902:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008904:	697b      	ldr	r3, [r7, #20]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	2000535c 	.word	0x2000535c
 8008914:	20005338 	.word	0x20005338
 8008918:	200052ec 	.word	0x200052ec
 800891c:	200052f0 	.word	0x200052f0
 8008920:	2000534c 	.word	0x2000534c
 8008924:	20005354 	.word	0x20005354
 8008928:	2000533c 	.word	0x2000533c
 800892c:	20004e64 	.word	0x20004e64
 8008930:	20004e60 	.word	0x20004e60
 8008934:	20005348 	.word	0x20005348
 8008938:	20005344 	.word	0x20005344

0800893c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008942:	4b28      	ldr	r3, [pc, #160]	; (80089e4 <vTaskSwitchContext+0xa8>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800894a:	4b27      	ldr	r3, [pc, #156]	; (80089e8 <vTaskSwitchContext+0xac>)
 800894c:	2201      	movs	r2, #1
 800894e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008950:	e041      	b.n	80089d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008952:	4b25      	ldr	r3, [pc, #148]	; (80089e8 <vTaskSwitchContext+0xac>)
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008958:	4b24      	ldr	r3, [pc, #144]	; (80089ec <vTaskSwitchContext+0xb0>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	e010      	b.n	8008982 <vTaskSwitchContext+0x46>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <vTaskSwitchContext+0x40>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	607b      	str	r3, [r7, #4]
}
 8008978:	bf00      	nop
 800897a:	e7fe      	b.n	800897a <vTaskSwitchContext+0x3e>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3b01      	subs	r3, #1
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	491b      	ldr	r1, [pc, #108]	; (80089f0 <vTaskSwitchContext+0xb4>)
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0e4      	beq.n	8008960 <vTaskSwitchContext+0x24>
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4a13      	ldr	r2, [pc, #76]	; (80089f0 <vTaskSwitchContext+0xb4>)
 80089a2:	4413      	add	r3, r2
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	605a      	str	r2, [r3, #4]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	3308      	adds	r3, #8
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d104      	bne.n	80089c6 <vTaskSwitchContext+0x8a>
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	605a      	str	r2, [r3, #4]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	4a09      	ldr	r2, [pc, #36]	; (80089f4 <vTaskSwitchContext+0xb8>)
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	4a06      	ldr	r2, [pc, #24]	; (80089ec <vTaskSwitchContext+0xb0>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6013      	str	r3, [r2, #0]
}
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	2000535c 	.word	0x2000535c
 80089e8:	20005348 	.word	0x20005348
 80089ec:	2000533c 	.word	0x2000533c
 80089f0:	20004e64 	.word	0x20004e64
 80089f4:	20004e60 	.word	0x20004e60

080089f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10a      	bne.n	8008a1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	60fb      	str	r3, [r7, #12]
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a1e:	4b07      	ldr	r3, [pc, #28]	; (8008a3c <vTaskPlaceOnEventList+0x44>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3318      	adds	r3, #24
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7fe fe87 	bl	800773a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	6838      	ldr	r0, [r7, #0]
 8008a30:	f000 faa2 	bl	8008f78 <prvAddCurrentTaskToDelayedList>
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20004e60 	.word	0x20004e60

08008a40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10a      	bne.n	8008a68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	617b      	str	r3, [r7, #20]
}
 8008a64:	bf00      	nop
 8008a66:	e7fe      	b.n	8008a66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3318      	adds	r3, #24
 8008a6e:	4619      	mov	r1, r3
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7fe fe3e 	bl	80076f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f000 fa77 	bl	8008f78 <prvAddCurrentTaskToDelayedList>
	}
 8008a8a:	bf00      	nop
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20004e60 	.word	0x20004e60

08008a98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10a      	bne.n	8008ac4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	60fb      	str	r3, [r7, #12]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	3318      	adds	r3, #24
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fe fe6f 	bl	80077ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ace:	4b1e      	ldr	r3, [pc, #120]	; (8008b48 <xTaskRemoveFromEventList+0xb0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d11d      	bne.n	8008b12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fe66 	bl	80077ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae4:	4b19      	ldr	r3, [pc, #100]	; (8008b4c <xTaskRemoveFromEventList+0xb4>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d903      	bls.n	8008af4 <xTaskRemoveFromEventList+0x5c>
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	4a16      	ldr	r2, [pc, #88]	; (8008b4c <xTaskRemoveFromEventList+0xb4>)
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4a13      	ldr	r2, [pc, #76]	; (8008b50 <xTaskRemoveFromEventList+0xb8>)
 8008b02:	441a      	add	r2, r3
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	3304      	adds	r3, #4
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	f7fe fdf1 	bl	80076f2 <vListInsertEnd>
 8008b10:	e005      	b.n	8008b1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	3318      	adds	r3, #24
 8008b16:	4619      	mov	r1, r3
 8008b18:	480e      	ldr	r0, [pc, #56]	; (8008b54 <xTaskRemoveFromEventList+0xbc>)
 8008b1a:	f7fe fdea 	bl	80076f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b22:	4b0d      	ldr	r3, [pc, #52]	; (8008b58 <xTaskRemoveFromEventList+0xc0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d905      	bls.n	8008b38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b30:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <xTaskRemoveFromEventList+0xc4>)
 8008b32:	2201      	movs	r2, #1
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	e001      	b.n	8008b3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b3c:	697b      	ldr	r3, [r7, #20]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	2000535c 	.word	0x2000535c
 8008b4c:	2000533c 	.word	0x2000533c
 8008b50:	20004e64 	.word	0x20004e64
 8008b54:	200052f4 	.word	0x200052f4
 8008b58:	20004e60 	.word	0x20004e60
 8008b5c:	20005348 	.word	0x20005348

08008b60 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	60fb      	str	r3, [r7, #12]
}
 8008b80:	bf00      	nop
 8008b82:	e7fe      	b.n	8008b82 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008b84:	f000 fec6 	bl	8009914 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b88:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <vTaskSetTimeOutState+0x44>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008b90:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <vTaskSetTimeOutState+0x48>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008b98:	f000 feec 	bl	8009974 <vPortExitCritical>
}
 8008b9c:	bf00      	nop
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	2000534c 	.word	0x2000534c
 8008ba8:	20005338 	.word	0x20005338

08008bac <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bb4:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <vTaskInternalSetTimeOutState+0x24>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <vTaskInternalSetTimeOutState+0x28>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	605a      	str	r2, [r3, #4]
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	2000534c 	.word	0x2000534c
 8008bd4:	20005338 	.word	0x20005338

08008bd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10a      	bne.n	8008bfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	613b      	str	r3, [r7, #16]
}
 8008bfa:	bf00      	nop
 8008bfc:	e7fe      	b.n	8008bfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10a      	bne.n	8008c1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	60fb      	str	r3, [r7, #12]
}
 8008c16:	bf00      	nop
 8008c18:	e7fe      	b.n	8008c18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008c1a:	f000 fe7b 	bl	8009914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c1e:	4b1d      	ldr	r3, [pc, #116]	; (8008c94 <xTaskCheckForTimeOut+0xbc>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c36:	d102      	bne.n	8008c3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	61fb      	str	r3, [r7, #28]
 8008c3c:	e023      	b.n	8008c86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4b15      	ldr	r3, [pc, #84]	; (8008c98 <xTaskCheckForTimeOut+0xc0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d007      	beq.n	8008c5a <xTaskCheckForTimeOut+0x82>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d302      	bcc.n	8008c5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c54:	2301      	movs	r3, #1
 8008c56:	61fb      	str	r3, [r7, #28]
 8008c58:	e015      	b.n	8008c86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d20b      	bcs.n	8008c7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	1ad2      	subs	r2, r2, r3
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff ff9b 	bl	8008bac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	61fb      	str	r3, [r7, #28]
 8008c7a:	e004      	b.n	8008c86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c82:	2301      	movs	r3, #1
 8008c84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c86:	f000 fe75 	bl	8009974 <vPortExitCritical>

	return xReturn;
 8008c8a:	69fb      	ldr	r3, [r7, #28]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3720      	adds	r7, #32
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	20005338 	.word	0x20005338
 8008c98:	2000534c 	.word	0x2000534c

08008c9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ca0:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <vTaskMissedYield+0x14>)
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]
}
 8008ca6:	bf00      	nop
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	20005348 	.word	0x20005348

08008cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008cbc:	f000 f852 	bl	8008d64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008cc0:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <prvIdleTask+0x28>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d9f9      	bls.n	8008cbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <prvIdleTask+0x2c>)
 8008cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cd8:	e7f0      	b.n	8008cbc <prvIdleTask+0x8>
 8008cda:	bf00      	nop
 8008cdc:	20004e64 	.word	0x20004e64
 8008ce0:	e000ed04 	.word	0xe000ed04

08008ce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cea:	2300      	movs	r3, #0
 8008cec:	607b      	str	r3, [r7, #4]
 8008cee:	e00c      	b.n	8008d0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4a12      	ldr	r2, [pc, #72]	; (8008d44 <prvInitialiseTaskLists+0x60>)
 8008cfc:	4413      	add	r3, r2
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fe fcca 	bl	8007698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3301      	adds	r3, #1
 8008d08:	607b      	str	r3, [r7, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b37      	cmp	r3, #55	; 0x37
 8008d0e:	d9ef      	bls.n	8008cf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d10:	480d      	ldr	r0, [pc, #52]	; (8008d48 <prvInitialiseTaskLists+0x64>)
 8008d12:	f7fe fcc1 	bl	8007698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d16:	480d      	ldr	r0, [pc, #52]	; (8008d4c <prvInitialiseTaskLists+0x68>)
 8008d18:	f7fe fcbe 	bl	8007698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d1c:	480c      	ldr	r0, [pc, #48]	; (8008d50 <prvInitialiseTaskLists+0x6c>)
 8008d1e:	f7fe fcbb 	bl	8007698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d22:	480c      	ldr	r0, [pc, #48]	; (8008d54 <prvInitialiseTaskLists+0x70>)
 8008d24:	f7fe fcb8 	bl	8007698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d28:	480b      	ldr	r0, [pc, #44]	; (8008d58 <prvInitialiseTaskLists+0x74>)
 8008d2a:	f7fe fcb5 	bl	8007698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d2e:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <prvInitialiseTaskLists+0x78>)
 8008d30:	4a05      	ldr	r2, [pc, #20]	; (8008d48 <prvInitialiseTaskLists+0x64>)
 8008d32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d34:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <prvInitialiseTaskLists+0x7c>)
 8008d36:	4a05      	ldr	r2, [pc, #20]	; (8008d4c <prvInitialiseTaskLists+0x68>)
 8008d38:	601a      	str	r2, [r3, #0]
}
 8008d3a:	bf00      	nop
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20004e64 	.word	0x20004e64
 8008d48:	200052c4 	.word	0x200052c4
 8008d4c:	200052d8 	.word	0x200052d8
 8008d50:	200052f4 	.word	0x200052f4
 8008d54:	20005308 	.word	0x20005308
 8008d58:	20005320 	.word	0x20005320
 8008d5c:	200052ec 	.word	0x200052ec
 8008d60:	200052f0 	.word	0x200052f0

08008d64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d6a:	e019      	b.n	8008da0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d6c:	f000 fdd2 	bl	8009914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d70:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <prvCheckTasksWaitingTermination+0x50>)
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe fd15 	bl	80077ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d82:	4b0d      	ldr	r3, [pc, #52]	; (8008db8 <prvCheckTasksWaitingTermination+0x54>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	4a0b      	ldr	r2, [pc, #44]	; (8008db8 <prvCheckTasksWaitingTermination+0x54>)
 8008d8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <prvCheckTasksWaitingTermination+0x58>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <prvCheckTasksWaitingTermination+0x58>)
 8008d94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d96:	f000 fded 	bl	8009974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f810 	bl	8008dc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <prvCheckTasksWaitingTermination+0x58>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1e1      	bne.n	8008d6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20005308 	.word	0x20005308
 8008db8:	20005334 	.word	0x20005334
 8008dbc:	2000531c 	.word	0x2000531c

08008dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d108      	bne.n	8008de4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 ff8a 	bl	8009cf0 <vPortFree>
				vPortFree( pxTCB );
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 ff87 	bl	8009cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008de2:	e018      	b.n	8008e16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d103      	bne.n	8008df6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 ff7e 	bl	8009cf0 <vPortFree>
	}
 8008df4:	e00f      	b.n	8008e16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d00a      	beq.n	8008e16 <prvDeleteTCB+0x56>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	60fb      	str	r3, [r7, #12]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <prvDeleteTCB+0x54>
	}
 8008e16:	bf00      	nop
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e26:	4b0c      	ldr	r3, [pc, #48]	; (8008e58 <prvResetNextTaskUnblockTime+0x38>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d104      	bne.n	8008e3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e30:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <prvResetNextTaskUnblockTime+0x3c>)
 8008e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e38:	e008      	b.n	8008e4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e3a:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <prvResetNextTaskUnblockTime+0x38>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	4a04      	ldr	r2, [pc, #16]	; (8008e5c <prvResetNextTaskUnblockTime+0x3c>)
 8008e4a:	6013      	str	r3, [r2, #0]
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	200052ec 	.word	0x200052ec
 8008e5c:	20005354 	.word	0x20005354

08008e60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e66:	4b0b      	ldr	r3, [pc, #44]	; (8008e94 <xTaskGetSchedulerState+0x34>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	607b      	str	r3, [r7, #4]
 8008e72:	e008      	b.n	8008e86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e74:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <xTaskGetSchedulerState+0x38>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d102      	bne.n	8008e82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	607b      	str	r3, [r7, #4]
 8008e80:	e001      	b.n	8008e86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e82:	2300      	movs	r3, #0
 8008e84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e86:	687b      	ldr	r3, [r7, #4]
	}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	20005340 	.word	0x20005340
 8008e98:	2000535c 	.word	0x2000535c

08008e9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d056      	beq.n	8008f60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008eb2:	4b2e      	ldr	r3, [pc, #184]	; (8008f6c <xTaskPriorityDisinherit+0xd0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d00a      	beq.n	8008ed2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	60fb      	str	r3, [r7, #12]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10a      	bne.n	8008ef0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	60bb      	str	r3, [r7, #8]
}
 8008eec:	bf00      	nop
 8008eee:	e7fe      	b.n	8008eee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef4:	1e5a      	subs	r2, r3, #1
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d02c      	beq.n	8008f60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d128      	bne.n	8008f60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	3304      	adds	r3, #4
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fe fc4a 	bl	80077ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f30:	4b0f      	ldr	r3, [pc, #60]	; (8008f70 <xTaskPriorityDisinherit+0xd4>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d903      	bls.n	8008f40 <xTaskPriorityDisinherit+0xa4>
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	4a0c      	ldr	r2, [pc, #48]	; (8008f70 <xTaskPriorityDisinherit+0xd4>)
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4a09      	ldr	r2, [pc, #36]	; (8008f74 <xTaskPriorityDisinherit+0xd8>)
 8008f4e:	441a      	add	r2, r3
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4619      	mov	r1, r3
 8008f56:	4610      	mov	r0, r2
 8008f58:	f7fe fbcb 	bl	80076f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f60:	697b      	ldr	r3, [r7, #20]
	}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20004e60 	.word	0x20004e60
 8008f70:	2000533c 	.word	0x2000533c
 8008f74:	20004e64 	.word	0x20004e64

08008f78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f82:	4b21      	ldr	r3, [pc, #132]	; (8009008 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f88:	4b20      	ldr	r3, [pc, #128]	; (800900c <prvAddCurrentTaskToDelayedList+0x94>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe fc0c 	bl	80077ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f9a:	d10a      	bne.n	8008fb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d007      	beq.n	8008fb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fa2:	4b1a      	ldr	r3, [pc, #104]	; (800900c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4819      	ldr	r0, [pc, #100]	; (8009010 <prvAddCurrentTaskToDelayedList+0x98>)
 8008fac:	f7fe fba1 	bl	80076f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fb0:	e026      	b.n	8009000 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fba:	4b14      	ldr	r3, [pc, #80]	; (800900c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d209      	bcs.n	8008fde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fca:	4b12      	ldr	r3, [pc, #72]	; (8009014 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	4b0f      	ldr	r3, [pc, #60]	; (800900c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	f7fe fbaf 	bl	800773a <vListInsert>
}
 8008fdc:	e010      	b.n	8009000 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fde:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b0a      	ldr	r3, [pc, #40]	; (800900c <prvAddCurrentTaskToDelayedList+0x94>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4610      	mov	r0, r2
 8008fec:	f7fe fba5 	bl	800773a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d202      	bcs.n	8009000 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ffa:	4a08      	ldr	r2, [pc, #32]	; (800901c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	6013      	str	r3, [r2, #0]
}
 8009000:	bf00      	nop
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20005338 	.word	0x20005338
 800900c:	20004e60 	.word	0x20004e60
 8009010:	20005320 	.word	0x20005320
 8009014:	200052f0 	.word	0x200052f0
 8009018:	200052ec 	.word	0x200052ec
 800901c:	20005354 	.word	0x20005354

08009020 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08a      	sub	sp, #40	; 0x28
 8009024:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800902a:	f000 fb07 	bl	800963c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800902e:	4b1c      	ldr	r3, [pc, #112]	; (80090a0 <xTimerCreateTimerTask+0x80>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d021      	beq.n	800907a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800903e:	1d3a      	adds	r2, r7, #4
 8009040:	f107 0108 	add.w	r1, r7, #8
 8009044:	f107 030c 	add.w	r3, r7, #12
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe fb0b 	bl	8007664 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	9202      	str	r2, [sp, #8]
 8009056:	9301      	str	r3, [sp, #4]
 8009058:	2302      	movs	r3, #2
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	2300      	movs	r3, #0
 800905e:	460a      	mov	r2, r1
 8009060:	4910      	ldr	r1, [pc, #64]	; (80090a4 <xTimerCreateTimerTask+0x84>)
 8009062:	4811      	ldr	r0, [pc, #68]	; (80090a8 <xTimerCreateTimerTask+0x88>)
 8009064:	f7ff f8b8 	bl	80081d8 <xTaskCreateStatic>
 8009068:	4603      	mov	r3, r0
 800906a:	4a10      	ldr	r2, [pc, #64]	; (80090ac <xTimerCreateTimerTask+0x8c>)
 800906c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800906e:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <xTimerCreateTimerTask+0x8c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009076:	2301      	movs	r3, #1
 8009078:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10a      	bne.n	8009096 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	613b      	str	r3, [r7, #16]
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009096:	697b      	ldr	r3, [r7, #20]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20005390 	.word	0x20005390
 80090a4:	08017d40 	.word	0x08017d40
 80090a8:	080091e5 	.word	0x080091e5
 80090ac:	20005394 	.word	0x20005394

080090b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08a      	sub	sp, #40	; 0x28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80090be:	2300      	movs	r3, #0
 80090c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <xTimerGenericCommand+0x2e>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	623b      	str	r3, [r7, #32]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090de:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <xTimerGenericCommand+0x98>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d02a      	beq.n	800913c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	2b05      	cmp	r3, #5
 80090f6:	dc18      	bgt.n	800912a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090f8:	f7ff feb2 	bl	8008e60 <xTaskGetSchedulerState>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d109      	bne.n	8009116 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009102:	4b11      	ldr	r3, [pc, #68]	; (8009148 <xTimerGenericCommand+0x98>)
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	f107 0110 	add.w	r1, r7, #16
 800910a:	2300      	movs	r3, #0
 800910c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800910e:	f7fe fc7b 	bl	8007a08 <xQueueGenericSend>
 8009112:	6278      	str	r0, [r7, #36]	; 0x24
 8009114:	e012      	b.n	800913c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009116:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <xTimerGenericCommand+0x98>)
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	f107 0110 	add.w	r1, r7, #16
 800911e:	2300      	movs	r3, #0
 8009120:	2200      	movs	r2, #0
 8009122:	f7fe fc71 	bl	8007a08 <xQueueGenericSend>
 8009126:	6278      	str	r0, [r7, #36]	; 0x24
 8009128:	e008      	b.n	800913c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800912a:	4b07      	ldr	r3, [pc, #28]	; (8009148 <xTimerGenericCommand+0x98>)
 800912c:	6818      	ldr	r0, [r3, #0]
 800912e:	f107 0110 	add.w	r1, r7, #16
 8009132:	2300      	movs	r3, #0
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	f7fe fd65 	bl	8007c04 <xQueueGenericSendFromISR>
 800913a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800913e:	4618      	mov	r0, r3
 8009140:	3728      	adds	r7, #40	; 0x28
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20005390 	.word	0x20005390

0800914c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af02      	add	r7, sp, #8
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009156:	4b22      	ldr	r3, [pc, #136]	; (80091e0 <prvProcessExpiredTimer+0x94>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	3304      	adds	r3, #4
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fb21 	bl	80077ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b00      	cmp	r3, #0
 8009176:	d022      	beq.n	80091be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	699a      	ldr	r2, [r3, #24]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	18d1      	adds	r1, r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	6978      	ldr	r0, [r7, #20]
 8009186:	f000 f8d1 	bl	800932c <prvInsertTimerInActiveList>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01f      	beq.n	80091d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009190:	2300      	movs	r3, #0
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	2300      	movs	r3, #0
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	2100      	movs	r1, #0
 800919a:	6978      	ldr	r0, [r7, #20]
 800919c:	f7ff ff88 	bl	80090b0 <xTimerGenericCommand>
 80091a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d113      	bne.n	80091d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	60fb      	str	r3, [r7, #12]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091c4:	f023 0301 	bic.w	r3, r3, #1
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	6978      	ldr	r0, [r7, #20]
 80091d6:	4798      	blx	r3
}
 80091d8:	bf00      	nop
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20005388 	.word	0x20005388

080091e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091ec:	f107 0308 	add.w	r3, r7, #8
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 f857 	bl	80092a4 <prvGetNextExpireTime>
 80091f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	4619      	mov	r1, r3
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 f803 	bl	8009208 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009202:	f000 f8d5 	bl	80093b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009206:	e7f1      	b.n	80091ec <prvTimerTask+0x8>

08009208 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009212:	f7ff fa1d 	bl	8008650 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009216:	f107 0308 	add.w	r3, r7, #8
 800921a:	4618      	mov	r0, r3
 800921c:	f000 f866 	bl	80092ec <prvSampleTimeNow>
 8009220:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d130      	bne.n	800928a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10a      	bne.n	8009244 <prvProcessTimerOrBlockTask+0x3c>
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	429a      	cmp	r2, r3
 8009234:	d806      	bhi.n	8009244 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009236:	f7ff fa19 	bl	800866c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800923a:	68f9      	ldr	r1, [r7, #12]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff ff85 	bl	800914c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009242:	e024      	b.n	800928e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d008      	beq.n	800925c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800924a:	4b13      	ldr	r3, [pc, #76]	; (8009298 <prvProcessTimerOrBlockTask+0x90>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <prvProcessTimerOrBlockTask+0x50>
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <prvProcessTimerOrBlockTask+0x52>
 8009258:	2300      	movs	r3, #0
 800925a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800925c:	4b0f      	ldr	r3, [pc, #60]	; (800929c <prvProcessTimerOrBlockTask+0x94>)
 800925e:	6818      	ldr	r0, [r3, #0]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	4619      	mov	r1, r3
 800926a:	f7fe ff81 	bl	8008170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800926e:	f7ff f9fd 	bl	800866c <xTaskResumeAll>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10a      	bne.n	800928e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009278:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <prvProcessTimerOrBlockTask+0x98>)
 800927a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	f3bf 8f6f 	isb	sy
}
 8009288:	e001      	b.n	800928e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800928a:	f7ff f9ef 	bl	800866c <xTaskResumeAll>
}
 800928e:	bf00      	nop
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	2000538c 	.word	0x2000538c
 800929c:	20005390 	.word	0x20005390
 80092a0:	e000ed04 	.word	0xe000ed04

080092a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092ac:	4b0e      	ldr	r3, [pc, #56]	; (80092e8 <prvGetNextExpireTime+0x44>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <prvGetNextExpireTime+0x16>
 80092b6:	2201      	movs	r2, #1
 80092b8:	e000      	b.n	80092bc <prvGetNextExpireTime+0x18>
 80092ba:	2200      	movs	r2, #0
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d105      	bne.n	80092d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092c8:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <prvGetNextExpireTime+0x44>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	60fb      	str	r3, [r7, #12]
 80092d2:	e001      	b.n	80092d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092d8:	68fb      	ldr	r3, [r7, #12]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	20005388 	.word	0x20005388

080092ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80092f4:	f7ff fa58 	bl	80087a8 <xTaskGetTickCount>
 80092f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80092fa:	4b0b      	ldr	r3, [pc, #44]	; (8009328 <prvSampleTimeNow+0x3c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	429a      	cmp	r2, r3
 8009302:	d205      	bcs.n	8009310 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009304:	f000 f936 	bl	8009574 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	e002      	b.n	8009316 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009316:	4a04      	ldr	r2, [pc, #16]	; (8009328 <prvSampleTimeNow+0x3c>)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800931c:	68fb      	ldr	r3, [r7, #12]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20005398 	.word	0x20005398

0800932c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	429a      	cmp	r2, r3
 8009350:	d812      	bhi.n	8009378 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	1ad2      	subs	r2, r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	429a      	cmp	r2, r3
 800935e:	d302      	bcc.n	8009366 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	617b      	str	r3, [r7, #20]
 8009364:	e01b      	b.n	800939e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009366:	4b10      	ldr	r3, [pc, #64]	; (80093a8 <prvInsertTimerInActiveList+0x7c>)
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3304      	adds	r3, #4
 800936e:	4619      	mov	r1, r3
 8009370:	4610      	mov	r0, r2
 8009372:	f7fe f9e2 	bl	800773a <vListInsert>
 8009376:	e012      	b.n	800939e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	429a      	cmp	r2, r3
 800937e:	d206      	bcs.n	800938e <prvInsertTimerInActiveList+0x62>
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	429a      	cmp	r2, r3
 8009386:	d302      	bcc.n	800938e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009388:	2301      	movs	r3, #1
 800938a:	617b      	str	r3, [r7, #20]
 800938c:	e007      	b.n	800939e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800938e:	4b07      	ldr	r3, [pc, #28]	; (80093ac <prvInsertTimerInActiveList+0x80>)
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3304      	adds	r3, #4
 8009396:	4619      	mov	r1, r3
 8009398:	4610      	mov	r0, r2
 800939a:	f7fe f9ce 	bl	800773a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800939e:	697b      	ldr	r3, [r7, #20]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	2000538c 	.word	0x2000538c
 80093ac:	20005388 	.word	0x20005388

080093b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08e      	sub	sp, #56	; 0x38
 80093b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093b6:	e0ca      	b.n	800954e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	da18      	bge.n	80093f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093be:	1d3b      	adds	r3, r7, #4
 80093c0:	3304      	adds	r3, #4
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	61fb      	str	r3, [r7, #28]
}
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093e6:	6850      	ldr	r0, [r2, #4]
 80093e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ea:	6892      	ldr	r2, [r2, #8]
 80093ec:	4611      	mov	r1, r2
 80093ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f2c0 80ab 	blt.w	800954e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80093fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	3304      	adds	r3, #4
 8009408:	4618      	mov	r0, r3
 800940a:	f7fe f9cf 	bl	80077ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800940e:	463b      	mov	r3, r7
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff ff6b 	bl	80092ec <prvSampleTimeNow>
 8009416:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b09      	cmp	r3, #9
 800941c:	f200 8096 	bhi.w	800954c <prvProcessReceivedCommands+0x19c>
 8009420:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <prvProcessReceivedCommands+0x78>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	08009451 	.word	0x08009451
 800942c:	08009451 	.word	0x08009451
 8009430:	08009451 	.word	0x08009451
 8009434:	080094c5 	.word	0x080094c5
 8009438:	080094d9 	.word	0x080094d9
 800943c:	08009523 	.word	0x08009523
 8009440:	08009451 	.word	0x08009451
 8009444:	08009451 	.word	0x08009451
 8009448:	080094c5 	.word	0x080094c5
 800944c:	080094d9 	.word	0x080094d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009456:	f043 0301 	orr.w	r3, r3, #1
 800945a:	b2da      	uxtb	r2, r3
 800945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	18d1      	adds	r1, r2, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800946e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009470:	f7ff ff5c 	bl	800932c <prvInsertTimerInActiveList>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d069      	beq.n	800954e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800947a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009480:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d05e      	beq.n	800954e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	441a      	add	r2, r3
 8009498:	2300      	movs	r3, #0
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	2300      	movs	r3, #0
 800949e:	2100      	movs	r1, #0
 80094a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094a2:	f7ff fe05 	bl	80090b0 <xTimerGenericCommand>
 80094a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d14f      	bne.n	800954e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	61bb      	str	r3, [r7, #24]
}
 80094c0:	bf00      	nop
 80094c2:	e7fe      	b.n	80094c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094ca:	f023 0301 	bic.w	r3, r3, #1
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80094d6:	e03a      	b.n	800954e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094de:	f043 0301 	orr.w	r3, r3, #1
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10a      	bne.n	800950e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80094f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	617b      	str	r3, [r7, #20]
}
 800950a:	bf00      	nop
 800950c:	e7fe      	b.n	800950c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	699a      	ldr	r2, [r3, #24]
 8009512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009514:	18d1      	adds	r1, r2, r3
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800951a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800951c:	f7ff ff06 	bl	800932c <prvInsertTimerInActiveList>
					break;
 8009520:	e015      	b.n	800954e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d103      	bne.n	8009538 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009532:	f000 fbdd 	bl	8009cf0 <vPortFree>
 8009536:	e00a      	b.n	800954e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800953e:	f023 0301 	bic.w	r3, r3, #1
 8009542:	b2da      	uxtb	r2, r3
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800954a:	e000      	b.n	800954e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800954c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800954e:	4b08      	ldr	r3, [pc, #32]	; (8009570 <prvProcessReceivedCommands+0x1c0>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	1d39      	adds	r1, r7, #4
 8009554:	2200      	movs	r2, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fbf0 	bl	8007d3c <xQueueReceive>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	f47f af2a 	bne.w	80093b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	3730      	adds	r7, #48	; 0x30
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20005390 	.word	0x20005390

08009574 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b088      	sub	sp, #32
 8009578:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800957a:	e048      	b.n	800960e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800957c:	4b2d      	ldr	r3, [pc, #180]	; (8009634 <prvSwitchTimerLists+0xc0>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009586:	4b2b      	ldr	r3, [pc, #172]	; (8009634 <prvSwitchTimerLists+0xc0>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3304      	adds	r3, #4
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe f909 	bl	80077ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d02e      	beq.n	800960e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	4413      	add	r3, r2
 80095b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d90e      	bls.n	80095e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095ce:	4b19      	ldr	r3, [pc, #100]	; (8009634 <prvSwitchTimerLists+0xc0>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f7fe f8ae 	bl	800773a <vListInsert>
 80095de:	e016      	b.n	800960e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095e0:	2300      	movs	r3, #0
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	2300      	movs	r3, #0
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	2100      	movs	r1, #0
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff fd60 	bl	80090b0 <xTimerGenericCommand>
 80095f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	603b      	str	r3, [r7, #0]
}
 800960a:	bf00      	nop
 800960c:	e7fe      	b.n	800960c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800960e:	4b09      	ldr	r3, [pc, #36]	; (8009634 <prvSwitchTimerLists+0xc0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1b1      	bne.n	800957c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009618:	4b06      	ldr	r3, [pc, #24]	; (8009634 <prvSwitchTimerLists+0xc0>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800961e:	4b06      	ldr	r3, [pc, #24]	; (8009638 <prvSwitchTimerLists+0xc4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a04      	ldr	r2, [pc, #16]	; (8009634 <prvSwitchTimerLists+0xc0>)
 8009624:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009626:	4a04      	ldr	r2, [pc, #16]	; (8009638 <prvSwitchTimerLists+0xc4>)
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	6013      	str	r3, [r2, #0]
}
 800962c:	bf00      	nop
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20005388 	.word	0x20005388
 8009638:	2000538c 	.word	0x2000538c

0800963c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009642:	f000 f967 	bl	8009914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009646:	4b15      	ldr	r3, [pc, #84]	; (800969c <prvCheckForValidListAndQueue+0x60>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d120      	bne.n	8009690 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800964e:	4814      	ldr	r0, [pc, #80]	; (80096a0 <prvCheckForValidListAndQueue+0x64>)
 8009650:	f7fe f822 	bl	8007698 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009654:	4813      	ldr	r0, [pc, #76]	; (80096a4 <prvCheckForValidListAndQueue+0x68>)
 8009656:	f7fe f81f 	bl	8007698 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800965a:	4b13      	ldr	r3, [pc, #76]	; (80096a8 <prvCheckForValidListAndQueue+0x6c>)
 800965c:	4a10      	ldr	r2, [pc, #64]	; (80096a0 <prvCheckForValidListAndQueue+0x64>)
 800965e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009660:	4b12      	ldr	r3, [pc, #72]	; (80096ac <prvCheckForValidListAndQueue+0x70>)
 8009662:	4a10      	ldr	r2, [pc, #64]	; (80096a4 <prvCheckForValidListAndQueue+0x68>)
 8009664:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009666:	2300      	movs	r3, #0
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	4b11      	ldr	r3, [pc, #68]	; (80096b0 <prvCheckForValidListAndQueue+0x74>)
 800966c:	4a11      	ldr	r2, [pc, #68]	; (80096b4 <prvCheckForValidListAndQueue+0x78>)
 800966e:	2110      	movs	r1, #16
 8009670:	200a      	movs	r0, #10
 8009672:	f7fe f92d 	bl	80078d0 <xQueueGenericCreateStatic>
 8009676:	4603      	mov	r3, r0
 8009678:	4a08      	ldr	r2, [pc, #32]	; (800969c <prvCheckForValidListAndQueue+0x60>)
 800967a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800967c:	4b07      	ldr	r3, [pc, #28]	; (800969c <prvCheckForValidListAndQueue+0x60>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009684:	4b05      	ldr	r3, [pc, #20]	; (800969c <prvCheckForValidListAndQueue+0x60>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	490b      	ldr	r1, [pc, #44]	; (80096b8 <prvCheckForValidListAndQueue+0x7c>)
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fd46 	bl	800811c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009690:	f000 f970 	bl	8009974 <vPortExitCritical>
}
 8009694:	bf00      	nop
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20005390 	.word	0x20005390
 80096a0:	20005360 	.word	0x20005360
 80096a4:	20005374 	.word	0x20005374
 80096a8:	20005388 	.word	0x20005388
 80096ac:	2000538c 	.word	0x2000538c
 80096b0:	2000543c 	.word	0x2000543c
 80096b4:	2000539c 	.word	0x2000539c
 80096b8:	08017d48 	.word	0x08017d48

080096bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3b04      	subs	r3, #4
 80096cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3b04      	subs	r3, #4
 80096da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f023 0201 	bic.w	r2, r3, #1
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3b04      	subs	r3, #4
 80096ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096ec:	4a0c      	ldr	r2, [pc, #48]	; (8009720 <pxPortInitialiseStack+0x64>)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3b14      	subs	r3, #20
 80096f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3b04      	subs	r3, #4
 8009702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f06f 0202 	mvn.w	r2, #2
 800970a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3b20      	subs	r3, #32
 8009710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009712:	68fb      	ldr	r3, [r7, #12]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	08009725 	.word	0x08009725

08009724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800972e:	4b12      	ldr	r3, [pc, #72]	; (8009778 <prvTaskExitError+0x54>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009736:	d00a      	beq.n	800974e <prvTaskExitError+0x2a>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	60fb      	str	r3, [r7, #12]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <prvTaskExitError+0x28>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	60bb      	str	r3, [r7, #8]
}
 8009760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009762:	bf00      	nop
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0fc      	beq.n	8009764 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800976a:	bf00      	nop
 800976c:	bf00      	nop
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20000010 	.word	0x20000010
 800977c:	00000000 	.word	0x00000000

08009780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <pxCurrentTCBConst2>)
 8009782:	6819      	ldr	r1, [r3, #0]
 8009784:	6808      	ldr	r0, [r1, #0]
 8009786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978a:	f380 8809 	msr	PSP, r0
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f04f 0000 	mov.w	r0, #0
 8009796:	f380 8811 	msr	BASEPRI, r0
 800979a:	4770      	bx	lr
 800979c:	f3af 8000 	nop.w

080097a0 <pxCurrentTCBConst2>:
 80097a0:	20004e60 	.word	0x20004e60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop

080097a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097a8:	4808      	ldr	r0, [pc, #32]	; (80097cc <prvPortStartFirstTask+0x24>)
 80097aa:	6800      	ldr	r0, [r0, #0]
 80097ac:	6800      	ldr	r0, [r0, #0]
 80097ae:	f380 8808 	msr	MSP, r0
 80097b2:	f04f 0000 	mov.w	r0, #0
 80097b6:	f380 8814 	msr	CONTROL, r0
 80097ba:	b662      	cpsie	i
 80097bc:	b661      	cpsie	f
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	df00      	svc	0
 80097c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097ca:	bf00      	nop
 80097cc:	e000ed08 	.word	0xe000ed08

080097d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097d6:	4b46      	ldr	r3, [pc, #280]	; (80098f0 <xPortStartScheduler+0x120>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a46      	ldr	r2, [pc, #280]	; (80098f4 <xPortStartScheduler+0x124>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d10a      	bne.n	80097f6 <xPortStartScheduler+0x26>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	613b      	str	r3, [r7, #16]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097f6:	4b3e      	ldr	r3, [pc, #248]	; (80098f0 <xPortStartScheduler+0x120>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a3f      	ldr	r2, [pc, #252]	; (80098f8 <xPortStartScheduler+0x128>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d10a      	bne.n	8009816 <xPortStartScheduler+0x46>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	60fb      	str	r3, [r7, #12]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009816:	4b39      	ldr	r3, [pc, #228]	; (80098fc <xPortStartScheduler+0x12c>)
 8009818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b2db      	uxtb	r3, r3
 8009820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	22ff      	movs	r2, #255	; 0xff
 8009826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009838:	b2da      	uxtb	r2, r3
 800983a:	4b31      	ldr	r3, [pc, #196]	; (8009900 <xPortStartScheduler+0x130>)
 800983c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800983e:	4b31      	ldr	r3, [pc, #196]	; (8009904 <xPortStartScheduler+0x134>)
 8009840:	2207      	movs	r2, #7
 8009842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009844:	e009      	b.n	800985a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009846:	4b2f      	ldr	r3, [pc, #188]	; (8009904 <xPortStartScheduler+0x134>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3b01      	subs	r3, #1
 800984c:	4a2d      	ldr	r2, [pc, #180]	; (8009904 <xPortStartScheduler+0x134>)
 800984e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	b2db      	uxtb	r3, r3
 8009858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009862:	2b80      	cmp	r3, #128	; 0x80
 8009864:	d0ef      	beq.n	8009846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009866:	4b27      	ldr	r3, [pc, #156]	; (8009904 <xPortStartScheduler+0x134>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f1c3 0307 	rsb	r3, r3, #7
 800986e:	2b04      	cmp	r3, #4
 8009870:	d00a      	beq.n	8009888 <xPortStartScheduler+0xb8>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	60bb      	str	r3, [r7, #8]
}
 8009884:	bf00      	nop
 8009886:	e7fe      	b.n	8009886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009888:	4b1e      	ldr	r3, [pc, #120]	; (8009904 <xPortStartScheduler+0x134>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	021b      	lsls	r3, r3, #8
 800988e:	4a1d      	ldr	r2, [pc, #116]	; (8009904 <xPortStartScheduler+0x134>)
 8009890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009892:	4b1c      	ldr	r3, [pc, #112]	; (8009904 <xPortStartScheduler+0x134>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800989a:	4a1a      	ldr	r2, [pc, #104]	; (8009904 <xPortStartScheduler+0x134>)
 800989c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098a6:	4b18      	ldr	r3, [pc, #96]	; (8009908 <xPortStartScheduler+0x138>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a17      	ldr	r2, [pc, #92]	; (8009908 <xPortStartScheduler+0x138>)
 80098ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098b2:	4b15      	ldr	r3, [pc, #84]	; (8009908 <xPortStartScheduler+0x138>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a14      	ldr	r2, [pc, #80]	; (8009908 <xPortStartScheduler+0x138>)
 80098b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098be:	f000 f8dd 	bl	8009a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098c2:	4b12      	ldr	r3, [pc, #72]	; (800990c <xPortStartScheduler+0x13c>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098c8:	f000 f8fc 	bl	8009ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098cc:	4b10      	ldr	r3, [pc, #64]	; (8009910 <xPortStartScheduler+0x140>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a0f      	ldr	r2, [pc, #60]	; (8009910 <xPortStartScheduler+0x140>)
 80098d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098d8:	f7ff ff66 	bl	80097a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098dc:	f7ff f82e 	bl	800893c <vTaskSwitchContext>
	prvTaskExitError();
 80098e0:	f7ff ff20 	bl	8009724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	e000ed00 	.word	0xe000ed00
 80098f4:	410fc271 	.word	0x410fc271
 80098f8:	410fc270 	.word	0x410fc270
 80098fc:	e000e400 	.word	0xe000e400
 8009900:	2000548c 	.word	0x2000548c
 8009904:	20005490 	.word	0x20005490
 8009908:	e000ed20 	.word	0xe000ed20
 800990c:	20000010 	.word	0x20000010
 8009910:	e000ef34 	.word	0xe000ef34

08009914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	607b      	str	r3, [r7, #4]
}
 800992c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <vPortEnterCritical+0x58>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3301      	adds	r3, #1
 8009934:	4a0d      	ldr	r2, [pc, #52]	; (800996c <vPortEnterCritical+0x58>)
 8009936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009938:	4b0c      	ldr	r3, [pc, #48]	; (800996c <vPortEnterCritical+0x58>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d10f      	bne.n	8009960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009940:	4b0b      	ldr	r3, [pc, #44]	; (8009970 <vPortEnterCritical+0x5c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00a      	beq.n	8009960 <vPortEnterCritical+0x4c>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	603b      	str	r3, [r7, #0]
}
 800995c:	bf00      	nop
 800995e:	e7fe      	b.n	800995e <vPortEnterCritical+0x4a>
	}
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	20000010 	.word	0x20000010
 8009970:	e000ed04 	.word	0xe000ed04

08009974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800997a:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <vPortExitCritical+0x50>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10a      	bne.n	8009998 <vPortExitCritical+0x24>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	607b      	str	r3, [r7, #4]
}
 8009994:	bf00      	nop
 8009996:	e7fe      	b.n	8009996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009998:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <vPortExitCritical+0x50>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3b01      	subs	r3, #1
 800999e:	4a09      	ldr	r2, [pc, #36]	; (80099c4 <vPortExitCritical+0x50>)
 80099a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099a2:	4b08      	ldr	r3, [pc, #32]	; (80099c4 <vPortExitCritical+0x50>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d105      	bne.n	80099b6 <vPortExitCritical+0x42>
 80099aa:	2300      	movs	r3, #0
 80099ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	f383 8811 	msr	BASEPRI, r3
}
 80099b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099b6:	bf00      	nop
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	20000010 	.word	0x20000010
	...

080099d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099d0:	f3ef 8009 	mrs	r0, PSP
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	4b15      	ldr	r3, [pc, #84]	; (8009a30 <pxCurrentTCBConst>)
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	f01e 0f10 	tst.w	lr, #16
 80099e0:	bf08      	it	eq
 80099e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ea:	6010      	str	r0, [r2, #0]
 80099ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099f4:	f380 8811 	msr	BASEPRI, r0
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f7fe ff9c 	bl	800893c <vTaskSwitchContext>
 8009a04:	f04f 0000 	mov.w	r0, #0
 8009a08:	f380 8811 	msr	BASEPRI, r0
 8009a0c:	bc09      	pop	{r0, r3}
 8009a0e:	6819      	ldr	r1, [r3, #0]
 8009a10:	6808      	ldr	r0, [r1, #0]
 8009a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a16:	f01e 0f10 	tst.w	lr, #16
 8009a1a:	bf08      	it	eq
 8009a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a20:	f380 8809 	msr	PSP, r0
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	f3af 8000 	nop.w

08009a30 <pxCurrentTCBConst>:
 8009a30:	20004e60 	.word	0x20004e60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop

08009a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	607b      	str	r3, [r7, #4]
}
 8009a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a52:	f7fe feb9 	bl	80087c8 <xTaskIncrementTick>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d003      	beq.n	8009a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a5c:	4b06      	ldr	r3, [pc, #24]	; (8009a78 <xPortSysTickHandler+0x40>)
 8009a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	2300      	movs	r3, #0
 8009a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f383 8811 	msr	BASEPRI, r3
}
 8009a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	e000ed04 	.word	0xe000ed04

08009a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a80:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <vPortSetupTimerInterrupt+0x34>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a86:	4b0b      	ldr	r3, [pc, #44]	; (8009ab4 <vPortSetupTimerInterrupt+0x38>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a8c:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <vPortSetupTimerInterrupt+0x3c>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a0a      	ldr	r2, [pc, #40]	; (8009abc <vPortSetupTimerInterrupt+0x40>)
 8009a92:	fba2 2303 	umull	r2, r3, r2, r3
 8009a96:	099b      	lsrs	r3, r3, #6
 8009a98:	4a09      	ldr	r2, [pc, #36]	; (8009ac0 <vPortSetupTimerInterrupt+0x44>)
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a9e:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <vPortSetupTimerInterrupt+0x34>)
 8009aa0:	2207      	movs	r2, #7
 8009aa2:	601a      	str	r2, [r3, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	e000e010 	.word	0xe000e010
 8009ab4:	e000e018 	.word	0xe000e018
 8009ab8:	20000004 	.word	0x20000004
 8009abc:	10624dd3 	.word	0x10624dd3
 8009ac0:	e000e014 	.word	0xe000e014

08009ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ad4 <vPortEnableVFP+0x10>
 8009ac8:	6801      	ldr	r1, [r0, #0]
 8009aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ace:	6001      	str	r1, [r0, #0]
 8009ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ad2:	bf00      	nop
 8009ad4:	e000ed88 	.word	0xe000ed88

08009ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ade:	f3ef 8305 	mrs	r3, IPSR
 8009ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b0f      	cmp	r3, #15
 8009ae8:	d914      	bls.n	8009b14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009aea:	4a17      	ldr	r2, [pc, #92]	; (8009b48 <vPortValidateInterruptPriority+0x70>)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4413      	add	r3, r2
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009af4:	4b15      	ldr	r3, [pc, #84]	; (8009b4c <vPortValidateInterruptPriority+0x74>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	7afa      	ldrb	r2, [r7, #11]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d20a      	bcs.n	8009b14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	607b      	str	r3, [r7, #4]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b14:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <vPortValidateInterruptPriority+0x78>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b1c:	4b0d      	ldr	r3, [pc, #52]	; (8009b54 <vPortValidateInterruptPriority+0x7c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d90a      	bls.n	8009b3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	603b      	str	r3, [r7, #0]
}
 8009b36:	bf00      	nop
 8009b38:	e7fe      	b.n	8009b38 <vPortValidateInterruptPriority+0x60>
	}
 8009b3a:	bf00      	nop
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	e000e3f0 	.word	0xe000e3f0
 8009b4c:	2000548c 	.word	0x2000548c
 8009b50:	e000ed0c 	.word	0xe000ed0c
 8009b54:	20005490 	.word	0x20005490

08009b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08a      	sub	sp, #40	; 0x28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b60:	2300      	movs	r3, #0
 8009b62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b64:	f7fe fd74 	bl	8008650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b68:	4b5b      	ldr	r3, [pc, #364]	; (8009cd8 <pvPortMalloc+0x180>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b70:	f000 f920 	bl	8009db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b74:	4b59      	ldr	r3, [pc, #356]	; (8009cdc <pvPortMalloc+0x184>)
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f040 8093 	bne.w	8009ca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01d      	beq.n	8009bc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b88:	2208      	movs	r2, #8
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f003 0307 	and.w	r3, r3, #7
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d014      	beq.n	8009bc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f023 0307 	bic.w	r3, r3, #7
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00a      	beq.n	8009bc4 <pvPortMalloc+0x6c>
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	617b      	str	r3, [r7, #20]
}
 8009bc0:	bf00      	nop
 8009bc2:	e7fe      	b.n	8009bc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d06e      	beq.n	8009ca8 <pvPortMalloc+0x150>
 8009bca:	4b45      	ldr	r3, [pc, #276]	; (8009ce0 <pvPortMalloc+0x188>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d869      	bhi.n	8009ca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bd4:	4b43      	ldr	r3, [pc, #268]	; (8009ce4 <pvPortMalloc+0x18c>)
 8009bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bd8:	4b42      	ldr	r3, [pc, #264]	; (8009ce4 <pvPortMalloc+0x18c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bde:	e004      	b.n	8009bea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d903      	bls.n	8009bfc <pvPortMalloc+0xa4>
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1f1      	bne.n	8009be0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bfc:	4b36      	ldr	r3, [pc, #216]	; (8009cd8 <pvPortMalloc+0x180>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d050      	beq.n	8009ca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2208      	movs	r2, #8
 8009c0c:	4413      	add	r3, r2
 8009c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	2308      	movs	r3, #8
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d91f      	bls.n	8009c68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00a      	beq.n	8009c50 <pvPortMalloc+0xf8>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	613b      	str	r3, [r7, #16]
}
 8009c4c:	bf00      	nop
 8009c4e:	e7fe      	b.n	8009c4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	1ad2      	subs	r2, r2, r3
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c62:	69b8      	ldr	r0, [r7, #24]
 8009c64:	f000 f908 	bl	8009e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c68:	4b1d      	ldr	r3, [pc, #116]	; (8009ce0 <pvPortMalloc+0x188>)
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	4a1b      	ldr	r2, [pc, #108]	; (8009ce0 <pvPortMalloc+0x188>)
 8009c74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c76:	4b1a      	ldr	r3, [pc, #104]	; (8009ce0 <pvPortMalloc+0x188>)
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	4b1b      	ldr	r3, [pc, #108]	; (8009ce8 <pvPortMalloc+0x190>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d203      	bcs.n	8009c8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c82:	4b17      	ldr	r3, [pc, #92]	; (8009ce0 <pvPortMalloc+0x188>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a18      	ldr	r2, [pc, #96]	; (8009ce8 <pvPortMalloc+0x190>)
 8009c88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	685a      	ldr	r2, [r3, #4]
 8009c8e:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <pvPortMalloc+0x184>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	431a      	orrs	r2, r3
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c9e:	4b13      	ldr	r3, [pc, #76]	; (8009cec <pvPortMalloc+0x194>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	4a11      	ldr	r2, [pc, #68]	; (8009cec <pvPortMalloc+0x194>)
 8009ca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ca8:	f7fe fce0 	bl	800866c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	f003 0307 	and.w	r3, r3, #7
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <pvPortMalloc+0x174>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	60fb      	str	r3, [r7, #12]
}
 8009cc8:	bf00      	nop
 8009cca:	e7fe      	b.n	8009cca <pvPortMalloc+0x172>
	return pvReturn;
 8009ccc:	69fb      	ldr	r3, [r7, #28]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3728      	adds	r7, #40	; 0x28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	2000909c 	.word	0x2000909c
 8009cdc:	200090b0 	.word	0x200090b0
 8009ce0:	200090a0 	.word	0x200090a0
 8009ce4:	20009094 	.word	0x20009094
 8009ce8:	200090a4 	.word	0x200090a4
 8009cec:	200090a8 	.word	0x200090a8

08009cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d04d      	beq.n	8009d9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d02:	2308      	movs	r3, #8
 8009d04:	425b      	negs	r3, r3
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	4413      	add	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	4b24      	ldr	r3, [pc, #144]	; (8009da8 <vPortFree+0xb8>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4013      	ands	r3, r2
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10a      	bne.n	8009d34 <vPortFree+0x44>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	60fb      	str	r3, [r7, #12]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00a      	beq.n	8009d52 <vPortFree+0x62>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	60bb      	str	r3, [r7, #8]
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <vPortFree+0xb8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d01e      	beq.n	8009d9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d11a      	bne.n	8009d9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	4b0e      	ldr	r3, [pc, #56]	; (8009da8 <vPortFree+0xb8>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	43db      	mvns	r3, r3
 8009d72:	401a      	ands	r2, r3
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d78:	f7fe fc6a 	bl	8008650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	4b0a      	ldr	r3, [pc, #40]	; (8009dac <vPortFree+0xbc>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4413      	add	r3, r2
 8009d86:	4a09      	ldr	r2, [pc, #36]	; (8009dac <vPortFree+0xbc>)
 8009d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d8a:	6938      	ldr	r0, [r7, #16]
 8009d8c:	f000 f874 	bl	8009e78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d90:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <vPortFree+0xc0>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3301      	adds	r3, #1
 8009d96:	4a06      	ldr	r2, [pc, #24]	; (8009db0 <vPortFree+0xc0>)
 8009d98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d9a:	f7fe fc67 	bl	800866c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d9e:	bf00      	nop
 8009da0:	3718      	adds	r7, #24
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	200090b0 	.word	0x200090b0
 8009dac:	200090a0 	.word	0x200090a0
 8009db0:	200090ac 	.word	0x200090ac

08009db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009dba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009dc0:	4b27      	ldr	r3, [pc, #156]	; (8009e60 <prvHeapInit+0xac>)
 8009dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f003 0307 	and.w	r3, r3, #7
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00c      	beq.n	8009de8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3307      	adds	r3, #7
 8009dd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f023 0307 	bic.w	r3, r3, #7
 8009dda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	4a1f      	ldr	r2, [pc, #124]	; (8009e60 <prvHeapInit+0xac>)
 8009de4:	4413      	add	r3, r2
 8009de6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009dec:	4a1d      	ldr	r2, [pc, #116]	; (8009e64 <prvHeapInit+0xb0>)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009df2:	4b1c      	ldr	r3, [pc, #112]	; (8009e64 <prvHeapInit+0xb0>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e00:	2208      	movs	r2, #8
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	1a9b      	subs	r3, r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f023 0307 	bic.w	r3, r3, #7
 8009e0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4a15      	ldr	r2, [pc, #84]	; (8009e68 <prvHeapInit+0xb4>)
 8009e14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e16:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <prvHeapInit+0xb4>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e1e:	4b12      	ldr	r3, [pc, #72]	; (8009e68 <prvHeapInit+0xb4>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2200      	movs	r2, #0
 8009e24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	1ad2      	subs	r2, r2, r3
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e34:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <prvHeapInit+0xb4>)
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	4a0a      	ldr	r2, [pc, #40]	; (8009e6c <prvHeapInit+0xb8>)
 8009e42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	4a09      	ldr	r2, [pc, #36]	; (8009e70 <prvHeapInit+0xbc>)
 8009e4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e4c:	4b09      	ldr	r3, [pc, #36]	; (8009e74 <prvHeapInit+0xc0>)
 8009e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e52:	601a      	str	r2, [r3, #0]
}
 8009e54:	bf00      	nop
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	20005494 	.word	0x20005494
 8009e64:	20009094 	.word	0x20009094
 8009e68:	2000909c 	.word	0x2000909c
 8009e6c:	200090a4 	.word	0x200090a4
 8009e70:	200090a0 	.word	0x200090a0
 8009e74:	200090b0 	.word	0x200090b0

08009e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e80:	4b28      	ldr	r3, [pc, #160]	; (8009f24 <prvInsertBlockIntoFreeList+0xac>)
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	e002      	b.n	8009e8c <prvInsertBlockIntoFreeList+0x14>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	60fb      	str	r3, [r7, #12]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d8f7      	bhi.n	8009e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d108      	bne.n	8009eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	441a      	add	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	441a      	add	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d118      	bne.n	8009f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	4b15      	ldr	r3, [pc, #84]	; (8009f28 <prvInsertBlockIntoFreeList+0xb0>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d00d      	beq.n	8009ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	441a      	add	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	e008      	b.n	8009f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ef6:	4b0c      	ldr	r3, [pc, #48]	; (8009f28 <prvInsertBlockIntoFreeList+0xb0>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	e003      	b.n	8009f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d002      	beq.n	8009f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f16:	bf00      	nop
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	20009094 	.word	0x20009094
 8009f28:	2000909c 	.word	0x2000909c

08009f2c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fd f910 	bl	8007160 <USBH_LL_IncTimer>
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fd f954 	bl	8007204 <USBH_LL_Connect>
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fd f969 	bl	800724a <USBH_LL_Disconnect>
}
 8009f78:	bf00      	nop
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fd f989 	bl	80072ae <USBH_LL_NotifyURBChange>
#endif
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fd f8fe 	bl	80071b4 <USBH_LL_PortEnabled>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fd f90a 	bl	80071e8 <USBH_LL_PortDisabled>
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7f8 ff08 	bl	8002e08 <HAL_HCD_Stop>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 f808 	bl	800a014 <USBH_Get_USB_Status>
 800a004:	4603      	mov	r3, r0
 800a006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a008:	7bbb      	ldrb	r3, [r7, #14]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	2b03      	cmp	r3, #3
 800a026:	d817      	bhi.n	800a058 <USBH_Get_USB_Status+0x44>
 800a028:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <USBH_Get_USB_Status+0x1c>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a041 	.word	0x0800a041
 800a034:	0800a047 	.word	0x0800a047
 800a038:	0800a04d 	.word	0x0800a04d
 800a03c:	0800a053 	.word	0x0800a053
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]
    break;
 800a044:	e00b      	b.n	800a05e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a046:	2302      	movs	r3, #2
 800a048:	73fb      	strb	r3, [r7, #15]
    break;
 800a04a:	e008      	b.n	800a05e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a04c:	2301      	movs	r3, #1
 800a04e:	73fb      	strb	r3, [r7, #15]
    break;
 800a050:	e005      	b.n	800a05e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a052:	2302      	movs	r3, #2
 800a054:	73fb      	strb	r3, [r7, #15]
    break;
 800a056:	e002      	b.n	800a05e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a058:	2302      	movs	r3, #2
 800a05a:	73fb      	strb	r3, [r7, #15]
    break;
 800a05c:	bf00      	nop
  }
  return usb_status;
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <rcl_get_zero_initialized_node>:
 800a06c:	4a03      	ldr	r2, [pc, #12]	; (800a07c <rcl_get_zero_initialized_node+0x10>)
 800a06e:	4603      	mov	r3, r0
 800a070:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a074:	e883 0003 	stmia.w	r3, {r0, r1}
 800a078:	4618      	mov	r0, r3
 800a07a:	4770      	bx	lr
 800a07c:	08017dd0 	.word	0x08017dd0

0800a080 <rcl_node_init>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	b0a9      	sub	sp, #164	; 0xa4
 800a086:	4604      	mov	r4, r0
 800a088:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800a08c:	a823      	add	r0, sp, #140	; 0x8c
 800a08e:	460e      	mov	r6, r1
 800a090:	4615      	mov	r5, r2
 800a092:	461f      	mov	r7, r3
 800a094:	f006 fc6a 	bl	801096c <rcl_guard_condition_get_default_options>
 800a098:	f1b8 0f00 	cmp.w	r8, #0
 800a09c:	f000 80e6 	beq.w	800a26c <rcl_node_init+0x1ec>
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	f001 fa3d 	bl	800b520 <rcutils_allocator_is_valid>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	f000 80e0 	beq.w	800a26c <rcl_node_init+0x1ec>
 800a0ac:	2e00      	cmp	r6, #0
 800a0ae:	f000 80dd 	beq.w	800a26c <rcl_node_init+0x1ec>
 800a0b2:	2d00      	cmp	r5, #0
 800a0b4:	f000 80da 	beq.w	800a26c <rcl_node_init+0x1ec>
 800a0b8:	2c00      	cmp	r4, #0
 800a0ba:	f000 80d7 	beq.w	800a26c <rcl_node_init+0x1ec>
 800a0be:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a0c2:	f1b9 0f00 	cmp.w	r9, #0
 800a0c6:	f040 80fd 	bne.w	800a2c4 <rcl_node_init+0x244>
 800a0ca:	2f00      	cmp	r7, #0
 800a0cc:	f000 80ce 	beq.w	800a26c <rcl_node_init+0x1ec>
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	f006 fb09 	bl	80106e8 <rcl_context_is_valid>
 800a0d6:	4682      	mov	sl, r0
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	f000 80cd 	beq.w	800a278 <rcl_node_init+0x1f8>
 800a0de:	464a      	mov	r2, r9
 800a0e0:	a922      	add	r1, sp, #136	; 0x88
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800a0e8:	f001 fc8a 	bl	800ba00 <rmw_validate_node_name>
 800a0ec:	4681      	mov	r9, r0
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f040 80be 	bne.w	800a270 <rcl_node_init+0x1f0>
 800a0f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f040 80f0 	bne.w	800a2dc <rcl_node_init+0x25c>
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f7f6 f871 	bl	80001e4 <strlen>
 800a102:	2800      	cmp	r0, #0
 800a104:	f040 80bb 	bne.w	800a27e <rcl_node_init+0x1fe>
 800a108:	4d7c      	ldr	r5, [pc, #496]	; (800a2fc <rcl_node_init+0x27c>)
 800a10a:	a922      	add	r1, sp, #136	; 0x88
 800a10c:	2200      	movs	r2, #0
 800a10e:	4628      	mov	r0, r5
 800a110:	f001 fc58 	bl	800b9c4 <rmw_validate_namespace>
 800a114:	4681      	mov	r9, r0
 800a116:	2800      	cmp	r0, #0
 800a118:	f040 80aa 	bne.w	800a270 <rcl_node_init+0x1f0>
 800a11c:	4682      	mov	sl, r0
 800a11e:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a120:	2800      	cmp	r0, #0
 800a122:	f040 80e0 	bne.w	800a2e6 <rcl_node_init+0x266>
 800a126:	f8d8 3000 	ldr.w	r3, [r8]
 800a12a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a12e:	2078      	movs	r0, #120	; 0x78
 800a130:	4798      	blx	r3
 800a132:	4681      	mov	r9, r0
 800a134:	6060      	str	r0, [r4, #4]
 800a136:	2800      	cmp	r0, #0
 800a138:	f000 80ca 	beq.w	800a2d0 <rcl_node_init+0x250>
 800a13c:	2200      	movs	r2, #0
 800a13e:	2300      	movs	r3, #0
 800a140:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800a144:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800a148:	a808      	add	r0, sp, #32
 800a14a:	f000 f939 	bl	800a3c0 <rcl_node_get_default_options>
 800a14e:	a908      	add	r1, sp, #32
 800a150:	4648      	mov	r0, r9
 800a152:	2268      	movs	r2, #104	; 0x68
 800a154:	f00c fea0 	bl	8016e98 <memcpy>
 800a158:	6861      	ldr	r1, [r4, #4]
 800a15a:	6027      	str	r7, [r4, #0]
 800a15c:	4640      	mov	r0, r8
 800a15e:	f000 f93d 	bl	800a3dc <rcl_node_options_copy>
 800a162:	2800      	cmp	r0, #0
 800a164:	d158      	bne.n	800a218 <rcl_node_init+0x198>
 800a166:	4628      	mov	r0, r5
 800a168:	f7f6 f83c 	bl	80001e4 <strlen>
 800a16c:	4428      	add	r0, r5
 800a16e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800a172:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800a176:	2b2f      	cmp	r3, #47	; 0x2f
 800a178:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	bf0c      	ite	eq
 800a180:	4b5f      	ldreq	r3, [pc, #380]	; (800a300 <rcl_node_init+0x280>)
 800a182:	4b60      	ldrne	r3, [pc, #384]	; (800a304 <rcl_node_init+0x284>)
 800a184:	9302      	str	r3, [sp, #8]
 800a186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800a190:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a194:	f001 fa1c 	bl	800b5d0 <rcutils_format_string_limit>
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800a19e:	6818      	ldr	r0, [r3, #0]
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	3028      	adds	r0, #40	; 0x28
 800a1a4:	462a      	mov	r2, r5
 800a1a6:	6866      	ldr	r6, [r4, #4]
 800a1a8:	f001 fd18 	bl	800bbdc <rmw_create_node>
 800a1ac:	6863      	ldr	r3, [r4, #4]
 800a1ae:	66b0      	str	r0, [r6, #104]	; 0x68
 800a1b0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d032      	beq.n	800a21c <rcl_node_init+0x19c>
 800a1b6:	f001 fda5 	bl	800bd04 <rmw_node_get_graph_guard_condition>
 800a1ba:	4681      	mov	r9, r0
 800a1bc:	b360      	cbz	r0, 800a218 <rcl_node_init+0x198>
 800a1be:	f8d8 3000 	ldr.w	r3, [r8]
 800a1c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a1c6:	6866      	ldr	r6, [r4, #4]
 800a1c8:	2008      	movs	r0, #8
 800a1ca:	4798      	blx	r3
 800a1cc:	6863      	ldr	r3, [r4, #4]
 800a1ce:	66f0      	str	r0, [r6, #108]	; 0x6c
 800a1d0:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800a1d4:	f1bb 0f00 	cmp.w	fp, #0
 800a1d8:	d020      	beq.n	800a21c <rcl_node_init+0x19c>
 800a1da:	a806      	add	r0, sp, #24
 800a1dc:	f006 faea 	bl	80107b4 <rcl_get_zero_initialized_guard_condition>
 800a1e0:	a806      	add	r0, sp, #24
 800a1e2:	c803      	ldmia	r0, {r0, r1}
 800a1e4:	6863      	ldr	r3, [r4, #4]
 800a1e6:	46c4      	mov	ip, r8
 800a1e8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800a1ec:	e88b 0003 	stmia.w	fp, {r0, r1}
 800a1f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a1f4:	ae23      	add	r6, sp, #140	; 0x8c
 800a1f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a1f8:	f8dc 3000 	ldr.w	r3, [ip]
 800a1fc:	6033      	str	r3, [r6, #0]
 800a1fe:	ab28      	add	r3, sp, #160	; 0xa0
 800a200:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a204:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a208:	4649      	mov	r1, r9
 800a20a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a20c:	463a      	mov	r2, r7
 800a20e:	4670      	mov	r0, lr
 800a210:	f006 fb26 	bl	8010860 <rcl_guard_condition_init_from_rmw>
 800a214:	4681      	mov	r9, r0
 800a216:	b328      	cbz	r0, 800a264 <rcl_node_init+0x1e4>
 800a218:	6863      	ldr	r3, [r4, #4]
 800a21a:	b1f3      	cbz	r3, 800a25a <rcl_node_init+0x1da>
 800a21c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a21e:	b128      	cbz	r0, 800a22c <rcl_node_init+0x1ac>
 800a220:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a224:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a228:	4798      	blx	r3
 800a22a:	6863      	ldr	r3, [r4, #4]
 800a22c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a22e:	b110      	cbz	r0, 800a236 <rcl_node_init+0x1b6>
 800a230:	f001 fcec 	bl	800bc0c <rmw_destroy_node>
 800a234:	6863      	ldr	r3, [r4, #4]
 800a236:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a238:	b148      	cbz	r0, 800a24e <rcl_node_init+0x1ce>
 800a23a:	f006 fb71 	bl	8010920 <rcl_guard_condition_fini>
 800a23e:	6863      	ldr	r3, [r4, #4]
 800a240:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a244:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a246:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a24a:	4798      	blx	r3
 800a24c:	6863      	ldr	r3, [r4, #4]
 800a24e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a252:	4618      	mov	r0, r3
 800a254:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a258:	4798      	blx	r3
 800a25a:	2300      	movs	r3, #0
 800a25c:	e9c4 3300 	strd	r3, r3, [r4]
 800a260:	f04f 0901 	mov.w	r9, #1
 800a264:	f1ba 0f00 	cmp.w	sl, #0
 800a268:	d125      	bne.n	800a2b6 <rcl_node_init+0x236>
 800a26a:	e001      	b.n	800a270 <rcl_node_init+0x1f0>
 800a26c:	f04f 090b 	mov.w	r9, #11
 800a270:	4648      	mov	r0, r9
 800a272:	b029      	add	sp, #164	; 0xa4
 800a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a278:	f04f 0965 	mov.w	r9, #101	; 0x65
 800a27c:	e7f8      	b.n	800a270 <rcl_node_init+0x1f0>
 800a27e:	782b      	ldrb	r3, [r5, #0]
 800a280:	2b2f      	cmp	r3, #47	; 0x2f
 800a282:	f43f af42 	beq.w	800a10a <rcl_node_init+0x8a>
 800a286:	9503      	str	r5, [sp, #12]
 800a288:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	4b1e      	ldr	r3, [pc, #120]	; (800a308 <rcl_node_init+0x288>)
 800a290:	9302      	str	r3, [sp, #8]
 800a292:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800a29c:	f001 f998 	bl	800b5d0 <rcutils_format_string_limit>
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	b340      	cbz	r0, 800a2f6 <rcl_node_init+0x276>
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	a922      	add	r1, sp, #136	; 0x88
 800a2a8:	9222      	str	r2, [sp, #136]	; 0x88
 800a2aa:	f001 fb8b 	bl	800b9c4 <rmw_validate_namespace>
 800a2ae:	4681      	mov	r9, r0
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	f43f af34 	beq.w	800a11e <rcl_node_init+0x9e>
 800a2b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a2ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a2be:	4628      	mov	r0, r5
 800a2c0:	4798      	blx	r3
 800a2c2:	e7d5      	b.n	800a270 <rcl_node_init+0x1f0>
 800a2c4:	f04f 0964 	mov.w	r9, #100	; 0x64
 800a2c8:	4648      	mov	r0, r9
 800a2ca:	b029      	add	sp, #164	; 0xa4
 800a2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d0:	f04f 090a 	mov.w	r9, #10
 800a2d4:	f1ba 0f00 	cmp.w	sl, #0
 800a2d8:	d1ed      	bne.n	800a2b6 <rcl_node_init+0x236>
 800a2da:	e7c9      	b.n	800a270 <rcl_node_init+0x1f0>
 800a2dc:	f001 fbe2 	bl	800baa4 <rmw_node_name_validation_result_string>
 800a2e0:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800a2e4:	e7c4      	b.n	800a270 <rcl_node_init+0x1f0>
 800a2e6:	f001 fb7f 	bl	800b9e8 <rmw_namespace_validation_result_string>
 800a2ea:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800a2ee:	f1ba 0f00 	cmp.w	sl, #0
 800a2f2:	d1e0      	bne.n	800a2b6 <rcl_node_init+0x236>
 800a2f4:	e7bc      	b.n	800a270 <rcl_node_init+0x1f0>
 800a2f6:	f04f 090a 	mov.w	r9, #10
 800a2fa:	e7b9      	b.n	800a270 <rcl_node_init+0x1f0>
 800a2fc:	08017db8 	.word	0x08017db8
 800a300:	08017dc0 	.word	0x08017dc0
 800a304:	08017dc8 	.word	0x08017dc8
 800a308:	08017dbc 	.word	0x08017dbc

0800a30c <rcl_node_fini>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	b320      	cbz	r0, 800a35a <rcl_node_fini+0x4e>
 800a310:	6845      	ldr	r5, [r0, #4]
 800a312:	4604      	mov	r4, r0
 800a314:	b1fd      	cbz	r5, 800a356 <rcl_node_fini+0x4a>
 800a316:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800a318:	686f      	ldr	r7, [r5, #4]
 800a31a:	692e      	ldr	r6, [r5, #16]
 800a31c:	f001 fc76 	bl	800bc0c <rmw_destroy_node>
 800a320:	6863      	ldr	r3, [r4, #4]
 800a322:	4605      	mov	r5, r0
 800a324:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a326:	f006 fafb 	bl	8010920 <rcl_guard_condition_fini>
 800a32a:	ea55 0300 	orrs.w	r3, r5, r0
 800a32e:	6863      	ldr	r3, [r4, #4]
 800a330:	4631      	mov	r1, r6
 800a332:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a334:	bf14      	ite	ne
 800a336:	2501      	movne	r5, #1
 800a338:	2500      	moveq	r5, #0
 800a33a:	47b8      	blx	r7
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	4631      	mov	r1, r6
 800a340:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a342:	47b8      	blx	r7
 800a344:	6863      	ldr	r3, [r4, #4]
 800a346:	4631      	mov	r1, r6
 800a348:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a34a:	47b8      	blx	r7
 800a34c:	6860      	ldr	r0, [r4, #4]
 800a34e:	4631      	mov	r1, r6
 800a350:	47b8      	blx	r7
 800a352:	2300      	movs	r3, #0
 800a354:	6063      	str	r3, [r4, #4]
 800a356:	4628      	mov	r0, r5
 800a358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a35a:	25c8      	movs	r5, #200	; 0xc8
 800a35c:	4628      	mov	r0, r5
 800a35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a360 <rcl_node_is_valid_except_context>:
 800a360:	b128      	cbz	r0, 800a36e <rcl_node_is_valid_except_context+0xe>
 800a362:	6840      	ldr	r0, [r0, #4]
 800a364:	b118      	cbz	r0, 800a36e <rcl_node_is_valid_except_context+0xe>
 800a366:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a368:	3800      	subs	r0, #0
 800a36a:	bf18      	it	ne
 800a36c:	2001      	movne	r0, #1
 800a36e:	4770      	bx	lr

0800a370 <rcl_node_is_valid>:
 800a370:	b130      	cbz	r0, 800a380 <rcl_node_is_valid+0x10>
 800a372:	6843      	ldr	r3, [r0, #4]
 800a374:	b123      	cbz	r3, 800a380 <rcl_node_is_valid+0x10>
 800a376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a378:	b113      	cbz	r3, 800a380 <rcl_node_is_valid+0x10>
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	f006 b9b4 	b.w	80106e8 <rcl_context_is_valid>
 800a380:	2000      	movs	r0, #0
 800a382:	4770      	bx	lr

0800a384 <rcl_node_get_name>:
 800a384:	b120      	cbz	r0, 800a390 <rcl_node_get_name+0xc>
 800a386:	6840      	ldr	r0, [r0, #4]
 800a388:	b110      	cbz	r0, 800a390 <rcl_node_get_name+0xc>
 800a38a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a38c:	b100      	cbz	r0, 800a390 <rcl_node_get_name+0xc>
 800a38e:	6880      	ldr	r0, [r0, #8]
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop

0800a394 <rcl_node_get_namespace>:
 800a394:	b120      	cbz	r0, 800a3a0 <rcl_node_get_namespace+0xc>
 800a396:	6840      	ldr	r0, [r0, #4]
 800a398:	b110      	cbz	r0, 800a3a0 <rcl_node_get_namespace+0xc>
 800a39a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a39c:	b100      	cbz	r0, 800a3a0 <rcl_node_get_namespace+0xc>
 800a39e:	68c0      	ldr	r0, [r0, #12]
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop

0800a3a4 <rcl_node_get_options>:
 800a3a4:	b128      	cbz	r0, 800a3b2 <rcl_node_get_options+0xe>
 800a3a6:	6840      	ldr	r0, [r0, #4]
 800a3a8:	b118      	cbz	r0, 800a3b2 <rcl_node_get_options+0xe>
 800a3aa:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	bf08      	it	eq
 800a3b0:	2000      	moveq	r0, #0
 800a3b2:	4770      	bx	lr

0800a3b4 <rcl_node_get_rmw_handle>:
 800a3b4:	b110      	cbz	r0, 800a3bc <rcl_node_get_rmw_handle+0x8>
 800a3b6:	6840      	ldr	r0, [r0, #4]
 800a3b8:	b100      	cbz	r0, 800a3bc <rcl_node_get_rmw_handle+0x8>
 800a3ba:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop

0800a3c0 <rcl_node_get_default_options>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	2268      	movs	r2, #104	; 0x68
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	f00c fc9e 	bl	8016d08 <memset>
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f001 f899 	bl	800b504 <rcutils_get_default_allocator>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	7523      	strb	r3, [r4, #20]
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	bd10      	pop	{r4, pc}
 800a3da:	bf00      	nop

0800a3dc <rcl_node_options_copy>:
 800a3dc:	b1d0      	cbz	r0, 800a414 <rcl_node_options_copy+0x38>
 800a3de:	b570      	push	{r4, r5, r6, lr}
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	b1a9      	cbz	r1, 800a410 <rcl_node_options_copy+0x34>
 800a3e4:	4288      	cmp	r0, r1
 800a3e6:	4684      	mov	ip, r0
 800a3e8:	d012      	beq.n	800a410 <rcl_node_options_copy+0x34>
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	8a86      	ldrh	r6, [r0, #20]
 800a3ee:	468e      	mov	lr, r1
 800a3f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	f8ce 3000 	str.w	r3, [lr]
 800a3fc:	f10c 0118 	add.w	r1, ip, #24
 800a400:	2250      	movs	r2, #80	; 0x50
 800a402:	82a6      	strh	r6, [r4, #20]
 800a404:	f104 0018 	add.w	r0, r4, #24
 800a408:	f00c fd46 	bl	8016e98 <memcpy>
 800a40c:	2000      	movs	r0, #0
 800a40e:	bd70      	pop	{r4, r5, r6, pc}
 800a410:	200b      	movs	r0, #11
 800a412:	bd70      	pop	{r4, r5, r6, pc}
 800a414:	200b      	movs	r0, #11
 800a416:	4770      	bx	lr

0800a418 <rcl_get_zero_initialized_publisher>:
 800a418:	4b01      	ldr	r3, [pc, #4]	; (800a420 <rcl_get_zero_initialized_publisher+0x8>)
 800a41a:	6818      	ldr	r0, [r3, #0]
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	08017dd8 	.word	0x08017dd8

0800a424 <rcl_publisher_init>:
 800a424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a428:	b088      	sub	sp, #32
 800a42a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a42c:	2d00      	cmp	r5, #0
 800a42e:	d069      	beq.n	800a504 <rcl_publisher_init+0xe0>
 800a430:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800a434:	4604      	mov	r4, r0
 800a436:	4648      	mov	r0, r9
 800a438:	460e      	mov	r6, r1
 800a43a:	4690      	mov	r8, r2
 800a43c:	461f      	mov	r7, r3
 800a43e:	f001 f86f 	bl	800b520 <rcutils_allocator_is_valid>
 800a442:	2800      	cmp	r0, #0
 800a444:	d05e      	beq.n	800a504 <rcl_publisher_init+0xe0>
 800a446:	2c00      	cmp	r4, #0
 800a448:	d05c      	beq.n	800a504 <rcl_publisher_init+0xe0>
 800a44a:	f8d4 a000 	ldr.w	sl, [r4]
 800a44e:	f1ba 0f00 	cmp.w	sl, #0
 800a452:	d004      	beq.n	800a45e <rcl_publisher_init+0x3a>
 800a454:	2764      	movs	r7, #100	; 0x64
 800a456:	4638      	mov	r0, r7
 800a458:	b008      	add	sp, #32
 800a45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45e:	4630      	mov	r0, r6
 800a460:	f7ff ff86 	bl	800a370 <rcl_node_is_valid>
 800a464:	2800      	cmp	r0, #0
 800a466:	d052      	beq.n	800a50e <rcl_publisher_init+0xea>
 800a468:	f1b8 0f00 	cmp.w	r8, #0
 800a46c:	d04a      	beq.n	800a504 <rcl_publisher_init+0xe0>
 800a46e:	2f00      	cmp	r7, #0
 800a470:	d048      	beq.n	800a504 <rcl_publisher_init+0xe0>
 800a472:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a476:	aa07      	add	r2, sp, #28
 800a478:	9205      	str	r2, [sp, #20]
 800a47a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800a47e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a482:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a486:	f8cd a01c 	str.w	sl, [sp, #28]
 800a48a:	4639      	mov	r1, r7
 800a48c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a490:	4630      	mov	r0, r6
 800a492:	f006 fcc1 	bl	8010e18 <rcl_node_resolve_name>
 800a496:	4607      	mov	r7, r0
 800a498:	2800      	cmp	r0, #0
 800a49a:	d14f      	bne.n	800a53c <rcl_publisher_init+0x118>
 800a49c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a49e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a4a0:	20c8      	movs	r0, #200	; 0xc8
 800a4a2:	4798      	blx	r3
 800a4a4:	6020      	str	r0, [r4, #0]
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d04e      	beq.n	800a548 <rcl_publisher_init+0x124>
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7ff ff82 	bl	800a3b4 <rcl_node_get_rmw_handle>
 800a4b0:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	9a07      	ldr	r2, [sp, #28]
 800a4b8:	6827      	ldr	r7, [r4, #0]
 800a4ba:	462b      	mov	r3, r5
 800a4bc:	4641      	mov	r1, r8
 800a4be:	f001 fc8b 	bl	800bdd8 <rmw_create_publisher>
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800a4c8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a4cc:	b370      	cbz	r0, 800a52c <rcl_publisher_init+0x108>
 800a4ce:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800a4d2:	f001 fd5f 	bl	800bf94 <rmw_publisher_get_actual_qos>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	4607      	mov	r7, r0
 800a4da:	b9d0      	cbnz	r0, 800a512 <rcl_publisher_init+0xee>
 800a4dc:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800a4e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	2270      	movs	r2, #112	; 0x70
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f00c fcd5 	bl	8016e98 <memcpy>
 800a4ee:	6832      	ldr	r2, [r6, #0]
 800a4f0:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800a4f4:	9807      	ldr	r0, [sp, #28]
 800a4f6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800a4f8:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a4fa:	4798      	blx	r3
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	b008      	add	sp, #32
 800a500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a504:	270b      	movs	r7, #11
 800a506:	4638      	mov	r0, r7
 800a508:	b008      	add	sp, #32
 800a50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50e:	27c8      	movs	r7, #200	; 0xc8
 800a510:	e7a1      	b.n	800a456 <rcl_publisher_init+0x32>
 800a512:	b18b      	cbz	r3, 800a538 <rcl_publisher_init+0x114>
 800a514:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a518:	b142      	cbz	r2, 800a52c <rcl_publisher_init+0x108>
 800a51a:	4630      	mov	r0, r6
 800a51c:	f7ff ff4a 	bl	800a3b4 <rcl_node_get_rmw_handle>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800a526:	f001 fd45 	bl	800bfb4 <rmw_destroy_publisher>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800a52e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a530:	4618      	mov	r0, r3
 800a532:	4790      	blx	r2
 800a534:	2300      	movs	r3, #0
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	2701      	movs	r7, #1
 800a53a:	e7db      	b.n	800a4f4 <rcl_publisher_init+0xd0>
 800a53c:	2867      	cmp	r0, #103	; 0x67
 800a53e:	d0d9      	beq.n	800a4f4 <rcl_publisher_init+0xd0>
 800a540:	2869      	cmp	r0, #105	; 0x69
 800a542:	d003      	beq.n	800a54c <rcl_publisher_init+0x128>
 800a544:	280a      	cmp	r0, #10
 800a546:	d1f7      	bne.n	800a538 <rcl_publisher_init+0x114>
 800a548:	270a      	movs	r7, #10
 800a54a:	e7d3      	b.n	800a4f4 <rcl_publisher_init+0xd0>
 800a54c:	2767      	movs	r7, #103	; 0x67
 800a54e:	e7d1      	b.n	800a4f4 <rcl_publisher_init+0xd0>

0800a550 <rcl_publisher_fini>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	b300      	cbz	r0, 800a596 <rcl_publisher_fini+0x46>
 800a554:	4604      	mov	r4, r0
 800a556:	4608      	mov	r0, r1
 800a558:	460d      	mov	r5, r1
 800a55a:	f7ff ff01 	bl	800a360 <rcl_node_is_valid_except_context>
 800a55e:	b1f0      	cbz	r0, 800a59e <rcl_publisher_fini+0x4e>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	b1ab      	cbz	r3, 800a590 <rcl_publisher_fini+0x40>
 800a564:	4628      	mov	r0, r5
 800a566:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 800a568:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800a56a:	f7ff ff23 	bl	800a3b4 <rcl_node_get_rmw_handle>
 800a56e:	b1c8      	cbz	r0, 800a5a4 <rcl_publisher_fini+0x54>
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800a576:	f001 fd1d 	bl	800bfb4 <rmw_destroy_publisher>
 800a57a:	4603      	mov	r3, r0
 800a57c:	4629      	mov	r1, r5
 800a57e:	6820      	ldr	r0, [r4, #0]
 800a580:	1e1d      	subs	r5, r3, #0
 800a582:	bf18      	it	ne
 800a584:	2501      	movne	r5, #1
 800a586:	47b0      	blx	r6
 800a588:	2300      	movs	r3, #0
 800a58a:	6023      	str	r3, [r4, #0]
 800a58c:	4628      	mov	r0, r5
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	461d      	mov	r5, r3
 800a592:	4628      	mov	r0, r5
 800a594:	bd70      	pop	{r4, r5, r6, pc}
 800a596:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800a59a:	4628      	mov	r0, r5
 800a59c:	bd70      	pop	{r4, r5, r6, pc}
 800a59e:	25c8      	movs	r5, #200	; 0xc8
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	bd70      	pop	{r4, r5, r6, pc}
 800a5a4:	250b      	movs	r5, #11
 800a5a6:	e7f1      	b.n	800a58c <rcl_publisher_fini+0x3c>

0800a5a8 <rcl_publisher_get_default_options>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	4d14      	ldr	r5, [pc, #80]	; (800a5fc <rcl_publisher_get_default_options+0x54>)
 800a5ac:	4914      	ldr	r1, [pc, #80]	; (800a600 <rcl_publisher_get_default_options+0x58>)
 800a5ae:	b088      	sub	sp, #32
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	2250      	movs	r2, #80	; 0x50
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	f00c fc6f 	bl	8016e98 <memcpy>
 800a5ba:	a802      	add	r0, sp, #8
 800a5bc:	f000 ffa2 	bl	800b504 <rcutils_get_default_allocator>
 800a5c0:	f10d 0c08 	add.w	ip, sp, #8
 800a5c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a5c8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800a5cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a5d0:	466e      	mov	r6, sp
 800a5d2:	f8dc 3000 	ldr.w	r3, [ip]
 800a5d6:	f8ce 3000 	str.w	r3, [lr]
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f001 f9a0 	bl	800b920 <rmw_get_default_publisher_options>
 800a5e0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a5e4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800a5e8:	e883 0003 	stmia.w	r3, {r0, r1}
 800a5ec:	2270      	movs	r2, #112	; 0x70
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f00c fc51 	bl	8016e98 <memcpy>
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	b008      	add	sp, #32
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	200093b8 	.word	0x200093b8
 800a600:	08017de0 	.word	0x08017de0

0800a604 <rcl_publish>:
 800a604:	b1f8      	cbz	r0, 800a646 <rcl_publish+0x42>
 800a606:	6803      	ldr	r3, [r0, #0]
 800a608:	b570      	push	{r4, r5, r6, lr}
 800a60a:	4604      	mov	r4, r0
 800a60c:	b1b3      	cbz	r3, 800a63c <rcl_publish+0x38>
 800a60e:	4616      	mov	r6, r2
 800a610:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a614:	b192      	cbz	r2, 800a63c <rcl_publish+0x38>
 800a616:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800a61a:	460d      	mov	r5, r1
 800a61c:	f006 f864 	bl	80106e8 <rcl_context_is_valid>
 800a620:	b160      	cbz	r0, 800a63c <rcl_publish+0x38>
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a628:	b140      	cbz	r0, 800a63c <rcl_publish+0x38>
 800a62a:	b155      	cbz	r5, 800a642 <rcl_publish+0x3e>
 800a62c:	4632      	mov	r2, r6
 800a62e:	4629      	mov	r1, r5
 800a630:	f001 fb72 	bl	800bd18 <rmw_publish>
 800a634:	3800      	subs	r0, #0
 800a636:	bf18      	it	ne
 800a638:	2001      	movne	r0, #1
 800a63a:	bd70      	pop	{r4, r5, r6, pc}
 800a63c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a640:	bd70      	pop	{r4, r5, r6, pc}
 800a642:	200b      	movs	r0, #11
 800a644:	bd70      	pop	{r4, r5, r6, pc}
 800a646:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a64a:	4770      	bx	lr

0800a64c <rcl_publisher_is_valid>:
 800a64c:	b1a0      	cbz	r0, 800a678 <rcl_publisher_is_valid+0x2c>
 800a64e:	6803      	ldr	r3, [r0, #0]
 800a650:	b510      	push	{r4, lr}
 800a652:	4604      	mov	r4, r0
 800a654:	b173      	cbz	r3, 800a674 <rcl_publisher_is_valid+0x28>
 800a656:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a65a:	b15a      	cbz	r2, 800a674 <rcl_publisher_is_valid+0x28>
 800a65c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800a660:	f006 f842 	bl	80106e8 <rcl_context_is_valid>
 800a664:	b130      	cbz	r0, 800a674 <rcl_publisher_is_valid+0x28>
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a66c:	3800      	subs	r0, #0
 800a66e:	bf18      	it	ne
 800a670:	2001      	movne	r0, #1
 800a672:	bd10      	pop	{r4, pc}
 800a674:	2000      	movs	r0, #0
 800a676:	bd10      	pop	{r4, pc}
 800a678:	2000      	movs	r0, #0
 800a67a:	4770      	bx	lr

0800a67c <rcl_publisher_is_valid_except_context>:
 800a67c:	b130      	cbz	r0, 800a68c <rcl_publisher_is_valid_except_context+0x10>
 800a67e:	6800      	ldr	r0, [r0, #0]
 800a680:	b120      	cbz	r0, 800a68c <rcl_publisher_is_valid_except_context+0x10>
 800a682:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800a686:	3800      	subs	r0, #0
 800a688:	bf18      	it	ne
 800a68a:	2001      	movne	r0, #1
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop

0800a690 <_rclc_check_for_new_data>:
 800a690:	2800      	cmp	r0, #0
 800a692:	d046      	beq.n	800a722 <_rclc_check_for_new_data+0x92>
 800a694:	b510      	push	{r4, lr}
 800a696:	7802      	ldrb	r2, [r0, #0]
 800a698:	b084      	sub	sp, #16
 800a69a:	4603      	mov	r3, r0
 800a69c:	2a0a      	cmp	r2, #10
 800a69e:	d842      	bhi.n	800a726 <_rclc_check_for_new_data+0x96>
 800a6a0:	e8df f002 	tbb	[pc, r2]
 800a6a4:	14181212 	.word	0x14181212
 800a6a8:	06060614 	.word	0x06060614
 800a6ac:	2e1a      	.short	0x2e1a
 800a6ae:	16          	.byte	0x16
 800a6af:	00          	.byte	0x00
 800a6b0:	6a0a      	ldr	r2, [r1, #32]
 800a6b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a6b4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	1a12      	subs	r2, r2, r0
 800a6bc:	bf18      	it	ne
 800a6be:	2201      	movne	r2, #1
 800a6c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800a6c4:	b004      	add	sp, #16
 800a6c6:	bd10      	pop	{r4, pc}
 800a6c8:	680a      	ldr	r2, [r1, #0]
 800a6ca:	e7f2      	b.n	800a6b2 <_rclc_check_for_new_data+0x22>
 800a6cc:	698a      	ldr	r2, [r1, #24]
 800a6ce:	e7f0      	b.n	800a6b2 <_rclc_check_for_new_data+0x22>
 800a6d0:	688a      	ldr	r2, [r1, #8]
 800a6d2:	e7ee      	b.n	800a6b2 <_rclc_check_for_new_data+0x22>
 800a6d4:	690a      	ldr	r2, [r1, #16]
 800a6d6:	e7ec      	b.n	800a6b2 <_rclc_check_for_new_data+0x22>
 800a6d8:	685c      	ldr	r4, [r3, #4]
 800a6da:	4608      	mov	r0, r1
 800a6dc:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800a6e0:	f104 0143 	add.w	r1, r4, #67	; 0x43
 800a6e4:	f104 0342 	add.w	r3, r4, #66	; 0x42
 800a6e8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800a6f2:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800a6f6:	f104 0110 	add.w	r1, r4, #16
 800a6fa:	f008 f989 	bl	8012a10 <rcl_action_client_wait_set_get_entities_ready>
 800a6fe:	e7e1      	b.n	800a6c4 <_rclc_check_for_new_data+0x34>
 800a700:	685c      	ldr	r4, [r3, #4]
 800a702:	f104 0223 	add.w	r2, r4, #35	; 0x23
 800a706:	f104 0322 	add.w	r3, r4, #34	; 0x22
 800a70a:	e9cd 3200 	strd	r3, r2, [sp]
 800a70e:	4608      	mov	r0, r1
 800a710:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800a714:	f104 0220 	add.w	r2, r4, #32
 800a718:	f104 0110 	add.w	r1, r4, #16
 800a71c:	f008 fb8e 	bl	8012e3c <rcl_action_server_wait_set_get_entities_ready>
 800a720:	e7d0      	b.n	800a6c4 <_rclc_check_for_new_data+0x34>
 800a722:	200b      	movs	r0, #11
 800a724:	4770      	bx	lr
 800a726:	2001      	movs	r0, #1
 800a728:	e7cc      	b.n	800a6c4 <_rclc_check_for_new_data+0x34>
 800a72a:	bf00      	nop

0800a72c <_rclc_take_new_data>:
 800a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a72e:	b09b      	sub	sp, #108	; 0x6c
 800a730:	2800      	cmp	r0, #0
 800a732:	f000 8088 	beq.w	800a846 <_rclc_take_new_data+0x11a>
 800a736:	7803      	ldrb	r3, [r0, #0]
 800a738:	4604      	mov	r4, r0
 800a73a:	2b0a      	cmp	r3, #10
 800a73c:	f200 8167 	bhi.w	800aa0e <_rclc_take_new_data+0x2e2>
 800a740:	e8df f003 	tbb	[pc, r3]
 800a744:	44152d2d 	.word	0x44152d2d
 800a748:	19191944 	.word	0x19191944
 800a74c:	065a      	.short	0x065a
 800a74e:	15          	.byte	0x15
 800a74f:	00          	.byte	0x00
 800a750:	6840      	ldr	r0, [r0, #4]
 800a752:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a756:	2b00      	cmp	r3, #0
 800a758:	f040 80b2 	bne.w	800a8c0 <_rclc_take_new_data+0x194>
 800a75c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800a760:	2b00      	cmp	r3, #0
 800a762:	f040 80e4 	bne.w	800a92e <_rclc_take_new_data+0x202>
 800a766:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d16f      	bne.n	800a84e <_rclc_take_new_data+0x122>
 800a76e:	2500      	movs	r5, #0
 800a770:	4628      	mov	r0, r5
 800a772:	b01b      	add	sp, #108	; 0x6c
 800a774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a776:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a778:	6a0b      	ldr	r3, [r1, #32]
 800a77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0f5      	beq.n	800a76e <_rclc_take_new_data+0x42>
 800a782:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a786:	f104 0110 	add.w	r1, r4, #16
 800a78a:	f006 fcef 	bl	801116c <rcl_take_request>
 800a78e:	4605      	mov	r5, r0
 800a790:	2800      	cmp	r0, #0
 800a792:	d0ec      	beq.n	800a76e <_rclc_take_new_data+0x42>
 800a794:	f240 2359 	movw	r3, #601	; 0x259
 800a798:	4298      	cmp	r0, r3
 800a79a:	d013      	beq.n	800a7c4 <_rclc_take_new_data+0x98>
 800a79c:	e029      	b.n	800a7f2 <_rclc_take_new_data+0xc6>
 800a79e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a7a0:	680b      	ldr	r3, [r1, #0]
 800a7a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0e1      	beq.n	800a76e <_rclc_take_new_data+0x42>
 800a7aa:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	aa0a      	add	r2, sp, #40	; 0x28
 800a7b2:	f006 fd3d 	bl	8011230 <rcl_take>
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d0d9      	beq.n	800a770 <_rclc_take_new_data+0x44>
 800a7bc:	f240 1391 	movw	r3, #401	; 0x191
 800a7c0:	4298      	cmp	r0, r3
 800a7c2:	d116      	bne.n	800a7f2 <_rclc_take_new_data+0xc6>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800a7ca:	e7d1      	b.n	800a770 <_rclc_take_new_data+0x44>
 800a7cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a7ce:	698b      	ldr	r3, [r1, #24]
 800a7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0ca      	beq.n	800a76e <_rclc_take_new_data+0x42>
 800a7d8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a7dc:	f104 0110 	add.w	r1, r4, #16
 800a7e0:	f005 ff12 	bl	8010608 <rcl_take_response>
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d0c1      	beq.n	800a76e <_rclc_take_new_data+0x42>
 800a7ea:	f240 13f5 	movw	r3, #501	; 0x1f5
 800a7ee:	4298      	cmp	r0, r3
 800a7f0:	d0be      	beq.n	800a770 <_rclc_take_new_data+0x44>
 800a7f2:	f000 fed1 	bl	800b598 <rcutils_reset_error>
 800a7f6:	e7bb      	b.n	800a770 <_rclc_take_new_data+0x44>
 800a7f8:	6840      	ldr	r0, [r0, #4]
 800a7fa:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d17d      	bne.n	800a8fe <_rclc_take_new_data+0x1d2>
 800a802:	69c3      	ldr	r3, [r0, #28]
 800a804:	b11b      	cbz	r3, 800a80e <_rclc_take_new_data+0xe2>
 800a806:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d144      	bne.n	800a898 <_rclc_take_new_data+0x16c>
 800a80e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a812:	2b00      	cmp	r3, #0
 800a814:	f040 80ac 	bne.w	800a970 <_rclc_take_new_data+0x244>
 800a818:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d0a6      	beq.n	800a76e <_rclc_take_new_data+0x42>
 800a820:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a822:	a90a      	add	r1, sp, #40	; 0x28
 800a824:	3010      	adds	r0, #16
 800a826:	f007 ffcb 	bl	80127c0 <rcl_action_take_result_response>
 800a82a:	4605      	mov	r5, r0
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d1e0      	bne.n	800a7f2 <_rclc_take_new_data+0xc6>
 800a830:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a834:	6860      	ldr	r0, [r4, #4]
 800a836:	f008 fc25 	bl	8013084 <rclc_action_find_handle_by_result_request_sequence_number>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d098      	beq.n	800a770 <_rclc_take_new_data+0x44>
 800a83e:	2301      	movs	r3, #1
 800a840:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800a844:	e794      	b.n	800a770 <_rclc_take_new_data+0x44>
 800a846:	250b      	movs	r5, #11
 800a848:	4628      	mov	r0, r5
 800a84a:	b01b      	add	sp, #108	; 0x6c
 800a84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a84e:	ae04      	add	r6, sp, #16
 800a850:	aa0a      	add	r2, sp, #40	; 0x28
 800a852:	3010      	adds	r0, #16
 800a854:	4631      	mov	r1, r6
 800a856:	f008 fa25 	bl	8012ca4 <rcl_action_take_cancel_request>
 800a85a:	4605      	mov	r5, r0
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d1c8      	bne.n	800a7f2 <_rclc_take_new_data+0xc6>
 800a860:	6860      	ldr	r0, [r4, #4]
 800a862:	a90a      	add	r1, sp, #40	; 0x28
 800a864:	f008 fbcc 	bl	8013000 <rclc_action_find_goal_handle_by_uuid>
 800a868:	4607      	mov	r7, r0
 800a86a:	2800      	cmp	r0, #0
 800a86c:	f000 80bb 	beq.w	800a9e6 <_rclc_take_new_data+0x2ba>
 800a870:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a874:	2101      	movs	r1, #1
 800a876:	f008 fb4d 	bl	8012f14 <rcl_action_transition_goal_state>
 800a87a:	2803      	cmp	r0, #3
 800a87c:	4684      	mov	ip, r0
 800a87e:	f040 80a7 	bne.w	800a9d0 <_rclc_take_new_data+0x2a4>
 800a882:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a884:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800a888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a88a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a88e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a892:	f887 c008 	strb.w	ip, [r7, #8]
 800a896:	e76b      	b.n	800a770 <_rclc_take_new_data+0x44>
 800a898:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a89a:	3010      	adds	r0, #16
 800a89c:	f008 f810 	bl	80128c0 <rcl_action_take_feedback>
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d1a5      	bne.n	800a7f2 <_rclc_take_new_data+0xc6>
 800a8a6:	6860      	ldr	r0, [r4, #4]
 800a8a8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a8aa:	f008 fba9 	bl	8013000 <rclc_action_find_goal_handle_by_uuid>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	f000 80a3 	beq.w	800a9fc <_rclc_take_new_data+0x2d0>
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	6860      	ldr	r0, [r4, #4]
 800a8ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800a8be:	e7a6      	b.n	800a80e <_rclc_take_new_data+0xe2>
 800a8c0:	f008 fb78 	bl	8012fb4 <rclc_action_take_goal_handle>
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	6860      	ldr	r0, [r4, #4]
 800a8c8:	2e00      	cmp	r6, #0
 800a8ca:	f43f af47 	beq.w	800a75c <_rclc_take_new_data+0x30>
 800a8ce:	6070      	str	r0, [r6, #4]
 800a8d0:	69f2      	ldr	r2, [r6, #28]
 800a8d2:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800a8d6:	3010      	adds	r0, #16
 800a8d8:	f008 f92e 	bl	8012b38 <rcl_action_take_goal_request>
 800a8dc:	4605      	mov	r5, r0
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f040 808e 	bne.w	800aa00 <_rclc_take_new_data+0x2d4>
 800a8e4:	69f7      	ldr	r7, [r6, #28]
 800a8e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a8e8:	7235      	strb	r5, [r6, #8]
 800a8ea:	f8c6 0009 	str.w	r0, [r6, #9]
 800a8ee:	f8c6 100d 	str.w	r1, [r6, #13]
 800a8f2:	6860      	ldr	r0, [r4, #4]
 800a8f4:	f8c6 2011 	str.w	r2, [r6, #17]
 800a8f8:	f8c6 3015 	str.w	r3, [r6, #21]
 800a8fc:	e72e      	b.n	800a75c <_rclc_take_new_data+0x30>
 800a8fe:	aa04      	add	r2, sp, #16
 800a900:	a90a      	add	r1, sp, #40	; 0x28
 800a902:	3010      	adds	r0, #16
 800a904:	f007 fee4 	bl	80126d0 <rcl_action_take_goal_response>
 800a908:	4605      	mov	r5, r0
 800a90a:	2800      	cmp	r0, #0
 800a90c:	f47f af71 	bne.w	800a7f2 <_rclc_take_new_data+0xc6>
 800a910:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a914:	6860      	ldr	r0, [r4, #4]
 800a916:	f008 fba3 	bl	8013060 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a91a:	b130      	cbz	r0, 800a92a <_rclc_take_new_data+0x1fe>
 800a91c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a920:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800a924:	2201      	movs	r2, #1
 800a926:	f880 2020 	strb.w	r2, [r0, #32]
 800a92a:	6860      	ldr	r0, [r4, #4]
 800a92c:	e769      	b.n	800a802 <_rclc_take_new_data+0xd6>
 800a92e:	aa04      	add	r2, sp, #16
 800a930:	3010      	adds	r0, #16
 800a932:	a90a      	add	r1, sp, #40	; 0x28
 800a934:	f008 f976 	bl	8012c24 <rcl_action_take_result_request>
 800a938:	4605      	mov	r5, r0
 800a93a:	2800      	cmp	r0, #0
 800a93c:	f47f af59 	bne.w	800a7f2 <_rclc_take_new_data+0xc6>
 800a940:	6860      	ldr	r0, [r4, #4]
 800a942:	a904      	add	r1, sp, #16
 800a944:	f008 fb5c 	bl	8013000 <rclc_action_find_goal_handle_by_uuid>
 800a948:	4607      	mov	r7, r0
 800a94a:	b160      	cbz	r0, 800a966 <_rclc_take_new_data+0x23a>
 800a94c:	ad0a      	add	r5, sp, #40	; 0x28
 800a94e:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800a952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a954:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a956:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a95a:	f04f 0c02 	mov.w	ip, #2
 800a95e:	e886 0003 	stmia.w	r6, {r0, r1}
 800a962:	f887 c008 	strb.w	ip, [r7, #8]
 800a966:	6860      	ldr	r0, [r4, #4]
 800a968:	2300      	movs	r3, #0
 800a96a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800a96e:	e6fa      	b.n	800a766 <_rclc_take_new_data+0x3a>
 800a970:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800a974:	a90a      	add	r1, sp, #40	; 0x28
 800a976:	3010      	adds	r0, #16
 800a978:	f007 ff62 	bl	8012840 <rcl_action_take_cancel_response>
 800a97c:	4605      	mov	r5, r0
 800a97e:	2800      	cmp	r0, #0
 800a980:	f47f af37 	bne.w	800a7f2 <_rclc_take_new_data+0xc6>
 800a984:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a988:	6860      	ldr	r0, [r4, #4]
 800a98a:	f008 fb8d 	bl	80130a8 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a98e:	4606      	mov	r6, r0
 800a990:	6860      	ldr	r0, [r4, #4]
 800a992:	2e00      	cmp	r6, #0
 800a994:	f43f af40 	beq.w	800a818 <_rclc_take_new_data+0xec>
 800a998:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a99a:	2701      	movs	r7, #1
 800a99c:	84b7      	strh	r7, [r6, #36]	; 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f43f af3a 	beq.w	800a818 <_rclc_take_new_data+0xec>
 800a9a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a9a6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a9aa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a9ae:	f008 fb27 	bl	8013000 <rclc_action_find_goal_handle_by_uuid>
 800a9b2:	b138      	cbz	r0, 800a9c4 <_rclc_take_new_data+0x298>
 800a9b4:	6860      	ldr	r0, [r4, #4]
 800a9b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a9b8:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800a9bc:	3501      	adds	r5, #1
 800a9be:	42ab      	cmp	r3, r5
 800a9c0:	d8f0      	bhi.n	800a9a4 <_rclc_take_new_data+0x278>
 800a9c2:	e729      	b.n	800a818 <_rclc_take_new_data+0xec>
 800a9c4:	6860      	ldr	r0, [r4, #4]
 800a9c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a9c8:	3501      	adds	r5, #1
 800a9ca:	42ab      	cmp	r3, r5
 800a9cc:	d8ea      	bhi.n	800a9a4 <_rclc_take_new_data+0x278>
 800a9ce:	e723      	b.n	800a818 <_rclc_take_new_data+0xec>
 800a9d0:	ab06      	add	r3, sp, #24
 800a9d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a9d4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a9d8:	2103      	movs	r1, #3
 800a9da:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a9de:	6860      	ldr	r0, [r4, #4]
 800a9e0:	f008 fbd6 	bl	8013190 <rclc_action_server_goal_cancel_reject>
 800a9e4:	e6c4      	b.n	800a770 <_rclc_take_new_data+0x44>
 800a9e6:	ab06      	add	r3, sp, #24
 800a9e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a9ea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a9ee:	2102      	movs	r1, #2
 800a9f0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a9f4:	6860      	ldr	r0, [r4, #4]
 800a9f6:	f008 fbcb 	bl	8013190 <rclc_action_server_goal_cancel_reject>
 800a9fa:	e6b9      	b.n	800a770 <_rclc_take_new_data+0x44>
 800a9fc:	6860      	ldr	r0, [r4, #4]
 800a9fe:	e706      	b.n	800a80e <_rclc_take_new_data+0xe2>
 800aa00:	6860      	ldr	r0, [r4, #4]
 800aa02:	4631      	mov	r1, r6
 800aa04:	f008 fae6 	bl	8012fd4 <rclc_action_remove_used_goal_handle>
 800aa08:	f000 fdc6 	bl	800b598 <rcutils_reset_error>
 800aa0c:	e6b0      	b.n	800a770 <_rclc_take_new_data+0x44>
 800aa0e:	2501      	movs	r5, #1
 800aa10:	e6ae      	b.n	800a770 <_rclc_take_new_data+0x44>
 800aa12:	bf00      	nop

0800aa14 <_rclc_execute.part.0>:
 800aa14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa16:	7803      	ldrb	r3, [r0, #0]
 800aa18:	b087      	sub	sp, #28
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	2b0a      	cmp	r3, #10
 800aa1e:	f200 8136 	bhi.w	800ac8e <_rclc_execute.part.0+0x27a>
 800aa22:	e8df f003 	tbb	[pc, r3]
 800aa26:	435e      	.short	0x435e
 800aa28:	06a1664f 	.word	0x06a1664f
 800aa2c:	6c1e0606 	.word	0x6c1e0606
 800aa30:	59          	.byte	0x59
 800aa31:	00          	.byte	0x00
 800aa32:	2b06      	cmp	r3, #6
 800aa34:	f000 8122 	beq.w	800ac7c <_rclc_execute.part.0+0x268>
 800aa38:	2b07      	cmp	r3, #7
 800aa3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800aa3c:	f040 8118 	bne.w	800ac70 <_rclc_execute.part.0+0x25c>
 800aa40:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800aa44:	6880      	ldr	r0, [r0, #8]
 800aa46:	4798      	blx	r3
 800aa48:	f104 0110 	add.w	r1, r4, #16
 800aa4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800aa4e:	6860      	ldr	r0, [r4, #4]
 800aa50:	f006 fbcc 	bl	80111ec <rcl_send_response>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d033      	beq.n	800aac0 <_rclc_execute.part.0+0xac>
 800aa58:	9005      	str	r0, [sp, #20]
 800aa5a:	f000 fd9d 	bl	800b598 <rcutils_reset_error>
 800aa5e:	9805      	ldr	r0, [sp, #20]
 800aa60:	e02e      	b.n	800aac0 <_rclc_execute.part.0+0xac>
 800aa62:	6840      	ldr	r0, [r0, #4]
 800aa64:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 8086 	beq.w	800ab7a <_rclc_execute.part.0+0x166>
 800aa6e:	2600      	movs	r6, #0
 800aa70:	2701      	movs	r7, #1
 800aa72:	e004      	b.n	800aa7e <_rclc_execute.part.0+0x6a>
 800aa74:	f008 fa78 	bl	8012f68 <rclc_action_send_result_request>
 800aa78:	b998      	cbnz	r0, 800aaa2 <_rclc_execute.part.0+0x8e>
 800aa7a:	722f      	strb	r7, [r5, #8]
 800aa7c:	6860      	ldr	r0, [r4, #4]
 800aa7e:	f008 fb25 	bl	80130cc <rclc_action_find_first_handle_with_goal_response>
 800aa82:	4605      	mov	r5, r0
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d077      	beq.n	800ab78 <_rclc_execute.part.0+0x164>
 800aa88:	6863      	ldr	r3, [r4, #4]
 800aa8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800aa92:	f885 6020 	strb.w	r6, [r5, #32]
 800aa96:	4798      	blx	r3
 800aa98:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1e8      	bne.n	800aa74 <_rclc_execute.part.0+0x60>
 800aaa2:	6860      	ldr	r0, [r4, #4]
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	f008 fa95 	bl	8012fd4 <rclc_action_remove_used_goal_handle>
 800aaaa:	e7e7      	b.n	800aa7c <_rclc_execute.part.0+0x68>
 800aaac:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800aab0:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800aab4:	2d00      	cmp	r5, #0
 800aab6:	f000 80c9 	beq.w	800ac4c <_rclc_execute.part.0+0x238>
 800aaba:	6880      	ldr	r0, [r0, #8]
 800aabc:	4798      	blx	r3
 800aabe:	2000      	movs	r0, #0
 800aac0:	b007      	add	sp, #28
 800aac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aac4:	6840      	ldr	r0, [r0, #4]
 800aac6:	f006 fec1 	bl	801184c <rcl_timer_call>
 800aaca:	f240 3321 	movw	r3, #801	; 0x321
 800aace:	4298      	cmp	r0, r3
 800aad0:	d004      	beq.n	800aadc <_rclc_execute.part.0+0xc8>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d0f4      	beq.n	800aac0 <_rclc_execute.part.0+0xac>
 800aad6:	e7bf      	b.n	800aa58 <_rclc_execute.part.0+0x44>
 800aad8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800aada:	4798      	blx	r3
 800aadc:	2000      	movs	r0, #0
 800aade:	b007      	add	sp, #28
 800aae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aae2:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800aae6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800aae8:	b925      	cbnz	r5, 800aaf4 <_rclc_execute.part.0+0xe0>
 800aaea:	4628      	mov	r0, r5
 800aaec:	4798      	blx	r3
 800aaee:	4628      	mov	r0, r5
 800aaf0:	e7e6      	b.n	800aac0 <_rclc_execute.part.0+0xac>
 800aaf2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800aaf4:	68a0      	ldr	r0, [r4, #8]
 800aaf6:	4798      	blx	r3
 800aaf8:	2000      	movs	r0, #0
 800aafa:	b007      	add	sp, #28
 800aafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aafe:	6840      	ldr	r0, [r0, #4]
 800ab00:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ab04:	bb3b      	cbnz	r3, 800ab56 <_rclc_execute.part.0+0x142>
 800ab06:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d07b      	beq.n	800ac06 <_rclc_execute.part.0+0x1f2>
 800ab0e:	f640 0634 	movw	r6, #2100	; 0x834
 800ab12:	2701      	movs	r7, #1
 800ab14:	e007      	b.n	800ab26 <_rclc_execute.part.0+0x112>
 800ab16:	4628      	mov	r0, r5
 800ab18:	f008 faf0 	bl	80130fc <rclc_action_server_response_goal_request>
 800ab1c:	6860      	ldr	r0, [r4, #4]
 800ab1e:	4629      	mov	r1, r5
 800ab20:	f008 fa58 	bl	8012fd4 <rclc_action_remove_used_goal_handle>
 800ab24:	6860      	ldr	r0, [r4, #4]
 800ab26:	2100      	movs	r1, #0
 800ab28:	f008 fa82 	bl	8013030 <rclc_action_find_first_handle_by_status>
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d066      	beq.n	800ac00 <_rclc_execute.part.0+0x1ec>
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	4798      	blx	r3
 800ab3a:	42b0      	cmp	r0, r6
 800ab3c:	f04f 0100 	mov.w	r1, #0
 800ab40:	d1e9      	bne.n	800ab16 <_rclc_execute.part.0+0x102>
 800ab42:	2101      	movs	r1, #1
 800ab44:	4628      	mov	r0, r5
 800ab46:	f008 fad9 	bl	80130fc <rclc_action_server_response_goal_request>
 800ab4a:	722f      	strb	r7, [r5, #8]
 800ab4c:	e7ea      	b.n	800ab24 <_rclc_execute.part.0+0x110>
 800ab4e:	6848      	ldr	r0, [r1, #4]
 800ab50:	f008 fa40 	bl	8012fd4 <rclc_action_remove_used_goal_handle>
 800ab54:	6860      	ldr	r0, [r4, #4]
 800ab56:	f008 fa77 	bl	8013048 <rclc_action_find_first_terminated_handle>
 800ab5a:	4601      	mov	r1, r0
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d1f6      	bne.n	800ab4e <_rclc_execute.part.0+0x13a>
 800ab60:	6860      	ldr	r0, [r4, #4]
 800ab62:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800ab66:	e7ce      	b.n	800ab06 <_rclc_execute.part.0+0xf2>
 800ab68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ab6a:	6880      	ldr	r0, [r0, #8]
 800ab6c:	f104 0110 	add.w	r1, r4, #16
 800ab70:	4798      	blx	r3
 800ab72:	2000      	movs	r0, #0
 800ab74:	b007      	add	sp, #28
 800ab76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab78:	6860      	ldr	r0, [r4, #4]
 800ab7a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ab7e:	b18b      	cbz	r3, 800aba4 <_rclc_execute.part.0+0x190>
 800ab80:	68c5      	ldr	r5, [r0, #12]
 800ab82:	b32d      	cbz	r5, 800abd0 <_rclc_execute.part.0+0x1bc>
 800ab84:	2600      	movs	r6, #0
 800ab86:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800ab8a:	b143      	cbz	r3, 800ab9e <_rclc_execute.part.0+0x18a>
 800ab8c:	69c3      	ldr	r3, [r0, #28]
 800ab8e:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800ab92:	b123      	cbz	r3, 800ab9e <_rclc_execute.part.0+0x18a>
 800ab94:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ab96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ab98:	4628      	mov	r0, r5
 800ab9a:	4798      	blx	r3
 800ab9c:	6860      	ldr	r0, [r4, #4]
 800ab9e:	682d      	ldr	r5, [r5, #0]
 800aba0:	2d00      	cmp	r5, #0
 800aba2:	d1f0      	bne.n	800ab86 <_rclc_execute.part.0+0x172>
 800aba4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800aba8:	b193      	cbz	r3, 800abd0 <_rclc_execute.part.0+0x1bc>
 800abaa:	68c5      	ldr	r5, [r0, #12]
 800abac:	b185      	cbz	r5, 800abd0 <_rclc_execute.part.0+0x1bc>
 800abae:	2600      	movs	r6, #0
 800abb0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800abb4:	b14b      	cbz	r3, 800abca <_rclc_execute.part.0+0x1b6>
 800abb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800abb8:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800abbc:	b12b      	cbz	r3, 800abca <_rclc_execute.part.0+0x1b6>
 800abbe:	4628      	mov	r0, r5
 800abc0:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800abc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800abc6:	4798      	blx	r3
 800abc8:	6860      	ldr	r0, [r4, #4]
 800abca:	682d      	ldr	r5, [r5, #0]
 800abcc:	2d00      	cmp	r5, #0
 800abce:	d1ef      	bne.n	800abb0 <_rclc_execute.part.0+0x19c>
 800abd0:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d081      	beq.n	800aadc <_rclc_execute.part.0+0xc8>
 800abd8:	2700      	movs	r7, #0
 800abda:	e00b      	b.n	800abf4 <_rclc_execute.part.0+0x1e0>
 800abdc:	6863      	ldr	r3, [r4, #4]
 800abde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800abe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800abe2:	6a1e      	ldr	r6, [r3, #32]
 800abe4:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800abe8:	47b0      	blx	r6
 800abea:	6860      	ldr	r0, [r4, #4]
 800abec:	4629      	mov	r1, r5
 800abee:	f008 f9f1 	bl	8012fd4 <rclc_action_remove_used_goal_handle>
 800abf2:	6860      	ldr	r0, [r4, #4]
 800abf4:	f008 fa76 	bl	80130e4 <rclc_action_find_first_handle_with_result_response>
 800abf8:	4605      	mov	r5, r0
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d1ee      	bne.n	800abdc <_rclc_execute.part.0+0x1c8>
 800abfe:	e76d      	b.n	800aadc <_rclc_execute.part.0+0xc8>
 800ac00:	6860      	ldr	r0, [r4, #4]
 800ac02:	f880 5020 	strb.w	r5, [r0, #32]
 800ac06:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f43f af66 	beq.w	800aadc <_rclc_execute.part.0+0xc8>
 800ac10:	68c5      	ldr	r5, [r0, #12]
 800ac12:	b1b5      	cbz	r5, 800ac42 <_rclc_execute.part.0+0x22e>
 800ac14:	2602      	movs	r6, #2
 800ac16:	e001      	b.n	800ac1c <_rclc_execute.part.0+0x208>
 800ac18:	682d      	ldr	r5, [r5, #0]
 800ac1a:	b195      	cbz	r5, 800ac42 <_rclc_execute.part.0+0x22e>
 800ac1c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d1f9      	bne.n	800ac18 <_rclc_execute.part.0+0x204>
 800ac24:	69c3      	ldr	r3, [r0, #28]
 800ac26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ac28:	4628      	mov	r0, r5
 800ac2a:	4798      	blx	r3
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800ac32:	4628      	mov	r0, r5
 800ac34:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800ac38:	b163      	cbz	r3, 800ac54 <_rclc_execute.part.0+0x240>
 800ac3a:	f008 fa7d 	bl	8013138 <rclc_action_server_goal_cancel_accept>
 800ac3e:	6860      	ldr	r0, [r4, #4]
 800ac40:	e7ea      	b.n	800ac18 <_rclc_execute.part.0+0x204>
 800ac42:	2300      	movs	r3, #0
 800ac44:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800ac48:	4618      	mov	r0, r3
 800ac4a:	e739      	b.n	800aac0 <_rclc_execute.part.0+0xac>
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	4798      	blx	r3
 800ac50:	4628      	mov	r0, r5
 800ac52:	e735      	b.n	800aac0 <_rclc_execute.part.0+0xac>
 800ac54:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ac56:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ac5a:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800ac5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac62:	6860      	ldr	r0, [r4, #4]
 800ac64:	2101      	movs	r1, #1
 800ac66:	f008 fa93 	bl	8013190 <rclc_action_server_goal_cancel_reject>
 800ac6a:	722e      	strb	r6, [r5, #8]
 800ac6c:	6860      	ldr	r0, [r4, #4]
 800ac6e:	e7d3      	b.n	800ac18 <_rclc_execute.part.0+0x204>
 800ac70:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ac72:	6880      	ldr	r0, [r0, #8]
 800ac74:	4798      	blx	r3
 800ac76:	f104 0110 	add.w	r1, r4, #16
 800ac7a:	e6e7      	b.n	800aa4c <_rclc_execute.part.0+0x38>
 800ac7c:	f100 0110 	add.w	r1, r0, #16
 800ac80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ac82:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ac84:	6880      	ldr	r0, [r0, #8]
 800ac86:	9105      	str	r1, [sp, #20]
 800ac88:	4798      	blx	r3
 800ac8a:	9905      	ldr	r1, [sp, #20]
 800ac8c:	e6de      	b.n	800aa4c <_rclc_execute.part.0+0x38>
 800ac8e:	2001      	movs	r0, #1
 800ac90:	e716      	b.n	800aac0 <_rclc_execute.part.0+0xac>
 800ac92:	bf00      	nop

0800ac94 <rclc_executor_trigger_any>:
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d03f      	beq.n	800ad18 <rclc_executor_trigger_any+0x84>
 800ac98:	2900      	cmp	r1, #0
 800ac9a:	d03e      	beq.n	800ad1a <rclc_executor_trigger_any+0x86>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800aca2:	2200      	movs	r2, #0
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d037      	beq.n	800ad18 <rclc_executor_trigger_any+0x84>
 800aca8:	b430      	push	{r4, r5}
 800acaa:	f893 c000 	ldrb.w	ip, [r3]
 800acae:	f1bc 0f08 	cmp.w	ip, #8
 800acb2:	d11e      	bne.n	800acf2 <rclc_executor_trigger_any+0x5e>
 800acb4:	685c      	ldr	r4, [r3, #4]
 800acb6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800acb8:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800acbc:	d105      	bne.n	800acca <rclc_executor_trigger_any+0x36>
 800acbe:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800acc2:	b910      	cbnz	r0, 800acca <rclc_executor_trigger_any+0x36>
 800acc4:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800acc8:	b128      	cbz	r0, 800acd6 <rclc_executor_trigger_any+0x42>
 800acca:	bc30      	pop	{r4, r5}
 800accc:	4770      	bx	lr
 800acce:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d1f9      	bne.n	800acca <rclc_executor_trigger_any+0x36>
 800acd6:	3201      	adds	r2, #1
 800acd8:	4291      	cmp	r1, r2
 800acda:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800acde:	d018      	beq.n	800ad12 <rclc_executor_trigger_any+0x7e>
 800ace0:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d0f0      	beq.n	800acca <rclc_executor_trigger_any+0x36>
 800ace8:	f893 c000 	ldrb.w	ip, [r3]
 800acec:	f1bc 0f08 	cmp.w	ip, #8
 800acf0:	d0e0      	beq.n	800acb4 <rclc_executor_trigger_any+0x20>
 800acf2:	f1bc 0f09 	cmp.w	ip, #9
 800acf6:	d1ea      	bne.n	800acce <rclc_executor_trigger_any+0x3a>
 800acf8:	685c      	ldr	r4, [r3, #4]
 800acfa:	6a25      	ldr	r5, [r4, #32]
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	d1e4      	bne.n	800acca <rclc_executor_trigger_any+0x36>
 800ad00:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1e0      	bne.n	800acca <rclc_executor_trigger_any+0x36>
 800ad08:	3201      	adds	r2, #1
 800ad0a:	4291      	cmp	r1, r2
 800ad0c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800ad10:	d1e6      	bne.n	800ace0 <rclc_executor_trigger_any+0x4c>
 800ad12:	2000      	movs	r0, #0
 800ad14:	bc30      	pop	{r4, r5}
 800ad16:	4770      	bx	lr
 800ad18:	4770      	bx	lr
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop

0800ad20 <rclc_executor_get_zero_initialized_executor>:
 800ad20:	b510      	push	{r4, lr}
 800ad22:	4903      	ldr	r1, [pc, #12]	; (800ad30 <rclc_executor_get_zero_initialized_executor+0x10>)
 800ad24:	4604      	mov	r4, r0
 800ad26:	2288      	movs	r2, #136	; 0x88
 800ad28:	f00c f8b6 	bl	8016e98 <memcpy>
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	bd10      	pop	{r4, pc}
 800ad30:	08017e30 	.word	0x08017e30
 800ad34:	00000000 	.word	0x00000000

0800ad38 <rclc_executor_init>:
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d05f      	beq.n	800adfc <rclc_executor_init+0xc4>
 800ad3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad40:	460c      	mov	r4, r1
 800ad42:	b0b0      	sub	sp, #192	; 0xc0
 800ad44:	2900      	cmp	r1, #0
 800ad46:	d051      	beq.n	800adec <rclc_executor_init+0xb4>
 800ad48:	4605      	mov	r5, r0
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	4616      	mov	r6, r2
 800ad4e:	461f      	mov	r7, r3
 800ad50:	f000 fbe6 	bl	800b520 <rcutils_allocator_is_valid>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d049      	beq.n	800adec <rclc_executor_init+0xb4>
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	d047      	beq.n	800adec <rclc_executor_init+0xb4>
 800ad5c:	492c      	ldr	r1, [pc, #176]	; (800ae10 <rclc_executor_init+0xd8>)
 800ad5e:	2288      	movs	r2, #136	; 0x88
 800ad60:	a80e      	add	r0, sp, #56	; 0x38
 800ad62:	f00c f899 	bl	8016e98 <memcpy>
 800ad66:	a90e      	add	r1, sp, #56	; 0x38
 800ad68:	2288      	movs	r2, #136	; 0x88
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f00c f894 	bl	8016e98 <memcpy>
 800ad70:	602c      	str	r4, [r5, #0]
 800ad72:	4668      	mov	r0, sp
 800ad74:	60ae      	str	r6, [r5, #8]
 800ad76:	466c      	mov	r4, sp
 800ad78:	f006 feda 	bl	8011b30 <rcl_get_zero_initialized_wait_set>
 800ad7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad7e:	f105 0c14 	add.w	ip, r5, #20
 800ad82:	f8d7 8000 	ldr.w	r8, [r7]
 800ad86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad96:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 800ae08 <rclc_executor_init+0xd0>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	f8cc 3000 	str.w	r3, [ip]
 800ada0:	6939      	ldr	r1, [r7, #16]
 800ada2:	612f      	str	r7, [r5, #16]
 800ada4:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800ada8:	01b0      	lsls	r0, r6, #6
 800adaa:	47c0      	blx	r8
 800adac:	6068      	str	r0, [r5, #4]
 800adae:	b338      	cbz	r0, 800ae00 <rclc_executor_init+0xc8>
 800adb0:	2400      	movs	r4, #0
 800adb2:	e000      	b.n	800adb6 <rclc_executor_init+0x7e>
 800adb4:	6868      	ldr	r0, [r5, #4]
 800adb6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800adba:	4631      	mov	r1, r6
 800adbc:	3401      	adds	r4, #1
 800adbe:	f000 fa6b 	bl	800b298 <rclc_executor_handle_init>
 800adc2:	42a6      	cmp	r6, r4
 800adc4:	d1f6      	bne.n	800adb4 <rclc_executor_init+0x7c>
 800adc6:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800adca:	f000 fa59 	bl	800b280 <rclc_executor_handle_counters_zero_init>
 800adce:	4a11      	ldr	r2, [pc, #68]	; (800ae14 <rclc_executor_init+0xdc>)
 800add0:	686b      	ldr	r3, [r5, #4]
 800add2:	2000      	movs	r0, #0
 800add4:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 800add8:	b163      	cbz	r3, 800adf4 <rclc_executor_init+0xbc>
 800adda:	692b      	ldr	r3, [r5, #16]
 800addc:	b153      	cbz	r3, 800adf4 <rclc_executor_init+0xbc>
 800adde:	68ab      	ldr	r3, [r5, #8]
 800ade0:	b143      	cbz	r3, 800adf4 <rclc_executor_init+0xbc>
 800ade2:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 800ade6:	b030      	add	sp, #192	; 0xc0
 800ade8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adec:	200b      	movs	r0, #11
 800adee:	b030      	add	sp, #192	; 0xc0
 800adf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf4:	4618      	mov	r0, r3
 800adf6:	b030      	add	sp, #192	; 0xc0
 800adf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adfc:	200b      	movs	r0, #11
 800adfe:	4770      	bx	lr
 800ae00:	200a      	movs	r0, #10
 800ae02:	e7f4      	b.n	800adee <rclc_executor_init+0xb6>
 800ae04:	f3af 8000 	nop.w
 800ae08:	3b9aca00 	.word	0x3b9aca00
 800ae0c:	00000000 	.word	0x00000000
 800ae10:	08017e30 	.word	0x08017e30
 800ae14:	0800ac95 	.word	0x0800ac95

0800ae18 <rclc_executor_add_timer>:
 800ae18:	b300      	cbz	r0, 800ae5c <rclc_executor_add_timer+0x44>
 800ae1a:	b1f9      	cbz	r1, 800ae5c <rclc_executor_add_timer+0x44>
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ae22:	4293      	cmp	r3, r2
 800ae24:	4604      	mov	r4, r0
 800ae26:	d301      	bcc.n	800ae2c <rclc_executor_add_timer+0x14>
 800ae28:	2001      	movs	r0, #1
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	6840      	ldr	r0, [r0, #4]
 800ae2e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ae32:	019d      	lsls	r5, r3, #6
 800ae34:	6051      	str	r1, [r2, #4]
 800ae36:	2102      	movs	r1, #2
 800ae38:	5341      	strh	r1, [r0, r5]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	2101      	movs	r1, #1
 800ae40:	f104 0514 	add.w	r5, r4, #20
 800ae44:	62d0      	str	r0, [r2, #44]	; 0x2c
 800ae46:	8711      	strh	r1, [r2, #56]	; 0x38
 800ae48:	4628      	mov	r0, r5
 800ae4a:	60e3      	str	r3, [r4, #12]
 800ae4c:	f006 fe84 	bl	8011b58 <rcl_wait_set_is_valid>
 800ae50:	b930      	cbnz	r0, 800ae60 <rclc_executor_add_timer+0x48>
 800ae52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ae54:	3301      	adds	r3, #1
 800ae56:	2000      	movs	r0, #0
 800ae58:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	200b      	movs	r0, #11
 800ae5e:	4770      	bx	lr
 800ae60:	4628      	mov	r0, r5
 800ae62:	f006 fe7f 	bl	8011b64 <rcl_wait_set_fini>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d0f3      	beq.n	800ae52 <rclc_executor_add_timer+0x3a>
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}

0800ae6c <rclc_executor_prepare>:
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d044      	beq.n	800aefa <rclc_executor_prepare+0x8e>
 800ae70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae72:	f100 0514 	add.w	r5, r0, #20
 800ae76:	b09b      	sub	sp, #108	; 0x6c
 800ae78:	4604      	mov	r4, r0
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	f006 fe6c 	bl	8011b58 <rcl_wait_set_is_valid>
 800ae80:	b110      	cbz	r0, 800ae88 <rclc_executor_prepare+0x1c>
 800ae82:	2000      	movs	r0, #0
 800ae84:	b01b      	add	sp, #108	; 0x6c
 800ae86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f006 fe6b 	bl	8011b64 <rcl_wait_set_fini>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d130      	bne.n	800aef4 <rclc_executor_prepare+0x88>
 800ae92:	a80c      	add	r0, sp, #48	; 0x30
 800ae94:	f006 fe4c 	bl	8011b30 <rcl_get_zero_initialized_wait_set>
 800ae98:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ae9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aea0:	46ae      	mov	lr, r5
 800aea2:	6927      	ldr	r7, [r4, #16]
 800aea4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aea8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aeac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aeb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aeb4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aeb8:	f8dc 3000 	ldr.w	r3, [ip]
 800aebc:	f8ce 3000 	str.w	r3, [lr]
 800aec0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aec2:	ae04      	add	r6, sp, #16
 800aec4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	6822      	ldr	r2, [r4, #0]
 800aeca:	6033      	str	r3, [r6, #0]
 800aecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aece:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800aed0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800aed4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 800aed8:	e9cd 2100 	strd	r2, r1, [sp]
 800aedc:	4628      	mov	r0, r5
 800aede:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800aee0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aee2:	f007 f93d 	bl	8012160 <rcl_wait_set_init>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d0cc      	beq.n	800ae84 <rclc_executor_prepare+0x18>
 800aeea:	900b      	str	r0, [sp, #44]	; 0x2c
 800aeec:	f000 fb54 	bl	800b598 <rcutils_reset_error>
 800aef0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aef2:	e7c7      	b.n	800ae84 <rclc_executor_prepare+0x18>
 800aef4:	f000 fb50 	bl	800b598 <rcutils_reset_error>
 800aef8:	e7cb      	b.n	800ae92 <rclc_executor_prepare+0x26>
 800aefa:	200b      	movs	r0, #11
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop

0800af00 <rclc_executor_spin_some.part.0>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	f100 0614 	add.w	r6, r0, #20
 800af08:	b083      	sub	sp, #12
 800af0a:	4691      	mov	r9, r2
 800af0c:	4698      	mov	r8, r3
 800af0e:	4605      	mov	r5, r0
 800af10:	f7ff ffac 	bl	800ae6c <rclc_executor_prepare>
 800af14:	4630      	mov	r0, r6
 800af16:	f006 fef1 	bl	8011cfc <rcl_wait_set_clear>
 800af1a:	4607      	mov	r7, r0
 800af1c:	2800      	cmp	r0, #0
 800af1e:	f040 80ed 	bne.w	800b0fc <rclc_executor_spin_some.part.0+0x1fc>
 800af22:	68ab      	ldr	r3, [r5, #8]
 800af24:	4604      	mov	r4, r0
 800af26:	b303      	cbz	r3, 800af6a <rclc_executor_spin_some.part.0+0x6a>
 800af28:	6869      	ldr	r1, [r5, #4]
 800af2a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800af2e:	01a2      	lsls	r2, r4, #6
 800af30:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800af34:	b1cb      	cbz	r3, 800af6a <rclc_executor_spin_some.part.0+0x6a>
 800af36:	5c8b      	ldrb	r3, [r1, r2]
 800af38:	2b0a      	cmp	r3, #10
 800af3a:	f200 80d8 	bhi.w	800b0ee <rclc_executor_spin_some.part.0+0x1ee>
 800af3e:	e8df f003 	tbb	[pc, r3]
 800af42:	9c9c      	.short	0x9c9c
 800af44:	068c8ca7 	.word	0x068c8ca7
 800af48:	bdc90606 	.word	0xbdc90606
 800af4c:	b2          	.byte	0xb2
 800af4d:	00          	.byte	0x00
 800af4e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800af52:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800af56:	4630      	mov	r0, r6
 800af58:	f007 fa18 	bl	801238c <rcl_wait_set_add_service>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	f040 8086 	bne.w	800b06e <rclc_executor_spin_some.part.0+0x16e>
 800af62:	68ab      	ldr	r3, [r5, #8]
 800af64:	3401      	adds	r4, #1
 800af66:	429c      	cmp	r4, r3
 800af68:	d3de      	bcc.n	800af28 <rclc_executor_spin_some.part.0+0x28>
 800af6a:	4643      	mov	r3, r8
 800af6c:	464a      	mov	r2, r9
 800af6e:	4630      	mov	r0, r6
 800af70:	f007 fa3a 	bl	80123e8 <rcl_wait>
 800af74:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f000 80c7 	beq.w	800b10c <rclc_executor_spin_some.part.0+0x20c>
 800af7e:	2b01      	cmp	r3, #1
 800af80:	f040 80b5 	bne.w	800b0ee <rclc_executor_spin_some.part.0+0x1ee>
 800af84:	68ab      	ldr	r3, [r5, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 8159 	beq.w	800b23e <rclc_executor_spin_some.part.0+0x33e>
 800af8c:	2400      	movs	r4, #0
 800af8e:	46a0      	mov	r8, r4
 800af90:	f240 1991 	movw	r9, #401	; 0x191
 800af94:	e00a      	b.n	800afac <rclc_executor_spin_some.part.0+0xac>
 800af96:	f7ff fb7b 	bl	800a690 <_rclc_check_for_new_data>
 800af9a:	4604      	mov	r4, r0
 800af9c:	b110      	cbz	r0, 800afa4 <rclc_executor_spin_some.part.0+0xa4>
 800af9e:	4548      	cmp	r0, r9
 800afa0:	f040 80b2 	bne.w	800b108 <rclc_executor_spin_some.part.0+0x208>
 800afa4:	68ab      	ldr	r3, [r5, #8]
 800afa6:	4598      	cmp	r8, r3
 800afa8:	f080 8126 	bcs.w	800b1f8 <rclc_executor_spin_some.part.0+0x2f8>
 800afac:	686a      	ldr	r2, [r5, #4]
 800afae:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800afb2:	4631      	mov	r1, r6
 800afb4:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800afb8:	f108 0801 	add.w	r8, r8, #1
 800afbc:	f1bc 0f00 	cmp.w	ip, #0
 800afc0:	d1e9      	bne.n	800af96 <rclc_executor_spin_some.part.0+0x96>
 800afc2:	4619      	mov	r1, r3
 800afc4:	4610      	mov	r0, r2
 800afc6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800afca:	4798      	blx	r3
 800afcc:	2800      	cmp	r0, #0
 800afce:	f000 809b 	beq.w	800b108 <rclc_executor_spin_some.part.0+0x208>
 800afd2:	68ab      	ldr	r3, [r5, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f000 8097 	beq.w	800b108 <rclc_executor_spin_some.part.0+0x208>
 800afda:	f04f 0800 	mov.w	r8, #0
 800afde:	f240 1991 	movw	r9, #401	; 0x191
 800afe2:	e009      	b.n	800aff8 <rclc_executor_spin_some.part.0+0xf8>
 800afe4:	f7ff fba2 	bl	800a72c <_rclc_take_new_data>
 800afe8:	4604      	mov	r4, r0
 800afea:	b110      	cbz	r0, 800aff2 <rclc_executor_spin_some.part.0+0xf2>
 800afec:	4548      	cmp	r0, r9
 800afee:	f040 808b 	bne.w	800b108 <rclc_executor_spin_some.part.0+0x208>
 800aff2:	68ab      	ldr	r3, [r5, #8]
 800aff4:	4598      	cmp	r8, r3
 800aff6:	d209      	bcs.n	800b00c <rclc_executor_spin_some.part.0+0x10c>
 800aff8:	6868      	ldr	r0, [r5, #4]
 800affa:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800affe:	4631      	mov	r1, r6
 800b000:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800b004:	f108 0801 	add.w	r8, r8, #1
 800b008:	2a00      	cmp	r2, #0
 800b00a:	d1eb      	bne.n	800afe4 <rclc_executor_spin_some.part.0+0xe4>
 800b00c:	2600      	movs	r6, #0
 800b00e:	b97b      	cbnz	r3, 800b030 <rclc_executor_spin_some.part.0+0x130>
 800b010:	e07a      	b.n	800b108 <rclc_executor_spin_some.part.0+0x208>
 800b012:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b016:	2a08      	cmp	r2, #8
 800b018:	f000 80fd 	beq.w	800b216 <rclc_executor_spin_some.part.0+0x316>
 800b01c:	2a09      	cmp	r2, #9
 800b01e:	f000 80ef 	beq.w	800b200 <rclc_executor_spin_some.part.0+0x300>
 800b022:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800b026:	b98a      	cbnz	r2, 800b04c <rclc_executor_spin_some.part.0+0x14c>
 800b028:	3601      	adds	r6, #1
 800b02a:	429e      	cmp	r6, r3
 800b02c:	d262      	bcs.n	800b0f4 <rclc_executor_spin_some.part.0+0x1f4>
 800b02e:	2400      	movs	r4, #0
 800b030:	686a      	ldr	r2, [r5, #4]
 800b032:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b036:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b03a:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800b03e:	2900      	cmp	r1, #0
 800b040:	d062      	beq.n	800b108 <rclc_executor_spin_some.part.0+0x208>
 800b042:	7841      	ldrb	r1, [r0, #1]
 800b044:	2900      	cmp	r1, #0
 800b046:	d0e4      	beq.n	800b012 <rclc_executor_spin_some.part.0+0x112>
 800b048:	2901      	cmp	r1, #1
 800b04a:	d1ed      	bne.n	800b028 <rclc_executor_spin_some.part.0+0x128>
 800b04c:	f7ff fce2 	bl	800aa14 <_rclc_execute.part.0>
 800b050:	2800      	cmp	r0, #0
 800b052:	f040 80b6 	bne.w	800b1c2 <rclc_executor_spin_some.part.0+0x2c2>
 800b056:	68ab      	ldr	r3, [r5, #8]
 800b058:	e7e6      	b.n	800b028 <rclc_executor_spin_some.part.0+0x128>
 800b05a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b05e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800b062:	4630      	mov	r0, r6
 800b064:	f007 f966 	bl	8012334 <rcl_wait_set_add_client>
 800b068:	2800      	cmp	r0, #0
 800b06a:	f43f af7a 	beq.w	800af62 <rclc_executor_spin_some.part.0+0x62>
 800b06e:	9001      	str	r0, [sp, #4]
 800b070:	f000 fa92 	bl	800b598 <rcutils_reset_error>
 800b074:	9801      	ldr	r0, [sp, #4]
 800b076:	4607      	mov	r7, r0
 800b078:	e03c      	b.n	800b0f4 <rclc_executor_spin_some.part.0+0x1f4>
 800b07a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b07e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800b082:	4630      	mov	r0, r6
 800b084:	f006 fe0e 	bl	8011ca4 <rcl_wait_set_add_subscription>
 800b088:	2800      	cmp	r0, #0
 800b08a:	f43f af6a 	beq.w	800af62 <rclc_executor_spin_some.part.0+0x62>
 800b08e:	e7ee      	b.n	800b06e <rclc_executor_spin_some.part.0+0x16e>
 800b090:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b094:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800b098:	4630      	mov	r0, r6
 800b09a:	f007 f91b 	bl	80122d4 <rcl_wait_set_add_timer>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f43f af5f 	beq.w	800af62 <rclc_executor_spin_some.part.0+0x62>
 800b0a4:	e7e3      	b.n	800b06e <rclc_executor_spin_some.part.0+0x16e>
 800b0a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0aa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f007 f8e4 	bl	801227c <rcl_wait_set_add_guard_condition>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	f43f af54 	beq.w	800af62 <rclc_executor_spin_some.part.0+0x62>
 800b0ba:	e7d8      	b.n	800b06e <rclc_executor_spin_some.part.0+0x16e>
 800b0bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0c0:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800b0c4:	3110      	adds	r1, #16
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f007 fe64 	bl	8012d94 <rcl_action_wait_set_add_action_server>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	f43f af48 	beq.w	800af62 <rclc_executor_spin_some.part.0+0x62>
 800b0d2:	e7cc      	b.n	800b06e <rclc_executor_spin_some.part.0+0x16e>
 800b0d4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b0d8:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800b0dc:	3110      	adds	r1, #16
 800b0de:	2300      	movs	r3, #0
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f007 fc31 	bl	8012948 <rcl_action_wait_set_add_action_client>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f43f af3b 	beq.w	800af62 <rclc_executor_spin_some.part.0+0x62>
 800b0ec:	e7bf      	b.n	800b06e <rclc_executor_spin_some.part.0+0x16e>
 800b0ee:	f000 fa53 	bl	800b598 <rcutils_reset_error>
 800b0f2:	2701      	movs	r7, #1
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	b003      	add	sp, #12
 800b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fc:	f000 fa4c 	bl	800b598 <rcutils_reset_error>
 800b100:	4638      	mov	r0, r7
 800b102:	b003      	add	sp, #12
 800b104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b108:	4627      	mov	r7, r4
 800b10a:	e7f3      	b.n	800b0f4 <rclc_executor_spin_some.part.0+0x1f4>
 800b10c:	68ab      	ldr	r3, [r5, #8]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 8092 	beq.w	800b238 <rclc_executor_spin_some.part.0+0x338>
 800b114:	2400      	movs	r4, #0
 800b116:	46a0      	mov	r8, r4
 800b118:	f240 1991 	movw	r9, #401	; 0x191
 800b11c:	e008      	b.n	800b130 <rclc_executor_spin_some.part.0+0x230>
 800b11e:	f7ff fab7 	bl	800a690 <_rclc_check_for_new_data>
 800b122:	4604      	mov	r4, r0
 800b124:	b108      	cbz	r0, 800b12a <rclc_executor_spin_some.part.0+0x22a>
 800b126:	4548      	cmp	r0, r9
 800b128:	d1ee      	bne.n	800b108 <rclc_executor_spin_some.part.0+0x208>
 800b12a:	68ab      	ldr	r3, [r5, #8]
 800b12c:	4598      	cmp	r8, r3
 800b12e:	d265      	bcs.n	800b1fc <rclc_executor_spin_some.part.0+0x2fc>
 800b130:	686a      	ldr	r2, [r5, #4]
 800b132:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b136:	4631      	mov	r1, r6
 800b138:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800b13c:	f108 0801 	add.w	r8, r8, #1
 800b140:	f1bc 0f00 	cmp.w	ip, #0
 800b144:	d1eb      	bne.n	800b11e <rclc_executor_spin_some.part.0+0x21e>
 800b146:	4619      	mov	r1, r3
 800b148:	4610      	mov	r0, r2
 800b14a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 800b14e:	4798      	blx	r3
 800b150:	2800      	cmp	r0, #0
 800b152:	d0d9      	beq.n	800b108 <rclc_executor_spin_some.part.0+0x208>
 800b154:	68ab      	ldr	r3, [r5, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0d6      	beq.n	800b108 <rclc_executor_spin_some.part.0+0x208>
 800b15a:	f04f 0800 	mov.w	r8, #0
 800b15e:	f240 1991 	movw	r9, #401	; 0x191
 800b162:	f240 2a59 	movw	sl, #601	; 0x259
 800b166:	e00e      	b.n	800b186 <rclc_executor_spin_some.part.0+0x286>
 800b168:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b16c:	2b08      	cmp	r3, #8
 800b16e:	d033      	beq.n	800b1d8 <rclc_executor_spin_some.part.0+0x2d8>
 800b170:	2b09      	cmp	r3, #9
 800b172:	d028      	beq.n	800b1c6 <rclc_executor_spin_some.part.0+0x2c6>
 800b174:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b178:	b9fb      	cbnz	r3, 800b1ba <rclc_executor_spin_some.part.0+0x2ba>
 800b17a:	68ab      	ldr	r3, [r5, #8]
 800b17c:	f108 0801 	add.w	r8, r8, #1
 800b180:	4598      	cmp	r8, r3
 800b182:	d2b7      	bcs.n	800b0f4 <rclc_executor_spin_some.part.0+0x1f4>
 800b184:	2400      	movs	r4, #0
 800b186:	6868      	ldr	r0, [r5, #4]
 800b188:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b18c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b190:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b194:	2b00      	cmp	r3, #0
 800b196:	d0b7      	beq.n	800b108 <rclc_executor_spin_some.part.0+0x208>
 800b198:	4631      	mov	r1, r6
 800b19a:	f7ff fac7 	bl	800a72c <_rclc_take_new_data>
 800b19e:	b118      	cbz	r0, 800b1a8 <rclc_executor_spin_some.part.0+0x2a8>
 800b1a0:	4548      	cmp	r0, r9
 800b1a2:	d001      	beq.n	800b1a8 <rclc_executor_spin_some.part.0+0x2a8>
 800b1a4:	4550      	cmp	r0, sl
 800b1a6:	d10c      	bne.n	800b1c2 <rclc_executor_spin_some.part.0+0x2c2>
 800b1a8:	686b      	ldr	r3, [r5, #4]
 800b1aa:	eb13 000b 	adds.w	r0, r3, fp
 800b1ae:	d021      	beq.n	800b1f4 <rclc_executor_spin_some.part.0+0x2f4>
 800b1b0:	7842      	ldrb	r2, [r0, #1]
 800b1b2:	2a00      	cmp	r2, #0
 800b1b4:	d0d8      	beq.n	800b168 <rclc_executor_spin_some.part.0+0x268>
 800b1b6:	2a01      	cmp	r2, #1
 800b1b8:	d1df      	bne.n	800b17a <rclc_executor_spin_some.part.0+0x27a>
 800b1ba:	f7ff fc2b 	bl	800aa14 <_rclc_execute.part.0>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d0db      	beq.n	800b17a <rclc_executor_spin_some.part.0+0x27a>
 800b1c2:	4607      	mov	r7, r0
 800b1c4:	e796      	b.n	800b0f4 <rclc_executor_spin_some.part.0+0x1f4>
 800b1c6:	6843      	ldr	r3, [r0, #4]
 800b1c8:	6a1a      	ldr	r2, [r3, #32]
 800b1ca:	2a00      	cmp	r2, #0
 800b1cc:	d1f5      	bne.n	800b1ba <rclc_executor_spin_some.part.0+0x2ba>
 800b1ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d0d1      	beq.n	800b17a <rclc_executor_spin_some.part.0+0x27a>
 800b1d6:	e7f0      	b.n	800b1ba <rclc_executor_spin_some.part.0+0x2ba>
 800b1d8:	6843      	ldr	r3, [r0, #4]
 800b1da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1dc:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800b1e0:	d1eb      	bne.n	800b1ba <rclc_executor_spin_some.part.0+0x2ba>
 800b1e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b1e6:	2a00      	cmp	r2, #0
 800b1e8:	d1e7      	bne.n	800b1ba <rclc_executor_spin_some.part.0+0x2ba>
 800b1ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0c3      	beq.n	800b17a <rclc_executor_spin_some.part.0+0x27a>
 800b1f2:	e7e2      	b.n	800b1ba <rclc_executor_spin_some.part.0+0x2ba>
 800b1f4:	270b      	movs	r7, #11
 800b1f6:	e77d      	b.n	800b0f4 <rclc_executor_spin_some.part.0+0x1f4>
 800b1f8:	686a      	ldr	r2, [r5, #4]
 800b1fa:	e6e2      	b.n	800afc2 <rclc_executor_spin_some.part.0+0xc2>
 800b1fc:	686a      	ldr	r2, [r5, #4]
 800b1fe:	e7a2      	b.n	800b146 <rclc_executor_spin_some.part.0+0x246>
 800b200:	6842      	ldr	r2, [r0, #4]
 800b202:	6a11      	ldr	r1, [r2, #32]
 800b204:	2900      	cmp	r1, #0
 800b206:	f47f af21 	bne.w	800b04c <rclc_executor_spin_some.part.0+0x14c>
 800b20a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b20e:	2a00      	cmp	r2, #0
 800b210:	f43f af0a 	beq.w	800b028 <rclc_executor_spin_some.part.0+0x128>
 800b214:	e71a      	b.n	800b04c <rclc_executor_spin_some.part.0+0x14c>
 800b216:	6842      	ldr	r2, [r0, #4]
 800b218:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b21a:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800b21e:	f47f af15 	bne.w	800b04c <rclc_executor_spin_some.part.0+0x14c>
 800b222:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800b226:	2900      	cmp	r1, #0
 800b228:	f47f af10 	bne.w	800b04c <rclc_executor_spin_some.part.0+0x14c>
 800b22c:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800b230:	2a00      	cmp	r2, #0
 800b232:	f43f aef9 	beq.w	800b028 <rclc_executor_spin_some.part.0+0x128>
 800b236:	e709      	b.n	800b04c <rclc_executor_spin_some.part.0+0x14c>
 800b238:	686a      	ldr	r2, [r5, #4]
 800b23a:	461c      	mov	r4, r3
 800b23c:	e783      	b.n	800b146 <rclc_executor_spin_some.part.0+0x246>
 800b23e:	686a      	ldr	r2, [r5, #4]
 800b240:	461c      	mov	r4, r3
 800b242:	e6be      	b.n	800afc2 <rclc_executor_spin_some.part.0+0xc2>

0800b244 <rclc_executor_spin>:
 800b244:	b1d0      	cbz	r0, 800b27c <rclc_executor_spin+0x38>
 800b246:	b510      	push	{r4, lr}
 800b248:	4604      	mov	r4, r0
 800b24a:	b082      	sub	sp, #8
 800b24c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 800b250:	6820      	ldr	r0, [r4, #0]
 800b252:	e9cd 2300 	strd	r2, r3, [sp]
 800b256:	f005 fa47 	bl	80106e8 <rcl_context_is_valid>
 800b25a:	4601      	mov	r1, r0
 800b25c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b260:	4620      	mov	r0, r4
 800b262:	b131      	cbz	r1, 800b272 <rclc_executor_spin+0x2e>
 800b264:	f7ff fe4c 	bl	800af00 <rclc_executor_spin_some.part.0>
 800b268:	f030 0302 	bics.w	r3, r0, #2
 800b26c:	d0ee      	beq.n	800b24c <rclc_executor_spin+0x8>
 800b26e:	b002      	add	sp, #8
 800b270:	bd10      	pop	{r4, pc}
 800b272:	f000 f991 	bl	800b598 <rcutils_reset_error>
 800b276:	2001      	movs	r0, #1
 800b278:	b002      	add	sp, #8
 800b27a:	bd10      	pop	{r4, pc}
 800b27c:	200b      	movs	r0, #11
 800b27e:	4770      	bx	lr

0800b280 <rclc_executor_handle_counters_zero_init>:
 800b280:	b130      	cbz	r0, 800b290 <rclc_executor_handle_counters_zero_init+0x10>
 800b282:	b508      	push	{r3, lr}
 800b284:	2220      	movs	r2, #32
 800b286:	2100      	movs	r1, #0
 800b288:	f00b fd3e 	bl	8016d08 <memset>
 800b28c:	2000      	movs	r0, #0
 800b28e:	bd08      	pop	{r3, pc}
 800b290:	200b      	movs	r0, #11
 800b292:	4770      	bx	lr
 800b294:	0000      	movs	r0, r0
	...

0800b298 <rclc_executor_handle_init>:
 800b298:	b168      	cbz	r0, 800b2b6 <rclc_executor_handle_init+0x1e>
 800b29a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800b2c0 <rclc_executor_handle_init+0x28>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	220b      	movs	r2, #11
 800b2a2:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 800b2a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b2aa:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 800b2ae:	8002      	strh	r2, [r0, #0]
 800b2b0:	8703      	strh	r3, [r0, #56]	; 0x38
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	4770      	bx	lr
 800b2b6:	200b      	movs	r0, #11
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	f3af 8000 	nop.w
	...

0800b2c8 <rclc_support_init>:
 800b2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2cc:	b086      	sub	sp, #24
 800b2ce:	b3b8      	cbz	r0, 800b340 <rclc_support_init+0x78>
 800b2d0:	461c      	mov	r4, r3
 800b2d2:	b3ab      	cbz	r3, 800b340 <rclc_support_init+0x78>
 800b2d4:	460f      	mov	r7, r1
 800b2d6:	4690      	mov	r8, r2
 800b2d8:	4606      	mov	r6, r0
 800b2da:	f005 fc7d 	bl	8010bd8 <rcl_get_zero_initialized_init_options>
 800b2de:	f104 030c 	add.w	r3, r4, #12
 800b2e2:	9005      	str	r0, [sp, #20]
 800b2e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2e8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b2ec:	a805      	add	r0, sp, #20
 800b2ee:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b2f2:	f005 fc73 	bl	8010bdc <rcl_init_options_init>
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	b9e0      	cbnz	r0, 800b334 <rclc_support_init+0x6c>
 800b2fa:	ad02      	add	r5, sp, #8
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f005 f9e9 	bl	80106d4 <rcl_get_zero_initialized_context>
 800b302:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b306:	4633      	mov	r3, r6
 800b308:	e886 0003 	stmia.w	r6, {r0, r1}
 800b30c:	aa05      	add	r2, sp, #20
 800b30e:	4641      	mov	r1, r8
 800b310:	4638      	mov	r0, r7
 800b312:	f005 fb5d 	bl	80109d0 <rcl_init>
 800b316:	4605      	mov	r5, r0
 800b318:	b9b8      	cbnz	r0, 800b34a <rclc_support_init+0x82>
 800b31a:	60b4      	str	r4, [r6, #8]
 800b31c:	4622      	mov	r2, r4
 800b31e:	f106 010c 	add.w	r1, r6, #12
 800b322:	2003      	movs	r0, #3
 800b324:	f006 f804 	bl	8011330 <rcl_clock_init>
 800b328:	4605      	mov	r5, r0
 800b32a:	b970      	cbnz	r0, 800b34a <rclc_support_init+0x82>
 800b32c:	a805      	add	r0, sp, #20
 800b32e:	f005 fcbb 	bl	8010ca8 <rcl_init_options_fini>
 800b332:	b108      	cbz	r0, 800b338 <rclc_support_init+0x70>
 800b334:	f000 f930 	bl	800b598 <rcutils_reset_error>
 800b338:	4628      	mov	r0, r5
 800b33a:	b006      	add	sp, #24
 800b33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b340:	250b      	movs	r5, #11
 800b342:	4628      	mov	r0, r5
 800b344:	b006      	add	sp, #24
 800b346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34a:	f000 f925 	bl	800b598 <rcutils_reset_error>
 800b34e:	a805      	add	r0, sp, #20
 800b350:	f005 fcaa 	bl	8010ca8 <rcl_init_options_fini>
 800b354:	2800      	cmp	r0, #0
 800b356:	d0ef      	beq.n	800b338 <rclc_support_init+0x70>
 800b358:	e7ec      	b.n	800b334 <rclc_support_init+0x6c>
 800b35a:	bf00      	nop

0800b35c <rclc_node_init_default>:
 800b35c:	b3b8      	cbz	r0, 800b3ce <rclc_node_init_default+0x72>
 800b35e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b362:	460d      	mov	r5, r1
 800b364:	b0a1      	sub	sp, #132	; 0x84
 800b366:	b329      	cbz	r1, 800b3b4 <rclc_node_init_default+0x58>
 800b368:	4616      	mov	r6, r2
 800b36a:	b31a      	cbz	r2, 800b3b4 <rclc_node_init_default+0x58>
 800b36c:	461f      	mov	r7, r3
 800b36e:	b30b      	cbz	r3, 800b3b4 <rclc_node_init_default+0x58>
 800b370:	f10d 0810 	add.w	r8, sp, #16
 800b374:	4604      	mov	r4, r0
 800b376:	4640      	mov	r0, r8
 800b378:	f7fe fe78 	bl	800a06c <rcl_get_zero_initialized_node>
 800b37c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b380:	f10d 0918 	add.w	r9, sp, #24
 800b384:	e884 0003 	stmia.w	r4, {r0, r1}
 800b388:	4648      	mov	r0, r9
 800b38a:	f7ff f819 	bl	800a3c0 <rcl_node_get_default_options>
 800b38e:	4640      	mov	r0, r8
 800b390:	f7fe fe6c 	bl	800a06c <rcl_get_zero_initialized_node>
 800b394:	f8cd 9000 	str.w	r9, [sp]
 800b398:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b39c:	463b      	mov	r3, r7
 800b39e:	e884 0003 	stmia.w	r4, {r0, r1}
 800b3a2:	4632      	mov	r2, r6
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f7fe fe6a 	bl	800a080 <rcl_node_init>
 800b3ac:	b930      	cbnz	r0, 800b3bc <rclc_node_init_default+0x60>
 800b3ae:	b021      	add	sp, #132	; 0x84
 800b3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3b4:	200b      	movs	r0, #11
 800b3b6:	b021      	add	sp, #132	; 0x84
 800b3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3bc:	9003      	str	r0, [sp, #12]
 800b3be:	f000 f8eb 	bl	800b598 <rcutils_reset_error>
 800b3c2:	f000 f8e9 	bl	800b598 <rcutils_reset_error>
 800b3c6:	9803      	ldr	r0, [sp, #12]
 800b3c8:	b021      	add	sp, #132	; 0x84
 800b3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3ce:	200b      	movs	r0, #11
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop

0800b3d4 <rclc_publisher_init_default>:
 800b3d4:	b368      	cbz	r0, 800b432 <rclc_publisher_init_default+0x5e>
 800b3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3da:	460d      	mov	r5, r1
 800b3dc:	b0a0      	sub	sp, #128	; 0x80
 800b3de:	b321      	cbz	r1, 800b42a <rclc_publisher_init_default+0x56>
 800b3e0:	4616      	mov	r6, r2
 800b3e2:	b312      	cbz	r2, 800b42a <rclc_publisher_init_default+0x56>
 800b3e4:	461f      	mov	r7, r3
 800b3e6:	b303      	cbz	r3, 800b42a <rclc_publisher_init_default+0x56>
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	f7ff f815 	bl	800a418 <rcl_get_zero_initialized_publisher>
 800b3ee:	f10d 0810 	add.w	r8, sp, #16
 800b3f2:	6020      	str	r0, [r4, #0]
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	f7ff f8d7 	bl	800a5a8 <rcl_publisher_get_default_options>
 800b3fa:	490f      	ldr	r1, [pc, #60]	; (800b438 <rclc_publisher_init_default+0x64>)
 800b3fc:	2250      	movs	r2, #80	; 0x50
 800b3fe:	4640      	mov	r0, r8
 800b400:	f00b fd4a 	bl	8016e98 <memcpy>
 800b404:	f8cd 8000 	str.w	r8, [sp]
 800b408:	463b      	mov	r3, r7
 800b40a:	4632      	mov	r2, r6
 800b40c:	4629      	mov	r1, r5
 800b40e:	4620      	mov	r0, r4
 800b410:	f7ff f808 	bl	800a424 <rcl_publisher_init>
 800b414:	b910      	cbnz	r0, 800b41c <rclc_publisher_init_default+0x48>
 800b416:	b020      	add	sp, #128	; 0x80
 800b418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b41c:	9003      	str	r0, [sp, #12]
 800b41e:	f000 f8bb 	bl	800b598 <rcutils_reset_error>
 800b422:	9803      	ldr	r0, [sp, #12]
 800b424:	b020      	add	sp, #128	; 0x80
 800b426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b42a:	200b      	movs	r0, #11
 800b42c:	b020      	add	sp, #128	; 0x80
 800b42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b432:	200b      	movs	r0, #11
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	08017eb8 	.word	0x08017eb8

0800b43c <rclc_timer_init_default>:
 800b43c:	b360      	cbz	r0, 800b498 <rclc_timer_init_default+0x5c>
 800b43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b442:	460e      	mov	r6, r1
 800b444:	b08a      	sub	sp, #40	; 0x28
 800b446:	b319      	cbz	r1, 800b490 <rclc_timer_init_default+0x54>
 800b448:	4690      	mov	r8, r2
 800b44a:	461f      	mov	r7, r3
 800b44c:	4605      	mov	r5, r0
 800b44e:	f006 f94d 	bl	80116ec <rcl_get_zero_initialized_timer>
 800b452:	68b4      	ldr	r4, [r6, #8]
 800b454:	6028      	str	r0, [r5, #0]
 800b456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b458:	f10d 0c0c 	add.w	ip, sp, #12
 800b45c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	f8cc 3000 	str.w	r3, [ip]
 800b466:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b468:	9302      	str	r3, [sp, #8]
 800b46a:	e9cd 8700 	strd	r8, r7, [sp]
 800b46e:	4628      	mov	r0, r5
 800b470:	4632      	mov	r2, r6
 800b472:	f106 010c 	add.w	r1, r6, #12
 800b476:	f006 f93f 	bl	80116f8 <rcl_timer_init>
 800b47a:	b910      	cbnz	r0, 800b482 <rclc_timer_init_default+0x46>
 800b47c:	b00a      	add	sp, #40	; 0x28
 800b47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b482:	9009      	str	r0, [sp, #36]	; 0x24
 800b484:	f000 f888 	bl	800b598 <rcutils_reset_error>
 800b488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b48a:	b00a      	add	sp, #40	; 0x28
 800b48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b490:	200b      	movs	r0, #11
 800b492:	b00a      	add	sp, #40	; 0x28
 800b494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b498:	200b      	movs	r0, #11
 800b49a:	4770      	bx	lr

0800b49c <__default_zero_allocate>:
 800b49c:	f00b b856 	b.w	801654c <calloc>

0800b4a0 <__default_reallocate>:
 800b4a0:	f00b b9e2 	b.w	8016868 <realloc>

0800b4a4 <__default_deallocate>:
 800b4a4:	f00b b8c0 	b.w	8016628 <free>

0800b4a8 <__default_allocate>:
 800b4a8:	f00b b8b6 	b.w	8016618 <malloc>

0800b4ac <rcutils_get_zero_initialized_allocator>:
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	4c05      	ldr	r4, [pc, #20]	; (800b4c4 <rcutils_get_zero_initialized_allocator+0x18>)
 800b4b0:	4686      	mov	lr, r0
 800b4b2:	4684      	mov	ip, r0
 800b4b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	f8cc 3000 	str.w	r3, [ip]
 800b4c0:	4670      	mov	r0, lr
 800b4c2:	bd10      	pop	{r4, pc}
 800b4c4:	08017f08 	.word	0x08017f08

0800b4c8 <rcutils_set_default_allocator>:
 800b4c8:	b1a8      	cbz	r0, 800b4f6 <rcutils_set_default_allocator+0x2e>
 800b4ca:	6802      	ldr	r2, [r0, #0]
 800b4cc:	b1a2      	cbz	r2, 800b4f8 <rcutils_set_default_allocator+0x30>
 800b4ce:	6841      	ldr	r1, [r0, #4]
 800b4d0:	b1a1      	cbz	r1, 800b4fc <rcutils_set_default_allocator+0x34>
 800b4d2:	b410      	push	{r4}
 800b4d4:	68c4      	ldr	r4, [r0, #12]
 800b4d6:	b164      	cbz	r4, 800b4f2 <rcutils_set_default_allocator+0x2a>
 800b4d8:	6880      	ldr	r0, [r0, #8]
 800b4da:	b138      	cbz	r0, 800b4ec <rcutils_set_default_allocator+0x24>
 800b4dc:	4b08      	ldr	r3, [pc, #32]	; (800b500 <rcutils_set_default_allocator+0x38>)
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b4e6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b4ea:	2001      	movs	r0, #1
 800b4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	e7fa      	b.n	800b4ec <rcutils_set_default_allocator+0x24>
 800b4f6:	4770      	bx	lr
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4770      	bx	lr
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	4770      	bx	lr
 800b500:	20000014 	.word	0x20000014

0800b504 <rcutils_get_default_allocator>:
 800b504:	b510      	push	{r4, lr}
 800b506:	4c05      	ldr	r4, [pc, #20]	; (800b51c <rcutils_get_default_allocator+0x18>)
 800b508:	4686      	mov	lr, r0
 800b50a:	4684      	mov	ip, r0
 800b50c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b50e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	f8cc 3000 	str.w	r3, [ip]
 800b518:	4670      	mov	r0, lr
 800b51a:	bd10      	pop	{r4, pc}
 800b51c:	20000014 	.word	0x20000014

0800b520 <rcutils_allocator_is_valid>:
 800b520:	b158      	cbz	r0, 800b53a <rcutils_allocator_is_valid+0x1a>
 800b522:	6803      	ldr	r3, [r0, #0]
 800b524:	b143      	cbz	r3, 800b538 <rcutils_allocator_is_valid+0x18>
 800b526:	6843      	ldr	r3, [r0, #4]
 800b528:	b133      	cbz	r3, 800b538 <rcutils_allocator_is_valid+0x18>
 800b52a:	68c3      	ldr	r3, [r0, #12]
 800b52c:	b123      	cbz	r3, 800b538 <rcutils_allocator_is_valid+0x18>
 800b52e:	6880      	ldr	r0, [r0, #8]
 800b530:	3800      	subs	r0, #0
 800b532:	bf18      	it	ne
 800b534:	2001      	movne	r0, #1
 800b536:	4770      	bx	lr
 800b538:	4618      	mov	r0, r3
 800b53a:	4770      	bx	lr

0800b53c <rcutils_get_env>:
 800b53c:	b168      	cbz	r0, 800b55a <rcutils_get_env+0x1e>
 800b53e:	b510      	push	{r4, lr}
 800b540:	460c      	mov	r4, r1
 800b542:	b129      	cbz	r1, 800b550 <rcutils_get_env+0x14>
 800b544:	f00b f820 	bl	8016588 <getenv>
 800b548:	b120      	cbz	r0, 800b554 <rcutils_get_env+0x18>
 800b54a:	6020      	str	r0, [r4, #0]
 800b54c:	2000      	movs	r0, #0
 800b54e:	bd10      	pop	{r4, pc}
 800b550:	4803      	ldr	r0, [pc, #12]	; (800b560 <rcutils_get_env+0x24>)
 800b552:	bd10      	pop	{r4, pc}
 800b554:	4b03      	ldr	r3, [pc, #12]	; (800b564 <rcutils_get_env+0x28>)
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	bd10      	pop	{r4, pc}
 800b55a:	4803      	ldr	r0, [pc, #12]	; (800b568 <rcutils_get_env+0x2c>)
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	08017f38 	.word	0x08017f38
 800b564:	08018060 	.word	0x08018060
 800b568:	08017f1c 	.word	0x08017f1c

0800b56c <rcutils_get_error_string>:
 800b56c:	4b06      	ldr	r3, [pc, #24]	; (800b588 <rcutils_get_error_string+0x1c>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	b13b      	cbz	r3, 800b582 <rcutils_get_error_string+0x16>
 800b572:	4b06      	ldr	r3, [pc, #24]	; (800b58c <rcutils_get_error_string+0x20>)
 800b574:	781a      	ldrb	r2, [r3, #0]
 800b576:	b90a      	cbnz	r2, 800b57c <rcutils_get_error_string+0x10>
 800b578:	2201      	movs	r2, #1
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	4b04      	ldr	r3, [pc, #16]	; (800b590 <rcutils_get_error_string+0x24>)
 800b57e:	7818      	ldrb	r0, [r3, #0]
 800b580:	4770      	bx	lr
 800b582:	4b04      	ldr	r3, [pc, #16]	; (800b594 <rcutils_get_error_string+0x28>)
 800b584:	7818      	ldrb	r0, [r3, #0]
 800b586:	4770      	bx	lr
 800b588:	20009428 	.word	0x20009428
 800b58c:	20009441 	.word	0x20009441
 800b590:	20009440 	.word	0x20009440
 800b594:	08017f54 	.word	0x08017f54

0800b598 <rcutils_reset_error>:
 800b598:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800b5b8 <rcutils_reset_error+0x20>
 800b59c:	4a08      	ldr	r2, [pc, #32]	; (800b5c0 <rcutils_reset_error+0x28>)
 800b59e:	4809      	ldr	r0, [pc, #36]	; (800b5c4 <rcutils_reset_error+0x2c>)
 800b5a0:	4909      	ldr	r1, [pc, #36]	; (800b5c8 <rcutils_reset_error+0x30>)
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	8013      	strh	r3, [r2, #0]
 800b5a6:	ed82 7b02 	vstr	d7, [r2, #8]
 800b5aa:	4a08      	ldr	r2, [pc, #32]	; (800b5cc <rcutils_reset_error+0x34>)
 800b5ac:	7003      	strb	r3, [r0, #0]
 800b5ae:	700b      	strb	r3, [r1, #0]
 800b5b0:	7013      	strb	r3, [r2, #0]
 800b5b2:	4770      	bx	lr
 800b5b4:	f3af 8000 	nop.w
	...
 800b5c0:	20009430 	.word	0x20009430
 800b5c4:	20009441 	.word	0x20009441
 800b5c8:	20009440 	.word	0x20009440
 800b5cc:	20009428 	.word	0x20009428

0800b5d0 <rcutils_format_string_limit>:
 800b5d0:	b40f      	push	{r0, r1, r2, r3}
 800b5d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5d4:	b083      	sub	sp, #12
 800b5d6:	ac08      	add	r4, sp, #32
 800b5d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800b5da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b5de:	b34e      	cbz	r6, 800b634 <rcutils_format_string_limit+0x64>
 800b5e0:	a808      	add	r0, sp, #32
 800b5e2:	f7ff ff9d 	bl	800b520 <rcutils_allocator_is_valid>
 800b5e6:	b328      	cbz	r0, 800b634 <rcutils_format_string_limit+0x64>
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	ab0f      	add	r3, sp, #60	; 0x3c
 800b5ec:	4632      	mov	r2, r6
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	e9cd 3300 	strd	r3, r3, [sp]
 800b5f4:	f000 f8f4 	bl	800b7e0 <rcutils_vsnprintf>
 800b5f8:	1c43      	adds	r3, r0, #1
 800b5fa:	4605      	mov	r5, r0
 800b5fc:	d01a      	beq.n	800b634 <rcutils_format_string_limit+0x64>
 800b5fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b600:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b602:	1c47      	adds	r7, r0, #1
 800b604:	429f      	cmp	r7, r3
 800b606:	bf84      	itt	hi
 800b608:	461f      	movhi	r7, r3
 800b60a:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800b60e:	4638      	mov	r0, r7
 800b610:	9b08      	ldr	r3, [sp, #32]
 800b612:	4798      	blx	r3
 800b614:	4604      	mov	r4, r0
 800b616:	b168      	cbz	r0, 800b634 <rcutils_format_string_limit+0x64>
 800b618:	9b01      	ldr	r3, [sp, #4]
 800b61a:	4632      	mov	r2, r6
 800b61c:	4639      	mov	r1, r7
 800b61e:	f000 f8df 	bl	800b7e0 <rcutils_vsnprintf>
 800b622:	2800      	cmp	r0, #0
 800b624:	db02      	blt.n	800b62c <rcutils_format_string_limit+0x5c>
 800b626:	2300      	movs	r3, #0
 800b628:	5563      	strb	r3, [r4, r5]
 800b62a:	e004      	b.n	800b636 <rcutils_format_string_limit+0x66>
 800b62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b630:	4620      	mov	r0, r4
 800b632:	4798      	blx	r3
 800b634:	2400      	movs	r4, #0
 800b636:	4620      	mov	r0, r4
 800b638:	b003      	add	sp, #12
 800b63a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b63e:	b004      	add	sp, #16
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop

0800b644 <rcutils_repl_str>:
 800b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	ed2d 8b02 	vpush	{d8}
 800b64c:	b087      	sub	sp, #28
 800b64e:	4680      	mov	r8, r0
 800b650:	4608      	mov	r0, r1
 800b652:	f8cd 8004 	str.w	r8, [sp, #4]
 800b656:	ee08 2a10 	vmov	s16, r2
 800b65a:	468a      	mov	sl, r1
 800b65c:	4699      	mov	r9, r3
 800b65e:	f7f4 fdc1 	bl	80001e4 <strlen>
 800b662:	2600      	movs	r6, #0
 800b664:	4647      	mov	r7, r8
 800b666:	9002      	str	r0, [sp, #8]
 800b668:	46b3      	mov	fp, r6
 800b66a:	2510      	movs	r5, #16
 800b66c:	46b0      	mov	r8, r6
 800b66e:	e01d      	b.n	800b6ac <rcutils_repl_str+0x68>
 800b670:	f10b 0b01 	add.w	fp, fp, #1
 800b674:	455e      	cmp	r6, fp
 800b676:	d211      	bcs.n	800b69c <rcutils_repl_str+0x58>
 800b678:	442e      	add	r6, r5
 800b67a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800b67e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b682:	00b1      	lsls	r1, r6, #2
 800b684:	4798      	blx	r3
 800b686:	2800      	cmp	r0, #0
 800b688:	f000 8088 	beq.w	800b79c <rcutils_repl_str+0x158>
 800b68c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b690:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800b694:	4680      	mov	r8, r0
 800b696:	bf28      	it	cs
 800b698:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800b69c:	9a01      	ldr	r2, [sp, #4]
 800b69e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800b6a2:	1aa2      	subs	r2, r4, r2
 800b6a4:	f843 2c04 	str.w	r2, [r3, #-4]
 800b6a8:	9b02      	ldr	r3, [sp, #8]
 800b6aa:	18e7      	adds	r7, r4, r3
 800b6ac:	4651      	mov	r1, sl
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	f00b fb51 	bl	8016d56 <strstr>
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	4640      	mov	r0, r8
 800b6b8:	2c00      	cmp	r4, #0
 800b6ba:	d1d9      	bne.n	800b670 <rcutils_repl_str+0x2c>
 800b6bc:	46b8      	mov	r8, r7
 800b6be:	4607      	mov	r7, r0
 800b6c0:	4640      	mov	r0, r8
 800b6c2:	f7f4 fd8f 	bl	80001e4 <strlen>
 800b6c6:	9b01      	ldr	r3, [sp, #4]
 800b6c8:	eba8 0303 	sub.w	r3, r8, r3
 800b6cc:	181c      	adds	r4, r3, r0
 800b6ce:	9404      	str	r4, [sp, #16]
 800b6d0:	f1bb 0f00 	cmp.w	fp, #0
 800b6d4:	d04a      	beq.n	800b76c <rcutils_repl_str+0x128>
 800b6d6:	ee18 0a10 	vmov	r0, s16
 800b6da:	f7f4 fd83 	bl	80001e4 <strlen>
 800b6de:	9b02      	ldr	r3, [sp, #8]
 800b6e0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b6e4:	1ac3      	subs	r3, r0, r3
 800b6e6:	fb0b 4303 	mla	r3, fp, r3, r4
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	9305      	str	r3, [sp, #20]
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	f8d9 3000 	ldr.w	r3, [r9]
 800b6f4:	1c50      	adds	r0, r2, #1
 800b6f6:	4798      	blx	r3
 800b6f8:	9003      	str	r0, [sp, #12]
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d04f      	beq.n	800b79e <rcutils_repl_str+0x15a>
 800b6fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	4641      	mov	r1, r8
 800b706:	f00b fbc7 	bl	8016e98 <memcpy>
 800b70a:	683d      	ldr	r5, [r7, #0]
 800b70c:	9b03      	ldr	r3, [sp, #12]
 800b70e:	9701      	str	r7, [sp, #4]
 800b710:	46ba      	mov	sl, r7
 800b712:	441d      	add	r5, r3
 800b714:	9f02      	ldr	r7, [sp, #8]
 800b716:	f8cd 9008 	str.w	r9, [sp, #8]
 800b71a:	2401      	movs	r4, #1
 800b71c:	46d1      	mov	r9, sl
 800b71e:	ee18 aa10 	vmov	sl, s16
 800b722:	e00a      	b.n	800b73a <rcutils_repl_str+0xf6>
 800b724:	f8d9 5000 	ldr.w	r5, [r9]
 800b728:	1aaa      	subs	r2, r5, r2
 800b72a:	1885      	adds	r5, r0, r2
 800b72c:	f00b fbb4 	bl	8016e98 <memcpy>
 800b730:	45a3      	cmp	fp, r4
 800b732:	f104 0201 	add.w	r2, r4, #1
 800b736:	d935      	bls.n	800b7a4 <rcutils_repl_str+0x160>
 800b738:	4614      	mov	r4, r2
 800b73a:	4632      	mov	r2, r6
 800b73c:	4651      	mov	r1, sl
 800b73e:	4628      	mov	r0, r5
 800b740:	f00b fbaa 	bl	8016e98 <memcpy>
 800b744:	f859 2b04 	ldr.w	r2, [r9], #4
 800b748:	45a3      	cmp	fp, r4
 800b74a:	443a      	add	r2, r7
 800b74c:	eb05 0006 	add.w	r0, r5, r6
 800b750:	eb08 0102 	add.w	r1, r8, r2
 800b754:	d1e6      	bne.n	800b724 <rcutils_repl_str+0xe0>
 800b756:	9b04      	ldr	r3, [sp, #16]
 800b758:	1a9a      	subs	r2, r3, r2
 800b75a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800b75e:	f00b fb9b 	bl	8016e98 <memcpy>
 800b762:	9a03      	ldr	r2, [sp, #12]
 800b764:	9905      	ldr	r1, [sp, #20]
 800b766:	2300      	movs	r3, #0
 800b768:	5453      	strb	r3, [r2, r1]
 800b76a:	e00b      	b.n	800b784 <rcutils_repl_str+0x140>
 800b76c:	4620      	mov	r0, r4
 800b76e:	f8d9 3000 	ldr.w	r3, [r9]
 800b772:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b776:	3001      	adds	r0, #1
 800b778:	4798      	blx	r3
 800b77a:	9003      	str	r0, [sp, #12]
 800b77c:	b110      	cbz	r0, 800b784 <rcutils_repl_str+0x140>
 800b77e:	9901      	ldr	r1, [sp, #4]
 800b780:	f00b fb82 	bl	8016e88 <strcpy>
 800b784:	4638      	mov	r0, r7
 800b786:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b78a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800b78e:	4798      	blx	r3
 800b790:	9803      	ldr	r0, [sp, #12]
 800b792:	b007      	add	sp, #28
 800b794:	ecbd 8b02 	vpop	{d8}
 800b798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79c:	4647      	mov	r7, r8
 800b79e:	2300      	movs	r3, #0
 800b7a0:	9303      	str	r3, [sp, #12]
 800b7a2:	e7ef      	b.n	800b784 <rcutils_repl_str+0x140>
 800b7a4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800b7a8:	e7db      	b.n	800b762 <rcutils_repl_str+0x11e>
 800b7aa:	bf00      	nop

0800b7ac <rcutils_snprintf>:
 800b7ac:	b40c      	push	{r2, r3}
 800b7ae:	b530      	push	{r4, r5, lr}
 800b7b0:	b083      	sub	sp, #12
 800b7b2:	ab06      	add	r3, sp, #24
 800b7b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	b152      	cbz	r2, 800b7d2 <rcutils_snprintf+0x26>
 800b7bc:	b138      	cbz	r0, 800b7ce <rcutils_snprintf+0x22>
 800b7be:	b141      	cbz	r1, 800b7d2 <rcutils_snprintf+0x26>
 800b7c0:	f00b fa6a 	bl	8016c98 <vsniprintf>
 800b7c4:	b003      	add	sp, #12
 800b7c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7ca:	b002      	add	sp, #8
 800b7cc:	4770      	bx	lr
 800b7ce:	2900      	cmp	r1, #0
 800b7d0:	d0f6      	beq.n	800b7c0 <rcutils_snprintf+0x14>
 800b7d2:	f00b fb2d 	bl	8016e30 <__errno>
 800b7d6:	2316      	movs	r3, #22
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7de:	e7f1      	b.n	800b7c4 <rcutils_snprintf+0x18>

0800b7e0 <rcutils_vsnprintf>:
 800b7e0:	b570      	push	{r4, r5, r6, lr}
 800b7e2:	b13a      	cbz	r2, 800b7f4 <rcutils_vsnprintf+0x14>
 800b7e4:	b120      	cbz	r0, 800b7f0 <rcutils_vsnprintf+0x10>
 800b7e6:	b129      	cbz	r1, 800b7f4 <rcutils_vsnprintf+0x14>
 800b7e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7ec:	f00b ba54 	b.w	8016c98 <vsniprintf>
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	d0f9      	beq.n	800b7e8 <rcutils_vsnprintf+0x8>
 800b7f4:	f00b fb1c 	bl	8016e30 <__errno>
 800b7f8:	2316      	movs	r3, #22
 800b7fa:	6003      	str	r3, [r0, #0]
 800b7fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b800:	bd70      	pop	{r4, r5, r6, pc}
 800b802:	bf00      	nop

0800b804 <rcutils_strdup>:
 800b804:	b084      	sub	sp, #16
 800b806:	b570      	push	{r4, r5, r6, lr}
 800b808:	b082      	sub	sp, #8
 800b80a:	ac07      	add	r4, sp, #28
 800b80c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800b810:	4605      	mov	r5, r0
 800b812:	b1b0      	cbz	r0, 800b842 <rcutils_strdup+0x3e>
 800b814:	f7f4 fce6 	bl	80001e4 <strlen>
 800b818:	1c42      	adds	r2, r0, #1
 800b81a:	9b07      	ldr	r3, [sp, #28]
 800b81c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b81e:	9201      	str	r2, [sp, #4]
 800b820:	4606      	mov	r6, r0
 800b822:	4610      	mov	r0, r2
 800b824:	4798      	blx	r3
 800b826:	4604      	mov	r4, r0
 800b828:	b128      	cbz	r0, 800b836 <rcutils_strdup+0x32>
 800b82a:	9a01      	ldr	r2, [sp, #4]
 800b82c:	4629      	mov	r1, r5
 800b82e:	f00b fb33 	bl	8016e98 <memcpy>
 800b832:	2300      	movs	r3, #0
 800b834:	55a3      	strb	r3, [r4, r6]
 800b836:	4620      	mov	r0, r4
 800b838:	b002      	add	sp, #8
 800b83a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b83e:	b004      	add	sp, #16
 800b840:	4770      	bx	lr
 800b842:	4604      	mov	r4, r0
 800b844:	e7f7      	b.n	800b836 <rcutils_strdup+0x32>
 800b846:	bf00      	nop

0800b848 <rcutils_strndup>:
 800b848:	b082      	sub	sp, #8
 800b84a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84c:	ac06      	add	r4, sp, #24
 800b84e:	e884 000c 	stmia.w	r4, {r2, r3}
 800b852:	4605      	mov	r5, r0
 800b854:	b188      	cbz	r0, 800b87a <rcutils_strndup+0x32>
 800b856:	1c4f      	adds	r7, r1, #1
 800b858:	460e      	mov	r6, r1
 800b85a:	4638      	mov	r0, r7
 800b85c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b85e:	4790      	blx	r2
 800b860:	4604      	mov	r4, r0
 800b862:	b128      	cbz	r0, 800b870 <rcutils_strndup+0x28>
 800b864:	463a      	mov	r2, r7
 800b866:	4629      	mov	r1, r5
 800b868:	f00b fb16 	bl	8016e98 <memcpy>
 800b86c:	2300      	movs	r3, #0
 800b86e:	55a3      	strb	r3, [r4, r6]
 800b870:	4620      	mov	r0, r4
 800b872:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b876:	b002      	add	sp, #8
 800b878:	4770      	bx	lr
 800b87a:	4604      	mov	r4, r0
 800b87c:	e7f8      	b.n	800b870 <rcutils_strndup+0x28>
 800b87e:	bf00      	nop

0800b880 <rcutils_system_time_now>:
 800b880:	b308      	cbz	r0, 800b8c6 <rcutils_system_time_now+0x46>
 800b882:	b570      	push	{r4, r5, r6, lr}
 800b884:	b084      	sub	sp, #16
 800b886:	4604      	mov	r4, r0
 800b888:	4669      	mov	r1, sp
 800b88a:	2001      	movs	r0, #1
 800b88c:	f7f5 fe14 	bl	80014b8 <clock_gettime>
 800b890:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b894:	2d00      	cmp	r5, #0
 800b896:	db13      	blt.n	800b8c0 <rcutils_system_time_now+0x40>
 800b898:	9902      	ldr	r1, [sp, #8]
 800b89a:	2900      	cmp	r1, #0
 800b89c:	db0d      	blt.n	800b8ba <rcutils_system_time_now+0x3a>
 800b89e:	4e0b      	ldr	r6, [pc, #44]	; (800b8cc <rcutils_system_time_now+0x4c>)
 800b8a0:	fba3 3206 	umull	r3, r2, r3, r6
 800b8a4:	185b      	adds	r3, r3, r1
 800b8a6:	fb06 2205 	mla	r2, r6, r5, r2
 800b8aa:	f04f 0000 	mov.w	r0, #0
 800b8ae:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b8b2:	e9c4 3200 	strd	r3, r2, [r4]
 800b8b6:	b004      	add	sp, #16
 800b8b8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ba:	ea53 0205 	orrs.w	r2, r3, r5
 800b8be:	d1ee      	bne.n	800b89e <rcutils_system_time_now+0x1e>
 800b8c0:	2002      	movs	r0, #2
 800b8c2:	b004      	add	sp, #16
 800b8c4:	bd70      	pop	{r4, r5, r6, pc}
 800b8c6:	200b      	movs	r0, #11
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	3b9aca00 	.word	0x3b9aca00

0800b8d0 <rcutils_steady_time_now>:
 800b8d0:	b308      	cbz	r0, 800b916 <rcutils_steady_time_now+0x46>
 800b8d2:	b570      	push	{r4, r5, r6, lr}
 800b8d4:	b084      	sub	sp, #16
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	4669      	mov	r1, sp
 800b8da:	2000      	movs	r0, #0
 800b8dc:	f7f5 fdec 	bl	80014b8 <clock_gettime>
 800b8e0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b8e4:	2d00      	cmp	r5, #0
 800b8e6:	db13      	blt.n	800b910 <rcutils_steady_time_now+0x40>
 800b8e8:	9902      	ldr	r1, [sp, #8]
 800b8ea:	2900      	cmp	r1, #0
 800b8ec:	db0d      	blt.n	800b90a <rcutils_steady_time_now+0x3a>
 800b8ee:	4e0b      	ldr	r6, [pc, #44]	; (800b91c <rcutils_steady_time_now+0x4c>)
 800b8f0:	fba3 3206 	umull	r3, r2, r3, r6
 800b8f4:	185b      	adds	r3, r3, r1
 800b8f6:	fb06 2205 	mla	r2, r6, r5, r2
 800b8fa:	f04f 0000 	mov.w	r0, #0
 800b8fe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b902:	e9c4 3200 	strd	r3, r2, [r4]
 800b906:	b004      	add	sp, #16
 800b908:	bd70      	pop	{r4, r5, r6, pc}
 800b90a:	ea53 0205 	orrs.w	r2, r3, r5
 800b90e:	d1ee      	bne.n	800b8ee <rcutils_steady_time_now+0x1e>
 800b910:	2002      	movs	r0, #2
 800b912:	b004      	add	sp, #16
 800b914:	bd70      	pop	{r4, r5, r6, pc}
 800b916:	200b      	movs	r0, #11
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	3b9aca00 	.word	0x3b9aca00

0800b920 <rmw_get_default_publisher_options>:
 800b920:	2200      	movs	r2, #0
 800b922:	6002      	str	r2, [r0, #0]
 800b924:	7102      	strb	r2, [r0, #4]
 800b926:	4770      	bx	lr

0800b928 <rmw_validate_namespace_with_size>:
 800b928:	b340      	cbz	r0, 800b97c <rmw_validate_namespace_with_size+0x54>
 800b92a:	b570      	push	{r4, r5, r6, lr}
 800b92c:	4614      	mov	r4, r2
 800b92e:	b0c2      	sub	sp, #264	; 0x108
 800b930:	b332      	cbz	r2, 800b980 <rmw_validate_namespace_with_size+0x58>
 800b932:	2901      	cmp	r1, #1
 800b934:	460d      	mov	r5, r1
 800b936:	461e      	mov	r6, r3
 800b938:	d102      	bne.n	800b940 <rmw_validate_namespace_with_size+0x18>
 800b93a:	7803      	ldrb	r3, [r0, #0]
 800b93c:	2b2f      	cmp	r3, #47	; 0x2f
 800b93e:	d012      	beq.n	800b966 <rmw_validate_namespace_with_size+0x3e>
 800b940:	aa01      	add	r2, sp, #4
 800b942:	4669      	mov	r1, sp
 800b944:	f007 fed4 	bl	80136f0 <rmw_validate_full_topic_name>
 800b948:	b978      	cbnz	r0, 800b96a <rmw_validate_namespace_with_size+0x42>
 800b94a:	9b00      	ldr	r3, [sp, #0]
 800b94c:	b14b      	cbz	r3, 800b962 <rmw_validate_namespace_with_size+0x3a>
 800b94e:	2b07      	cmp	r3, #7
 800b950:	d007      	beq.n	800b962 <rmw_validate_namespace_with_size+0x3a>
 800b952:	1e5a      	subs	r2, r3, #1
 800b954:	2a05      	cmp	r2, #5
 800b956:	d82b      	bhi.n	800b9b0 <rmw_validate_namespace_with_size+0x88>
 800b958:	e8df f002 	tbb	[pc, r2]
 800b95c:	1e212427 	.word	0x1e212427
 800b960:	141b      	.short	0x141b
 800b962:	2df5      	cmp	r5, #245	; 0xf5
 800b964:	d803      	bhi.n	800b96e <rmw_validate_namespace_with_size+0x46>
 800b966:	2000      	movs	r0, #0
 800b968:	6020      	str	r0, [r4, #0]
 800b96a:	b042      	add	sp, #264	; 0x108
 800b96c:	bd70      	pop	{r4, r5, r6, pc}
 800b96e:	2307      	movs	r3, #7
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	2e00      	cmp	r6, #0
 800b974:	d0f9      	beq.n	800b96a <rmw_validate_namespace_with_size+0x42>
 800b976:	23f4      	movs	r3, #244	; 0xf4
 800b978:	6033      	str	r3, [r6, #0]
 800b97a:	e7f6      	b.n	800b96a <rmw_validate_namespace_with_size+0x42>
 800b97c:	200b      	movs	r0, #11
 800b97e:	4770      	bx	lr
 800b980:	200b      	movs	r0, #11
 800b982:	e7f2      	b.n	800b96a <rmw_validate_namespace_with_size+0x42>
 800b984:	2306      	movs	r3, #6
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	2e00      	cmp	r6, #0
 800b98a:	d0ee      	beq.n	800b96a <rmw_validate_namespace_with_size+0x42>
 800b98c:	9b01      	ldr	r3, [sp, #4]
 800b98e:	6033      	str	r3, [r6, #0]
 800b990:	e7eb      	b.n	800b96a <rmw_validate_namespace_with_size+0x42>
 800b992:	2305      	movs	r3, #5
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	e7f7      	b.n	800b988 <rmw_validate_namespace_with_size+0x60>
 800b998:	2304      	movs	r3, #4
 800b99a:	6023      	str	r3, [r4, #0]
 800b99c:	e7f4      	b.n	800b988 <rmw_validate_namespace_with_size+0x60>
 800b99e:	2303      	movs	r3, #3
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	e7f1      	b.n	800b988 <rmw_validate_namespace_with_size+0x60>
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	e7ee      	b.n	800b988 <rmw_validate_namespace_with_size+0x60>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	6023      	str	r3, [r4, #0]
 800b9ae:	e7eb      	b.n	800b988 <rmw_validate_namespace_with_size+0x60>
 800b9b0:	4a03      	ldr	r2, [pc, #12]	; (800b9c0 <rmw_validate_namespace_with_size+0x98>)
 800b9b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9b6:	a802      	add	r0, sp, #8
 800b9b8:	f7ff fef8 	bl	800b7ac <rcutils_snprintf>
 800b9bc:	2001      	movs	r0, #1
 800b9be:	e7d4      	b.n	800b96a <rmw_validate_namespace_with_size+0x42>
 800b9c0:	08017f58 	.word	0x08017f58

0800b9c4 <rmw_validate_namespace>:
 800b9c4:	b168      	cbz	r0, 800b9e2 <rmw_validate_namespace+0x1e>
 800b9c6:	b570      	push	{r4, r5, r6, lr}
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	4616      	mov	r6, r2
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	f7f4 fc09 	bl	80001e4 <strlen>
 800b9d2:	4633      	mov	r3, r6
 800b9d4:	4601      	mov	r1, r0
 800b9d6:	462a      	mov	r2, r5
 800b9d8:	4620      	mov	r0, r4
 800b9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9de:	f7ff bfa3 	b.w	800b928 <rmw_validate_namespace_with_size>
 800b9e2:	200b      	movs	r0, #11
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop

0800b9e8 <rmw_namespace_validation_result_string>:
 800b9e8:	2807      	cmp	r0, #7
 800b9ea:	bf9a      	itte	ls
 800b9ec:	4b02      	ldrls	r3, [pc, #8]	; (800b9f8 <rmw_namespace_validation_result_string+0x10>)
 800b9ee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800b9f2:	4802      	ldrhi	r0, [pc, #8]	; (800b9fc <rmw_namespace_validation_result_string+0x14>)
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	08018150 	.word	0x08018150
 800b9fc:	08017fa8 	.word	0x08017fa8

0800ba00 <rmw_validate_node_name>:
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d03b      	beq.n	800ba7c <rmw_validate_node_name+0x7c>
 800ba04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba08:	460d      	mov	r5, r1
 800ba0a:	2900      	cmp	r1, #0
 800ba0c:	d038      	beq.n	800ba80 <rmw_validate_node_name+0x80>
 800ba0e:	4616      	mov	r6, r2
 800ba10:	4604      	mov	r4, r0
 800ba12:	f7f4 fbe7 	bl	80001e4 <strlen>
 800ba16:	b1e0      	cbz	r0, 800ba52 <rmw_validate_node_name+0x52>
 800ba18:	1e63      	subs	r3, r4, #1
 800ba1a:	eb03 0800 	add.w	r8, r3, r0
 800ba1e:	f1c4 0101 	rsb	r1, r4, #1
 800ba22:	18cf      	adds	r7, r1, r3
 800ba24:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800ba28:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800ba2c:	f02e 0c20 	bic.w	ip, lr, #32
 800ba30:	2a09      	cmp	r2, #9
 800ba32:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800ba36:	d914      	bls.n	800ba62 <rmw_validate_node_name+0x62>
 800ba38:	f1bc 0f19 	cmp.w	ip, #25
 800ba3c:	d911      	bls.n	800ba62 <rmw_validate_node_name+0x62>
 800ba3e:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800ba42:	d00e      	beq.n	800ba62 <rmw_validate_node_name+0x62>
 800ba44:	2302      	movs	r3, #2
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	b106      	cbz	r6, 800ba4c <rmw_validate_node_name+0x4c>
 800ba4a:	6037      	str	r7, [r6, #0]
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba52:	2301      	movs	r3, #1
 800ba54:	602b      	str	r3, [r5, #0]
 800ba56:	2e00      	cmp	r6, #0
 800ba58:	d0f8      	beq.n	800ba4c <rmw_validate_node_name+0x4c>
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	6030      	str	r0, [r6, #0]
 800ba5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba62:	4543      	cmp	r3, r8
 800ba64:	d1dd      	bne.n	800ba22 <rmw_validate_node_name+0x22>
 800ba66:	7822      	ldrb	r2, [r4, #0]
 800ba68:	4b0d      	ldr	r3, [pc, #52]	; (800baa0 <rmw_validate_node_name+0xa0>)
 800ba6a:	5cd3      	ldrb	r3, [r2, r3]
 800ba6c:	f013 0304 	ands.w	r3, r3, #4
 800ba70:	d110      	bne.n	800ba94 <rmw_validate_node_name+0x94>
 800ba72:	28ff      	cmp	r0, #255	; 0xff
 800ba74:	d806      	bhi.n	800ba84 <rmw_validate_node_name+0x84>
 800ba76:	602b      	str	r3, [r5, #0]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	e7e8      	b.n	800ba4e <rmw_validate_node_name+0x4e>
 800ba7c:	200b      	movs	r0, #11
 800ba7e:	4770      	bx	lr
 800ba80:	200b      	movs	r0, #11
 800ba82:	e7e4      	b.n	800ba4e <rmw_validate_node_name+0x4e>
 800ba84:	2204      	movs	r2, #4
 800ba86:	602a      	str	r2, [r5, #0]
 800ba88:	2e00      	cmp	r6, #0
 800ba8a:	d0df      	beq.n	800ba4c <rmw_validate_node_name+0x4c>
 800ba8c:	22fe      	movs	r2, #254	; 0xfe
 800ba8e:	6032      	str	r2, [r6, #0]
 800ba90:	4618      	mov	r0, r3
 800ba92:	e7dc      	b.n	800ba4e <rmw_validate_node_name+0x4e>
 800ba94:	2303      	movs	r3, #3
 800ba96:	602b      	str	r3, [r5, #0]
 800ba98:	2e00      	cmp	r6, #0
 800ba9a:	d1de      	bne.n	800ba5a <rmw_validate_node_name+0x5a>
 800ba9c:	e7d6      	b.n	800ba4c <rmw_validate_node_name+0x4c>
 800ba9e:	bf00      	nop
 800baa0:	080188c8 	.word	0x080188c8

0800baa4 <rmw_node_name_validation_result_string>:
 800baa4:	2804      	cmp	r0, #4
 800baa6:	bf9a      	itte	ls
 800baa8:	4b02      	ldrls	r3, [pc, #8]	; (800bab4 <rmw_node_name_validation_result_string+0x10>)
 800baaa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800baae:	4802      	ldrhi	r0, [pc, #8]	; (800bab8 <rmw_node_name_validation_result_string+0x14>)
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	0801825c 	.word	0x0801825c
 800bab8:	08018170 	.word	0x08018170

0800babc <rmw_uros_set_custom_transport>:
 800babc:	b470      	push	{r4, r5, r6}
 800babe:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800bac2:	b162      	cbz	r2, 800bade <rmw_uros_set_custom_transport+0x22>
 800bac4:	b15b      	cbz	r3, 800bade <rmw_uros_set_custom_transport+0x22>
 800bac6:	b155      	cbz	r5, 800bade <rmw_uros_set_custom_transport+0x22>
 800bac8:	b14e      	cbz	r6, 800bade <rmw_uros_set_custom_transport+0x22>
 800baca:	4c06      	ldr	r4, [pc, #24]	; (800bae4 <rmw_uros_set_custom_transport+0x28>)
 800bacc:	7020      	strb	r0, [r4, #0]
 800bace:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bad2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bad6:	6166      	str	r6, [r4, #20]
 800bad8:	2000      	movs	r0, #0
 800bada:	bc70      	pop	{r4, r5, r6}
 800badc:	4770      	bx	lr
 800bade:	200b      	movs	r0, #11
 800bae0:	bc70      	pop	{r4, r5, r6}
 800bae2:	4770      	bx	lr
 800bae4:	20009444 	.word	0x20009444

0800bae8 <create_node>:
 800bae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800baec:	b083      	sub	sp, #12
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d05f      	beq.n	800bbb2 <create_node+0xca>
 800baf2:	4606      	mov	r6, r0
 800baf4:	4835      	ldr	r0, [pc, #212]	; (800bbcc <create_node+0xe4>)
 800baf6:	460f      	mov	r7, r1
 800baf8:	4690      	mov	r8, r2
 800bafa:	461d      	mov	r5, r3
 800bafc:	f007 fe6e 	bl	80137dc <get_memory>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d056      	beq.n	800bbb2 <create_node+0xca>
 800bb04:	6884      	ldr	r4, [r0, #8]
 800bb06:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800bb08:	6123      	str	r3, [r4, #16]
 800bb0a:	f007 fecf 	bl	80138ac <rmw_get_implementation_identifier>
 800bb0e:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800bb12:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800bb16:	f8c4 9020 	str.w	r9, [r4, #32]
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f7f4 fb62 	bl	80001e4 <strlen>
 800bb20:	1c42      	adds	r2, r0, #1
 800bb22:	2a3c      	cmp	r2, #60	; 0x3c
 800bb24:	f104 0518 	add.w	r5, r4, #24
 800bb28:	d840      	bhi.n	800bbac <create_node+0xc4>
 800bb2a:	4648      	mov	r0, r9
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800bb32:	f00b f9b1 	bl	8016e98 <memcpy>
 800bb36:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	f7f4 fb52 	bl	80001e4 <strlen>
 800bb40:	1c42      	adds	r2, r0, #1
 800bb42:	2a3c      	cmp	r2, #60	; 0x3c
 800bb44:	d832      	bhi.n	800bbac <create_node+0xc4>
 800bb46:	4639      	mov	r1, r7
 800bb48:	4648      	mov	r0, r9
 800bb4a:	f00b f9a5 	bl	8016e98 <memcpy>
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb54:	2101      	movs	r1, #1
 800bb56:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800bb5a:	1842      	adds	r2, r0, r1
 800bb5c:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800bb60:	f002 f88a 	bl	800dc78 <uxr_object_id>
 800bb64:	6160      	str	r0, [r4, #20]
 800bb66:	783b      	ldrb	r3, [r7, #0]
 800bb68:	2b2f      	cmp	r3, #47	; 0x2f
 800bb6a:	d127      	bne.n	800bbbc <create_node+0xd4>
 800bb6c:	787b      	ldrb	r3, [r7, #1]
 800bb6e:	bb2b      	cbnz	r3, 800bbbc <create_node+0xd4>
 800bb70:	4a17      	ldr	r2, [pc, #92]	; (800bbd0 <create_node+0xe8>)
 800bb72:	4818      	ldr	r0, [pc, #96]	; (800bbd4 <create_node+0xec>)
 800bb74:	4633      	mov	r3, r6
 800bb76:	213c      	movs	r1, #60	; 0x3c
 800bb78:	f00a ffec 	bl	8016b54 <sniprintf>
 800bb7c:	6920      	ldr	r0, [r4, #16]
 800bb7e:	4915      	ldr	r1, [pc, #84]	; (800bbd4 <create_node+0xec>)
 800bb80:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800bb84:	9100      	str	r1, [sp, #0]
 800bb86:	2106      	movs	r1, #6
 800bb88:	9101      	str	r1, [sp, #4]
 800bb8a:	6811      	ldr	r1, [r2, #0]
 800bb8c:	6962      	ldr	r2, [r4, #20]
 800bb8e:	fa1f f388 	uxth.w	r3, r8
 800bb92:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bb96:	f001 ff61 	bl	800da5c <uxr_buffer_create_participant_bin>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	6920      	ldr	r0, [r4, #16]
 800bb9e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800bba2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800bba6:	f000 fdd1 	bl	800c74c <run_xrce_session>
 800bbaa:	b918      	cbnz	r0, 800bbb4 <create_node+0xcc>
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 fc5d 	bl	800c46c <rmw_uxrce_fini_node_memory>
 800bbb2:	2500      	movs	r5, #0
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	b003      	add	sp, #12
 800bbb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbbc:	4a06      	ldr	r2, [pc, #24]	; (800bbd8 <create_node+0xf0>)
 800bbbe:	9600      	str	r6, [sp, #0]
 800bbc0:	463b      	mov	r3, r7
 800bbc2:	213c      	movs	r1, #60	; 0x3c
 800bbc4:	4803      	ldr	r0, [pc, #12]	; (800bbd4 <create_node+0xec>)
 800bbc6:	f00a ffc5 	bl	8016b54 <sniprintf>
 800bbca:	e7d7      	b.n	800bb7c <create_node+0x94>
 800bbcc:	2000dd6c 	.word	0x2000dd6c
 800bbd0:	080182a4 	.word	0x080182a4
 800bbd4:	20009460 	.word	0x20009460
 800bbd8:	08017dc8 	.word	0x08017dc8

0800bbdc <rmw_create_node>:
 800bbdc:	b199      	cbz	r1, 800bc06 <rmw_create_node+0x2a>
 800bbde:	780b      	ldrb	r3, [r1, #0]
 800bbe0:	468c      	mov	ip, r1
 800bbe2:	b183      	cbz	r3, 800bc06 <rmw_create_node+0x2a>
 800bbe4:	b410      	push	{r4}
 800bbe6:	4614      	mov	r4, r2
 800bbe8:	b14a      	cbz	r2, 800bbfe <rmw_create_node+0x22>
 800bbea:	7813      	ldrb	r3, [r2, #0]
 800bbec:	b13b      	cbz	r3, 800bbfe <rmw_create_node+0x22>
 800bbee:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	4660      	mov	r0, ip
 800bbf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbfa:	f7ff bf75 	b.w	800bae8 <create_node>
 800bbfe:	2000      	movs	r0, #0
 800bc00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	2000      	movs	r0, #0
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop

0800bc0c <rmw_destroy_node>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	b328      	cbz	r0, 800bc5c <rmw_destroy_node+0x50>
 800bc10:	4607      	mov	r7, r0
 800bc12:	6800      	ldr	r0, [r0, #0]
 800bc14:	b120      	cbz	r0, 800bc20 <rmw_destroy_node+0x14>
 800bc16:	4b36      	ldr	r3, [pc, #216]	; (800bcf0 <rmw_destroy_node+0xe4>)
 800bc18:	6819      	ldr	r1, [r3, #0]
 800bc1a:	f7f4 fad9 	bl	80001d0 <strcmp>
 800bc1e:	b9e8      	cbnz	r0, 800bc5c <rmw_destroy_node+0x50>
 800bc20:	687d      	ldr	r5, [r7, #4]
 800bc22:	b1dd      	cbz	r5, 800bc5c <rmw_destroy_node+0x50>
 800bc24:	4b33      	ldr	r3, [pc, #204]	; (800bcf4 <rmw_destroy_node+0xe8>)
 800bc26:	681c      	ldr	r4, [r3, #0]
 800bc28:	2c00      	cmp	r4, #0
 800bc2a:	d05f      	beq.n	800bcec <rmw_destroy_node+0xe0>
 800bc2c:	2600      	movs	r6, #0
 800bc2e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bc32:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800bc36:	429d      	cmp	r5, r3
 800bc38:	d013      	beq.n	800bc62 <rmw_destroy_node+0x56>
 800bc3a:	2c00      	cmp	r4, #0
 800bc3c:	d1f7      	bne.n	800bc2e <rmw_destroy_node+0x22>
 800bc3e:	4b2e      	ldr	r3, [pc, #184]	; (800bcf8 <rmw_destroy_node+0xec>)
 800bc40:	681c      	ldr	r4, [r3, #0]
 800bc42:	b1c4      	cbz	r4, 800bc76 <rmw_destroy_node+0x6a>
 800bc44:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bc48:	6a0b      	ldr	r3, [r1, #32]
 800bc4a:	429d      	cmp	r5, r3
 800bc4c:	d1f9      	bne.n	800bc42 <rmw_destroy_node+0x36>
 800bc4e:	317c      	adds	r1, #124	; 0x7c
 800bc50:	4638      	mov	r0, r7
 800bc52:	f000 fa45 	bl	800c0e0 <rmw_destroy_subscription>
 800bc56:	2801      	cmp	r0, #1
 800bc58:	4606      	mov	r6, r0
 800bc5a:	d1f2      	bne.n	800bc42 <rmw_destroy_node+0x36>
 800bc5c:	2601      	movs	r6, #1
 800bc5e:	4630      	mov	r0, r6
 800bc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc62:	3184      	adds	r1, #132	; 0x84
 800bc64:	4638      	mov	r0, r7
 800bc66:	f000 f9a5 	bl	800bfb4 <rmw_destroy_publisher>
 800bc6a:	2801      	cmp	r0, #1
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	d0f5      	beq.n	800bc5c <rmw_destroy_node+0x50>
 800bc70:	2c00      	cmp	r4, #0
 800bc72:	d1dc      	bne.n	800bc2e <rmw_destroy_node+0x22>
 800bc74:	e7e3      	b.n	800bc3e <rmw_destroy_node+0x32>
 800bc76:	4b21      	ldr	r3, [pc, #132]	; (800bcfc <rmw_destroy_node+0xf0>)
 800bc78:	681c      	ldr	r4, [r3, #0]
 800bc7a:	b16c      	cbz	r4, 800bc98 <rmw_destroy_node+0x8c>
 800bc7c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bc80:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800bc82:	429d      	cmp	r5, r3
 800bc84:	d1f9      	bne.n	800bc7a <rmw_destroy_node+0x6e>
 800bc86:	317c      	adds	r1, #124	; 0x7c
 800bc88:	4638      	mov	r0, r7
 800bc8a:	f000 f9e5 	bl	800c058 <rmw_destroy_service>
 800bc8e:	2801      	cmp	r0, #1
 800bc90:	4606      	mov	r6, r0
 800bc92:	d0e3      	beq.n	800bc5c <rmw_destroy_node+0x50>
 800bc94:	2c00      	cmp	r4, #0
 800bc96:	d1f1      	bne.n	800bc7c <rmw_destroy_node+0x70>
 800bc98:	4b19      	ldr	r3, [pc, #100]	; (800bd00 <rmw_destroy_node+0xf4>)
 800bc9a:	681c      	ldr	r4, [r3, #0]
 800bc9c:	b16c      	cbz	r4, 800bcba <rmw_destroy_node+0xae>
 800bc9e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bca2:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800bca4:	429d      	cmp	r5, r3
 800bca6:	d1f9      	bne.n	800bc9c <rmw_destroy_node+0x90>
 800bca8:	317c      	adds	r1, #124	; 0x7c
 800bcaa:	4638      	mov	r0, r7
 800bcac:	f007 fdba 	bl	8013824 <rmw_destroy_client>
 800bcb0:	2801      	cmp	r0, #1
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	d0d2      	beq.n	800bc5c <rmw_destroy_node+0x50>
 800bcb6:	2c00      	cmp	r4, #0
 800bcb8:	d1f1      	bne.n	800bc9e <rmw_destroy_node+0x92>
 800bcba:	6928      	ldr	r0, [r5, #16]
 800bcbc:	696a      	ldr	r2, [r5, #20]
 800bcbe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bcc2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bcc6:	6819      	ldr	r1, [r3, #0]
 800bcc8:	f001 fe7c 	bl	800d9c4 <uxr_buffer_delete_entity>
 800bccc:	4602      	mov	r2, r0
 800bcce:	6928      	ldr	r0, [r5, #16]
 800bcd0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bcd4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bcd8:	f000 fd38 	bl	800c74c <run_xrce_session>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	bf08      	it	eq
 800bce0:	2602      	moveq	r6, #2
 800bce2:	4638      	mov	r0, r7
 800bce4:	f000 fbc2 	bl	800c46c <rmw_uxrce_fini_node_memory>
 800bce8:	4630      	mov	r0, r6
 800bcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcec:	4626      	mov	r6, r4
 800bcee:	e7a6      	b.n	800bc3e <rmw_destroy_node+0x32>
 800bcf0:	08018608 	.word	0x08018608
 800bcf4:	2000dd7c 	.word	0x2000dd7c
 800bcf8:	2000ddbc 	.word	0x2000ddbc
 800bcfc:	2000dd8c 	.word	0x2000dd8c
 800bd00:	2000949c 	.word	0x2000949c

0800bd04 <rmw_node_get_graph_guard_condition>:
 800bd04:	6843      	ldr	r3, [r0, #4]
 800bd06:	6918      	ldr	r0, [r3, #16]
 800bd08:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop

0800bd10 <flush_session>:
 800bd10:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800bd12:	f002 bdb5 	b.w	800e880 <uxr_run_session_until_confirm_delivery>
 800bd16:	bf00      	nop

0800bd18 <rmw_publish>:
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d053      	beq.n	800bdc4 <rmw_publish+0xac>
 800bd1c:	b570      	push	{r4, r5, r6, lr}
 800bd1e:	460d      	mov	r5, r1
 800bd20:	b08e      	sub	sp, #56	; 0x38
 800bd22:	2900      	cmp	r1, #0
 800bd24:	d04b      	beq.n	800bdbe <rmw_publish+0xa6>
 800bd26:	4604      	mov	r4, r0
 800bd28:	6800      	ldr	r0, [r0, #0]
 800bd2a:	f000 fd8f 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d045      	beq.n	800bdbe <rmw_publish+0xa6>
 800bd32:	6866      	ldr	r6, [r4, #4]
 800bd34:	2e00      	cmp	r6, #0
 800bd36:	d042      	beq.n	800bdbe <rmw_publish+0xa6>
 800bd38:	69b4      	ldr	r4, [r6, #24]
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	4798      	blx	r3
 800bd40:	69f3      	ldr	r3, [r6, #28]
 800bd42:	9005      	str	r0, [sp, #20]
 800bd44:	b113      	cbz	r3, 800bd4c <rmw_publish+0x34>
 800bd46:	a805      	add	r0, sp, #20
 800bd48:	4798      	blx	r3
 800bd4a:	9805      	ldr	r0, [sp, #20]
 800bd4c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	9000      	str	r0, [sp, #0]
 800bd54:	6972      	ldr	r2, [r6, #20]
 800bd56:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800bd58:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800bd5c:	ab06      	add	r3, sp, #24
 800bd5e:	f003 fb7b 	bl	800f458 <uxr_prepare_output_stream>
 800bd62:	b1d8      	cbz	r0, 800bd9c <rmw_publish+0x84>
 800bd64:	68a3      	ldr	r3, [r4, #8]
 800bd66:	a906      	add	r1, sp, #24
 800bd68:	4628      	mov	r0, r5
 800bd6a:	4798      	blx	r3
 800bd6c:	6a33      	ldr	r3, [r6, #32]
 800bd6e:	4604      	mov	r4, r0
 800bd70:	b10b      	cbz	r3, 800bd76 <rmw_publish+0x5e>
 800bd72:	a806      	add	r0, sp, #24
 800bd74:	4798      	blx	r3
 800bd76:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800bd80:	d022      	beq.n	800bdc8 <rmw_publish+0xb0>
 800bd82:	6918      	ldr	r0, [r3, #16]
 800bd84:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800bd86:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bd8a:	f002 fd79 	bl	800e880 <uxr_run_session_until_confirm_delivery>
 800bd8e:	4020      	ands	r0, r4
 800bd90:	b2c4      	uxtb	r4, r0
 800bd92:	f084 0001 	eor.w	r0, r4, #1
 800bd96:	b2c0      	uxtb	r0, r0
 800bd98:	b00e      	add	sp, #56	; 0x38
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800bda0:	6918      	ldr	r0, [r3, #16]
 800bda2:	9b05      	ldr	r3, [sp, #20]
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	4b0b      	ldr	r3, [pc, #44]	; (800bdd4 <rmw_publish+0xbc>)
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	9602      	str	r6, [sp, #8]
 800bdac:	6972      	ldr	r2, [r6, #20]
 800bdae:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800bdb0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bdb4:	ab06      	add	r3, sp, #24
 800bdb6:	f003 fb7f 	bl	800f4b8 <uxr_prepare_output_stream_fragmented>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d1d2      	bne.n	800bd64 <rmw_publish+0x4c>
 800bdbe:	2001      	movs	r0, #1
 800bdc0:	b00e      	add	sp, #56	; 0x38
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	2001      	movs	r0, #1
 800bdc6:	4770      	bx	lr
 800bdc8:	6918      	ldr	r0, [r3, #16]
 800bdca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bdce:	f002 f997 	bl	800e100 <uxr_flash_output_streams>
 800bdd2:	e7de      	b.n	800bd92 <rmw_publish+0x7a>
 800bdd4:	0800bd11 	.word	0x0800bd11

0800bdd8 <rmw_create_publisher>:
 800bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bddc:	b087      	sub	sp, #28
 800bdde:	2800      	cmp	r0, #0
 800bde0:	f000 80cc 	beq.w	800bf7c <rmw_create_publisher+0x1a4>
 800bde4:	460e      	mov	r6, r1
 800bde6:	2900      	cmp	r1, #0
 800bde8:	f000 80c8 	beq.w	800bf7c <rmw_create_publisher+0x1a4>
 800bdec:	4604      	mov	r4, r0
 800bdee:	6800      	ldr	r0, [r0, #0]
 800bdf0:	4615      	mov	r5, r2
 800bdf2:	4698      	mov	r8, r3
 800bdf4:	f000 fd2a 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	f000 80bf 	beq.w	800bf7c <rmw_create_publisher+0x1a4>
 800bdfe:	2d00      	cmp	r5, #0
 800be00:	f000 80bc 	beq.w	800bf7c <rmw_create_publisher+0x1a4>
 800be04:	782b      	ldrb	r3, [r5, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 80b8 	beq.w	800bf7c <rmw_create_publisher+0x1a4>
 800be0c:	f1b8 0f00 	cmp.w	r8, #0
 800be10:	f000 80b4 	beq.w	800bf7c <rmw_create_publisher+0x1a4>
 800be14:	485c      	ldr	r0, [pc, #368]	; (800bf88 <rmw_create_publisher+0x1b0>)
 800be16:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800be1a:	f007 fcdf 	bl	80137dc <get_memory>
 800be1e:	2800      	cmp	r0, #0
 800be20:	f000 80ac 	beq.w	800bf7c <rmw_create_publisher+0x1a4>
 800be24:	6884      	ldr	r4, [r0, #8]
 800be26:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800be2a:	f007 fd3f 	bl	80138ac <rmw_get_implementation_identifier>
 800be2e:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800be32:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800be36:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800be3a:	4628      	mov	r0, r5
 800be3c:	f7f4 f9d2 	bl	80001e4 <strlen>
 800be40:	3001      	adds	r0, #1
 800be42:	283c      	cmp	r0, #60	; 0x3c
 800be44:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800be48:	f200 8091 	bhi.w	800bf6e <rmw_create_publisher+0x196>
 800be4c:	4a4f      	ldr	r2, [pc, #316]	; (800bf8c <rmw_create_publisher+0x1b4>)
 800be4e:	462b      	mov	r3, r5
 800be50:	213c      	movs	r1, #60	; 0x3c
 800be52:	4650      	mov	r0, sl
 800be54:	f00a fe7e 	bl	8016b54 <sniprintf>
 800be58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be5c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800be5e:	4641      	mov	r1, r8
 800be60:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800be64:	2250      	movs	r2, #80	; 0x50
 800be66:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800be6a:	f00b f815 	bl	8016e98 <memcpy>
 800be6e:	f898 3008 	ldrb.w	r3, [r8, #8]
 800be72:	4947      	ldr	r1, [pc, #284]	; (800bf90 <rmw_create_publisher+0x1b8>)
 800be74:	2b02      	cmp	r3, #2
 800be76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be7a:	bf0c      	ite	eq
 800be7c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800be80:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800be84:	67a3      	str	r3, [r4, #120]	; 0x78
 800be86:	2300      	movs	r3, #0
 800be88:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800be8c:	4630      	mov	r0, r6
 800be8e:	f000 fceb 	bl	800c868 <get_message_typesupport_handle>
 800be92:	2800      	cmp	r0, #0
 800be94:	d06b      	beq.n	800bf6e <rmw_create_publisher+0x196>
 800be96:	6842      	ldr	r2, [r0, #4]
 800be98:	61a2      	str	r2, [r4, #24]
 800be9a:	2a00      	cmp	r2, #0
 800be9c:	d067      	beq.n	800bf6e <rmw_create_publisher+0x196>
 800be9e:	4629      	mov	r1, r5
 800bea0:	4643      	mov	r3, r8
 800bea2:	4648      	mov	r0, r9
 800bea4:	f007 ff90 	bl	8013dc8 <create_topic>
 800bea8:	6260      	str	r0, [r4, #36]	; 0x24
 800beaa:	2800      	cmp	r0, #0
 800beac:	d063      	beq.n	800bf76 <rmw_create_publisher+0x19e>
 800beae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800beb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beb6:	2103      	movs	r1, #3
 800beb8:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800bebc:	1c42      	adds	r2, r0, #1
 800bebe:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800bec2:	f001 fed9 	bl	800dc78 <uxr_object_id>
 800bec6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800beca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bece:	6120      	str	r0, [r4, #16]
 800bed0:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800bed4:	6910      	ldr	r0, [r2, #16]
 800bed6:	2506      	movs	r5, #6
 800bed8:	9500      	str	r5, [sp, #0]
 800beda:	6819      	ldr	r1, [r3, #0]
 800bedc:	6922      	ldr	r2, [r4, #16]
 800bede:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bee2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bee6:	f001 fe21 	bl	800db2c <uxr_buffer_create_publisher_bin>
 800beea:	4602      	mov	r2, r0
 800beec:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bef0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800bef4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800bef8:	f000 fc28 	bl	800c74c <run_xrce_session>
 800befc:	b3b8      	cbz	r0, 800bf6e <rmw_create_publisher+0x196>
 800befe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf06:	2105      	movs	r1, #5
 800bf08:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800bf0c:	1c42      	adds	r2, r0, #1
 800bf0e:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800bf12:	f001 feb1 	bl	800dc78 <uxr_object_id>
 800bf16:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bf1a:	6160      	str	r0, [r4, #20]
 800bf1c:	691e      	ldr	r6, [r3, #16]
 800bf1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf22:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800bf26:	f10d 0a10 	add.w	sl, sp, #16
 800bf2a:	4641      	mov	r1, r8
 800bf2c:	4650      	mov	r0, sl
 800bf2e:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800bf32:	f000 fc27 	bl	800c784 <convert_qos_profile>
 800bf36:	9503      	str	r5, [sp, #12]
 800bf38:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800bf3c:	9001      	str	r0, [sp, #4]
 800bf3e:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bf42:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800bf4c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800bf50:	f8d8 1000 	ldr.w	r1, [r8]
 800bf54:	4630      	mov	r0, r6
 800bf56:	f001 fe19 	bl	800db8c <uxr_buffer_create_datawriter_bin>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bf60:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800bf64:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800bf68:	f000 fbf0 	bl	800c74c <run_xrce_session>
 800bf6c:	b938      	cbnz	r0, 800bf7e <rmw_create_publisher+0x1a6>
 800bf6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bf70:	b108      	cbz	r0, 800bf76 <rmw_create_publisher+0x19e>
 800bf72:	f000 faeb 	bl	800c54c <rmw_uxrce_fini_topic_memory>
 800bf76:	4638      	mov	r0, r7
 800bf78:	f000 fa90 	bl	800c49c <rmw_uxrce_fini_publisher_memory>
 800bf7c:	2700      	movs	r7, #0
 800bf7e:	4638      	mov	r0, r7
 800bf80:	b007      	add	sp, #28
 800bf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf86:	bf00      	nop
 800bf88:	2000dd7c 	.word	0x2000dd7c
 800bf8c:	080182a4 	.word	0x080182a4
 800bf90:	08018270 	.word	0x08018270

0800bf94 <rmw_publisher_get_actual_qos>:
 800bf94:	b150      	cbz	r0, 800bfac <rmw_publisher_get_actual_qos+0x18>
 800bf96:	b508      	push	{r3, lr}
 800bf98:	460b      	mov	r3, r1
 800bf9a:	b149      	cbz	r1, 800bfb0 <rmw_publisher_get_actual_qos+0x1c>
 800bf9c:	6841      	ldr	r1, [r0, #4]
 800bf9e:	2250      	movs	r2, #80	; 0x50
 800bfa0:	3128      	adds	r1, #40	; 0x28
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f00a ff78 	bl	8016e98 <memcpy>
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	bd08      	pop	{r3, pc}
 800bfac:	200b      	movs	r0, #11
 800bfae:	4770      	bx	lr
 800bfb0:	200b      	movs	r0, #11
 800bfb2:	bd08      	pop	{r3, pc}

0800bfb4 <rmw_destroy_publisher>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	b128      	cbz	r0, 800bfc4 <rmw_destroy_publisher+0x10>
 800bfb8:	4604      	mov	r4, r0
 800bfba:	6800      	ldr	r0, [r0, #0]
 800bfbc:	460d      	mov	r5, r1
 800bfbe:	f000 fc45 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 800bfc2:	b910      	cbnz	r0, 800bfca <rmw_destroy_publisher+0x16>
 800bfc4:	2401      	movs	r4, #1
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfca:	6863      	ldr	r3, [r4, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d0f9      	beq.n	800bfc4 <rmw_destroy_publisher+0x10>
 800bfd0:	2d00      	cmp	r5, #0
 800bfd2:	d0f7      	beq.n	800bfc4 <rmw_destroy_publisher+0x10>
 800bfd4:	6828      	ldr	r0, [r5, #0]
 800bfd6:	f000 fc39 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d0f2      	beq.n	800bfc4 <rmw_destroy_publisher+0x10>
 800bfde:	686c      	ldr	r4, [r5, #4]
 800bfe0:	2c00      	cmp	r4, #0
 800bfe2:	d0ef      	beq.n	800bfc4 <rmw_destroy_publisher+0x10>
 800bfe4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bfe6:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800bfea:	f007 ff3d 	bl	8013e68 <destroy_topic>
 800bfee:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bff2:	6962      	ldr	r2, [r4, #20]
 800bff4:	6918      	ldr	r0, [r3, #16]
 800bff6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bffa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bffe:	6819      	ldr	r1, [r3, #0]
 800c000:	f001 fce0 	bl	800d9c4 <uxr_buffer_delete_entity>
 800c004:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c008:	6922      	ldr	r2, [r4, #16]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800c010:	4604      	mov	r4, r0
 800c012:	6809      	ldr	r1, [r1, #0]
 800c014:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800c018:	f001 fcd4 	bl	800d9c4 <uxr_buffer_delete_entity>
 800c01c:	693e      	ldr	r6, [r7, #16]
 800c01e:	4622      	mov	r2, r4
 800c020:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800c024:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800c028:	4604      	mov	r4, r0
 800c02a:	4630      	mov	r0, r6
 800c02c:	f000 fb8e 	bl	800c74c <run_xrce_session>
 800c030:	693e      	ldr	r6, [r7, #16]
 800c032:	4622      	mov	r2, r4
 800c034:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800c038:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800c03c:	4604      	mov	r4, r0
 800c03e:	4630      	mov	r0, r6
 800c040:	f000 fb84 	bl	800c74c <run_xrce_session>
 800c044:	b12c      	cbz	r4, 800c052 <rmw_destroy_publisher+0x9e>
 800c046:	b120      	cbz	r0, 800c052 <rmw_destroy_publisher+0x9e>
 800c048:	2400      	movs	r4, #0
 800c04a:	4628      	mov	r0, r5
 800c04c:	f000 fa26 	bl	800c49c <rmw_uxrce_fini_publisher_memory>
 800c050:	e7b9      	b.n	800bfc6 <rmw_destroy_publisher+0x12>
 800c052:	2402      	movs	r4, #2
 800c054:	e7f9      	b.n	800c04a <rmw_destroy_publisher+0x96>
 800c056:	bf00      	nop

0800c058 <rmw_destroy_service>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	b128      	cbz	r0, 800c068 <rmw_destroy_service+0x10>
 800c05c:	4604      	mov	r4, r0
 800c05e:	6800      	ldr	r0, [r0, #0]
 800c060:	460d      	mov	r5, r1
 800c062:	f000 fbf3 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 800c066:	b910      	cbnz	r0, 800c06e <rmw_destroy_service+0x16>
 800c068:	2401      	movs	r4, #1
 800c06a:	4620      	mov	r0, r4
 800c06c:	bd70      	pop	{r4, r5, r6, pc}
 800c06e:	6863      	ldr	r3, [r4, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0f9      	beq.n	800c068 <rmw_destroy_service+0x10>
 800c074:	2d00      	cmp	r5, #0
 800c076:	d0f7      	beq.n	800c068 <rmw_destroy_service+0x10>
 800c078:	6828      	ldr	r0, [r5, #0]
 800c07a:	f000 fbe7 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 800c07e:	2800      	cmp	r0, #0
 800c080:	d0f2      	beq.n	800c068 <rmw_destroy_service+0x10>
 800c082:	686e      	ldr	r6, [r5, #4]
 800c084:	2e00      	cmp	r6, #0
 800c086:	d0ef      	beq.n	800c068 <rmw_destroy_service+0x10>
 800c088:	6864      	ldr	r4, [r4, #4]
 800c08a:	6932      	ldr	r2, [r6, #16]
 800c08c:	6920      	ldr	r0, [r4, #16]
 800c08e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c092:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c096:	6819      	ldr	r1, [r3, #0]
 800c098:	f001 fe1e 	bl	800dcd8 <uxr_buffer_cancel_data>
 800c09c:	4602      	mov	r2, r0
 800c09e:	6920      	ldr	r0, [r4, #16]
 800c0a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c0a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c0a8:	f000 fb50 	bl	800c74c <run_xrce_session>
 800c0ac:	6920      	ldr	r0, [r4, #16]
 800c0ae:	6932      	ldr	r2, [r6, #16]
 800c0b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c0b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c0b8:	6819      	ldr	r1, [r3, #0]
 800c0ba:	f001 fc83 	bl	800d9c4 <uxr_buffer_delete_entity>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	6920      	ldr	r0, [r4, #16]
 800c0c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c0c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c0ca:	f000 fb3f 	bl	800c74c <run_xrce_session>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	bf14      	ite	ne
 800c0d4:	2400      	movne	r4, #0
 800c0d6:	2402      	moveq	r4, #2
 800c0d8:	f000 fa0c 	bl	800c4f4 <rmw_uxrce_fini_service_memory>
 800c0dc:	e7c5      	b.n	800c06a <rmw_destroy_service+0x12>
 800c0de:	bf00      	nop

0800c0e0 <rmw_destroy_subscription>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	b128      	cbz	r0, 800c0f0 <rmw_destroy_subscription+0x10>
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	6800      	ldr	r0, [r0, #0]
 800c0e8:	460d      	mov	r5, r1
 800c0ea:	f000 fbaf 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 800c0ee:	b910      	cbnz	r0, 800c0f6 <rmw_destroy_subscription+0x16>
 800c0f0:	2401      	movs	r4, #1
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f6:	6863      	ldr	r3, [r4, #4]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d0f9      	beq.n	800c0f0 <rmw_destroy_subscription+0x10>
 800c0fc:	2d00      	cmp	r5, #0
 800c0fe:	d0f7      	beq.n	800c0f0 <rmw_destroy_subscription+0x10>
 800c100:	6828      	ldr	r0, [r5, #0]
 800c102:	f000 fba3 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 800c106:	2800      	cmp	r0, #0
 800c108:	d0f2      	beq.n	800c0f0 <rmw_destroy_subscription+0x10>
 800c10a:	686c      	ldr	r4, [r5, #4]
 800c10c:	2c00      	cmp	r4, #0
 800c10e:	d0ef      	beq.n	800c0f0 <rmw_destroy_subscription+0x10>
 800c110:	6a26      	ldr	r6, [r4, #32]
 800c112:	6962      	ldr	r2, [r4, #20]
 800c114:	6930      	ldr	r0, [r6, #16]
 800c116:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c11a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c11e:	6819      	ldr	r1, [r3, #0]
 800c120:	f001 fdda 	bl	800dcd8 <uxr_buffer_cancel_data>
 800c124:	4602      	mov	r2, r0
 800c126:	6930      	ldr	r0, [r6, #16]
 800c128:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c12c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c130:	f000 fb0c 	bl	800c74c <run_xrce_session>
 800c134:	69e0      	ldr	r0, [r4, #28]
 800c136:	f007 fe97 	bl	8013e68 <destroy_topic>
 800c13a:	6a23      	ldr	r3, [r4, #32]
 800c13c:	6962      	ldr	r2, [r4, #20]
 800c13e:	6918      	ldr	r0, [r3, #16]
 800c140:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c144:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c148:	6819      	ldr	r1, [r3, #0]
 800c14a:	f001 fc3b 	bl	800d9c4 <uxr_buffer_delete_entity>
 800c14e:	6a23      	ldr	r3, [r4, #32]
 800c150:	6922      	ldr	r2, [r4, #16]
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800c158:	4604      	mov	r4, r0
 800c15a:	6809      	ldr	r1, [r1, #0]
 800c15c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800c160:	f001 fc30 	bl	800d9c4 <uxr_buffer_delete_entity>
 800c164:	6937      	ldr	r7, [r6, #16]
 800c166:	4622      	mov	r2, r4
 800c168:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800c16c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800c170:	4604      	mov	r4, r0
 800c172:	4638      	mov	r0, r7
 800c174:	f000 faea 	bl	800c74c <run_xrce_session>
 800c178:	6936      	ldr	r6, [r6, #16]
 800c17a:	4622      	mov	r2, r4
 800c17c:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800c180:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800c184:	4604      	mov	r4, r0
 800c186:	4630      	mov	r0, r6
 800c188:	f000 fae0 	bl	800c74c <run_xrce_session>
 800c18c:	b12c      	cbz	r4, 800c19a <rmw_destroy_subscription+0xba>
 800c18e:	b120      	cbz	r0, 800c19a <rmw_destroy_subscription+0xba>
 800c190:	2400      	movs	r4, #0
 800c192:	4628      	mov	r0, r5
 800c194:	f000 f998 	bl	800c4c8 <rmw_uxrce_fini_subscription_memory>
 800c198:	e7ab      	b.n	800c0f2 <rmw_destroy_subscription+0x12>
 800c19a:	2402      	movs	r4, #2
 800c19c:	e7f9      	b.n	800c192 <rmw_destroy_subscription+0xb2>
 800c19e:	bf00      	nop

0800c1a0 <rmw_uxrce_init_service_memory>:
 800c1a0:	b1e2      	cbz	r2, 800c1dc <rmw_uxrce_init_service_memory+0x3c>
 800c1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a6:	7b05      	ldrb	r5, [r0, #12]
 800c1a8:	4606      	mov	r6, r0
 800c1aa:	b9ad      	cbnz	r5, 800c1d8 <rmw_uxrce_init_service_memory+0x38>
 800c1ac:	23c8      	movs	r3, #200	; 0xc8
 800c1ae:	e9c0 5500 	strd	r5, r5, [r0]
 800c1b2:	6083      	str	r3, [r0, #8]
 800c1b4:	f240 1301 	movw	r3, #257	; 0x101
 800c1b8:	4617      	mov	r7, r2
 800c1ba:	8183      	strh	r3, [r0, #12]
 800c1bc:	460c      	mov	r4, r1
 800c1be:	46a8      	mov	r8, r5
 800c1c0:	4621      	mov	r1, r4
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	3501      	adds	r5, #1
 800c1c6:	f007 fb19 	bl	80137fc <put_memory>
 800c1ca:	42af      	cmp	r7, r5
 800c1cc:	60a4      	str	r4, [r4, #8]
 800c1ce:	f884 800c 	strb.w	r8, [r4, #12]
 800c1d2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800c1d6:	d1f3      	bne.n	800c1c0 <rmw_uxrce_init_service_memory+0x20>
 800c1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop

0800c1e0 <rmw_uxrce_init_client_memory>:
 800c1e0:	b1e2      	cbz	r2, 800c21c <rmw_uxrce_init_client_memory+0x3c>
 800c1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e6:	7b05      	ldrb	r5, [r0, #12]
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	b9ad      	cbnz	r5, 800c218 <rmw_uxrce_init_client_memory+0x38>
 800c1ec:	23c8      	movs	r3, #200	; 0xc8
 800c1ee:	e9c0 5500 	strd	r5, r5, [r0]
 800c1f2:	6083      	str	r3, [r0, #8]
 800c1f4:	f240 1301 	movw	r3, #257	; 0x101
 800c1f8:	4617      	mov	r7, r2
 800c1fa:	8183      	strh	r3, [r0, #12]
 800c1fc:	460c      	mov	r4, r1
 800c1fe:	46a8      	mov	r8, r5
 800c200:	4621      	mov	r1, r4
 800c202:	4630      	mov	r0, r6
 800c204:	3501      	adds	r5, #1
 800c206:	f007 faf9 	bl	80137fc <put_memory>
 800c20a:	42af      	cmp	r7, r5
 800c20c:	60a4      	str	r4, [r4, #8]
 800c20e:	f884 800c 	strb.w	r8, [r4, #12]
 800c212:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800c216:	d1f3      	bne.n	800c200 <rmw_uxrce_init_client_memory+0x20>
 800c218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop

0800c220 <rmw_uxrce_init_publisher_memory>:
 800c220:	b1e2      	cbz	r2, 800c25c <rmw_uxrce_init_publisher_memory+0x3c>
 800c222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c226:	7b05      	ldrb	r5, [r0, #12]
 800c228:	4606      	mov	r6, r0
 800c22a:	b9ad      	cbnz	r5, 800c258 <rmw_uxrce_init_publisher_memory+0x38>
 800c22c:	23d8      	movs	r3, #216	; 0xd8
 800c22e:	e9c0 5500 	strd	r5, r5, [r0]
 800c232:	6083      	str	r3, [r0, #8]
 800c234:	f240 1301 	movw	r3, #257	; 0x101
 800c238:	4617      	mov	r7, r2
 800c23a:	8183      	strh	r3, [r0, #12]
 800c23c:	460c      	mov	r4, r1
 800c23e:	46a8      	mov	r8, r5
 800c240:	4621      	mov	r1, r4
 800c242:	4630      	mov	r0, r6
 800c244:	3501      	adds	r5, #1
 800c246:	f007 fad9 	bl	80137fc <put_memory>
 800c24a:	42af      	cmp	r7, r5
 800c24c:	60a4      	str	r4, [r4, #8]
 800c24e:	f884 800c 	strb.w	r8, [r4, #12]
 800c252:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800c256:	d1f3      	bne.n	800c240 <rmw_uxrce_init_publisher_memory+0x20>
 800c258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop

0800c260 <rmw_uxrce_init_subscription_memory>:
 800c260:	b1e2      	cbz	r2, 800c29c <rmw_uxrce_init_subscription_memory+0x3c>
 800c262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c266:	7b05      	ldrb	r5, [r0, #12]
 800c268:	4606      	mov	r6, r0
 800c26a:	b9ad      	cbnz	r5, 800c298 <rmw_uxrce_init_subscription_memory+0x38>
 800c26c:	23d8      	movs	r3, #216	; 0xd8
 800c26e:	e9c0 5500 	strd	r5, r5, [r0]
 800c272:	6083      	str	r3, [r0, #8]
 800c274:	f240 1301 	movw	r3, #257	; 0x101
 800c278:	4617      	mov	r7, r2
 800c27a:	8183      	strh	r3, [r0, #12]
 800c27c:	460c      	mov	r4, r1
 800c27e:	46a8      	mov	r8, r5
 800c280:	4621      	mov	r1, r4
 800c282:	4630      	mov	r0, r6
 800c284:	3501      	adds	r5, #1
 800c286:	f007 fab9 	bl	80137fc <put_memory>
 800c28a:	42af      	cmp	r7, r5
 800c28c:	60a4      	str	r4, [r4, #8]
 800c28e:	f884 800c 	strb.w	r8, [r4, #12]
 800c292:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800c296:	d1f3      	bne.n	800c280 <rmw_uxrce_init_subscription_memory+0x20>
 800c298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop

0800c2a0 <rmw_uxrce_init_node_memory>:
 800c2a0:	b1e2      	cbz	r2, 800c2dc <rmw_uxrce_init_node_memory+0x3c>
 800c2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a6:	7b05      	ldrb	r5, [r0, #12]
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	b9ad      	cbnz	r5, 800c2d8 <rmw_uxrce_init_node_memory+0x38>
 800c2ac:	23a4      	movs	r3, #164	; 0xa4
 800c2ae:	e9c0 5500 	strd	r5, r5, [r0]
 800c2b2:	6083      	str	r3, [r0, #8]
 800c2b4:	f240 1301 	movw	r3, #257	; 0x101
 800c2b8:	4617      	mov	r7, r2
 800c2ba:	8183      	strh	r3, [r0, #12]
 800c2bc:	460c      	mov	r4, r1
 800c2be:	46a8      	mov	r8, r5
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	3501      	adds	r5, #1
 800c2c6:	f007 fa99 	bl	80137fc <put_memory>
 800c2ca:	42af      	cmp	r7, r5
 800c2cc:	60a4      	str	r4, [r4, #8]
 800c2ce:	f884 800c 	strb.w	r8, [r4, #12]
 800c2d2:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800c2d6:	d1f3      	bne.n	800c2c0 <rmw_uxrce_init_node_memory+0x20>
 800c2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop

0800c2e0 <rmw_uxrce_init_session_memory>:
 800c2e0:	b1ea      	cbz	r2, 800c31e <rmw_uxrce_init_session_memory+0x3e>
 800c2e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e6:	7b05      	ldrb	r5, [r0, #12]
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	b9b5      	cbnz	r5, 800c31a <rmw_uxrce_init_session_memory+0x3a>
 800c2ec:	e9c0 5500 	strd	r5, r5, [r0]
 800c2f0:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800c2f4:	f240 1301 	movw	r3, #257	; 0x101
 800c2f8:	4617      	mov	r7, r2
 800c2fa:	f8c0 8008 	str.w	r8, [r0, #8]
 800c2fe:	460c      	mov	r4, r1
 800c300:	8183      	strh	r3, [r0, #12]
 800c302:	46a9      	mov	r9, r5
 800c304:	4621      	mov	r1, r4
 800c306:	4630      	mov	r0, r6
 800c308:	3501      	adds	r5, #1
 800c30a:	f007 fa77 	bl	80137fc <put_memory>
 800c30e:	42af      	cmp	r7, r5
 800c310:	60a4      	str	r4, [r4, #8]
 800c312:	f884 900c 	strb.w	r9, [r4, #12]
 800c316:	4444      	add	r4, r8
 800c318:	d1f4      	bne.n	800c304 <rmw_uxrce_init_session_memory+0x24>
 800c31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c31e:	4770      	bx	lr

0800c320 <rmw_uxrce_init_topic_memory>:
 800c320:	b1e2      	cbz	r2, 800c35c <rmw_uxrce_init_topic_memory+0x3c>
 800c322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c326:	7b05      	ldrb	r5, [r0, #12]
 800c328:	4606      	mov	r6, r0
 800c32a:	b9ad      	cbnz	r5, 800c358 <rmw_uxrce_init_topic_memory+0x38>
 800c32c:	231c      	movs	r3, #28
 800c32e:	e9c0 5500 	strd	r5, r5, [r0]
 800c332:	6083      	str	r3, [r0, #8]
 800c334:	f240 1301 	movw	r3, #257	; 0x101
 800c338:	4617      	mov	r7, r2
 800c33a:	8183      	strh	r3, [r0, #12]
 800c33c:	460c      	mov	r4, r1
 800c33e:	46a8      	mov	r8, r5
 800c340:	4621      	mov	r1, r4
 800c342:	4630      	mov	r0, r6
 800c344:	3501      	adds	r5, #1
 800c346:	f007 fa59 	bl	80137fc <put_memory>
 800c34a:	42af      	cmp	r7, r5
 800c34c:	60a4      	str	r4, [r4, #8]
 800c34e:	f884 800c 	strb.w	r8, [r4, #12]
 800c352:	f104 041c 	add.w	r4, r4, #28
 800c356:	d1f3      	bne.n	800c340 <rmw_uxrce_init_topic_memory+0x20>
 800c358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop

0800c360 <rmw_uxrce_init_static_input_buffer_memory>:
 800c360:	b1ea      	cbz	r2, 800c39e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c366:	7b05      	ldrb	r5, [r0, #12]
 800c368:	4606      	mov	r6, r0
 800c36a:	b9b5      	cbnz	r5, 800c39a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c36c:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800c370:	e9c0 5500 	strd	r5, r5, [r0]
 800c374:	6083      	str	r3, [r0, #8]
 800c376:	f240 1301 	movw	r3, #257	; 0x101
 800c37a:	4617      	mov	r7, r2
 800c37c:	8183      	strh	r3, [r0, #12]
 800c37e:	460c      	mov	r4, r1
 800c380:	46a8      	mov	r8, r5
 800c382:	4621      	mov	r1, r4
 800c384:	4630      	mov	r0, r6
 800c386:	3501      	adds	r5, #1
 800c388:	f007 fa38 	bl	80137fc <put_memory>
 800c38c:	42af      	cmp	r7, r5
 800c38e:	60a4      	str	r4, [r4, #8]
 800c390:	f884 800c 	strb.w	r8, [r4, #12]
 800c394:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800c398:	d1f3      	bne.n	800c382 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c39e:	4770      	bx	lr

0800c3a0 <rmw_uxrce_init_init_options_impl_memory>:
 800c3a0:	b1e2      	cbz	r2, 800c3dc <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a6:	7b05      	ldrb	r5, [r0, #12]
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	b9ad      	cbnz	r5, 800c3d8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c3ac:	232c      	movs	r3, #44	; 0x2c
 800c3ae:	e9c0 5500 	strd	r5, r5, [r0]
 800c3b2:	6083      	str	r3, [r0, #8]
 800c3b4:	f240 1301 	movw	r3, #257	; 0x101
 800c3b8:	4617      	mov	r7, r2
 800c3ba:	8183      	strh	r3, [r0, #12]
 800c3bc:	460c      	mov	r4, r1
 800c3be:	46a8      	mov	r8, r5
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	3501      	adds	r5, #1
 800c3c6:	f007 fa19 	bl	80137fc <put_memory>
 800c3ca:	42af      	cmp	r7, r5
 800c3cc:	60a4      	str	r4, [r4, #8]
 800c3ce:	f884 800c 	strb.w	r8, [r4, #12]
 800c3d2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800c3d6:	d1f3      	bne.n	800c3c0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop

0800c3e0 <rmw_uxrce_init_wait_set_memory>:
 800c3e0:	b1e2      	cbz	r2, 800c41c <rmw_uxrce_init_wait_set_memory+0x3c>
 800c3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e6:	7b05      	ldrb	r5, [r0, #12]
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	b9ad      	cbnz	r5, 800c418 <rmw_uxrce_init_wait_set_memory+0x38>
 800c3ec:	231c      	movs	r3, #28
 800c3ee:	e9c0 5500 	strd	r5, r5, [r0]
 800c3f2:	6083      	str	r3, [r0, #8]
 800c3f4:	f240 1301 	movw	r3, #257	; 0x101
 800c3f8:	4617      	mov	r7, r2
 800c3fa:	8183      	strh	r3, [r0, #12]
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	46a8      	mov	r8, r5
 800c400:	4621      	mov	r1, r4
 800c402:	4630      	mov	r0, r6
 800c404:	3501      	adds	r5, #1
 800c406:	f007 f9f9 	bl	80137fc <put_memory>
 800c40a:	42af      	cmp	r7, r5
 800c40c:	60a4      	str	r4, [r4, #8]
 800c40e:	f884 800c 	strb.w	r8, [r4, #12]
 800c412:	f104 041c 	add.w	r4, r4, #28
 800c416:	d1f3      	bne.n	800c400 <rmw_uxrce_init_wait_set_memory+0x20>
 800c418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop

0800c420 <rmw_uxrce_init_guard_condition_memory>:
 800c420:	b1e2      	cbz	r2, 800c45c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c426:	7b05      	ldrb	r5, [r0, #12]
 800c428:	4606      	mov	r6, r0
 800c42a:	b9ad      	cbnz	r5, 800c458 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c42c:	2320      	movs	r3, #32
 800c42e:	e9c0 5500 	strd	r5, r5, [r0]
 800c432:	6083      	str	r3, [r0, #8]
 800c434:	f240 1301 	movw	r3, #257	; 0x101
 800c438:	4617      	mov	r7, r2
 800c43a:	8183      	strh	r3, [r0, #12]
 800c43c:	460c      	mov	r4, r1
 800c43e:	46a8      	mov	r8, r5
 800c440:	4621      	mov	r1, r4
 800c442:	4630      	mov	r0, r6
 800c444:	3501      	adds	r5, #1
 800c446:	f007 f9d9 	bl	80137fc <put_memory>
 800c44a:	42af      	cmp	r7, r5
 800c44c:	60a4      	str	r4, [r4, #8]
 800c44e:	f884 800c 	strb.w	r8, [r4, #12]
 800c452:	f104 0420 	add.w	r4, r4, #32
 800c456:	d1f3      	bne.n	800c440 <rmw_uxrce_init_guard_condition_memory+0x20>
 800c458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop

0800c460 <rmw_uxrce_fini_session_memory>:
 800c460:	4601      	mov	r1, r0
 800c462:	4801      	ldr	r0, [pc, #4]	; (800c468 <rmw_uxrce_fini_session_memory+0x8>)
 800c464:	f007 b9ca 	b.w	80137fc <put_memory>
 800c468:	2000dd9c 	.word	0x2000dd9c

0800c46c <rmw_uxrce_fini_node_memory>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4604      	mov	r4, r0
 800c470:	6800      	ldr	r0, [r0, #0]
 800c472:	b128      	cbz	r0, 800c480 <rmw_uxrce_fini_node_memory+0x14>
 800c474:	4b07      	ldr	r3, [pc, #28]	; (800c494 <rmw_uxrce_fini_node_memory+0x28>)
 800c476:	6819      	ldr	r1, [r3, #0]
 800c478:	f7f3 feaa 	bl	80001d0 <strcmp>
 800c47c:	b940      	cbnz	r0, 800c490 <rmw_uxrce_fini_node_memory+0x24>
 800c47e:	6020      	str	r0, [r4, #0]
 800c480:	6861      	ldr	r1, [r4, #4]
 800c482:	b129      	cbz	r1, 800c490 <rmw_uxrce_fini_node_memory+0x24>
 800c484:	2500      	movs	r5, #0
 800c486:	4804      	ldr	r0, [pc, #16]	; (800c498 <rmw_uxrce_fini_node_memory+0x2c>)
 800c488:	610d      	str	r5, [r1, #16]
 800c48a:	f007 f9b7 	bl	80137fc <put_memory>
 800c48e:	6065      	str	r5, [r4, #4]
 800c490:	bd38      	pop	{r3, r4, r5, pc}
 800c492:	bf00      	nop
 800c494:	08018608 	.word	0x08018608
 800c498:	2000dd6c 	.word	0x2000dd6c

0800c49c <rmw_uxrce_fini_publisher_memory>:
 800c49c:	b510      	push	{r4, lr}
 800c49e:	4604      	mov	r4, r0
 800c4a0:	6800      	ldr	r0, [r0, #0]
 800c4a2:	b128      	cbz	r0, 800c4b0 <rmw_uxrce_fini_publisher_memory+0x14>
 800c4a4:	4b06      	ldr	r3, [pc, #24]	; (800c4c0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800c4a6:	6819      	ldr	r1, [r3, #0]
 800c4a8:	f7f3 fe92 	bl	80001d0 <strcmp>
 800c4ac:	b938      	cbnz	r0, 800c4be <rmw_uxrce_fini_publisher_memory+0x22>
 800c4ae:	6020      	str	r0, [r4, #0]
 800c4b0:	6861      	ldr	r1, [r4, #4]
 800c4b2:	b121      	cbz	r1, 800c4be <rmw_uxrce_fini_publisher_memory+0x22>
 800c4b4:	4803      	ldr	r0, [pc, #12]	; (800c4c4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800c4b6:	f007 f9a1 	bl	80137fc <put_memory>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	6063      	str	r3, [r4, #4]
 800c4be:	bd10      	pop	{r4, pc}
 800c4c0:	08018608 	.word	0x08018608
 800c4c4:	2000dd7c 	.word	0x2000dd7c

0800c4c8 <rmw_uxrce_fini_subscription_memory>:
 800c4c8:	b510      	push	{r4, lr}
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	6800      	ldr	r0, [r0, #0]
 800c4ce:	b128      	cbz	r0, 800c4dc <rmw_uxrce_fini_subscription_memory+0x14>
 800c4d0:	4b06      	ldr	r3, [pc, #24]	; (800c4ec <rmw_uxrce_fini_subscription_memory+0x24>)
 800c4d2:	6819      	ldr	r1, [r3, #0]
 800c4d4:	f7f3 fe7c 	bl	80001d0 <strcmp>
 800c4d8:	b938      	cbnz	r0, 800c4ea <rmw_uxrce_fini_subscription_memory+0x22>
 800c4da:	6020      	str	r0, [r4, #0]
 800c4dc:	6861      	ldr	r1, [r4, #4]
 800c4de:	b121      	cbz	r1, 800c4ea <rmw_uxrce_fini_subscription_memory+0x22>
 800c4e0:	4803      	ldr	r0, [pc, #12]	; (800c4f0 <rmw_uxrce_fini_subscription_memory+0x28>)
 800c4e2:	f007 f98b 	bl	80137fc <put_memory>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	6063      	str	r3, [r4, #4]
 800c4ea:	bd10      	pop	{r4, pc}
 800c4ec:	08018608 	.word	0x08018608
 800c4f0:	2000ddbc 	.word	0x2000ddbc

0800c4f4 <rmw_uxrce_fini_service_memory>:
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	6800      	ldr	r0, [r0, #0]
 800c4fa:	b128      	cbz	r0, 800c508 <rmw_uxrce_fini_service_memory+0x14>
 800c4fc:	4b06      	ldr	r3, [pc, #24]	; (800c518 <rmw_uxrce_fini_service_memory+0x24>)
 800c4fe:	6819      	ldr	r1, [r3, #0]
 800c500:	f7f3 fe66 	bl	80001d0 <strcmp>
 800c504:	b938      	cbnz	r0, 800c516 <rmw_uxrce_fini_service_memory+0x22>
 800c506:	6020      	str	r0, [r4, #0]
 800c508:	6861      	ldr	r1, [r4, #4]
 800c50a:	b121      	cbz	r1, 800c516 <rmw_uxrce_fini_service_memory+0x22>
 800c50c:	4803      	ldr	r0, [pc, #12]	; (800c51c <rmw_uxrce_fini_service_memory+0x28>)
 800c50e:	f007 f975 	bl	80137fc <put_memory>
 800c512:	2300      	movs	r3, #0
 800c514:	6063      	str	r3, [r4, #4]
 800c516:	bd10      	pop	{r4, pc}
 800c518:	08018608 	.word	0x08018608
 800c51c:	2000dd8c 	.word	0x2000dd8c

0800c520 <rmw_uxrce_fini_client_memory>:
 800c520:	b510      	push	{r4, lr}
 800c522:	4604      	mov	r4, r0
 800c524:	6800      	ldr	r0, [r0, #0]
 800c526:	b128      	cbz	r0, 800c534 <rmw_uxrce_fini_client_memory+0x14>
 800c528:	4b06      	ldr	r3, [pc, #24]	; (800c544 <rmw_uxrce_fini_client_memory+0x24>)
 800c52a:	6819      	ldr	r1, [r3, #0]
 800c52c:	f7f3 fe50 	bl	80001d0 <strcmp>
 800c530:	b938      	cbnz	r0, 800c542 <rmw_uxrce_fini_client_memory+0x22>
 800c532:	6020      	str	r0, [r4, #0]
 800c534:	6861      	ldr	r1, [r4, #4]
 800c536:	b121      	cbz	r1, 800c542 <rmw_uxrce_fini_client_memory+0x22>
 800c538:	4803      	ldr	r0, [pc, #12]	; (800c548 <rmw_uxrce_fini_client_memory+0x28>)
 800c53a:	f007 f95f 	bl	80137fc <put_memory>
 800c53e:	2300      	movs	r3, #0
 800c540:	6063      	str	r3, [r4, #4]
 800c542:	bd10      	pop	{r4, pc}
 800c544:	08018608 	.word	0x08018608
 800c548:	2000949c 	.word	0x2000949c

0800c54c <rmw_uxrce_fini_topic_memory>:
 800c54c:	b510      	push	{r4, lr}
 800c54e:	4604      	mov	r4, r0
 800c550:	4621      	mov	r1, r4
 800c552:	4803      	ldr	r0, [pc, #12]	; (800c560 <rmw_uxrce_fini_topic_memory+0x14>)
 800c554:	f007 f952 	bl	80137fc <put_memory>
 800c558:	2300      	movs	r3, #0
 800c55a:	61a3      	str	r3, [r4, #24]
 800c55c:	bd10      	pop	{r4, pc}
 800c55e:	bf00      	nop
 800c560:	2000ddcc 	.word	0x2000ddcc

0800c564 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c564:	b082      	sub	sp, #8
 800c566:	b530      	push	{r4, r5, lr}
 800c568:	4925      	ldr	r1, [pc, #148]	; (800c600 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c56a:	680d      	ldr	r5, [r1, #0]
 800c56c:	ac03      	add	r4, sp, #12
 800c56e:	e884 000c 	stmia.w	r4, {r2, r3}
 800c572:	461c      	mov	r4, r3
 800c574:	2d00      	cmp	r5, #0
 800c576:	d041      	beq.n	800c5fc <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800c578:	462b      	mov	r3, r5
 800c57a:	2100      	movs	r1, #0
 800c57c:	689a      	ldr	r2, [r3, #8]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800c584:	4290      	cmp	r0, r2
 800c586:	bf08      	it	eq
 800c588:	3101      	addeq	r1, #1
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d1f6      	bne.n	800c57c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c58e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c592:	2b02      	cmp	r3, #2
 800c594:	d029      	beq.n	800c5ea <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c596:	d907      	bls.n	800c5a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c598:	2b03      	cmp	r3, #3
 800c59a:	d005      	beq.n	800c5a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c59c:	2100      	movs	r1, #0
 800c59e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5a2:	4608      	mov	r0, r1
 800c5a4:	b002      	add	sp, #8
 800c5a6:	4770      	bx	lr
 800c5a8:	b314      	cbz	r4, 800c5f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c5aa:	428c      	cmp	r4, r1
 800c5ac:	d820      	bhi.n	800c5f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c5ae:	2d00      	cmp	r5, #0
 800c5b0:	d0f4      	beq.n	800c59c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c5b8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800c5bc:	e002      	b.n	800c5c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800c5be:	686d      	ldr	r5, [r5, #4]
 800c5c0:	2d00      	cmp	r5, #0
 800c5c2:	d0ec      	beq.n	800c59e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c5c4:	68ab      	ldr	r3, [r5, #8]
 800c5c6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800c5ca:	4290      	cmp	r0, r2
 800c5cc:	d1f7      	bne.n	800c5be <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c5ce:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800c5d2:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800c5d6:	4562      	cmp	r2, ip
 800c5d8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c5dc:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c5e0:	daed      	bge.n	800c5be <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c5e2:	4694      	mov	ip, r2
 800c5e4:	461c      	mov	r4, r3
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	e7e9      	b.n	800c5be <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c5ea:	b10c      	cbz	r4, 800c5f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c5ec:	428c      	cmp	r4, r1
 800c5ee:	d9d5      	bls.n	800c59c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c5f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5f4:	4802      	ldr	r0, [pc, #8]	; (800c600 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c5f6:	b002      	add	sp, #8
 800c5f8:	f007 b8f0 	b.w	80137dc <get_memory>
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	e7c6      	b.n	800c58e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c600:	2000ddac 	.word	0x2000ddac

0800c604 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c604:	4b11      	ldr	r3, [pc, #68]	; (800c64c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	b530      	push	{r4, r5, lr}
 800c60a:	b1e3      	cbz	r3, 800c646 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c60c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c610:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800c614:	2400      	movs	r4, #0
 800c616:	e001      	b.n	800c61c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	b193      	cbz	r3, 800c642 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800c61c:	689a      	ldr	r2, [r3, #8]
 800c61e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800c622:	4288      	cmp	r0, r1
 800c624:	d1f8      	bne.n	800c618 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c626:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800c62a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800c62e:	4571      	cmp	r1, lr
 800c630:	eb72 050c 	sbcs.w	r5, r2, ip
 800c634:	daf0      	bge.n	800c618 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c636:	461c      	mov	r4, r3
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	468e      	mov	lr, r1
 800c63c:	4694      	mov	ip, r2
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1ec      	bne.n	800c61c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c642:	4620      	mov	r0, r4
 800c644:	bd30      	pop	{r4, r5, pc}
 800c646:	461c      	mov	r4, r3
 800c648:	4620      	mov	r0, r4
 800c64a:	bd30      	pop	{r4, r5, pc}
 800c64c:	2000ddac 	.word	0x2000ddac

0800c650 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	4b3c      	ldr	r3, [pc, #240]	; (800c748 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c656:	ed2d 8b06 	vpush	{d8-d10}
 800c65a:	681f      	ldr	r7, [r3, #0]
 800c65c:	b08d      	sub	sp, #52	; 0x34
 800c65e:	f007 ff89 	bl	8014574 <rmw_uros_epoch_nanos>
 800c662:	2f00      	cmp	r7, #0
 800c664:	d05d      	beq.n	800c722 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c666:	46b8      	mov	r8, r7
 800c668:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800c730 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c66c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c670:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800c674:	2b04      	cmp	r3, #4
 800c676:	ed9f ab30 	vldr	d10, [pc, #192]	; 800c738 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c67a:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800c740 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c67e:	4681      	mov	r9, r0
 800c680:	468a      	mov	sl, r1
 800c682:	ac04      	add	r4, sp, #16
 800c684:	d03f      	beq.n	800c706 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c686:	2b05      	cmp	r3, #5
 800c688:	d044      	beq.n	800c714 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	d03b      	beq.n	800c706 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c68e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c692:	ed8d ab06 	vstr	d10, [sp, #24]
 800c696:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c69a:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800c69e:	ab08      	add	r3, sp, #32
 800c6a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c6a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c6aa:	f006 ff95 	bl	80135d8 <rmw_time_equal>
 800c6ae:	b118      	cbz	r0, 800c6b8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c6b0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c6b4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c6b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c6bc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800c6c0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800c6c4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c6c8:	f006 ffda 	bl	8013680 <rmw_time_total_nsec>
 800c6cc:	1830      	adds	r0, r6, r0
 800c6ce:	eb47 0101 	adc.w	r1, r7, r1
 800c6d2:	4548      	cmp	r0, r9
 800c6d4:	eb71 030a 	sbcs.w	r3, r1, sl
 800c6d8:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800c6dc:	db05      	blt.n	800c6ea <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c6de:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c6e2:	4591      	cmp	r9, r2
 800c6e4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c6e8:	da03      	bge.n	800c6f2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c6ea:	4817      	ldr	r0, [pc, #92]	; (800c748 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c6ec:	4641      	mov	r1, r8
 800c6ee:	f007 f885 	bl	80137fc <put_memory>
 800c6f2:	f1bb 0f00 	cmp.w	fp, #0
 800c6f6:	d014      	beq.n	800c722 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c6f8:	46d8      	mov	r8, fp
 800c6fa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c6fe:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800c702:	2b04      	cmp	r3, #4
 800c704:	d1bf      	bne.n	800c686 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c706:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800c70a:	3340      	adds	r3, #64	; 0x40
 800c70c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c70e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c712:	e7c0      	b.n	800c696 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c714:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800c718:	3348      	adds	r3, #72	; 0x48
 800c71a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c71c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c720:	e7b9      	b.n	800c696 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c722:	b00d      	add	sp, #52	; 0x34
 800c724:	ecbd 8b06 	vpop	{d8-d10}
 800c728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72c:	f3af 8000 	nop.w
	...
 800c738:	00000001 	.word	0x00000001
 800c73c:	00000000 	.word	0x00000000
 800c740:	0000001e 	.word	0x0000001e
 800c744:	00000000 	.word	0x00000000
 800c748:	2000ddac 	.word	0x2000ddac

0800c74c <run_xrce_session>:
 800c74c:	b510      	push	{r4, lr}
 800c74e:	788c      	ldrb	r4, [r1, #2]
 800c750:	b086      	sub	sp, #24
 800c752:	2c01      	cmp	r4, #1
 800c754:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c758:	d00c      	beq.n	800c774 <run_xrce_session+0x28>
 800c75a:	4619      	mov	r1, r3
 800c75c:	2301      	movs	r3, #1
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	f10d 020e 	add.w	r2, sp, #14
 800c764:	f10d 0317 	add.w	r3, sp, #23
 800c768:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c76c:	f002 f8ae 	bl	800e8cc <uxr_run_session_until_all_status>
 800c770:	b006      	add	sp, #24
 800c772:	bd10      	pop	{r4, pc}
 800c774:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c778:	f001 fcc2 	bl	800e100 <uxr_flash_output_streams>
 800c77c:	4620      	mov	r0, r4
 800c77e:	b006      	add	sp, #24
 800c780:	bd10      	pop	{r4, pc}
 800c782:	bf00      	nop

0800c784 <convert_qos_profile>:
 800c784:	7a4a      	ldrb	r2, [r1, #9]
 800c786:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c78a:	2a02      	cmp	r2, #2
 800c78c:	bf18      	it	ne
 800c78e:	2200      	movne	r2, #0
 800c790:	7002      	strb	r2, [r0, #0]
 800c792:	780a      	ldrb	r2, [r1, #0]
 800c794:	8889      	ldrh	r1, [r1, #4]
 800c796:	8081      	strh	r1, [r0, #4]
 800c798:	f1ac 0c02 	sub.w	ip, ip, #2
 800c79c:	f1a2 0202 	sub.w	r2, r2, #2
 800c7a0:	fabc fc8c 	clz	ip, ip
 800c7a4:	fab2 f282 	clz	r2, r2
 800c7a8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c7ac:	0952      	lsrs	r2, r2, #5
 800c7ae:	f880 c001 	strb.w	ip, [r0, #1]
 800c7b2:	7082      	strb	r2, [r0, #2]
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop

0800c7b8 <generate_type_name>:
 800c7b8:	b530      	push	{r4, r5, lr}
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	700b      	strb	r3, [r1, #0]
 800c7be:	6803      	ldr	r3, [r0, #0]
 800c7c0:	b087      	sub	sp, #28
 800c7c2:	4614      	mov	r4, r2
 800c7c4:	b1d3      	cbz	r3, 800c7fc <generate_type_name+0x44>
 800c7c6:	4a0f      	ldr	r2, [pc, #60]	; (800c804 <generate_type_name+0x4c>)
 800c7c8:	4615      	mov	r5, r2
 800c7ca:	9203      	str	r2, [sp, #12]
 800c7cc:	9500      	str	r5, [sp, #0]
 800c7ce:	6842      	ldr	r2, [r0, #4]
 800c7d0:	480d      	ldr	r0, [pc, #52]	; (800c808 <generate_type_name+0x50>)
 800c7d2:	9001      	str	r0, [sp, #4]
 800c7d4:	4608      	mov	r0, r1
 800c7d6:	490d      	ldr	r1, [pc, #52]	; (800c80c <generate_type_name+0x54>)
 800c7d8:	9204      	str	r2, [sp, #16]
 800c7da:	9105      	str	r1, [sp, #20]
 800c7dc:	9102      	str	r1, [sp, #8]
 800c7de:	4a0c      	ldr	r2, [pc, #48]	; (800c810 <generate_type_name+0x58>)
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	f00a f9b7 	bl	8016b54 <sniprintf>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	db05      	blt.n	800c7f6 <generate_type_name+0x3e>
 800c7ea:	4284      	cmp	r4, r0
 800c7ec:	bfd4      	ite	le
 800c7ee:	2000      	movle	r0, #0
 800c7f0:	2001      	movgt	r0, #1
 800c7f2:	b007      	add	sp, #28
 800c7f4:	bd30      	pop	{r4, r5, pc}
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	b007      	add	sp, #28
 800c7fa:	bd30      	pop	{r4, r5, pc}
 800c7fc:	4b05      	ldr	r3, [pc, #20]	; (800c814 <generate_type_name+0x5c>)
 800c7fe:	4a01      	ldr	r2, [pc, #4]	; (800c804 <generate_type_name+0x4c>)
 800c800:	461d      	mov	r5, r3
 800c802:	e7e2      	b.n	800c7ca <generate_type_name+0x12>
 800c804:	08018294 	.word	0x08018294
 800c808:	080182ac 	.word	0x080182ac
 800c80c:	080182a8 	.word	0x080182a8
 800c810:	08018298 	.word	0x08018298
 800c814:	08018060 	.word	0x08018060

0800c818 <generate_topic_name>:
 800c818:	b510      	push	{r4, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	4614      	mov	r4, r2
 800c81e:	9000      	str	r0, [sp, #0]
 800c820:	4b08      	ldr	r3, [pc, #32]	; (800c844 <generate_topic_name+0x2c>)
 800c822:	4a09      	ldr	r2, [pc, #36]	; (800c848 <generate_topic_name+0x30>)
 800c824:	4608      	mov	r0, r1
 800c826:	4621      	mov	r1, r4
 800c828:	f00a f994 	bl	8016b54 <sniprintf>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	db05      	blt.n	800c83c <generate_topic_name+0x24>
 800c830:	4284      	cmp	r4, r0
 800c832:	bfd4      	ite	le
 800c834:	2000      	movle	r0, #0
 800c836:	2001      	movgt	r0, #1
 800c838:	b002      	add	sp, #8
 800c83a:	bd10      	pop	{r4, pc}
 800c83c:	2000      	movs	r0, #0
 800c83e:	b002      	add	sp, #8
 800c840:	bd10      	pop	{r4, pc}
 800c842:	bf00      	nop
 800c844:	080182b0 	.word	0x080182b0
 800c848:	08017dc0 	.word	0x08017dc0

0800c84c <is_uxrce_rmw_identifier_valid>:
 800c84c:	b510      	push	{r4, lr}
 800c84e:	4604      	mov	r4, r0
 800c850:	b140      	cbz	r0, 800c864 <is_uxrce_rmw_identifier_valid+0x18>
 800c852:	f007 f82b 	bl	80138ac <rmw_get_implementation_identifier>
 800c856:	4601      	mov	r1, r0
 800c858:	4620      	mov	r0, r4
 800c85a:	f7f3 fcb9 	bl	80001d0 <strcmp>
 800c85e:	fab0 f080 	clz	r0, r0
 800c862:	0940      	lsrs	r0, r0, #5
 800c864:	bd10      	pop	{r4, pc}
 800c866:	bf00      	nop

0800c868 <get_message_typesupport_handle>:
 800c868:	6883      	ldr	r3, [r0, #8]
 800c86a:	4718      	bx	r3

0800c86c <get_message_typesupport_handle_function>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	4604      	mov	r4, r0
 800c870:	6800      	ldr	r0, [r0, #0]
 800c872:	f7f3 fcad 	bl	80001d0 <strcmp>
 800c876:	2800      	cmp	r0, #0
 800c878:	bf0c      	ite	eq
 800c87a:	4620      	moveq	r0, r4
 800c87c:	2000      	movne	r0, #0
 800c87e:	bd10      	pop	{r4, pc}

0800c880 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c880:	4b04      	ldr	r3, [pc, #16]	; (800c894 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	b10a      	cbz	r2, 800c88a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800c886:	4803      	ldr	r0, [pc, #12]	; (800c894 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c888:	4770      	bx	lr
 800c88a:	4a03      	ldr	r2, [pc, #12]	; (800c898 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800c88c:	4801      	ldr	r0, [pc, #4]	; (800c894 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c88e:	6812      	ldr	r2, [r2, #0]
 800c890:	601a      	str	r2, [r3, #0]
 800c892:	4770      	bx	lr
 800c894:	20000030 	.word	0x20000030
 800c898:	200000ac 	.word	0x200000ac

0800c89c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c89c:	4a02      	ldr	r2, [pc, #8]	; (800c8a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800c89e:	4b03      	ldr	r3, [pc, #12]	; (800c8ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800c8a0:	6812      	ldr	r2, [r2, #0]
 800c8a2:	601a      	str	r2, [r3, #0]
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	200000ac 	.word	0x200000ac
 800c8ac:	20000030 	.word	0x20000030

0800c8b0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800c8b0:	f007 be9c 	b.w	80145ec <std_msgs__msg__Int32__init>

0800c8b4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800c8b4:	f007 be9e 	b.w	80145f4 <std_msgs__msg__Int32__fini>

0800c8b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c8b8:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	b10a      	cbz	r2, 800c8c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800c8be:	4803      	ldr	r0, [pc, #12]	; (800c8cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c8c0:	4770      	bx	lr
 800c8c2:	4a03      	ldr	r2, [pc, #12]	; (800c8d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800c8c4:	4801      	ldr	r0, [pc, #4]	; (800c8cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800c8c6:	6812      	ldr	r2, [r2, #0]
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	4770      	bx	lr
 800c8cc:	20000078 	.word	0x20000078
 800c8d0:	200000b0 	.word	0x200000b0

0800c8d4 <_Int32__max_serialized_size>:
 800c8d4:	b508      	push	{r3, lr}
 800c8d6:	2104      	movs	r1, #4
 800c8d8:	2000      	movs	r0, #0
 800c8da:	f001 f807 	bl	800d8ec <ucdr_alignment>
 800c8de:	3004      	adds	r0, #4
 800c8e0:	bd08      	pop	{r3, pc}
 800c8e2:	bf00      	nop

0800c8e4 <_Int32__cdr_deserialize>:
 800c8e4:	b109      	cbz	r1, 800c8ea <_Int32__cdr_deserialize+0x6>
 800c8e6:	f000 bf19 	b.w	800d71c <ucdr_deserialize_int32_t>
 800c8ea:	4608      	mov	r0, r1
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop

0800c8f0 <get_serialized_size_std_msgs__msg__Int32>:
 800c8f0:	b138      	cbz	r0, 800c902 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800c8f2:	b508      	push	{r3, lr}
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	2104      	movs	r1, #4
 800c8fa:	f000 fff7 	bl	800d8ec <ucdr_alignment>
 800c8fe:	3004      	adds	r0, #4
 800c900:	bd08      	pop	{r3, pc}
 800c902:	4770      	bx	lr

0800c904 <_Int32__cdr_serialize>:
 800c904:	460a      	mov	r2, r1
 800c906:	b118      	cbz	r0, 800c910 <_Int32__cdr_serialize+0xc>
 800c908:	6801      	ldr	r1, [r0, #0]
 800c90a:	4610      	mov	r0, r2
 800c90c:	f000 be6e 	b.w	800d5ec <ucdr_serialize_int32_t>
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop

0800c914 <_Int32__get_serialized_size>:
 800c914:	b130      	cbz	r0, 800c924 <_Int32__get_serialized_size+0x10>
 800c916:	b508      	push	{r3, lr}
 800c918:	2104      	movs	r1, #4
 800c91a:	2000      	movs	r0, #0
 800c91c:	f000 ffe6 	bl	800d8ec <ucdr_alignment>
 800c920:	3004      	adds	r0, #4
 800c922:	bd08      	pop	{r3, pc}
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop

0800c928 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800c928:	4800      	ldr	r0, [pc, #0]	; (800c92c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800c92a:	4770      	bx	lr
 800c92c:	20000084 	.word	0x20000084

0800c930 <ucdr_serialize_bool>:
 800c930:	b538      	push	{r3, r4, r5, lr}
 800c932:	460d      	mov	r5, r1
 800c934:	2101      	movs	r1, #1
 800c936:	4604      	mov	r4, r0
 800c938:	f000 ff8c 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800c93c:	b148      	cbz	r0, 800c952 <ucdr_serialize_bool+0x22>
 800c93e:	68a3      	ldr	r3, [r4, #8]
 800c940:	701d      	strb	r5, [r3, #0]
 800c942:	68a2      	ldr	r2, [r4, #8]
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	2101      	movs	r1, #1
 800c948:	440a      	add	r2, r1
 800c94a:	440b      	add	r3, r1
 800c94c:	60a2      	str	r2, [r4, #8]
 800c94e:	6123      	str	r3, [r4, #16]
 800c950:	7561      	strb	r1, [r4, #21]
 800c952:	7da0      	ldrb	r0, [r4, #22]
 800c954:	f080 0001 	eor.w	r0, r0, #1
 800c958:	bd38      	pop	{r3, r4, r5, pc}
 800c95a:	bf00      	nop

0800c95c <ucdr_deserialize_bool>:
 800c95c:	b538      	push	{r3, r4, r5, lr}
 800c95e:	460d      	mov	r5, r1
 800c960:	2101      	movs	r1, #1
 800c962:	4604      	mov	r4, r0
 800c964:	f000 ff76 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800c968:	b160      	cbz	r0, 800c984 <ucdr_deserialize_bool+0x28>
 800c96a:	68a2      	ldr	r2, [r4, #8]
 800c96c:	6923      	ldr	r3, [r4, #16]
 800c96e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c972:	3900      	subs	r1, #0
 800c974:	bf18      	it	ne
 800c976:	2101      	movne	r1, #1
 800c978:	7029      	strb	r1, [r5, #0]
 800c97a:	3301      	adds	r3, #1
 800c97c:	2101      	movs	r1, #1
 800c97e:	60a2      	str	r2, [r4, #8]
 800c980:	6123      	str	r3, [r4, #16]
 800c982:	7561      	strb	r1, [r4, #21]
 800c984:	7da0      	ldrb	r0, [r4, #22]
 800c986:	f080 0001 	eor.w	r0, r0, #1
 800c98a:	bd38      	pop	{r3, r4, r5, pc}

0800c98c <ucdr_serialize_uint8_t>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	460d      	mov	r5, r1
 800c990:	2101      	movs	r1, #1
 800c992:	4604      	mov	r4, r0
 800c994:	f000 ff5e 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800c998:	b148      	cbz	r0, 800c9ae <ucdr_serialize_uint8_t+0x22>
 800c99a:	68a3      	ldr	r3, [r4, #8]
 800c99c:	701d      	strb	r5, [r3, #0]
 800c99e:	68a2      	ldr	r2, [r4, #8]
 800c9a0:	6923      	ldr	r3, [r4, #16]
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	440a      	add	r2, r1
 800c9a6:	440b      	add	r3, r1
 800c9a8:	60a2      	str	r2, [r4, #8]
 800c9aa:	6123      	str	r3, [r4, #16]
 800c9ac:	7561      	strb	r1, [r4, #21]
 800c9ae:	7da0      	ldrb	r0, [r4, #22]
 800c9b0:	f080 0001 	eor.w	r0, r0, #1
 800c9b4:	bd38      	pop	{r3, r4, r5, pc}
 800c9b6:	bf00      	nop

0800c9b8 <ucdr_deserialize_uint8_t>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	460d      	mov	r5, r1
 800c9bc:	2101      	movs	r1, #1
 800c9be:	4604      	mov	r4, r0
 800c9c0:	f000 ff48 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800c9c4:	b150      	cbz	r0, 800c9dc <ucdr_deserialize_uint8_t+0x24>
 800c9c6:	68a3      	ldr	r3, [r4, #8]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	702b      	strb	r3, [r5, #0]
 800c9cc:	68a2      	ldr	r2, [r4, #8]
 800c9ce:	6923      	ldr	r3, [r4, #16]
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	440a      	add	r2, r1
 800c9d4:	440b      	add	r3, r1
 800c9d6:	60a2      	str	r2, [r4, #8]
 800c9d8:	6123      	str	r3, [r4, #16]
 800c9da:	7561      	strb	r1, [r4, #21]
 800c9dc:	7da0      	ldrb	r0, [r4, #22]
 800c9de:	f080 0001 	eor.w	r0, r0, #1
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}

0800c9e4 <ucdr_serialize_uint16_t>:
 800c9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e8:	b082      	sub	sp, #8
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	2102      	movs	r1, #2
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c9f4:	f000 ff82 	bl	800d8fc <ucdr_buffer_alignment>
 800c9f8:	4601      	mov	r1, r0
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	7d67      	ldrb	r7, [r4, #21]
 800c9fe:	f000 ffc1 	bl	800d984 <ucdr_advance_buffer>
 800ca02:	2102      	movs	r1, #2
 800ca04:	4620      	mov	r0, r4
 800ca06:	f000 ff19 	bl	800d83c <ucdr_check_buffer_available_for>
 800ca0a:	bb78      	cbnz	r0, 800ca6c <ucdr_serialize_uint16_t+0x88>
 800ca0c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca10:	42ab      	cmp	r3, r5
 800ca12:	d926      	bls.n	800ca62 <ucdr_serialize_uint16_t+0x7e>
 800ca14:	1b5e      	subs	r6, r3, r5
 800ca16:	60a3      	str	r3, [r4, #8]
 800ca18:	6923      	ldr	r3, [r4, #16]
 800ca1a:	f1c6 0802 	rsb	r8, r6, #2
 800ca1e:	4433      	add	r3, r6
 800ca20:	6123      	str	r3, [r4, #16]
 800ca22:	4641      	mov	r1, r8
 800ca24:	4620      	mov	r0, r4
 800ca26:	f000 ff15 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d03b      	beq.n	800caa6 <ucdr_serialize_uint16_t+0xc2>
 800ca2e:	7d23      	ldrb	r3, [r4, #20]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d04a      	beq.n	800caca <ucdr_serialize_uint16_t+0xe6>
 800ca34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca38:	702b      	strb	r3, [r5, #0]
 800ca3a:	2e00      	cmp	r6, #0
 800ca3c:	d040      	beq.n	800cac0 <ucdr_serialize_uint16_t+0xdc>
 800ca3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca42:	706b      	strb	r3, [r5, #1]
 800ca44:	6923      	ldr	r3, [r4, #16]
 800ca46:	68a2      	ldr	r2, [r4, #8]
 800ca48:	7da0      	ldrb	r0, [r4, #22]
 800ca4a:	3302      	adds	r3, #2
 800ca4c:	1b9e      	subs	r6, r3, r6
 800ca4e:	4442      	add	r2, r8
 800ca50:	2302      	movs	r3, #2
 800ca52:	f080 0001 	eor.w	r0, r0, #1
 800ca56:	60a2      	str	r2, [r4, #8]
 800ca58:	6126      	str	r6, [r4, #16]
 800ca5a:	7563      	strb	r3, [r4, #21]
 800ca5c:	b002      	add	sp, #8
 800ca5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca62:	2102      	movs	r1, #2
 800ca64:	4620      	mov	r0, r4
 800ca66:	f000 fef5 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800ca6a:	b190      	cbz	r0, 800ca92 <ucdr_serialize_uint16_t+0xae>
 800ca6c:	7d23      	ldrb	r3, [r4, #20]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	68a3      	ldr	r3, [r4, #8]
 800ca72:	d014      	beq.n	800ca9e <ucdr_serialize_uint16_t+0xba>
 800ca74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ca78:	701a      	strb	r2, [r3, #0]
 800ca7a:	68a3      	ldr	r3, [r4, #8]
 800ca7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca80:	705a      	strb	r2, [r3, #1]
 800ca82:	68a2      	ldr	r2, [r4, #8]
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	3202      	adds	r2, #2
 800ca88:	3302      	adds	r3, #2
 800ca8a:	2102      	movs	r1, #2
 800ca8c:	60a2      	str	r2, [r4, #8]
 800ca8e:	6123      	str	r3, [r4, #16]
 800ca90:	7561      	strb	r1, [r4, #21]
 800ca92:	7da0      	ldrb	r0, [r4, #22]
 800ca94:	f080 0001 	eor.w	r0, r0, #1
 800ca98:	b002      	add	sp, #8
 800ca9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800caa2:	801a      	strh	r2, [r3, #0]
 800caa4:	e7ed      	b.n	800ca82 <ucdr_serialize_uint16_t+0x9e>
 800caa6:	68a2      	ldr	r2, [r4, #8]
 800caa8:	6923      	ldr	r3, [r4, #16]
 800caaa:	7da0      	ldrb	r0, [r4, #22]
 800caac:	7567      	strb	r7, [r4, #21]
 800caae:	1b92      	subs	r2, r2, r6
 800cab0:	1b9b      	subs	r3, r3, r6
 800cab2:	f080 0001 	eor.w	r0, r0, #1
 800cab6:	60a2      	str	r2, [r4, #8]
 800cab8:	6123      	str	r3, [r4, #16]
 800caba:	b002      	add	sp, #8
 800cabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac0:	68a3      	ldr	r3, [r4, #8]
 800cac2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cac6:	701a      	strb	r2, [r3, #0]
 800cac8:	e7bc      	b.n	800ca44 <ucdr_serialize_uint16_t+0x60>
 800caca:	4628      	mov	r0, r5
 800cacc:	f10d 0506 	add.w	r5, sp, #6
 800cad0:	4629      	mov	r1, r5
 800cad2:	4632      	mov	r2, r6
 800cad4:	f00a f9e0 	bl	8016e98 <memcpy>
 800cad8:	68a0      	ldr	r0, [r4, #8]
 800cada:	4642      	mov	r2, r8
 800cadc:	19a9      	adds	r1, r5, r6
 800cade:	f00a f9db 	bl	8016e98 <memcpy>
 800cae2:	e7af      	b.n	800ca44 <ucdr_serialize_uint16_t+0x60>

0800cae4 <ucdr_serialize_endian_uint16_t>:
 800cae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cae8:	b083      	sub	sp, #12
 800caea:	460d      	mov	r5, r1
 800caec:	2102      	movs	r1, #2
 800caee:	4604      	mov	r4, r0
 800caf0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800caf4:	f000 ff02 	bl	800d8fc <ucdr_buffer_alignment>
 800caf8:	4601      	mov	r1, r0
 800cafa:	4620      	mov	r0, r4
 800cafc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb00:	f000 ff40 	bl	800d984 <ucdr_advance_buffer>
 800cb04:	2102      	movs	r1, #2
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 fe98 	bl	800d83c <ucdr_check_buffer_available_for>
 800cb0c:	bb70      	cbnz	r0, 800cb6c <ucdr_serialize_endian_uint16_t+0x88>
 800cb0e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cb12:	42be      	cmp	r6, r7
 800cb14:	d925      	bls.n	800cb62 <ucdr_serialize_endian_uint16_t+0x7e>
 800cb16:	6923      	ldr	r3, [r4, #16]
 800cb18:	60a6      	str	r6, [r4, #8]
 800cb1a:	1bf6      	subs	r6, r6, r7
 800cb1c:	4433      	add	r3, r6
 800cb1e:	f1c6 0902 	rsb	r9, r6, #2
 800cb22:	6123      	str	r3, [r4, #16]
 800cb24:	4649      	mov	r1, r9
 800cb26:	4620      	mov	r0, r4
 800cb28:	f000 fe94 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d039      	beq.n	800cba4 <ucdr_serialize_endian_uint16_t+0xc0>
 800cb30:	2d01      	cmp	r5, #1
 800cb32:	d04a      	beq.n	800cbca <ucdr_serialize_endian_uint16_t+0xe6>
 800cb34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cb38:	703b      	strb	r3, [r7, #0]
 800cb3a:	2e00      	cmp	r6, #0
 800cb3c:	d040      	beq.n	800cbc0 <ucdr_serialize_endian_uint16_t+0xdc>
 800cb3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb42:	707b      	strb	r3, [r7, #1]
 800cb44:	6923      	ldr	r3, [r4, #16]
 800cb46:	68a2      	ldr	r2, [r4, #8]
 800cb48:	7da0      	ldrb	r0, [r4, #22]
 800cb4a:	3302      	adds	r3, #2
 800cb4c:	444a      	add	r2, r9
 800cb4e:	1b9b      	subs	r3, r3, r6
 800cb50:	2102      	movs	r1, #2
 800cb52:	f080 0001 	eor.w	r0, r0, #1
 800cb56:	60a2      	str	r2, [r4, #8]
 800cb58:	6123      	str	r3, [r4, #16]
 800cb5a:	7561      	strb	r1, [r4, #21]
 800cb5c:	b003      	add	sp, #12
 800cb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb62:	2102      	movs	r1, #2
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 fe75 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800cb6a:	b188      	cbz	r0, 800cb90 <ucdr_serialize_endian_uint16_t+0xac>
 800cb6c:	2d01      	cmp	r5, #1
 800cb6e:	68a3      	ldr	r3, [r4, #8]
 800cb70:	d014      	beq.n	800cb9c <ucdr_serialize_endian_uint16_t+0xb8>
 800cb72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cb76:	701a      	strb	r2, [r3, #0]
 800cb78:	68a3      	ldr	r3, [r4, #8]
 800cb7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb7e:	705a      	strb	r2, [r3, #1]
 800cb80:	68a2      	ldr	r2, [r4, #8]
 800cb82:	6923      	ldr	r3, [r4, #16]
 800cb84:	3202      	adds	r2, #2
 800cb86:	3302      	adds	r3, #2
 800cb88:	2102      	movs	r1, #2
 800cb8a:	60a2      	str	r2, [r4, #8]
 800cb8c:	6123      	str	r3, [r4, #16]
 800cb8e:	7561      	strb	r1, [r4, #21]
 800cb90:	7da0      	ldrb	r0, [r4, #22]
 800cb92:	f080 0001 	eor.w	r0, r0, #1
 800cb96:	b003      	add	sp, #12
 800cb98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cba0:	801a      	strh	r2, [r3, #0]
 800cba2:	e7ed      	b.n	800cb80 <ucdr_serialize_endian_uint16_t+0x9c>
 800cba4:	68a2      	ldr	r2, [r4, #8]
 800cba6:	6923      	ldr	r3, [r4, #16]
 800cba8:	7da0      	ldrb	r0, [r4, #22]
 800cbaa:	f884 8015 	strb.w	r8, [r4, #21]
 800cbae:	1b92      	subs	r2, r2, r6
 800cbb0:	1b9b      	subs	r3, r3, r6
 800cbb2:	f080 0001 	eor.w	r0, r0, #1
 800cbb6:	60a2      	str	r2, [r4, #8]
 800cbb8:	6123      	str	r3, [r4, #16]
 800cbba:	b003      	add	sp, #12
 800cbbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbc0:	68a3      	ldr	r3, [r4, #8]
 800cbc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cbc6:	701a      	strb	r2, [r3, #0]
 800cbc8:	e7bc      	b.n	800cb44 <ucdr_serialize_endian_uint16_t+0x60>
 800cbca:	f10d 0506 	add.w	r5, sp, #6
 800cbce:	4629      	mov	r1, r5
 800cbd0:	4632      	mov	r2, r6
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	f00a f960 	bl	8016e98 <memcpy>
 800cbd8:	68a0      	ldr	r0, [r4, #8]
 800cbda:	464a      	mov	r2, r9
 800cbdc:	19a9      	adds	r1, r5, r6
 800cbde:	f00a f95b 	bl	8016e98 <memcpy>
 800cbe2:	e7af      	b.n	800cb44 <ucdr_serialize_endian_uint16_t+0x60>

0800cbe4 <ucdr_deserialize_uint16_t>:
 800cbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbe8:	460d      	mov	r5, r1
 800cbea:	2102      	movs	r1, #2
 800cbec:	4604      	mov	r4, r0
 800cbee:	f000 fe85 	bl	800d8fc <ucdr_buffer_alignment>
 800cbf2:	4601      	mov	r1, r0
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cbfa:	f000 fec3 	bl	800d984 <ucdr_advance_buffer>
 800cbfe:	2102      	movs	r1, #2
 800cc00:	4620      	mov	r0, r4
 800cc02:	f000 fe1b 	bl	800d83c <ucdr_check_buffer_available_for>
 800cc06:	bb60      	cbnz	r0, 800cc62 <ucdr_deserialize_uint16_t+0x7e>
 800cc08:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cc0c:	42be      	cmp	r6, r7
 800cc0e:	d923      	bls.n	800cc58 <ucdr_deserialize_uint16_t+0x74>
 800cc10:	6923      	ldr	r3, [r4, #16]
 800cc12:	60a6      	str	r6, [r4, #8]
 800cc14:	1bf6      	subs	r6, r6, r7
 800cc16:	4433      	add	r3, r6
 800cc18:	f1c6 0902 	rsb	r9, r6, #2
 800cc1c:	6123      	str	r3, [r4, #16]
 800cc1e:	4649      	mov	r1, r9
 800cc20:	4620      	mov	r0, r4
 800cc22:	f000 fe17 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d034      	beq.n	800cc94 <ucdr_deserialize_uint16_t+0xb0>
 800cc2a:	7d23      	ldrb	r3, [r4, #20]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d042      	beq.n	800ccb6 <ucdr_deserialize_uint16_t+0xd2>
 800cc30:	787b      	ldrb	r3, [r7, #1]
 800cc32:	702b      	strb	r3, [r5, #0]
 800cc34:	2e00      	cmp	r6, #0
 800cc36:	d03a      	beq.n	800ccae <ucdr_deserialize_uint16_t+0xca>
 800cc38:	783b      	ldrb	r3, [r7, #0]
 800cc3a:	706b      	strb	r3, [r5, #1]
 800cc3c:	6923      	ldr	r3, [r4, #16]
 800cc3e:	68a2      	ldr	r2, [r4, #8]
 800cc40:	7da0      	ldrb	r0, [r4, #22]
 800cc42:	2102      	movs	r1, #2
 800cc44:	3302      	adds	r3, #2
 800cc46:	444a      	add	r2, r9
 800cc48:	1b9b      	subs	r3, r3, r6
 800cc4a:	7561      	strb	r1, [r4, #21]
 800cc4c:	60a2      	str	r2, [r4, #8]
 800cc4e:	6123      	str	r3, [r4, #16]
 800cc50:	f080 0001 	eor.w	r0, r0, #1
 800cc54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc58:	2102      	movs	r1, #2
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 fdfa 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800cc60:	b180      	cbz	r0, 800cc84 <ucdr_deserialize_uint16_t+0xa0>
 800cc62:	7d23      	ldrb	r3, [r4, #20]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	68a3      	ldr	r3, [r4, #8]
 800cc68:	d011      	beq.n	800cc8e <ucdr_deserialize_uint16_t+0xaa>
 800cc6a:	785b      	ldrb	r3, [r3, #1]
 800cc6c:	702b      	strb	r3, [r5, #0]
 800cc6e:	68a3      	ldr	r3, [r4, #8]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	706b      	strb	r3, [r5, #1]
 800cc74:	68a2      	ldr	r2, [r4, #8]
 800cc76:	6923      	ldr	r3, [r4, #16]
 800cc78:	3202      	adds	r2, #2
 800cc7a:	3302      	adds	r3, #2
 800cc7c:	2102      	movs	r1, #2
 800cc7e:	60a2      	str	r2, [r4, #8]
 800cc80:	6123      	str	r3, [r4, #16]
 800cc82:	7561      	strb	r1, [r4, #21]
 800cc84:	7da0      	ldrb	r0, [r4, #22]
 800cc86:	f080 0001 	eor.w	r0, r0, #1
 800cc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8e:	881b      	ldrh	r3, [r3, #0]
 800cc90:	802b      	strh	r3, [r5, #0]
 800cc92:	e7ef      	b.n	800cc74 <ucdr_deserialize_uint16_t+0x90>
 800cc94:	68a2      	ldr	r2, [r4, #8]
 800cc96:	6923      	ldr	r3, [r4, #16]
 800cc98:	7da0      	ldrb	r0, [r4, #22]
 800cc9a:	f884 8015 	strb.w	r8, [r4, #21]
 800cc9e:	1b92      	subs	r2, r2, r6
 800cca0:	1b9b      	subs	r3, r3, r6
 800cca2:	60a2      	str	r2, [r4, #8]
 800cca4:	6123      	str	r3, [r4, #16]
 800cca6:	f080 0001 	eor.w	r0, r0, #1
 800ccaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccae:	68a3      	ldr	r3, [r4, #8]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	706b      	strb	r3, [r5, #1]
 800ccb4:	e7c2      	b.n	800cc3c <ucdr_deserialize_uint16_t+0x58>
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	4632      	mov	r2, r6
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f00a f8ec 	bl	8016e98 <memcpy>
 800ccc0:	68a1      	ldr	r1, [r4, #8]
 800ccc2:	464a      	mov	r2, r9
 800ccc4:	19a8      	adds	r0, r5, r6
 800ccc6:	f00a f8e7 	bl	8016e98 <memcpy>
 800ccca:	e7b7      	b.n	800cc3c <ucdr_deserialize_uint16_t+0x58>

0800cccc <ucdr_deserialize_endian_uint16_t>:
 800cccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd0:	460e      	mov	r6, r1
 800ccd2:	2102      	movs	r1, #2
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	4615      	mov	r5, r2
 800ccd8:	f000 fe10 	bl	800d8fc <ucdr_buffer_alignment>
 800ccdc:	4601      	mov	r1, r0
 800ccde:	4620      	mov	r0, r4
 800cce0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cce4:	f000 fe4e 	bl	800d984 <ucdr_advance_buffer>
 800cce8:	2102      	movs	r1, #2
 800ccea:	4620      	mov	r0, r4
 800ccec:	f000 fda6 	bl	800d83c <ucdr_check_buffer_available_for>
 800ccf0:	bb70      	cbnz	r0, 800cd50 <ucdr_deserialize_endian_uint16_t+0x84>
 800ccf2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ccf6:	4547      	cmp	r7, r8
 800ccf8:	d925      	bls.n	800cd46 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	60a7      	str	r7, [r4, #8]
 800ccfe:	eba7 0708 	sub.w	r7, r7, r8
 800cd02:	443b      	add	r3, r7
 800cd04:	f1c7 0a02 	rsb	sl, r7, #2
 800cd08:	6123      	str	r3, [r4, #16]
 800cd0a:	4651      	mov	r1, sl
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f000 fda1 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d034      	beq.n	800cd80 <ucdr_deserialize_endian_uint16_t+0xb4>
 800cd16:	2e01      	cmp	r6, #1
 800cd18:	d043      	beq.n	800cda2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800cd1a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cd1e:	702b      	strb	r3, [r5, #0]
 800cd20:	2f00      	cmp	r7, #0
 800cd22:	d03a      	beq.n	800cd9a <ucdr_deserialize_endian_uint16_t+0xce>
 800cd24:	f898 3000 	ldrb.w	r3, [r8]
 800cd28:	706b      	strb	r3, [r5, #1]
 800cd2a:	6923      	ldr	r3, [r4, #16]
 800cd2c:	68a2      	ldr	r2, [r4, #8]
 800cd2e:	7da0      	ldrb	r0, [r4, #22]
 800cd30:	2102      	movs	r1, #2
 800cd32:	3302      	adds	r3, #2
 800cd34:	4452      	add	r2, sl
 800cd36:	1bdb      	subs	r3, r3, r7
 800cd38:	7561      	strb	r1, [r4, #21]
 800cd3a:	60a2      	str	r2, [r4, #8]
 800cd3c:	6123      	str	r3, [r4, #16]
 800cd3e:	f080 0001 	eor.w	r0, r0, #1
 800cd42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd46:	2102      	movs	r1, #2
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f000 fd83 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800cd4e:	b178      	cbz	r0, 800cd70 <ucdr_deserialize_endian_uint16_t+0xa4>
 800cd50:	2e01      	cmp	r6, #1
 800cd52:	68a3      	ldr	r3, [r4, #8]
 800cd54:	d011      	beq.n	800cd7a <ucdr_deserialize_endian_uint16_t+0xae>
 800cd56:	785b      	ldrb	r3, [r3, #1]
 800cd58:	702b      	strb	r3, [r5, #0]
 800cd5a:	68a3      	ldr	r3, [r4, #8]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	706b      	strb	r3, [r5, #1]
 800cd60:	68a2      	ldr	r2, [r4, #8]
 800cd62:	6923      	ldr	r3, [r4, #16]
 800cd64:	3202      	adds	r2, #2
 800cd66:	3302      	adds	r3, #2
 800cd68:	2102      	movs	r1, #2
 800cd6a:	60a2      	str	r2, [r4, #8]
 800cd6c:	6123      	str	r3, [r4, #16]
 800cd6e:	7561      	strb	r1, [r4, #21]
 800cd70:	7da0      	ldrb	r0, [r4, #22]
 800cd72:	f080 0001 	eor.w	r0, r0, #1
 800cd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7a:	881b      	ldrh	r3, [r3, #0]
 800cd7c:	802b      	strh	r3, [r5, #0]
 800cd7e:	e7ef      	b.n	800cd60 <ucdr_deserialize_endian_uint16_t+0x94>
 800cd80:	68a2      	ldr	r2, [r4, #8]
 800cd82:	6923      	ldr	r3, [r4, #16]
 800cd84:	7da0      	ldrb	r0, [r4, #22]
 800cd86:	f884 9015 	strb.w	r9, [r4, #21]
 800cd8a:	1bd2      	subs	r2, r2, r7
 800cd8c:	1bdb      	subs	r3, r3, r7
 800cd8e:	60a2      	str	r2, [r4, #8]
 800cd90:	6123      	str	r3, [r4, #16]
 800cd92:	f080 0001 	eor.w	r0, r0, #1
 800cd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd9a:	68a3      	ldr	r3, [r4, #8]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	706b      	strb	r3, [r5, #1]
 800cda0:	e7c3      	b.n	800cd2a <ucdr_deserialize_endian_uint16_t+0x5e>
 800cda2:	4641      	mov	r1, r8
 800cda4:	463a      	mov	r2, r7
 800cda6:	4628      	mov	r0, r5
 800cda8:	f00a f876 	bl	8016e98 <memcpy>
 800cdac:	68a1      	ldr	r1, [r4, #8]
 800cdae:	4652      	mov	r2, sl
 800cdb0:	19e8      	adds	r0, r5, r7
 800cdb2:	f00a f871 	bl	8016e98 <memcpy>
 800cdb6:	e7b8      	b.n	800cd2a <ucdr_deserialize_endian_uint16_t+0x5e>

0800cdb8 <ucdr_serialize_uint32_t>:
 800cdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	9101      	str	r1, [sp, #4]
 800cdc2:	2104      	movs	r1, #4
 800cdc4:	f000 fd9a 	bl	800d8fc <ucdr_buffer_alignment>
 800cdc8:	4601      	mov	r1, r0
 800cdca:	4620      	mov	r0, r4
 800cdcc:	7d67      	ldrb	r7, [r4, #21]
 800cdce:	f000 fdd9 	bl	800d984 <ucdr_advance_buffer>
 800cdd2:	2104      	movs	r1, #4
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 fd31 	bl	800d83c <ucdr_check_buffer_available_for>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d139      	bne.n	800ce52 <ucdr_serialize_uint32_t+0x9a>
 800cdde:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cde2:	42ab      	cmp	r3, r5
 800cde4:	d930      	bls.n	800ce48 <ucdr_serialize_uint32_t+0x90>
 800cde6:	1b5e      	subs	r6, r3, r5
 800cde8:	60a3      	str	r3, [r4, #8]
 800cdea:	6923      	ldr	r3, [r4, #16]
 800cdec:	f1c6 0804 	rsb	r8, r6, #4
 800cdf0:	4433      	add	r3, r6
 800cdf2:	6123      	str	r3, [r4, #16]
 800cdf4:	4641      	mov	r1, r8
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f000 fd2c 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d04c      	beq.n	800ce9a <ucdr_serialize_uint32_t+0xe2>
 800ce00:	7d23      	ldrb	r3, [r4, #20]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d063      	beq.n	800cece <ucdr_serialize_uint32_t+0x116>
 800ce06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce0a:	702b      	strb	r3, [r5, #0]
 800ce0c:	2e00      	cmp	r6, #0
 800ce0e:	d051      	beq.n	800ceb4 <ucdr_serialize_uint32_t+0xfc>
 800ce10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ce14:	706b      	strb	r3, [r5, #1]
 800ce16:	2e01      	cmp	r6, #1
 800ce18:	d050      	beq.n	800cebc <ucdr_serialize_uint32_t+0x104>
 800ce1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ce1e:	70ab      	strb	r3, [r5, #2]
 800ce20:	2e02      	cmp	r6, #2
 800ce22:	d04f      	beq.n	800cec4 <ucdr_serialize_uint32_t+0x10c>
 800ce24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce28:	70eb      	strb	r3, [r5, #3]
 800ce2a:	6923      	ldr	r3, [r4, #16]
 800ce2c:	68a2      	ldr	r2, [r4, #8]
 800ce2e:	7da0      	ldrb	r0, [r4, #22]
 800ce30:	3304      	adds	r3, #4
 800ce32:	1b9e      	subs	r6, r3, r6
 800ce34:	4442      	add	r2, r8
 800ce36:	2304      	movs	r3, #4
 800ce38:	f080 0001 	eor.w	r0, r0, #1
 800ce3c:	60a2      	str	r2, [r4, #8]
 800ce3e:	6126      	str	r6, [r4, #16]
 800ce40:	7563      	strb	r3, [r4, #21]
 800ce42:	b002      	add	sp, #8
 800ce44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce48:	2104      	movs	r1, #4
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f000 fd02 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800ce50:	b1d0      	cbz	r0, 800ce88 <ucdr_serialize_uint32_t+0xd0>
 800ce52:	7d23      	ldrb	r3, [r4, #20]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	68a3      	ldr	r3, [r4, #8]
 800ce58:	d01c      	beq.n	800ce94 <ucdr_serialize_uint32_t+0xdc>
 800ce5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ce5e:	701a      	strb	r2, [r3, #0]
 800ce60:	68a3      	ldr	r3, [r4, #8]
 800ce62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce66:	705a      	strb	r2, [r3, #1]
 800ce68:	68a3      	ldr	r3, [r4, #8]
 800ce6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ce6e:	709a      	strb	r2, [r3, #2]
 800ce70:	68a3      	ldr	r3, [r4, #8]
 800ce72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce76:	70da      	strb	r2, [r3, #3]
 800ce78:	68a2      	ldr	r2, [r4, #8]
 800ce7a:	6923      	ldr	r3, [r4, #16]
 800ce7c:	3204      	adds	r2, #4
 800ce7e:	3304      	adds	r3, #4
 800ce80:	2104      	movs	r1, #4
 800ce82:	60a2      	str	r2, [r4, #8]
 800ce84:	6123      	str	r3, [r4, #16]
 800ce86:	7561      	strb	r1, [r4, #21]
 800ce88:	7da0      	ldrb	r0, [r4, #22]
 800ce8a:	f080 0001 	eor.w	r0, r0, #1
 800ce8e:	b002      	add	sp, #8
 800ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce94:	9a01      	ldr	r2, [sp, #4]
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	e7ee      	b.n	800ce78 <ucdr_serialize_uint32_t+0xc0>
 800ce9a:	68a2      	ldr	r2, [r4, #8]
 800ce9c:	6923      	ldr	r3, [r4, #16]
 800ce9e:	7da0      	ldrb	r0, [r4, #22]
 800cea0:	7567      	strb	r7, [r4, #21]
 800cea2:	1b92      	subs	r2, r2, r6
 800cea4:	1b9b      	subs	r3, r3, r6
 800cea6:	f080 0001 	eor.w	r0, r0, #1
 800ceaa:	60a2      	str	r2, [r4, #8]
 800ceac:	6123      	str	r3, [r4, #16]
 800ceae:	b002      	add	sp, #8
 800ceb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb4:	68a3      	ldr	r3, [r4, #8]
 800ceb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ceba:	701a      	strb	r2, [r3, #0]
 800cebc:	68a3      	ldr	r3, [r4, #8]
 800cebe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cec2:	701a      	strb	r2, [r3, #0]
 800cec4:	68a3      	ldr	r3, [r4, #8]
 800cec6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ceca:	701a      	strb	r2, [r3, #0]
 800cecc:	e7ad      	b.n	800ce2a <ucdr_serialize_uint32_t+0x72>
 800cece:	4628      	mov	r0, r5
 800ced0:	ad01      	add	r5, sp, #4
 800ced2:	4629      	mov	r1, r5
 800ced4:	4632      	mov	r2, r6
 800ced6:	f009 ffdf 	bl	8016e98 <memcpy>
 800ceda:	68a0      	ldr	r0, [r4, #8]
 800cedc:	4642      	mov	r2, r8
 800cede:	19a9      	adds	r1, r5, r6
 800cee0:	f009 ffda 	bl	8016e98 <memcpy>
 800cee4:	e7a1      	b.n	800ce2a <ucdr_serialize_uint32_t+0x72>
 800cee6:	bf00      	nop

0800cee8 <ucdr_serialize_endian_uint32_t>:
 800cee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ceec:	b083      	sub	sp, #12
 800ceee:	460d      	mov	r5, r1
 800cef0:	2104      	movs	r1, #4
 800cef2:	4604      	mov	r4, r0
 800cef4:	9201      	str	r2, [sp, #4]
 800cef6:	f000 fd01 	bl	800d8fc <ucdr_buffer_alignment>
 800cefa:	4601      	mov	r1, r0
 800cefc:	4620      	mov	r0, r4
 800cefe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cf02:	f000 fd3f 	bl	800d984 <ucdr_advance_buffer>
 800cf06:	2104      	movs	r1, #4
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f000 fc97 	bl	800d83c <ucdr_check_buffer_available_for>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d138      	bne.n	800cf84 <ucdr_serialize_endian_uint32_t+0x9c>
 800cf12:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cf16:	42b7      	cmp	r7, r6
 800cf18:	d92f      	bls.n	800cf7a <ucdr_serialize_endian_uint32_t+0x92>
 800cf1a:	6923      	ldr	r3, [r4, #16]
 800cf1c:	60a7      	str	r7, [r4, #8]
 800cf1e:	1bbf      	subs	r7, r7, r6
 800cf20:	443b      	add	r3, r7
 800cf22:	f1c7 0904 	rsb	r9, r7, #4
 800cf26:	6123      	str	r3, [r4, #16]
 800cf28:	4649      	mov	r1, r9
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 fc92 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d04a      	beq.n	800cfca <ucdr_serialize_endian_uint32_t+0xe2>
 800cf34:	2d01      	cmp	r5, #1
 800cf36:	d063      	beq.n	800d000 <ucdr_serialize_endian_uint32_t+0x118>
 800cf38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cf3c:	7033      	strb	r3, [r6, #0]
 800cf3e:	2f00      	cmp	r7, #0
 800cf40:	d051      	beq.n	800cfe6 <ucdr_serialize_endian_uint32_t+0xfe>
 800cf42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cf46:	7073      	strb	r3, [r6, #1]
 800cf48:	2f01      	cmp	r7, #1
 800cf4a:	d050      	beq.n	800cfee <ucdr_serialize_endian_uint32_t+0x106>
 800cf4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cf50:	70b3      	strb	r3, [r6, #2]
 800cf52:	2f02      	cmp	r7, #2
 800cf54:	d04f      	beq.n	800cff6 <ucdr_serialize_endian_uint32_t+0x10e>
 800cf56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf5a:	70f3      	strb	r3, [r6, #3]
 800cf5c:	6923      	ldr	r3, [r4, #16]
 800cf5e:	68a2      	ldr	r2, [r4, #8]
 800cf60:	7da0      	ldrb	r0, [r4, #22]
 800cf62:	3304      	adds	r3, #4
 800cf64:	444a      	add	r2, r9
 800cf66:	1bdb      	subs	r3, r3, r7
 800cf68:	2104      	movs	r1, #4
 800cf6a:	f080 0001 	eor.w	r0, r0, #1
 800cf6e:	60a2      	str	r2, [r4, #8]
 800cf70:	6123      	str	r3, [r4, #16]
 800cf72:	7561      	strb	r1, [r4, #21]
 800cf74:	b003      	add	sp, #12
 800cf76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf7a:	2104      	movs	r1, #4
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f000 fc69 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800cf82:	b1c8      	cbz	r0, 800cfb8 <ucdr_serialize_endian_uint32_t+0xd0>
 800cf84:	2d01      	cmp	r5, #1
 800cf86:	68a3      	ldr	r3, [r4, #8]
 800cf88:	d01c      	beq.n	800cfc4 <ucdr_serialize_endian_uint32_t+0xdc>
 800cf8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cf8e:	701a      	strb	r2, [r3, #0]
 800cf90:	68a3      	ldr	r3, [r4, #8]
 800cf92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf96:	705a      	strb	r2, [r3, #1]
 800cf98:	68a3      	ldr	r3, [r4, #8]
 800cf9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf9e:	709a      	strb	r2, [r3, #2]
 800cfa0:	68a3      	ldr	r3, [r4, #8]
 800cfa2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cfa6:	70da      	strb	r2, [r3, #3]
 800cfa8:	68a2      	ldr	r2, [r4, #8]
 800cfaa:	6923      	ldr	r3, [r4, #16]
 800cfac:	3204      	adds	r2, #4
 800cfae:	3304      	adds	r3, #4
 800cfb0:	2104      	movs	r1, #4
 800cfb2:	60a2      	str	r2, [r4, #8]
 800cfb4:	6123      	str	r3, [r4, #16]
 800cfb6:	7561      	strb	r1, [r4, #21]
 800cfb8:	7da0      	ldrb	r0, [r4, #22]
 800cfba:	f080 0001 	eor.w	r0, r0, #1
 800cfbe:	b003      	add	sp, #12
 800cfc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfc4:	9a01      	ldr	r2, [sp, #4]
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	e7ee      	b.n	800cfa8 <ucdr_serialize_endian_uint32_t+0xc0>
 800cfca:	68a2      	ldr	r2, [r4, #8]
 800cfcc:	6923      	ldr	r3, [r4, #16]
 800cfce:	7da0      	ldrb	r0, [r4, #22]
 800cfd0:	f884 8015 	strb.w	r8, [r4, #21]
 800cfd4:	1bd2      	subs	r2, r2, r7
 800cfd6:	1bdb      	subs	r3, r3, r7
 800cfd8:	f080 0001 	eor.w	r0, r0, #1
 800cfdc:	60a2      	str	r2, [r4, #8]
 800cfde:	6123      	str	r3, [r4, #16]
 800cfe0:	b003      	add	sp, #12
 800cfe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfe6:	68a3      	ldr	r3, [r4, #8]
 800cfe8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cfec:	701a      	strb	r2, [r3, #0]
 800cfee:	68a3      	ldr	r3, [r4, #8]
 800cff0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cff4:	701a      	strb	r2, [r3, #0]
 800cff6:	68a3      	ldr	r3, [r4, #8]
 800cff8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cffc:	701a      	strb	r2, [r3, #0]
 800cffe:	e7ad      	b.n	800cf5c <ucdr_serialize_endian_uint32_t+0x74>
 800d000:	ad01      	add	r5, sp, #4
 800d002:	4629      	mov	r1, r5
 800d004:	463a      	mov	r2, r7
 800d006:	4630      	mov	r0, r6
 800d008:	f009 ff46 	bl	8016e98 <memcpy>
 800d00c:	68a0      	ldr	r0, [r4, #8]
 800d00e:	464a      	mov	r2, r9
 800d010:	19e9      	adds	r1, r5, r7
 800d012:	f009 ff41 	bl	8016e98 <memcpy>
 800d016:	e7a1      	b.n	800cf5c <ucdr_serialize_endian_uint32_t+0x74>

0800d018 <ucdr_deserialize_uint32_t>:
 800d018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d01c:	460d      	mov	r5, r1
 800d01e:	2104      	movs	r1, #4
 800d020:	4604      	mov	r4, r0
 800d022:	f000 fc6b 	bl	800d8fc <ucdr_buffer_alignment>
 800d026:	4601      	mov	r1, r0
 800d028:	4620      	mov	r0, r4
 800d02a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d02e:	f000 fca9 	bl	800d984 <ucdr_advance_buffer>
 800d032:	2104      	movs	r1, #4
 800d034:	4620      	mov	r0, r4
 800d036:	f000 fc01 	bl	800d83c <ucdr_check_buffer_available_for>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d138      	bne.n	800d0b0 <ucdr_deserialize_uint32_t+0x98>
 800d03e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d042:	42b7      	cmp	r7, r6
 800d044:	d92f      	bls.n	800d0a6 <ucdr_deserialize_uint32_t+0x8e>
 800d046:	6923      	ldr	r3, [r4, #16]
 800d048:	60a7      	str	r7, [r4, #8]
 800d04a:	1bbf      	subs	r7, r7, r6
 800d04c:	443b      	add	r3, r7
 800d04e:	f1c7 0904 	rsb	r9, r7, #4
 800d052:	6123      	str	r3, [r4, #16]
 800d054:	4649      	mov	r1, r9
 800d056:	4620      	mov	r0, r4
 800d058:	f000 fbfc 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d046      	beq.n	800d0ee <ucdr_deserialize_uint32_t+0xd6>
 800d060:	7d23      	ldrb	r3, [r4, #20]
 800d062:	2b01      	cmp	r3, #1
 800d064:	d05c      	beq.n	800d120 <ucdr_deserialize_uint32_t+0x108>
 800d066:	78f3      	ldrb	r3, [r6, #3]
 800d068:	702b      	strb	r3, [r5, #0]
 800d06a:	2f00      	cmp	r7, #0
 800d06c:	d04c      	beq.n	800d108 <ucdr_deserialize_uint32_t+0xf0>
 800d06e:	78b3      	ldrb	r3, [r6, #2]
 800d070:	706b      	strb	r3, [r5, #1]
 800d072:	2f01      	cmp	r7, #1
 800d074:	f105 0302 	add.w	r3, r5, #2
 800d078:	d04a      	beq.n	800d110 <ucdr_deserialize_uint32_t+0xf8>
 800d07a:	7873      	ldrb	r3, [r6, #1]
 800d07c:	70ab      	strb	r3, [r5, #2]
 800d07e:	2f02      	cmp	r7, #2
 800d080:	f105 0303 	add.w	r3, r5, #3
 800d084:	d048      	beq.n	800d118 <ucdr_deserialize_uint32_t+0x100>
 800d086:	7833      	ldrb	r3, [r6, #0]
 800d088:	70eb      	strb	r3, [r5, #3]
 800d08a:	6923      	ldr	r3, [r4, #16]
 800d08c:	68a2      	ldr	r2, [r4, #8]
 800d08e:	7da0      	ldrb	r0, [r4, #22]
 800d090:	2104      	movs	r1, #4
 800d092:	3304      	adds	r3, #4
 800d094:	444a      	add	r2, r9
 800d096:	1bdb      	subs	r3, r3, r7
 800d098:	7561      	strb	r1, [r4, #21]
 800d09a:	60a2      	str	r2, [r4, #8]
 800d09c:	6123      	str	r3, [r4, #16]
 800d09e:	f080 0001 	eor.w	r0, r0, #1
 800d0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a6:	2104      	movs	r1, #4
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fbd3 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d0ae:	b1b0      	cbz	r0, 800d0de <ucdr_deserialize_uint32_t+0xc6>
 800d0b0:	7d23      	ldrb	r3, [r4, #20]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	68a3      	ldr	r3, [r4, #8]
 800d0b6:	d017      	beq.n	800d0e8 <ucdr_deserialize_uint32_t+0xd0>
 800d0b8:	78db      	ldrb	r3, [r3, #3]
 800d0ba:	702b      	strb	r3, [r5, #0]
 800d0bc:	68a3      	ldr	r3, [r4, #8]
 800d0be:	789b      	ldrb	r3, [r3, #2]
 800d0c0:	706b      	strb	r3, [r5, #1]
 800d0c2:	68a3      	ldr	r3, [r4, #8]
 800d0c4:	785b      	ldrb	r3, [r3, #1]
 800d0c6:	70ab      	strb	r3, [r5, #2]
 800d0c8:	68a3      	ldr	r3, [r4, #8]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	70eb      	strb	r3, [r5, #3]
 800d0ce:	68a2      	ldr	r2, [r4, #8]
 800d0d0:	6923      	ldr	r3, [r4, #16]
 800d0d2:	3204      	adds	r2, #4
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	2104      	movs	r1, #4
 800d0d8:	60a2      	str	r2, [r4, #8]
 800d0da:	6123      	str	r3, [r4, #16]
 800d0dc:	7561      	strb	r1, [r4, #21]
 800d0de:	7da0      	ldrb	r0, [r4, #22]
 800d0e0:	f080 0001 	eor.w	r0, r0, #1
 800d0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	e7ef      	b.n	800d0ce <ucdr_deserialize_uint32_t+0xb6>
 800d0ee:	68a2      	ldr	r2, [r4, #8]
 800d0f0:	6923      	ldr	r3, [r4, #16]
 800d0f2:	7da0      	ldrb	r0, [r4, #22]
 800d0f4:	f884 8015 	strb.w	r8, [r4, #21]
 800d0f8:	1bd2      	subs	r2, r2, r7
 800d0fa:	1bdb      	subs	r3, r3, r7
 800d0fc:	60a2      	str	r2, [r4, #8]
 800d0fe:	6123      	str	r3, [r4, #16]
 800d100:	f080 0001 	eor.w	r0, r0, #1
 800d104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d108:	68a3      	ldr	r3, [r4, #8]
 800d10a:	789b      	ldrb	r3, [r3, #2]
 800d10c:	706b      	strb	r3, [r5, #1]
 800d10e:	1cab      	adds	r3, r5, #2
 800d110:	68a2      	ldr	r2, [r4, #8]
 800d112:	7852      	ldrb	r2, [r2, #1]
 800d114:	f803 2b01 	strb.w	r2, [r3], #1
 800d118:	68a2      	ldr	r2, [r4, #8]
 800d11a:	7812      	ldrb	r2, [r2, #0]
 800d11c:	701a      	strb	r2, [r3, #0]
 800d11e:	e7b4      	b.n	800d08a <ucdr_deserialize_uint32_t+0x72>
 800d120:	4631      	mov	r1, r6
 800d122:	463a      	mov	r2, r7
 800d124:	4628      	mov	r0, r5
 800d126:	f009 feb7 	bl	8016e98 <memcpy>
 800d12a:	68a1      	ldr	r1, [r4, #8]
 800d12c:	464a      	mov	r2, r9
 800d12e:	19e8      	adds	r0, r5, r7
 800d130:	f009 feb2 	bl	8016e98 <memcpy>
 800d134:	e7a9      	b.n	800d08a <ucdr_deserialize_uint32_t+0x72>
 800d136:	bf00      	nop

0800d138 <ucdr_deserialize_endian_uint32_t>:
 800d138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d13c:	460e      	mov	r6, r1
 800d13e:	2104      	movs	r1, #4
 800d140:	4604      	mov	r4, r0
 800d142:	4615      	mov	r5, r2
 800d144:	f000 fbda 	bl	800d8fc <ucdr_buffer_alignment>
 800d148:	4601      	mov	r1, r0
 800d14a:	4620      	mov	r0, r4
 800d14c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d150:	f000 fc18 	bl	800d984 <ucdr_advance_buffer>
 800d154:	2104      	movs	r1, #4
 800d156:	4620      	mov	r0, r4
 800d158:	f000 fb70 	bl	800d83c <ucdr_check_buffer_available_for>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d13c      	bne.n	800d1da <ucdr_deserialize_endian_uint32_t+0xa2>
 800d160:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d164:	42bb      	cmp	r3, r7
 800d166:	d933      	bls.n	800d1d0 <ucdr_deserialize_endian_uint32_t+0x98>
 800d168:	eba3 0807 	sub.w	r8, r3, r7
 800d16c:	60a3      	str	r3, [r4, #8]
 800d16e:	6923      	ldr	r3, [r4, #16]
 800d170:	f1c8 0a04 	rsb	sl, r8, #4
 800d174:	4443      	add	r3, r8
 800d176:	6123      	str	r3, [r4, #16]
 800d178:	4651      	mov	r1, sl
 800d17a:	4620      	mov	r0, r4
 800d17c:	f000 fb6a 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d180:	2800      	cmp	r0, #0
 800d182:	d048      	beq.n	800d216 <ucdr_deserialize_endian_uint32_t+0xde>
 800d184:	2e01      	cmp	r6, #1
 800d186:	d061      	beq.n	800d24c <ucdr_deserialize_endian_uint32_t+0x114>
 800d188:	78fb      	ldrb	r3, [r7, #3]
 800d18a:	702b      	strb	r3, [r5, #0]
 800d18c:	f1b8 0f00 	cmp.w	r8, #0
 800d190:	d050      	beq.n	800d234 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d192:	78bb      	ldrb	r3, [r7, #2]
 800d194:	706b      	strb	r3, [r5, #1]
 800d196:	f1b8 0f01 	cmp.w	r8, #1
 800d19a:	f105 0302 	add.w	r3, r5, #2
 800d19e:	d04d      	beq.n	800d23c <ucdr_deserialize_endian_uint32_t+0x104>
 800d1a0:	787b      	ldrb	r3, [r7, #1]
 800d1a2:	70ab      	strb	r3, [r5, #2]
 800d1a4:	f1b8 0f02 	cmp.w	r8, #2
 800d1a8:	f105 0303 	add.w	r3, r5, #3
 800d1ac:	d04a      	beq.n	800d244 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d1ae:	783b      	ldrb	r3, [r7, #0]
 800d1b0:	70eb      	strb	r3, [r5, #3]
 800d1b2:	6923      	ldr	r3, [r4, #16]
 800d1b4:	68a2      	ldr	r2, [r4, #8]
 800d1b6:	7da0      	ldrb	r0, [r4, #22]
 800d1b8:	2104      	movs	r1, #4
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	4452      	add	r2, sl
 800d1be:	eba3 0308 	sub.w	r3, r3, r8
 800d1c2:	7561      	strb	r1, [r4, #21]
 800d1c4:	60a2      	str	r2, [r4, #8]
 800d1c6:	6123      	str	r3, [r4, #16]
 800d1c8:	f080 0001 	eor.w	r0, r0, #1
 800d1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d0:	2104      	movs	r1, #4
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f000 fb3e 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d1d8:	b1a8      	cbz	r0, 800d206 <ucdr_deserialize_endian_uint32_t+0xce>
 800d1da:	2e01      	cmp	r6, #1
 800d1dc:	68a3      	ldr	r3, [r4, #8]
 800d1de:	d017      	beq.n	800d210 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d1e0:	78db      	ldrb	r3, [r3, #3]
 800d1e2:	702b      	strb	r3, [r5, #0]
 800d1e4:	68a3      	ldr	r3, [r4, #8]
 800d1e6:	789b      	ldrb	r3, [r3, #2]
 800d1e8:	706b      	strb	r3, [r5, #1]
 800d1ea:	68a3      	ldr	r3, [r4, #8]
 800d1ec:	785b      	ldrb	r3, [r3, #1]
 800d1ee:	70ab      	strb	r3, [r5, #2]
 800d1f0:	68a3      	ldr	r3, [r4, #8]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	70eb      	strb	r3, [r5, #3]
 800d1f6:	68a2      	ldr	r2, [r4, #8]
 800d1f8:	6923      	ldr	r3, [r4, #16]
 800d1fa:	3204      	adds	r2, #4
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	2104      	movs	r1, #4
 800d200:	60a2      	str	r2, [r4, #8]
 800d202:	6123      	str	r3, [r4, #16]
 800d204:	7561      	strb	r1, [r4, #21]
 800d206:	7da0      	ldrb	r0, [r4, #22]
 800d208:	f080 0001 	eor.w	r0, r0, #1
 800d20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	602b      	str	r3, [r5, #0]
 800d214:	e7ef      	b.n	800d1f6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800d216:	68a2      	ldr	r2, [r4, #8]
 800d218:	6923      	ldr	r3, [r4, #16]
 800d21a:	7da0      	ldrb	r0, [r4, #22]
 800d21c:	f884 9015 	strb.w	r9, [r4, #21]
 800d220:	eba2 0208 	sub.w	r2, r2, r8
 800d224:	eba3 0308 	sub.w	r3, r3, r8
 800d228:	60a2      	str	r2, [r4, #8]
 800d22a:	6123      	str	r3, [r4, #16]
 800d22c:	f080 0001 	eor.w	r0, r0, #1
 800d230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d234:	68a3      	ldr	r3, [r4, #8]
 800d236:	789b      	ldrb	r3, [r3, #2]
 800d238:	706b      	strb	r3, [r5, #1]
 800d23a:	1cab      	adds	r3, r5, #2
 800d23c:	68a2      	ldr	r2, [r4, #8]
 800d23e:	7852      	ldrb	r2, [r2, #1]
 800d240:	f803 2b01 	strb.w	r2, [r3], #1
 800d244:	68a2      	ldr	r2, [r4, #8]
 800d246:	7812      	ldrb	r2, [r2, #0]
 800d248:	701a      	strb	r2, [r3, #0]
 800d24a:	e7b2      	b.n	800d1b2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800d24c:	4639      	mov	r1, r7
 800d24e:	4642      	mov	r2, r8
 800d250:	4628      	mov	r0, r5
 800d252:	f009 fe21 	bl	8016e98 <memcpy>
 800d256:	68a1      	ldr	r1, [r4, #8]
 800d258:	4652      	mov	r2, sl
 800d25a:	eb05 0008 	add.w	r0, r5, r8
 800d25e:	f009 fe1b 	bl	8016e98 <memcpy>
 800d262:	e7a6      	b.n	800d1b2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800d264 <ucdr_serialize_uint64_t>:
 800d264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d268:	2108      	movs	r1, #8
 800d26a:	b082      	sub	sp, #8
 800d26c:	4604      	mov	r4, r0
 800d26e:	e9cd 2300 	strd	r2, r3, [sp]
 800d272:	f000 fb43 	bl	800d8fc <ucdr_buffer_alignment>
 800d276:	4601      	mov	r1, r0
 800d278:	4620      	mov	r0, r4
 800d27a:	7d67      	ldrb	r7, [r4, #21]
 800d27c:	f000 fb82 	bl	800d984 <ucdr_advance_buffer>
 800d280:	2108      	movs	r1, #8
 800d282:	4620      	mov	r0, r4
 800d284:	f000 fada 	bl	800d83c <ucdr_check_buffer_available_for>
 800d288:	2800      	cmp	r0, #0
 800d28a:	d14e      	bne.n	800d32a <ucdr_serialize_uint64_t+0xc6>
 800d28c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d290:	42ab      	cmp	r3, r5
 800d292:	d945      	bls.n	800d320 <ucdr_serialize_uint64_t+0xbc>
 800d294:	1b5e      	subs	r6, r3, r5
 800d296:	60a3      	str	r3, [r4, #8]
 800d298:	6923      	ldr	r3, [r4, #16]
 800d29a:	f1c6 0808 	rsb	r8, r6, #8
 800d29e:	4433      	add	r3, r6
 800d2a0:	6123      	str	r3, [r4, #16]
 800d2a2:	4641      	mov	r1, r8
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f000 fad5 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d074      	beq.n	800d398 <ucdr_serialize_uint64_t+0x134>
 800d2ae:	7d23      	ldrb	r3, [r4, #20]
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	f000 809b 	beq.w	800d3ec <ucdr_serialize_uint64_t+0x188>
 800d2b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2ba:	702b      	strb	r3, [r5, #0]
 800d2bc:	2e00      	cmp	r6, #0
 800d2be:	d078      	beq.n	800d3b2 <ucdr_serialize_uint64_t+0x14e>
 800d2c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2c4:	706b      	strb	r3, [r5, #1]
 800d2c6:	2e01      	cmp	r6, #1
 800d2c8:	d077      	beq.n	800d3ba <ucdr_serialize_uint64_t+0x156>
 800d2ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d2ce:	70ab      	strb	r3, [r5, #2]
 800d2d0:	2e02      	cmp	r6, #2
 800d2d2:	d076      	beq.n	800d3c2 <ucdr_serialize_uint64_t+0x15e>
 800d2d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d2d8:	70eb      	strb	r3, [r5, #3]
 800d2da:	2e03      	cmp	r6, #3
 800d2dc:	d075      	beq.n	800d3ca <ucdr_serialize_uint64_t+0x166>
 800d2de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d2e2:	712b      	strb	r3, [r5, #4]
 800d2e4:	2e04      	cmp	r6, #4
 800d2e6:	d074      	beq.n	800d3d2 <ucdr_serialize_uint64_t+0x16e>
 800d2e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d2ec:	716b      	strb	r3, [r5, #5]
 800d2ee:	2e05      	cmp	r6, #5
 800d2f0:	d073      	beq.n	800d3da <ucdr_serialize_uint64_t+0x176>
 800d2f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d2f6:	71ab      	strb	r3, [r5, #6]
 800d2f8:	2e06      	cmp	r6, #6
 800d2fa:	d072      	beq.n	800d3e2 <ucdr_serialize_uint64_t+0x17e>
 800d2fc:	f89d 3000 	ldrb.w	r3, [sp]
 800d300:	71eb      	strb	r3, [r5, #7]
 800d302:	6923      	ldr	r3, [r4, #16]
 800d304:	68a2      	ldr	r2, [r4, #8]
 800d306:	7da0      	ldrb	r0, [r4, #22]
 800d308:	3308      	adds	r3, #8
 800d30a:	1b9e      	subs	r6, r3, r6
 800d30c:	4442      	add	r2, r8
 800d30e:	2308      	movs	r3, #8
 800d310:	f080 0001 	eor.w	r0, r0, #1
 800d314:	60a2      	str	r2, [r4, #8]
 800d316:	6126      	str	r6, [r4, #16]
 800d318:	7563      	strb	r3, [r4, #21]
 800d31a:	b002      	add	sp, #8
 800d31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d320:	2108      	movs	r1, #8
 800d322:	4620      	mov	r0, r4
 800d324:	f000 fa96 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d328:	b350      	cbz	r0, 800d380 <ucdr_serialize_uint64_t+0x11c>
 800d32a:	7d23      	ldrb	r3, [r4, #20]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d02d      	beq.n	800d38c <ucdr_serialize_uint64_t+0x128>
 800d330:	68a3      	ldr	r3, [r4, #8]
 800d332:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d336:	701a      	strb	r2, [r3, #0]
 800d338:	68a3      	ldr	r3, [r4, #8]
 800d33a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d33e:	705a      	strb	r2, [r3, #1]
 800d340:	68a3      	ldr	r3, [r4, #8]
 800d342:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d346:	709a      	strb	r2, [r3, #2]
 800d348:	68a3      	ldr	r3, [r4, #8]
 800d34a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d34e:	70da      	strb	r2, [r3, #3]
 800d350:	68a3      	ldr	r3, [r4, #8]
 800d352:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d356:	711a      	strb	r2, [r3, #4]
 800d358:	68a3      	ldr	r3, [r4, #8]
 800d35a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d35e:	715a      	strb	r2, [r3, #5]
 800d360:	68a3      	ldr	r3, [r4, #8]
 800d362:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d366:	719a      	strb	r2, [r3, #6]
 800d368:	68a3      	ldr	r3, [r4, #8]
 800d36a:	f89d 2000 	ldrb.w	r2, [sp]
 800d36e:	71da      	strb	r2, [r3, #7]
 800d370:	68a2      	ldr	r2, [r4, #8]
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	3208      	adds	r2, #8
 800d376:	3308      	adds	r3, #8
 800d378:	2108      	movs	r1, #8
 800d37a:	60a2      	str	r2, [r4, #8]
 800d37c:	6123      	str	r3, [r4, #16]
 800d37e:	7561      	strb	r1, [r4, #21]
 800d380:	7da0      	ldrb	r0, [r4, #22]
 800d382:	f080 0001 	eor.w	r0, r0, #1
 800d386:	b002      	add	sp, #8
 800d388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d38c:	466b      	mov	r3, sp
 800d38e:	cb03      	ldmia	r3!, {r0, r1}
 800d390:	68a3      	ldr	r3, [r4, #8]
 800d392:	6018      	str	r0, [r3, #0]
 800d394:	6059      	str	r1, [r3, #4]
 800d396:	e7eb      	b.n	800d370 <ucdr_serialize_uint64_t+0x10c>
 800d398:	68a2      	ldr	r2, [r4, #8]
 800d39a:	6923      	ldr	r3, [r4, #16]
 800d39c:	7da0      	ldrb	r0, [r4, #22]
 800d39e:	7567      	strb	r7, [r4, #21]
 800d3a0:	1b92      	subs	r2, r2, r6
 800d3a2:	1b9b      	subs	r3, r3, r6
 800d3a4:	f080 0001 	eor.w	r0, r0, #1
 800d3a8:	60a2      	str	r2, [r4, #8]
 800d3aa:	6123      	str	r3, [r4, #16]
 800d3ac:	b002      	add	sp, #8
 800d3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b2:	68a3      	ldr	r3, [r4, #8]
 800d3b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d3b8:	701a      	strb	r2, [r3, #0]
 800d3ba:	68a3      	ldr	r3, [r4, #8]
 800d3bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d3c0:	701a      	strb	r2, [r3, #0]
 800d3c2:	68a3      	ldr	r3, [r4, #8]
 800d3c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d3c8:	701a      	strb	r2, [r3, #0]
 800d3ca:	68a3      	ldr	r3, [r4, #8]
 800d3cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d3d0:	701a      	strb	r2, [r3, #0]
 800d3d2:	68a3      	ldr	r3, [r4, #8]
 800d3d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d3d8:	701a      	strb	r2, [r3, #0]
 800d3da:	68a3      	ldr	r3, [r4, #8]
 800d3dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d3e0:	701a      	strb	r2, [r3, #0]
 800d3e2:	68a3      	ldr	r3, [r4, #8]
 800d3e4:	f89d 2000 	ldrb.w	r2, [sp]
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	e78a      	b.n	800d302 <ucdr_serialize_uint64_t+0x9e>
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	466d      	mov	r5, sp
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	4632      	mov	r2, r6
 800d3f4:	f009 fd50 	bl	8016e98 <memcpy>
 800d3f8:	68a0      	ldr	r0, [r4, #8]
 800d3fa:	4642      	mov	r2, r8
 800d3fc:	19a9      	adds	r1, r5, r6
 800d3fe:	f009 fd4b 	bl	8016e98 <memcpy>
 800d402:	e77e      	b.n	800d302 <ucdr_serialize_uint64_t+0x9e>

0800d404 <ucdr_serialize_int16_t>:
 800d404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d408:	b082      	sub	sp, #8
 800d40a:	460b      	mov	r3, r1
 800d40c:	2102      	movs	r1, #2
 800d40e:	4604      	mov	r4, r0
 800d410:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d414:	f000 fa72 	bl	800d8fc <ucdr_buffer_alignment>
 800d418:	4601      	mov	r1, r0
 800d41a:	4620      	mov	r0, r4
 800d41c:	7d67      	ldrb	r7, [r4, #21]
 800d41e:	f000 fab1 	bl	800d984 <ucdr_advance_buffer>
 800d422:	2102      	movs	r1, #2
 800d424:	4620      	mov	r0, r4
 800d426:	f000 fa09 	bl	800d83c <ucdr_check_buffer_available_for>
 800d42a:	bb78      	cbnz	r0, 800d48c <ucdr_serialize_int16_t+0x88>
 800d42c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d430:	42ab      	cmp	r3, r5
 800d432:	d926      	bls.n	800d482 <ucdr_serialize_int16_t+0x7e>
 800d434:	1b5e      	subs	r6, r3, r5
 800d436:	60a3      	str	r3, [r4, #8]
 800d438:	6923      	ldr	r3, [r4, #16]
 800d43a:	f1c6 0802 	rsb	r8, r6, #2
 800d43e:	4433      	add	r3, r6
 800d440:	6123      	str	r3, [r4, #16]
 800d442:	4641      	mov	r1, r8
 800d444:	4620      	mov	r0, r4
 800d446:	f000 fa05 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d03b      	beq.n	800d4c6 <ucdr_serialize_int16_t+0xc2>
 800d44e:	7d23      	ldrb	r3, [r4, #20]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d04a      	beq.n	800d4ea <ucdr_serialize_int16_t+0xe6>
 800d454:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d458:	702b      	strb	r3, [r5, #0]
 800d45a:	2e00      	cmp	r6, #0
 800d45c:	d040      	beq.n	800d4e0 <ucdr_serialize_int16_t+0xdc>
 800d45e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d462:	706b      	strb	r3, [r5, #1]
 800d464:	6923      	ldr	r3, [r4, #16]
 800d466:	68a2      	ldr	r2, [r4, #8]
 800d468:	7da0      	ldrb	r0, [r4, #22]
 800d46a:	3302      	adds	r3, #2
 800d46c:	1b9e      	subs	r6, r3, r6
 800d46e:	4442      	add	r2, r8
 800d470:	2302      	movs	r3, #2
 800d472:	f080 0001 	eor.w	r0, r0, #1
 800d476:	60a2      	str	r2, [r4, #8]
 800d478:	6126      	str	r6, [r4, #16]
 800d47a:	7563      	strb	r3, [r4, #21]
 800d47c:	b002      	add	sp, #8
 800d47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d482:	2102      	movs	r1, #2
 800d484:	4620      	mov	r0, r4
 800d486:	f000 f9e5 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d48a:	b190      	cbz	r0, 800d4b2 <ucdr_serialize_int16_t+0xae>
 800d48c:	7d23      	ldrb	r3, [r4, #20]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	68a3      	ldr	r3, [r4, #8]
 800d492:	d014      	beq.n	800d4be <ucdr_serialize_int16_t+0xba>
 800d494:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d498:	701a      	strb	r2, [r3, #0]
 800d49a:	68a3      	ldr	r3, [r4, #8]
 800d49c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4a0:	705a      	strb	r2, [r3, #1]
 800d4a2:	68a2      	ldr	r2, [r4, #8]
 800d4a4:	6923      	ldr	r3, [r4, #16]
 800d4a6:	3202      	adds	r2, #2
 800d4a8:	3302      	adds	r3, #2
 800d4aa:	2102      	movs	r1, #2
 800d4ac:	60a2      	str	r2, [r4, #8]
 800d4ae:	6123      	str	r3, [r4, #16]
 800d4b0:	7561      	strb	r1, [r4, #21]
 800d4b2:	7da0      	ldrb	r0, [r4, #22]
 800d4b4:	f080 0001 	eor.w	r0, r0, #1
 800d4b8:	b002      	add	sp, #8
 800d4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d4c2:	801a      	strh	r2, [r3, #0]
 800d4c4:	e7ed      	b.n	800d4a2 <ucdr_serialize_int16_t+0x9e>
 800d4c6:	68a2      	ldr	r2, [r4, #8]
 800d4c8:	6923      	ldr	r3, [r4, #16]
 800d4ca:	7da0      	ldrb	r0, [r4, #22]
 800d4cc:	7567      	strb	r7, [r4, #21]
 800d4ce:	1b92      	subs	r2, r2, r6
 800d4d0:	1b9b      	subs	r3, r3, r6
 800d4d2:	f080 0001 	eor.w	r0, r0, #1
 800d4d6:	60a2      	str	r2, [r4, #8]
 800d4d8:	6123      	str	r3, [r4, #16]
 800d4da:	b002      	add	sp, #8
 800d4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e0:	68a3      	ldr	r3, [r4, #8]
 800d4e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4e6:	701a      	strb	r2, [r3, #0]
 800d4e8:	e7bc      	b.n	800d464 <ucdr_serialize_int16_t+0x60>
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	f10d 0506 	add.w	r5, sp, #6
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	4632      	mov	r2, r6
 800d4f4:	f009 fcd0 	bl	8016e98 <memcpy>
 800d4f8:	68a0      	ldr	r0, [r4, #8]
 800d4fa:	4642      	mov	r2, r8
 800d4fc:	19a9      	adds	r1, r5, r6
 800d4fe:	f009 fccb 	bl	8016e98 <memcpy>
 800d502:	e7af      	b.n	800d464 <ucdr_serialize_int16_t+0x60>

0800d504 <ucdr_deserialize_int16_t>:
 800d504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d508:	460d      	mov	r5, r1
 800d50a:	2102      	movs	r1, #2
 800d50c:	4604      	mov	r4, r0
 800d50e:	f000 f9f5 	bl	800d8fc <ucdr_buffer_alignment>
 800d512:	4601      	mov	r1, r0
 800d514:	4620      	mov	r0, r4
 800d516:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d51a:	f000 fa33 	bl	800d984 <ucdr_advance_buffer>
 800d51e:	2102      	movs	r1, #2
 800d520:	4620      	mov	r0, r4
 800d522:	f000 f98b 	bl	800d83c <ucdr_check_buffer_available_for>
 800d526:	bb60      	cbnz	r0, 800d582 <ucdr_deserialize_int16_t+0x7e>
 800d528:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d52c:	42be      	cmp	r6, r7
 800d52e:	d923      	bls.n	800d578 <ucdr_deserialize_int16_t+0x74>
 800d530:	6923      	ldr	r3, [r4, #16]
 800d532:	60a6      	str	r6, [r4, #8]
 800d534:	1bf6      	subs	r6, r6, r7
 800d536:	4433      	add	r3, r6
 800d538:	f1c6 0902 	rsb	r9, r6, #2
 800d53c:	6123      	str	r3, [r4, #16]
 800d53e:	4649      	mov	r1, r9
 800d540:	4620      	mov	r0, r4
 800d542:	f000 f987 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d546:	2800      	cmp	r0, #0
 800d548:	d034      	beq.n	800d5b4 <ucdr_deserialize_int16_t+0xb0>
 800d54a:	7d23      	ldrb	r3, [r4, #20]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d042      	beq.n	800d5d6 <ucdr_deserialize_int16_t+0xd2>
 800d550:	787b      	ldrb	r3, [r7, #1]
 800d552:	702b      	strb	r3, [r5, #0]
 800d554:	2e00      	cmp	r6, #0
 800d556:	d03a      	beq.n	800d5ce <ucdr_deserialize_int16_t+0xca>
 800d558:	783b      	ldrb	r3, [r7, #0]
 800d55a:	706b      	strb	r3, [r5, #1]
 800d55c:	6923      	ldr	r3, [r4, #16]
 800d55e:	68a2      	ldr	r2, [r4, #8]
 800d560:	7da0      	ldrb	r0, [r4, #22]
 800d562:	2102      	movs	r1, #2
 800d564:	3302      	adds	r3, #2
 800d566:	444a      	add	r2, r9
 800d568:	1b9b      	subs	r3, r3, r6
 800d56a:	7561      	strb	r1, [r4, #21]
 800d56c:	60a2      	str	r2, [r4, #8]
 800d56e:	6123      	str	r3, [r4, #16]
 800d570:	f080 0001 	eor.w	r0, r0, #1
 800d574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d578:	2102      	movs	r1, #2
 800d57a:	4620      	mov	r0, r4
 800d57c:	f000 f96a 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d580:	b180      	cbz	r0, 800d5a4 <ucdr_deserialize_int16_t+0xa0>
 800d582:	7d23      	ldrb	r3, [r4, #20]
 800d584:	2b01      	cmp	r3, #1
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	d011      	beq.n	800d5ae <ucdr_deserialize_int16_t+0xaa>
 800d58a:	785b      	ldrb	r3, [r3, #1]
 800d58c:	702b      	strb	r3, [r5, #0]
 800d58e:	68a3      	ldr	r3, [r4, #8]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	706b      	strb	r3, [r5, #1]
 800d594:	68a2      	ldr	r2, [r4, #8]
 800d596:	6923      	ldr	r3, [r4, #16]
 800d598:	3202      	adds	r2, #2
 800d59a:	3302      	adds	r3, #2
 800d59c:	2102      	movs	r1, #2
 800d59e:	60a2      	str	r2, [r4, #8]
 800d5a0:	6123      	str	r3, [r4, #16]
 800d5a2:	7561      	strb	r1, [r4, #21]
 800d5a4:	7da0      	ldrb	r0, [r4, #22]
 800d5a6:	f080 0001 	eor.w	r0, r0, #1
 800d5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ae:	881b      	ldrh	r3, [r3, #0]
 800d5b0:	802b      	strh	r3, [r5, #0]
 800d5b2:	e7ef      	b.n	800d594 <ucdr_deserialize_int16_t+0x90>
 800d5b4:	68a2      	ldr	r2, [r4, #8]
 800d5b6:	6923      	ldr	r3, [r4, #16]
 800d5b8:	7da0      	ldrb	r0, [r4, #22]
 800d5ba:	f884 8015 	strb.w	r8, [r4, #21]
 800d5be:	1b92      	subs	r2, r2, r6
 800d5c0:	1b9b      	subs	r3, r3, r6
 800d5c2:	60a2      	str	r2, [r4, #8]
 800d5c4:	6123      	str	r3, [r4, #16]
 800d5c6:	f080 0001 	eor.w	r0, r0, #1
 800d5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ce:	68a3      	ldr	r3, [r4, #8]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	706b      	strb	r3, [r5, #1]
 800d5d4:	e7c2      	b.n	800d55c <ucdr_deserialize_int16_t+0x58>
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	4632      	mov	r2, r6
 800d5da:	4628      	mov	r0, r5
 800d5dc:	f009 fc5c 	bl	8016e98 <memcpy>
 800d5e0:	68a1      	ldr	r1, [r4, #8]
 800d5e2:	464a      	mov	r2, r9
 800d5e4:	19a8      	adds	r0, r5, r6
 800d5e6:	f009 fc57 	bl	8016e98 <memcpy>
 800d5ea:	e7b7      	b.n	800d55c <ucdr_deserialize_int16_t+0x58>

0800d5ec <ucdr_serialize_int32_t>:
 800d5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f0:	b082      	sub	sp, #8
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	9101      	str	r1, [sp, #4]
 800d5f6:	2104      	movs	r1, #4
 800d5f8:	f000 f980 	bl	800d8fc <ucdr_buffer_alignment>
 800d5fc:	4601      	mov	r1, r0
 800d5fe:	4620      	mov	r0, r4
 800d600:	7d67      	ldrb	r7, [r4, #21]
 800d602:	f000 f9bf 	bl	800d984 <ucdr_advance_buffer>
 800d606:	2104      	movs	r1, #4
 800d608:	4620      	mov	r0, r4
 800d60a:	f000 f917 	bl	800d83c <ucdr_check_buffer_available_for>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d139      	bne.n	800d686 <ucdr_serialize_int32_t+0x9a>
 800d612:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d616:	42ab      	cmp	r3, r5
 800d618:	d930      	bls.n	800d67c <ucdr_serialize_int32_t+0x90>
 800d61a:	1b5e      	subs	r6, r3, r5
 800d61c:	60a3      	str	r3, [r4, #8]
 800d61e:	6923      	ldr	r3, [r4, #16]
 800d620:	f1c6 0804 	rsb	r8, r6, #4
 800d624:	4433      	add	r3, r6
 800d626:	6123      	str	r3, [r4, #16]
 800d628:	4641      	mov	r1, r8
 800d62a:	4620      	mov	r0, r4
 800d62c:	f000 f912 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d630:	2800      	cmp	r0, #0
 800d632:	d04c      	beq.n	800d6ce <ucdr_serialize_int32_t+0xe2>
 800d634:	7d23      	ldrb	r3, [r4, #20]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d063      	beq.n	800d702 <ucdr_serialize_int32_t+0x116>
 800d63a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d63e:	702b      	strb	r3, [r5, #0]
 800d640:	2e00      	cmp	r6, #0
 800d642:	d051      	beq.n	800d6e8 <ucdr_serialize_int32_t+0xfc>
 800d644:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d648:	706b      	strb	r3, [r5, #1]
 800d64a:	2e01      	cmp	r6, #1
 800d64c:	d050      	beq.n	800d6f0 <ucdr_serialize_int32_t+0x104>
 800d64e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d652:	70ab      	strb	r3, [r5, #2]
 800d654:	2e02      	cmp	r6, #2
 800d656:	d04f      	beq.n	800d6f8 <ucdr_serialize_int32_t+0x10c>
 800d658:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d65c:	70eb      	strb	r3, [r5, #3]
 800d65e:	6923      	ldr	r3, [r4, #16]
 800d660:	68a2      	ldr	r2, [r4, #8]
 800d662:	7da0      	ldrb	r0, [r4, #22]
 800d664:	3304      	adds	r3, #4
 800d666:	1b9e      	subs	r6, r3, r6
 800d668:	4442      	add	r2, r8
 800d66a:	2304      	movs	r3, #4
 800d66c:	f080 0001 	eor.w	r0, r0, #1
 800d670:	60a2      	str	r2, [r4, #8]
 800d672:	6126      	str	r6, [r4, #16]
 800d674:	7563      	strb	r3, [r4, #21]
 800d676:	b002      	add	sp, #8
 800d678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d67c:	2104      	movs	r1, #4
 800d67e:	4620      	mov	r0, r4
 800d680:	f000 f8e8 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d684:	b1d0      	cbz	r0, 800d6bc <ucdr_serialize_int32_t+0xd0>
 800d686:	7d23      	ldrb	r3, [r4, #20]
 800d688:	2b01      	cmp	r3, #1
 800d68a:	68a3      	ldr	r3, [r4, #8]
 800d68c:	d01c      	beq.n	800d6c8 <ucdr_serialize_int32_t+0xdc>
 800d68e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d692:	701a      	strb	r2, [r3, #0]
 800d694:	68a3      	ldr	r3, [r4, #8]
 800d696:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d69a:	705a      	strb	r2, [r3, #1]
 800d69c:	68a3      	ldr	r3, [r4, #8]
 800d69e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d6a2:	709a      	strb	r2, [r3, #2]
 800d6a4:	68a3      	ldr	r3, [r4, #8]
 800d6a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6aa:	70da      	strb	r2, [r3, #3]
 800d6ac:	68a2      	ldr	r2, [r4, #8]
 800d6ae:	6923      	ldr	r3, [r4, #16]
 800d6b0:	3204      	adds	r2, #4
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	2104      	movs	r1, #4
 800d6b6:	60a2      	str	r2, [r4, #8]
 800d6b8:	6123      	str	r3, [r4, #16]
 800d6ba:	7561      	strb	r1, [r4, #21]
 800d6bc:	7da0      	ldrb	r0, [r4, #22]
 800d6be:	f080 0001 	eor.w	r0, r0, #1
 800d6c2:	b002      	add	sp, #8
 800d6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c8:	9a01      	ldr	r2, [sp, #4]
 800d6ca:	601a      	str	r2, [r3, #0]
 800d6cc:	e7ee      	b.n	800d6ac <ucdr_serialize_int32_t+0xc0>
 800d6ce:	68a2      	ldr	r2, [r4, #8]
 800d6d0:	6923      	ldr	r3, [r4, #16]
 800d6d2:	7da0      	ldrb	r0, [r4, #22]
 800d6d4:	7567      	strb	r7, [r4, #21]
 800d6d6:	1b92      	subs	r2, r2, r6
 800d6d8:	1b9b      	subs	r3, r3, r6
 800d6da:	f080 0001 	eor.w	r0, r0, #1
 800d6de:	60a2      	str	r2, [r4, #8]
 800d6e0:	6123      	str	r3, [r4, #16]
 800d6e2:	b002      	add	sp, #8
 800d6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e8:	68a3      	ldr	r3, [r4, #8]
 800d6ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	68a3      	ldr	r3, [r4, #8]
 800d6f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d6f6:	701a      	strb	r2, [r3, #0]
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6fe:	701a      	strb	r2, [r3, #0]
 800d700:	e7ad      	b.n	800d65e <ucdr_serialize_int32_t+0x72>
 800d702:	4628      	mov	r0, r5
 800d704:	ad01      	add	r5, sp, #4
 800d706:	4629      	mov	r1, r5
 800d708:	4632      	mov	r2, r6
 800d70a:	f009 fbc5 	bl	8016e98 <memcpy>
 800d70e:	68a0      	ldr	r0, [r4, #8]
 800d710:	4642      	mov	r2, r8
 800d712:	19a9      	adds	r1, r5, r6
 800d714:	f009 fbc0 	bl	8016e98 <memcpy>
 800d718:	e7a1      	b.n	800d65e <ucdr_serialize_int32_t+0x72>
 800d71a:	bf00      	nop

0800d71c <ucdr_deserialize_int32_t>:
 800d71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d720:	460d      	mov	r5, r1
 800d722:	2104      	movs	r1, #4
 800d724:	4604      	mov	r4, r0
 800d726:	f000 f8e9 	bl	800d8fc <ucdr_buffer_alignment>
 800d72a:	4601      	mov	r1, r0
 800d72c:	4620      	mov	r0, r4
 800d72e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d732:	f000 f927 	bl	800d984 <ucdr_advance_buffer>
 800d736:	2104      	movs	r1, #4
 800d738:	4620      	mov	r0, r4
 800d73a:	f000 f87f 	bl	800d83c <ucdr_check_buffer_available_for>
 800d73e:	2800      	cmp	r0, #0
 800d740:	d138      	bne.n	800d7b4 <ucdr_deserialize_int32_t+0x98>
 800d742:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d746:	42b7      	cmp	r7, r6
 800d748:	d92f      	bls.n	800d7aa <ucdr_deserialize_int32_t+0x8e>
 800d74a:	6923      	ldr	r3, [r4, #16]
 800d74c:	60a7      	str	r7, [r4, #8]
 800d74e:	1bbf      	subs	r7, r7, r6
 800d750:	443b      	add	r3, r7
 800d752:	f1c7 0904 	rsb	r9, r7, #4
 800d756:	6123      	str	r3, [r4, #16]
 800d758:	4649      	mov	r1, r9
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 f87a 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d760:	2800      	cmp	r0, #0
 800d762:	d046      	beq.n	800d7f2 <ucdr_deserialize_int32_t+0xd6>
 800d764:	7d23      	ldrb	r3, [r4, #20]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d05c      	beq.n	800d824 <ucdr_deserialize_int32_t+0x108>
 800d76a:	78f3      	ldrb	r3, [r6, #3]
 800d76c:	702b      	strb	r3, [r5, #0]
 800d76e:	2f00      	cmp	r7, #0
 800d770:	d04c      	beq.n	800d80c <ucdr_deserialize_int32_t+0xf0>
 800d772:	78b3      	ldrb	r3, [r6, #2]
 800d774:	706b      	strb	r3, [r5, #1]
 800d776:	2f01      	cmp	r7, #1
 800d778:	f105 0302 	add.w	r3, r5, #2
 800d77c:	d04a      	beq.n	800d814 <ucdr_deserialize_int32_t+0xf8>
 800d77e:	7873      	ldrb	r3, [r6, #1]
 800d780:	70ab      	strb	r3, [r5, #2]
 800d782:	2f02      	cmp	r7, #2
 800d784:	f105 0303 	add.w	r3, r5, #3
 800d788:	d048      	beq.n	800d81c <ucdr_deserialize_int32_t+0x100>
 800d78a:	7833      	ldrb	r3, [r6, #0]
 800d78c:	70eb      	strb	r3, [r5, #3]
 800d78e:	6923      	ldr	r3, [r4, #16]
 800d790:	68a2      	ldr	r2, [r4, #8]
 800d792:	7da0      	ldrb	r0, [r4, #22]
 800d794:	2104      	movs	r1, #4
 800d796:	3304      	adds	r3, #4
 800d798:	444a      	add	r2, r9
 800d79a:	1bdb      	subs	r3, r3, r7
 800d79c:	7561      	strb	r1, [r4, #21]
 800d79e:	60a2      	str	r2, [r4, #8]
 800d7a0:	6123      	str	r3, [r4, #16]
 800d7a2:	f080 0001 	eor.w	r0, r0, #1
 800d7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7aa:	2104      	movs	r1, #4
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f000 f851 	bl	800d854 <ucdr_check_final_buffer_behavior>
 800d7b2:	b1b0      	cbz	r0, 800d7e2 <ucdr_deserialize_int32_t+0xc6>
 800d7b4:	7d23      	ldrb	r3, [r4, #20]
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	68a3      	ldr	r3, [r4, #8]
 800d7ba:	d017      	beq.n	800d7ec <ucdr_deserialize_int32_t+0xd0>
 800d7bc:	78db      	ldrb	r3, [r3, #3]
 800d7be:	702b      	strb	r3, [r5, #0]
 800d7c0:	68a3      	ldr	r3, [r4, #8]
 800d7c2:	789b      	ldrb	r3, [r3, #2]
 800d7c4:	706b      	strb	r3, [r5, #1]
 800d7c6:	68a3      	ldr	r3, [r4, #8]
 800d7c8:	785b      	ldrb	r3, [r3, #1]
 800d7ca:	70ab      	strb	r3, [r5, #2]
 800d7cc:	68a3      	ldr	r3, [r4, #8]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	70eb      	strb	r3, [r5, #3]
 800d7d2:	68a2      	ldr	r2, [r4, #8]
 800d7d4:	6923      	ldr	r3, [r4, #16]
 800d7d6:	3204      	adds	r2, #4
 800d7d8:	3304      	adds	r3, #4
 800d7da:	2104      	movs	r1, #4
 800d7dc:	60a2      	str	r2, [r4, #8]
 800d7de:	6123      	str	r3, [r4, #16]
 800d7e0:	7561      	strb	r1, [r4, #21]
 800d7e2:	7da0      	ldrb	r0, [r4, #22]
 800d7e4:	f080 0001 	eor.w	r0, r0, #1
 800d7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	602b      	str	r3, [r5, #0]
 800d7f0:	e7ef      	b.n	800d7d2 <ucdr_deserialize_int32_t+0xb6>
 800d7f2:	68a2      	ldr	r2, [r4, #8]
 800d7f4:	6923      	ldr	r3, [r4, #16]
 800d7f6:	7da0      	ldrb	r0, [r4, #22]
 800d7f8:	f884 8015 	strb.w	r8, [r4, #21]
 800d7fc:	1bd2      	subs	r2, r2, r7
 800d7fe:	1bdb      	subs	r3, r3, r7
 800d800:	60a2      	str	r2, [r4, #8]
 800d802:	6123      	str	r3, [r4, #16]
 800d804:	f080 0001 	eor.w	r0, r0, #1
 800d808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d80c:	68a3      	ldr	r3, [r4, #8]
 800d80e:	789b      	ldrb	r3, [r3, #2]
 800d810:	706b      	strb	r3, [r5, #1]
 800d812:	1cab      	adds	r3, r5, #2
 800d814:	68a2      	ldr	r2, [r4, #8]
 800d816:	7852      	ldrb	r2, [r2, #1]
 800d818:	f803 2b01 	strb.w	r2, [r3], #1
 800d81c:	68a2      	ldr	r2, [r4, #8]
 800d81e:	7812      	ldrb	r2, [r2, #0]
 800d820:	701a      	strb	r2, [r3, #0]
 800d822:	e7b4      	b.n	800d78e <ucdr_deserialize_int32_t+0x72>
 800d824:	4631      	mov	r1, r6
 800d826:	463a      	mov	r2, r7
 800d828:	4628      	mov	r0, r5
 800d82a:	f009 fb35 	bl	8016e98 <memcpy>
 800d82e:	68a1      	ldr	r1, [r4, #8]
 800d830:	464a      	mov	r2, r9
 800d832:	19e8      	adds	r0, r5, r7
 800d834:	f009 fb30 	bl	8016e98 <memcpy>
 800d838:	e7a9      	b.n	800d78e <ucdr_deserialize_int32_t+0x72>
 800d83a:	bf00      	nop

0800d83c <ucdr_check_buffer_available_for>:
 800d83c:	7d83      	ldrb	r3, [r0, #22]
 800d83e:	b93b      	cbnz	r3, 800d850 <ucdr_check_buffer_available_for+0x14>
 800d840:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d844:	4419      	add	r1, r3
 800d846:	4288      	cmp	r0, r1
 800d848:	bf34      	ite	cc
 800d84a:	2000      	movcc	r0, #0
 800d84c:	2001      	movcs	r0, #1
 800d84e:	4770      	bx	lr
 800d850:	2000      	movs	r0, #0
 800d852:	4770      	bx	lr

0800d854 <ucdr_check_final_buffer_behavior>:
 800d854:	7d83      	ldrb	r3, [r0, #22]
 800d856:	b943      	cbnz	r3, 800d86a <ucdr_check_final_buffer_behavior+0x16>
 800d858:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d85c:	4291      	cmp	r1, r2
 800d85e:	b510      	push	{r4, lr}
 800d860:	4604      	mov	r4, r0
 800d862:	d205      	bcs.n	800d870 <ucdr_check_final_buffer_behavior+0x1c>
 800d864:	2301      	movs	r3, #1
 800d866:	4618      	mov	r0, r3
 800d868:	bd10      	pop	{r4, pc}
 800d86a:	2300      	movs	r3, #0
 800d86c:	4618      	mov	r0, r3
 800d86e:	4770      	bx	lr
 800d870:	6982      	ldr	r2, [r0, #24]
 800d872:	b13a      	cbz	r2, 800d884 <ucdr_check_final_buffer_behavior+0x30>
 800d874:	69c1      	ldr	r1, [r0, #28]
 800d876:	4790      	blx	r2
 800d878:	f080 0301 	eor.w	r3, r0, #1
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	75a0      	strb	r0, [r4, #22]
 800d880:	4618      	mov	r0, r3
 800d882:	bd10      	pop	{r4, pc}
 800d884:	2001      	movs	r0, #1
 800d886:	75a0      	strb	r0, [r4, #22]
 800d888:	e7fa      	b.n	800d880 <ucdr_check_final_buffer_behavior+0x2c>
 800d88a:	bf00      	nop

0800d88c <ucdr_set_on_full_buffer_callback>:
 800d88c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop

0800d894 <ucdr_init_buffer_origin_offset_endian>:
 800d894:	b410      	push	{r4}
 800d896:	9c01      	ldr	r4, [sp, #4]
 800d898:	6001      	str	r1, [r0, #0]
 800d89a:	440a      	add	r2, r1
 800d89c:	6042      	str	r2, [r0, #4]
 800d89e:	190a      	adds	r2, r1, r4
 800d8a0:	441c      	add	r4, r3
 800d8a2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d8a6:	6082      	str	r2, [r0, #8]
 800d8a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d8ac:	7503      	strb	r3, [r0, #20]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d8b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8b8:	7542      	strb	r2, [r0, #21]
 800d8ba:	7582      	strb	r2, [r0, #22]
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop

0800d8c0 <ucdr_init_buffer_origin_offset>:
 800d8c0:	b510      	push	{r4, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	9c04      	ldr	r4, [sp, #16]
 800d8c6:	9400      	str	r4, [sp, #0]
 800d8c8:	2401      	movs	r4, #1
 800d8ca:	9401      	str	r4, [sp, #4]
 800d8cc:	f7ff ffe2 	bl	800d894 <ucdr_init_buffer_origin_offset_endian>
 800d8d0:	b002      	add	sp, #8
 800d8d2:	bd10      	pop	{r4, pc}

0800d8d4 <ucdr_init_buffer_origin>:
 800d8d4:	b510      	push	{r4, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	2400      	movs	r4, #0
 800d8da:	9400      	str	r4, [sp, #0]
 800d8dc:	f7ff fff0 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 800d8e0:	b002      	add	sp, #8
 800d8e2:	bd10      	pop	{r4, pc}

0800d8e4 <ucdr_init_buffer>:
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	f7ff bff5 	b.w	800d8d4 <ucdr_init_buffer_origin>
 800d8ea:	bf00      	nop

0800d8ec <ucdr_alignment>:
 800d8ec:	fbb0 f3f1 	udiv	r3, r0, r1
 800d8f0:	fb03 0011 	mls	r0, r3, r1, r0
 800d8f4:	1a08      	subs	r0, r1, r0
 800d8f6:	3901      	subs	r1, #1
 800d8f8:	4008      	ands	r0, r1
 800d8fa:	4770      	bx	lr

0800d8fc <ucdr_buffer_alignment>:
 800d8fc:	7d43      	ldrb	r3, [r0, #21]
 800d8fe:	428b      	cmp	r3, r1
 800d900:	d208      	bcs.n	800d914 <ucdr_buffer_alignment+0x18>
 800d902:	6900      	ldr	r0, [r0, #16]
 800d904:	fbb0 f3f1 	udiv	r3, r0, r1
 800d908:	fb01 0013 	mls	r0, r1, r3, r0
 800d90c:	1a08      	subs	r0, r1, r0
 800d90e:	3901      	subs	r1, #1
 800d910:	4008      	ands	r0, r1
 800d912:	4770      	bx	lr
 800d914:	2000      	movs	r0, #0
 800d916:	4770      	bx	lr

0800d918 <ucdr_align_to>:
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	4604      	mov	r4, r0
 800d91c:	460d      	mov	r5, r1
 800d91e:	f7ff ffed 	bl	800d8fc <ucdr_buffer_alignment>
 800d922:	68a3      	ldr	r3, [r4, #8]
 800d924:	6921      	ldr	r1, [r4, #16]
 800d926:	7565      	strb	r5, [r4, #21]
 800d928:	181a      	adds	r2, r3, r0
 800d92a:	6863      	ldr	r3, [r4, #4]
 800d92c:	4293      	cmp	r3, r2
 800d92e:	4408      	add	r0, r1
 800d930:	bf28      	it	cs
 800d932:	4613      	movcs	r3, r2
 800d934:	6120      	str	r0, [r4, #16]
 800d936:	60a3      	str	r3, [r4, #8]
 800d938:	bd38      	pop	{r3, r4, r5, pc}
 800d93a:	bf00      	nop

0800d93c <ucdr_buffer_length>:
 800d93c:	6882      	ldr	r2, [r0, #8]
 800d93e:	6800      	ldr	r0, [r0, #0]
 800d940:	1a10      	subs	r0, r2, r0
 800d942:	4770      	bx	lr

0800d944 <ucdr_buffer_remaining>:
 800d944:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d948:	1a10      	subs	r0, r2, r0
 800d94a:	4770      	bx	lr

0800d94c <ucdr_check_final_buffer_behavior_array>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	7d83      	ldrb	r3, [r0, #22]
 800d950:	b963      	cbnz	r3, 800d96c <ucdr_check_final_buffer_behavior_array+0x20>
 800d952:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d956:	429a      	cmp	r2, r3
 800d958:	4604      	mov	r4, r0
 800d95a:	460d      	mov	r5, r1
 800d95c:	d308      	bcc.n	800d970 <ucdr_check_final_buffer_behavior_array+0x24>
 800d95e:	b139      	cbz	r1, 800d970 <ucdr_check_final_buffer_behavior_array+0x24>
 800d960:	6983      	ldr	r3, [r0, #24]
 800d962:	b163      	cbz	r3, 800d97e <ucdr_check_final_buffer_behavior_array+0x32>
 800d964:	69c1      	ldr	r1, [r0, #28]
 800d966:	4798      	blx	r3
 800d968:	75a0      	strb	r0, [r4, #22]
 800d96a:	b108      	cbz	r0, 800d970 <ucdr_check_final_buffer_behavior_array+0x24>
 800d96c:	2000      	movs	r0, #0
 800d96e:	bd38      	pop	{r3, r4, r5, pc}
 800d970:	4620      	mov	r0, r4
 800d972:	f7ff ffe7 	bl	800d944 <ucdr_buffer_remaining>
 800d976:	42a8      	cmp	r0, r5
 800d978:	bf28      	it	cs
 800d97a:	4628      	movcs	r0, r5
 800d97c:	bd38      	pop	{r3, r4, r5, pc}
 800d97e:	2301      	movs	r3, #1
 800d980:	7583      	strb	r3, [r0, #22]
 800d982:	e7f3      	b.n	800d96c <ucdr_check_final_buffer_behavior_array+0x20>

0800d984 <ucdr_advance_buffer>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	4604      	mov	r4, r0
 800d988:	460d      	mov	r5, r1
 800d98a:	f7ff ff57 	bl	800d83c <ucdr_check_buffer_available_for>
 800d98e:	b178      	cbz	r0, 800d9b0 <ucdr_advance_buffer+0x2c>
 800d990:	6923      	ldr	r3, [r4, #16]
 800d992:	68a2      	ldr	r2, [r4, #8]
 800d994:	442b      	add	r3, r5
 800d996:	6123      	str	r3, [r4, #16]
 800d998:	2301      	movs	r3, #1
 800d99a:	442a      	add	r2, r5
 800d99c:	7563      	strb	r3, [r4, #21]
 800d99e:	60a2      	str	r2, [r4, #8]
 800d9a0:	bd38      	pop	{r3, r4, r5, pc}
 800d9a2:	68a2      	ldr	r2, [r4, #8]
 800d9a4:	6923      	ldr	r3, [r4, #16]
 800d9a6:	4402      	add	r2, r0
 800d9a8:	4403      	add	r3, r0
 800d9aa:	1a2d      	subs	r5, r5, r0
 800d9ac:	60a2      	str	r2, [r4, #8]
 800d9ae:	6123      	str	r3, [r4, #16]
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f7ff ffc9 	bl	800d94c <ucdr_check_final_buffer_behavior_array>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d1f1      	bne.n	800d9a2 <ucdr_advance_buffer+0x1e>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	7563      	strb	r3, [r4, #21]
 800d9c2:	bd38      	pop	{r3, r4, r5, pc}

0800d9c4 <uxr_buffer_delete_entity>:
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	b08e      	sub	sp, #56	; 0x38
 800d9ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d9ce:	2303      	movs	r3, #3
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	2204      	movs	r2, #4
 800d9d4:	ab06      	add	r3, sp, #24
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	9103      	str	r1, [sp, #12]
 800d9da:	f001 f99f 	bl	800ed1c <uxr_prepare_stream_to_write_submessage>
 800d9de:	b918      	cbnz	r0, 800d9e8 <uxr_buffer_delete_entity+0x24>
 800d9e0:	4604      	mov	r4, r0
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	b00e      	add	sp, #56	; 0x38
 800d9e6:	bd10      	pop	{r4, pc}
 800d9e8:	9902      	ldr	r1, [sp, #8]
 800d9ea:	aa05      	add	r2, sp, #20
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f001 facb 	bl	800ef88 <uxr_init_base_object_request>
 800d9f2:	a905      	add	r1, sp, #20
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	a806      	add	r0, sp, #24
 800d9f8:	f002 fc30 	bl	801025c <uxr_serialize_DELETE_Payload>
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	b00e      	add	sp, #56	; 0x38
 800da00:	bd10      	pop	{r4, pc}
 800da02:	bf00      	nop

0800da04 <uxr_common_create_entity>:
 800da04:	b510      	push	{r4, lr}
 800da06:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800da0a:	b08c      	sub	sp, #48	; 0x30
 800da0c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800da10:	f1bc 0f01 	cmp.w	ip, #1
 800da14:	bf0c      	ite	eq
 800da16:	f003 0201 	andeq.w	r2, r3, #1
 800da1a:	2200      	movne	r2, #0
 800da1c:	330e      	adds	r3, #14
 800da1e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800da22:	9101      	str	r1, [sp, #4]
 800da24:	441a      	add	r2, r3
 800da26:	2301      	movs	r3, #1
 800da28:	9300      	str	r3, [sp, #0]
 800da2a:	9903      	ldr	r1, [sp, #12]
 800da2c:	ab04      	add	r3, sp, #16
 800da2e:	b292      	uxth	r2, r2
 800da30:	4604      	mov	r4, r0
 800da32:	f001 f973 	bl	800ed1c <uxr_prepare_stream_to_write_submessage>
 800da36:	b918      	cbnz	r0, 800da40 <uxr_common_create_entity+0x3c>
 800da38:	4604      	mov	r4, r0
 800da3a:	4620      	mov	r0, r4
 800da3c:	b00c      	add	sp, #48	; 0x30
 800da3e:	bd10      	pop	{r4, pc}
 800da40:	9902      	ldr	r1, [sp, #8]
 800da42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da44:	4620      	mov	r0, r4
 800da46:	f001 fa9f 	bl	800ef88 <uxr_init_base_object_request>
 800da4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da4c:	4604      	mov	r4, r0
 800da4e:	a804      	add	r0, sp, #16
 800da50:	f002 fb60 	bl	8010114 <uxr_serialize_CREATE_Payload>
 800da54:	4620      	mov	r0, r4
 800da56:	b00c      	add	sp, #48	; 0x30
 800da58:	bd10      	pop	{r4, pc}
 800da5a:	bf00      	nop

0800da5c <uxr_buffer_create_participant_bin>:
 800da5c:	b570      	push	{r4, r5, r6, lr}
 800da5e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800da62:	ac11      	add	r4, sp, #68	; 0x44
 800da64:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800da68:	2303      	movs	r3, #3
 800da6a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800da6e:	7223      	strb	r3, [r4, #8]
 800da70:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800da72:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800da76:	2201      	movs	r2, #1
 800da78:	2100      	movs	r1, #0
 800da7a:	4605      	mov	r5, r0
 800da7c:	7122      	strb	r2, [r4, #4]
 800da7e:	f88d 1014 	strb.w	r1, [sp, #20]
 800da82:	b1cb      	cbz	r3, 800dab8 <uxr_buffer_create_participant_bin+0x5c>
 800da84:	f88d 201c 	strb.w	r2, [sp, #28]
 800da88:	9308      	str	r3, [sp, #32]
 800da8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da8e:	a915      	add	r1, sp, #84	; 0x54
 800da90:	a809      	add	r0, sp, #36	; 0x24
 800da92:	f7ff ff27 	bl	800d8e4 <ucdr_init_buffer>
 800da96:	a905      	add	r1, sp, #20
 800da98:	a809      	add	r0, sp, #36	; 0x24
 800da9a:	f002 f809 	bl	800fab0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800da9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800daa0:	9600      	str	r6, [sp, #0]
 800daa2:	9401      	str	r4, [sp, #4]
 800daa4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800daa8:	60e3      	str	r3, [r4, #12]
 800daaa:	4628      	mov	r0, r5
 800daac:	b29b      	uxth	r3, r3
 800daae:	f7ff ffa9 	bl	800da04 <uxr_common_create_entity>
 800dab2:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800dab6:	bd70      	pop	{r4, r5, r6, pc}
 800dab8:	f88d 301c 	strb.w	r3, [sp, #28]
 800dabc:	e7e5      	b.n	800da8a <uxr_buffer_create_participant_bin+0x2e>
 800dabe:	bf00      	nop

0800dac0 <uxr_buffer_create_topic_bin>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800dac6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800daca:	9105      	str	r1, [sp, #20]
 800dacc:	4605      	mov	r5, r0
 800dace:	a997      	add	r1, sp, #604	; 0x25c
 800dad0:	4618      	mov	r0, r3
 800dad2:	2302      	movs	r3, #2
 800dad4:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800dad8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800dadc:	f000 f8ee 	bl	800dcbc <uxr_object_id_to_raw>
 800dae0:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800dae2:	9306      	str	r3, [sp, #24]
 800dae4:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800dae6:	930a      	str	r3, [sp, #40]	; 0x28
 800dae8:	2303      	movs	r3, #3
 800daea:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800daee:	2301      	movs	r3, #1
 800daf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daf4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800daf8:	a917      	add	r1, sp, #92	; 0x5c
 800dafa:	2300      	movs	r3, #0
 800dafc:	a80b      	add	r0, sp, #44	; 0x2c
 800dafe:	f88d 301c 	strb.w	r3, [sp, #28]
 800db02:	f7ff feef 	bl	800d8e4 <ucdr_init_buffer>
 800db06:	a906      	add	r1, sp, #24
 800db08:	a80b      	add	r0, sp, #44	; 0x2c
 800db0a:	f001 fff3 	bl	800faf4 <uxr_serialize_OBJK_Topic_Binary>
 800db0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db10:	9316      	str	r3, [sp, #88]	; 0x58
 800db12:	ac13      	add	r4, sp, #76	; 0x4c
 800db14:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800db18:	9600      	str	r6, [sp, #0]
 800db1a:	9401      	str	r4, [sp, #4]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	4628      	mov	r0, r5
 800db20:	f7ff ff70 	bl	800da04 <uxr_common_create_entity>
 800db24:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800db28:	bd70      	pop	{r4, r5, r6, pc}
 800db2a:	bf00      	nop

0800db2c <uxr_buffer_create_publisher_bin>:
 800db2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db2e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800db32:	4605      	mov	r5, r0
 800db34:	9105      	str	r1, [sp, #20]
 800db36:	4618      	mov	r0, r3
 800db38:	2603      	movs	r6, #3
 800db3a:	a992      	add	r1, sp, #584	; 0x248
 800db3c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800db40:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800db44:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800db48:	f000 f8b8 	bl	800dcbc <uxr_object_id_to_raw>
 800db4c:	2300      	movs	r3, #0
 800db4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db52:	a912      	add	r1, sp, #72	; 0x48
 800db54:	a806      	add	r0, sp, #24
 800db56:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800db5a:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800db5e:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800db62:	f7ff febf 	bl	800d8e4 <ucdr_init_buffer>
 800db66:	a993      	add	r1, sp, #588	; 0x24c
 800db68:	a806      	add	r0, sp, #24
 800db6a:	f002 f877 	bl	800fc5c <uxr_serialize_OBJK_Publisher_Binary>
 800db6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db70:	9311      	str	r3, [sp, #68]	; 0x44
 800db72:	ac0e      	add	r4, sp, #56	; 0x38
 800db74:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800db78:	9700      	str	r7, [sp, #0]
 800db7a:	9401      	str	r4, [sp, #4]
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	4628      	mov	r0, r5
 800db80:	f7ff ff40 	bl	800da04 <uxr_common_create_entity>
 800db84:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800db88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db8a:	bf00      	nop

0800db8c <uxr_buffer_create_datawriter_bin>:
 800db8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db90:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800db94:	ac1d      	add	r4, sp, #116	; 0x74
 800db96:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800db9a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800db9e:	9105      	str	r1, [sp, #20]
 800dba0:	4606      	mov	r6, r0
 800dba2:	a9a1      	add	r1, sp, #644	; 0x284
 800dba4:	4618      	mov	r0, r3
 800dba6:	2305      	movs	r3, #5
 800dba8:	7123      	strb	r3, [r4, #4]
 800dbaa:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800dbae:	2703      	movs	r7, #3
 800dbb0:	f000 f884 	bl	800dcbc <uxr_object_id_to_raw>
 800dbb4:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800dbb6:	7227      	strb	r7, [r4, #8]
 800dbb8:	a90e      	add	r1, sp, #56	; 0x38
 800dbba:	f000 f87f 	bl	800dcbc <uxr_object_id_to_raw>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800dbc4:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800dbc8:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800dbcc:	3d00      	subs	r5, #0
 800dbce:	bf18      	it	ne
 800dbd0:	2501      	movne	r5, #1
 800dbd2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800dbd6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800dbda:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800dbde:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800dbe8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800dbec:	bb8a      	cbnz	r2, 800dc52 <uxr_buffer_create_datawriter_bin+0xc6>
 800dbee:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800dbf2:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800dbf6:	f04f 0c13 	mov.w	ip, #19
 800dbfa:	250b      	movs	r5, #11
 800dbfc:	2221      	movs	r2, #33	; 0x21
 800dbfe:	2111      	movs	r1, #17
 800dc00:	2009      	movs	r0, #9
 800dc02:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800dc06:	b923      	cbnz	r3, 800dc12 <uxr_buffer_create_datawriter_bin+0x86>
 800dc08:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800dc0c:	4672      	mov	r2, lr
 800dc0e:	4661      	mov	r1, ip
 800dc10:	4628      	mov	r0, r5
 800dc12:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d025      	beq.n	800dc66 <uxr_buffer_create_datawriter_bin+0xda>
 800dc1a:	2b03      	cmp	r3, #3
 800dc1c:	d029      	beq.n	800dc72 <uxr_buffer_create_datawriter_bin+0xe6>
 800dc1e:	b32b      	cbz	r3, 800dc6c <uxr_buffer_create_datawriter_bin+0xe0>
 800dc20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc24:	a921      	add	r1, sp, #132	; 0x84
 800dc26:	a806      	add	r0, sp, #24
 800dc28:	f7ff fe5c 	bl	800d8e4 <ucdr_init_buffer>
 800dc2c:	a90e      	add	r1, sp, #56	; 0x38
 800dc2e:	a806      	add	r0, sp, #24
 800dc30:	f002 f88a 	bl	800fd48 <uxr_serialize_OBJK_DataWriter_Binary>
 800dc34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc36:	f8cd 8000 	str.w	r8, [sp]
 800dc3a:	9401      	str	r4, [sp, #4]
 800dc3c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800dc40:	60e3      	str	r3, [r4, #12]
 800dc42:	4630      	mov	r0, r6
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	f7ff fedd 	bl	800da04 <uxr_common_create_entity>
 800dc4a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800dc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc52:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800dc56:	f04f 0c12 	mov.w	ip, #18
 800dc5a:	250a      	movs	r5, #10
 800dc5c:	2220      	movs	r2, #32
 800dc5e:	2110      	movs	r1, #16
 800dc60:	2008      	movs	r0, #8
 800dc62:	2702      	movs	r7, #2
 800dc64:	e7cd      	b.n	800dc02 <uxr_buffer_create_datawriter_bin+0x76>
 800dc66:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800dc6a:	e7d9      	b.n	800dc20 <uxr_buffer_create_datawriter_bin+0x94>
 800dc6c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800dc70:	e7d6      	b.n	800dc20 <uxr_buffer_create_datawriter_bin+0x94>
 800dc72:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800dc76:	e7d3      	b.n	800dc20 <uxr_buffer_create_datawriter_bin+0x94>

0800dc78 <uxr_object_id>:
 800dc78:	b082      	sub	sp, #8
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	f88d 1006 	strb.w	r1, [sp, #6]
 800dc80:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dc84:	f360 030f 	bfi	r3, r0, #0, #16
 800dc88:	f362 431f 	bfi	r3, r2, #16, #16
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	b002      	add	sp, #8
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop

0800dc94 <uxr_object_id_from_raw>:
 800dc94:	7843      	ldrb	r3, [r0, #1]
 800dc96:	7801      	ldrb	r1, [r0, #0]
 800dc98:	b082      	sub	sp, #8
 800dc9a:	f003 020f 	and.w	r2, r3, #15
 800dc9e:	f88d 2006 	strb.w	r2, [sp, #6]
 800dca2:	091b      	lsrs	r3, r3, #4
 800dca4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dca8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800dcac:	2000      	movs	r0, #0
 800dcae:	f363 000f 	bfi	r0, r3, #0, #16
 800dcb2:	f362 401f 	bfi	r0, r2, #16, #16
 800dcb6:	b002      	add	sp, #8
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop

0800dcbc <uxr_object_id_to_raw>:
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800dcc8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800dccc:	f881 c000 	strb.w	ip, [r1]
 800dcd0:	7048      	strb	r0, [r1, #1]
 800dcd2:	b002      	add	sp, #8
 800dcd4:	4770      	bx	lr
 800dcd6:	bf00      	nop

0800dcd8 <uxr_buffer_cancel_data>:
 800dcd8:	b510      	push	{r4, lr}
 800dcda:	b094      	sub	sp, #80	; 0x50
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9202      	str	r2, [sp, #8]
 800dce0:	9205      	str	r2, [sp, #20]
 800dce2:	9301      	str	r3, [sp, #4]
 800dce4:	2201      	movs	r2, #1
 800dce6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dcea:	f88d 301e 	strb.w	r3, [sp, #30]
 800dcee:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800dcf2:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800dcf6:	2308      	movs	r3, #8
 800dcf8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	2210      	movs	r2, #16
 800dd00:	ab0c      	add	r3, sp, #48	; 0x30
 800dd02:	4604      	mov	r4, r0
 800dd04:	9103      	str	r1, [sp, #12]
 800dd06:	f001 f809 	bl	800ed1c <uxr_prepare_stream_to_write_submessage>
 800dd0a:	b918      	cbnz	r0, 800dd14 <uxr_buffer_cancel_data+0x3c>
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	4620      	mov	r0, r4
 800dd10:	b014      	add	sp, #80	; 0x50
 800dd12:	bd10      	pop	{r4, pc}
 800dd14:	9905      	ldr	r1, [sp, #20]
 800dd16:	aa06      	add	r2, sp, #24
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f001 f935 	bl	800ef88 <uxr_init_base_object_request>
 800dd1e:	a906      	add	r1, sp, #24
 800dd20:	4604      	mov	r4, r0
 800dd22:	a80c      	add	r0, sp, #48	; 0x30
 800dd24:	f002 fb44 	bl	80103b0 <uxr_serialize_READ_DATA_Payload>
 800dd28:	4620      	mov	r0, r4
 800dd2a:	b014      	add	sp, #80	; 0x50
 800dd2c:	bd10      	pop	{r4, pc}
 800dd2e:	bf00      	nop

0800dd30 <read_submessage_format>:
 800dd30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd34:	b095      	sub	sp, #84	; 0x54
 800dd36:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 800dd3a:	b113      	cbz	r3, 800dd42 <read_submessage_format+0x12>
 800dd3c:	b015      	add	sp, #84	; 0x54
 800dd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd42:	460c      	mov	r4, r1
 800dd44:	4615      	mov	r5, r2
 800dd46:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800dd4a:	4607      	mov	r7, r0
 800dd4c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800dd4e:	9004      	str	r0, [sp, #16]
 800dd50:	981d      	ldr	r0, [sp, #116]	; 0x74
 800dd52:	9005      	str	r0, [sp, #20]
 800dd54:	1a52      	subs	r2, r2, r1
 800dd56:	a80c      	add	r0, sp, #48	; 0x30
 800dd58:	4699      	mov	r9, r3
 800dd5a:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800dd5e:	f7ff fdc1 	bl	800d8e4 <ucdr_init_buffer>
 800dd62:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800dd66:	a80c      	add	r0, sp, #48	; 0x30
 800dd68:	f7ff fd90 	bl	800d88c <ucdr_set_on_full_buffer_callback>
 800dd6c:	69e2      	ldr	r2, [r4, #28]
 800dd6e:	b19a      	cbz	r2, 800dd98 <read_submessage_format+0x68>
 800dd70:	f1b8 0f07 	cmp.w	r8, #7
 800dd74:	f882 9014 	strb.w	r9, [r2, #20]
 800dd78:	d040      	beq.n	800ddfc <read_submessage_format+0xcc>
 800dd7a:	f1b8 0f08 	cmp.w	r8, #8
 800dd7e:	d02e      	beq.n	800ddde <read_submessage_format+0xae>
 800dd80:	f1b8 0f06 	cmp.w	r8, #6
 800dd84:	d011      	beq.n	800ddaa <read_submessage_format+0x7a>
 800dd86:	2301      	movs	r3, #1
 800dd88:	7513      	strb	r3, [r2, #20]
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	f7ff fdf9 	bl	800d984 <ucdr_advance_buffer>
 800dd92:	b015      	add	sp, #84	; 0x54
 800dd94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd98:	f1b8 0f07 	cmp.w	r8, #7
 800dd9c:	d02e      	beq.n	800ddfc <read_submessage_format+0xcc>
 800dd9e:	f1b8 0f08 	cmp.w	r8, #8
 800dda2:	d01c      	beq.n	800ddde <read_submessage_format+0xae>
 800dda4:	f1b8 0f06 	cmp.w	r8, #6
 800dda8:	d1ef      	bne.n	800dd8a <read_submessage_format+0x5a>
 800ddaa:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 800ddae:	f1b8 0f00 	cmp.w	r8, #0
 800ddb2:	d011      	beq.n	800ddd8 <read_submessage_format+0xa8>
 800ddb4:	ab0c      	add	r3, sp, #48	; 0x30
 800ddb6:	e9cd 3500 	strd	r3, r5, [sp]
 800ddba:	2306      	movs	r3, #6
 800ddbc:	f88d 3016 	strb.w	r3, [sp, #22]
 800ddc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddc4:	9302      	str	r3, [sp, #8]
 800ddc6:	4632      	mov	r2, r6
 800ddc8:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800ddcc:	4638      	mov	r0, r7
 800ddce:	47c0      	blx	r8
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	69e2      	ldr	r2, [r4, #28]
 800ddd4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800ddd8:	2a00      	cmp	r2, #0
 800ddda:	d1d4      	bne.n	800dd86 <read_submessage_format+0x56>
 800dddc:	e7d5      	b.n	800dd8a <read_submessage_format+0x5a>
 800ddde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d0f8      	beq.n	800ddd8 <read_submessage_format+0xa8>
 800dde6:	a906      	add	r1, sp, #24
 800dde8:	a80c      	add	r0, sp, #48	; 0x30
 800ddea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800ddee:	f002 fba5 	bl	801053c <uxr_deserialize_SampleIdentity>
 800ddf2:	b9a0      	cbnz	r0, 800de1e <read_submessage_format+0xee>
 800ddf4:	69e2      	ldr	r2, [r4, #28]
 800ddf6:	2a00      	cmp	r2, #0
 800ddf8:	d1c5      	bne.n	800dd86 <read_submessage_format+0x56>
 800ddfa:	e7c6      	b.n	800dd8a <read_submessage_format+0x5a>
 800ddfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de00:	b13b      	cbz	r3, 800de12 <read_submessage_format+0xe2>
 800de02:	a906      	add	r1, sp, #24
 800de04:	a80c      	add	r0, sp, #48	; 0x30
 800de06:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800de0a:	f002 f86b 	bl	800fee4 <uxr_deserialize_BaseObjectRequest>
 800de0e:	bb60      	cbnz	r0, 800de6a <read_submessage_format+0x13a>
 800de10:	69e2      	ldr	r2, [r4, #28]
 800de12:	68a3      	ldr	r3, [r4, #8]
 800de14:	442b      	add	r3, r5
 800de16:	60a3      	str	r3, [r4, #8]
 800de18:	2a00      	cmp	r2, #0
 800de1a:	d1b4      	bne.n	800dd86 <read_submessage_format+0x56>
 800de1c:	e7b5      	b.n	800dd8a <read_submessage_format+0x5a>
 800de1e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800de22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de24:	1a52      	subs	r2, r2, r1
 800de26:	eba8 0803 	sub.w	r8, r8, r3
 800de2a:	a80c      	add	r0, sp, #48	; 0x30
 800de2c:	f7ff fd5a 	bl	800d8e4 <ucdr_init_buffer>
 800de30:	44a8      	add	r8, r5
 800de32:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800de36:	a80c      	add	r0, sp, #48	; 0x30
 800de38:	f7ff fd28 	bl	800d88c <ucdr_set_on_full_buffer_callback>
 800de3c:	fa1f f888 	uxth.w	r8, r8
 800de40:	ab0c      	add	r3, sp, #48	; 0x30
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	f8cd 8004 	str.w	r8, [sp, #4]
 800de48:	2108      	movs	r1, #8
 800de4a:	f88d 1016 	strb.w	r1, [sp, #22]
 800de4e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800de52:	9102      	str	r1, [sp, #8]
 800de54:	ab06      	add	r3, sp, #24
 800de56:	4632      	mov	r2, r6
 800de58:	9905      	ldr	r1, [sp, #20]
 800de5a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 800de5e:	4638      	mov	r0, r7
 800de60:	47b0      	blx	r6
 800de62:	2301      	movs	r3, #1
 800de64:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800de68:	e7c4      	b.n	800ddf4 <read_submessage_format+0xc4>
 800de6a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800de6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de70:	1a52      	subs	r2, r2, r1
 800de72:	a80c      	add	r0, sp, #48	; 0x30
 800de74:	eba8 0803 	sub.w	r8, r8, r3
 800de78:	f7ff fd34 	bl	800d8e4 <ucdr_init_buffer>
 800de7c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800de80:	a80c      	add	r0, sp, #48	; 0x30
 800de82:	f7ff fd03 	bl	800d88c <ucdr_set_on_full_buffer_callback>
 800de86:	ab0c      	add	r3, sp, #48	; 0x30
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800de8e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800de92:	44a8      	add	r8, r5
 800de94:	fa1f f888 	uxth.w	r8, r8
 800de98:	f8cd 8004 	str.w	r8, [sp, #4]
 800de9c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800dea0:	2107      	movs	r1, #7
 800dea2:	f88d 1016 	strb.w	r1, [sp, #22]
 800dea6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800deaa:	9102      	str	r1, [sp, #8]
 800deac:	4632      	mov	r2, r6
 800deae:	b29b      	uxth	r3, r3
 800deb0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 800deb4:	9905      	ldr	r1, [sp, #20]
 800deb6:	4638      	mov	r0, r7
 800deb8:	47b0      	blx	r6
 800deba:	2301      	movs	r3, #1
 800debc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800dec0:	e7a6      	b.n	800de10 <read_submessage_format+0xe0>
 800dec2:	bf00      	nop

0800dec4 <on_get_fragmentation_info>:
 800dec4:	b500      	push	{lr}
 800dec6:	b08b      	sub	sp, #44	; 0x2c
 800dec8:	4601      	mov	r1, r0
 800deca:	2204      	movs	r2, #4
 800decc:	a802      	add	r0, sp, #8
 800dece:	f7ff fd09 	bl	800d8e4 <ucdr_init_buffer>
 800ded2:	f10d 0305 	add.w	r3, sp, #5
 800ded6:	f10d 0206 	add.w	r2, sp, #6
 800deda:	a901      	add	r1, sp, #4
 800dedc:	a802      	add	r0, sp, #8
 800dede:	f001 f9d5 	bl	800f28c <uxr_read_submessage_header>
 800dee2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dee6:	2b0d      	cmp	r3, #13
 800dee8:	d003      	beq.n	800def2 <on_get_fragmentation_info+0x2e>
 800deea:	2000      	movs	r0, #0
 800deec:	b00b      	add	sp, #44	; 0x2c
 800deee:	f85d fb04 	ldr.w	pc, [sp], #4
 800def2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800def6:	f013 0f02 	tst.w	r3, #2
 800defa:	bf14      	ite	ne
 800defc:	2002      	movne	r0, #2
 800defe:	2001      	moveq	r0, #1
 800df00:	b00b      	add	sp, #44	; 0x2c
 800df02:	f85d fb04 	ldr.w	pc, [sp], #4
 800df06:	bf00      	nop

0800df08 <read_submessage_get_info>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	2500      	movs	r5, #0
 800df0c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800df10:	4604      	mov	r4, r0
 800df12:	f44f 7224 	mov.w	r2, #656	; 0x290
 800df16:	460e      	mov	r6, r1
 800df18:	a810      	add	r0, sp, #64	; 0x40
 800df1a:	4629      	mov	r1, r5
 800df1c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800df20:	f008 fef2 	bl	8016d08 <memset>
 800df24:	a903      	add	r1, sp, #12
 800df26:	4630      	mov	r0, r6
 800df28:	f002 f984 	bl	8010234 <uxr_deserialize_GET_INFO_Payload>
 800df2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800df30:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800df34:	4620      	mov	r0, r4
 800df36:	f001 f81f 	bl	800ef78 <uxr_session_header_offset>
 800df3a:	462b      	mov	r3, r5
 800df3c:	9000      	str	r0, [sp, #0]
 800df3e:	220c      	movs	r2, #12
 800df40:	a905      	add	r1, sp, #20
 800df42:	a808      	add	r0, sp, #32
 800df44:	f7ff fcbc 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 800df48:	a910      	add	r1, sp, #64	; 0x40
 800df4a:	a808      	add	r0, sp, #32
 800df4c:	f002 f9e4 	bl	8010318 <uxr_serialize_INFO_Payload>
 800df50:	9b08      	ldr	r3, [sp, #32]
 800df52:	462a      	mov	r2, r5
 800df54:	4629      	mov	r1, r5
 800df56:	4620      	mov	r0, r4
 800df58:	f000 ffb8 	bl	800eecc <uxr_stamp_session_header>
 800df5c:	a808      	add	r0, sp, #32
 800df5e:	f7ff fced 	bl	800d93c <ucdr_buffer_length>
 800df62:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800df64:	4602      	mov	r2, r0
 800df66:	a905      	add	r1, sp, #20
 800df68:	e9d3 0400 	ldrd	r0, r4, [r3]
 800df6c:	47a0      	blx	r4
 800df6e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800df72:	bd70      	pop	{r4, r5, r6, pc}

0800df74 <write_submessage_acknack.isra.0>:
 800df74:	b570      	push	{r4, r5, r6, lr}
 800df76:	b092      	sub	sp, #72	; 0x48
 800df78:	4605      	mov	r5, r0
 800df7a:	460e      	mov	r6, r1
 800df7c:	4614      	mov	r4, r2
 800df7e:	f000 fffb 	bl	800ef78 <uxr_session_header_offset>
 800df82:	a905      	add	r1, sp, #20
 800df84:	9000      	str	r0, [sp, #0]
 800df86:	2300      	movs	r3, #0
 800df88:	a80a      	add	r0, sp, #40	; 0x28
 800df8a:	2211      	movs	r2, #17
 800df8c:	f7ff fc98 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 800df90:	2218      	movs	r2, #24
 800df92:	fb02 5404 	mla	r4, r2, r4, r5
 800df96:	2300      	movs	r3, #0
 800df98:	2205      	movs	r2, #5
 800df9a:	3450      	adds	r4, #80	; 0x50
 800df9c:	210a      	movs	r1, #10
 800df9e:	a80a      	add	r0, sp, #40	; 0x28
 800dfa0:	f001 f95a 	bl	800f258 <uxr_buffer_submessage_header>
 800dfa4:	a903      	add	r1, sp, #12
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f006 ff26 	bl	8014df8 <uxr_compute_acknack>
 800dfac:	ba40      	rev16	r0, r0
 800dfae:	f8ad 000e 	strh.w	r0, [sp, #14]
 800dfb2:	a903      	add	r1, sp, #12
 800dfb4:	a80a      	add	r0, sp, #40	; 0x28
 800dfb6:	f88d 6010 	strb.w	r6, [sp, #16]
 800dfba:	f002 fa1d 	bl	80103f8 <uxr_serialize_ACKNACK_Payload>
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	f000 ff81 	bl	800eecc <uxr_stamp_session_header>
 800dfca:	a80a      	add	r0, sp, #40	; 0x28
 800dfcc:	f7ff fcb6 	bl	800d93c <ucdr_buffer_length>
 800dfd0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	a905      	add	r1, sp, #20
 800dfd6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dfda:	47a0      	blx	r4
 800dfdc:	b012      	add	sp, #72	; 0x48
 800dfde:	bd70      	pop	{r4, r5, r6, pc}

0800dfe0 <uxr_init_session>:
 800dfe0:	b510      	push	{r4, lr}
 800dfe2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800e018 <uxr_init_session+0x38>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800dfec:	4604      	mov	r4, r0
 800dfee:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800dff2:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800dff6:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800dffa:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800dffe:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800e002:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800e006:	2181      	movs	r1, #129	; 0x81
 800e008:	f000 fecc 	bl	800eda4 <uxr_init_session_info>
 800e00c:	f104 0008 	add.w	r0, r4, #8
 800e010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e014:	f001 b83c 	b.w	800f090 <uxr_init_stream_storage>
	...

0800e020 <uxr_set_status_callback>:
 800e020:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop

0800e028 <uxr_set_topic_callback>:
 800e028:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop

0800e030 <uxr_set_request_callback>:
 800e030:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop

0800e038 <uxr_set_reply_callback>:
 800e038:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop

0800e040 <uxr_create_output_best_effort_stream>:
 800e040:	b510      	push	{r4, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	e9cd 2100 	strd	r2, r1, [sp]
 800e048:	4604      	mov	r4, r0
 800e04a:	f000 ff95 	bl	800ef78 <uxr_session_header_offset>
 800e04e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e052:	4603      	mov	r3, r0
 800e054:	f104 0008 	add.w	r0, r4, #8
 800e058:	b004      	add	sp, #16
 800e05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e05e:	f001 b861 	b.w	800f124 <uxr_add_output_best_effort_buffer>
 800e062:	bf00      	nop

0800e064 <uxr_create_output_reliable_stream>:
 800e064:	b510      	push	{r4, lr}
 800e066:	b088      	sub	sp, #32
 800e068:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e06c:	4604      	mov	r4, r0
 800e06e:	9303      	str	r3, [sp, #12]
 800e070:	f000 ff82 	bl	800ef78 <uxr_session_header_offset>
 800e074:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e078:	9000      	str	r0, [sp, #0]
 800e07a:	9905      	ldr	r1, [sp, #20]
 800e07c:	f104 0008 	add.w	r0, r4, #8
 800e080:	f001 f864 	bl	800f14c <uxr_add_output_reliable_buffer>
 800e084:	2200      	movs	r2, #0
 800e086:	b2c3      	uxtb	r3, r0
 800e088:	f363 0207 	bfi	r2, r3, #0, #8
 800e08c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e090:	f363 220f 	bfi	r2, r3, #8, #8
 800e094:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e098:	f363 4217 	bfi	r2, r3, #16, #8
 800e09c:	0e03      	lsrs	r3, r0, #24
 800e09e:	f363 621f 	bfi	r2, r3, #24, #8
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	b008      	add	sp, #32
 800e0a6:	bd10      	pop	{r4, pc}

0800e0a8 <uxr_create_input_best_effort_stream>:
 800e0a8:	b082      	sub	sp, #8
 800e0aa:	3008      	adds	r0, #8
 800e0ac:	b002      	add	sp, #8
 800e0ae:	f001 b867 	b.w	800f180 <uxr_add_input_best_effort_buffer>
 800e0b2:	bf00      	nop

0800e0b4 <uxr_create_input_reliable_stream>:
 800e0b4:	b510      	push	{r4, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	4c0b      	ldr	r4, [pc, #44]	; (800e0e8 <uxr_create_input_reliable_stream+0x34>)
 800e0ba:	9400      	str	r4, [sp, #0]
 800e0bc:	3008      	adds	r0, #8
 800e0be:	f001 f875 	bl	800f1ac <uxr_add_input_reliable_buffer>
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	b2c3      	uxtb	r3, r0
 800e0c6:	f363 0207 	bfi	r2, r3, #0, #8
 800e0ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e0ce:	f363 220f 	bfi	r2, r3, #8, #8
 800e0d2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e0d6:	f363 4217 	bfi	r2, r3, #16, #8
 800e0da:	0e03      	lsrs	r3, r0, #24
 800e0dc:	f363 621f 	bfi	r2, r3, #24, #8
 800e0e0:	4610      	mov	r0, r2
 800e0e2:	b004      	add	sp, #16
 800e0e4:	bd10      	pop	{r4, pc}
 800e0e6:	bf00      	nop
 800e0e8:	0800dec5 	.word	0x0800dec5

0800e0ec <uxr_epoch_nanos>:
 800e0ec:	b510      	push	{r4, lr}
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	f001 f912 	bl	800f318 <uxr_nanos>
 800e0f4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800e0f8:	1ac0      	subs	r0, r0, r3
 800e0fa:	eb61 0102 	sbc.w	r1, r1, r2
 800e0fe:	bd10      	pop	{r4, pc}

0800e100 <uxr_flash_output_streams>:
 800e100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e104:	7e03      	ldrb	r3, [r0, #24]
 800e106:	b084      	sub	sp, #16
 800e108:	4604      	mov	r4, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d035      	beq.n	800e17a <uxr_flash_output_streams+0x7a>
 800e10e:	f04f 0900 	mov.w	r9, #0
 800e112:	4648      	mov	r0, r9
 800e114:	f10d 0802 	add.w	r8, sp, #2
 800e118:	af03      	add	r7, sp, #12
 800e11a:	ae02      	add	r6, sp, #8
 800e11c:	e006      	b.n	800e12c <uxr_flash_output_streams+0x2c>
 800e11e:	7e23      	ldrb	r3, [r4, #24]
 800e120:	f109 0901 	add.w	r9, r9, #1
 800e124:	fa5f f089 	uxtb.w	r0, r9
 800e128:	4283      	cmp	r3, r0
 800e12a:	d926      	bls.n	800e17a <uxr_flash_output_streams+0x7a>
 800e12c:	2201      	movs	r2, #1
 800e12e:	4611      	mov	r1, r2
 800e130:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800e134:	f000 ff58 	bl	800efe8 <uxr_stream_id>
 800e138:	3508      	adds	r5, #8
 800e13a:	4684      	mov	ip, r0
 800e13c:	4643      	mov	r3, r8
 800e13e:	463a      	mov	r2, r7
 800e140:	4631      	mov	r1, r6
 800e142:	4628      	mov	r0, r5
 800e144:	f8cd c004 	str.w	ip, [sp, #4]
 800e148:	f006 fedc 	bl	8014f04 <uxr_prepare_best_effort_buffer_to_send>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d0e6      	beq.n	800e11e <uxr_flash_output_streams+0x1e>
 800e150:	9b02      	ldr	r3, [sp, #8]
 800e152:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e156:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e15a:	4620      	mov	r0, r4
 800e15c:	f000 feb6 	bl	800eecc <uxr_stamp_session_header>
 800e160:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e162:	9a03      	ldr	r2, [sp, #12]
 800e164:	685d      	ldr	r5, [r3, #4]
 800e166:	6818      	ldr	r0, [r3, #0]
 800e168:	9902      	ldr	r1, [sp, #8]
 800e16a:	47a8      	blx	r5
 800e16c:	f109 0901 	add.w	r9, r9, #1
 800e170:	7e23      	ldrb	r3, [r4, #24]
 800e172:	fa5f f089 	uxtb.w	r0, r9
 800e176:	4283      	cmp	r3, r0
 800e178:	d8d8      	bhi.n	800e12c <uxr_flash_output_streams+0x2c>
 800e17a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e17e:	b38b      	cbz	r3, 800e1e4 <uxr_flash_output_streams+0xe4>
 800e180:	f04f 0900 	mov.w	r9, #0
 800e184:	f10d 0802 	add.w	r8, sp, #2
 800e188:	af03      	add	r7, sp, #12
 800e18a:	ae02      	add	r6, sp, #8
 800e18c:	4648      	mov	r0, r9
 800e18e:	2201      	movs	r2, #1
 800e190:	2102      	movs	r1, #2
 800e192:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800e196:	f000 ff27 	bl	800efe8 <uxr_stream_id>
 800e19a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800e19e:	3520      	adds	r5, #32
 800e1a0:	9001      	str	r0, [sp, #4]
 800e1a2:	e00d      	b.n	800e1c0 <uxr_flash_output_streams+0xc0>
 800e1a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e1a8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e1ac:	9b02      	ldr	r3, [sp, #8]
 800e1ae:	f000 fe8d 	bl	800eecc <uxr_stamp_session_header>
 800e1b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e1b4:	9a03      	ldr	r2, [sp, #12]
 800e1b6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800e1ba:	9902      	ldr	r1, [sp, #8]
 800e1bc:	6818      	ldr	r0, [r3, #0]
 800e1be:	47d0      	blx	sl
 800e1c0:	4643      	mov	r3, r8
 800e1c2:	463a      	mov	r2, r7
 800e1c4:	4631      	mov	r1, r6
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f007 f8ba 	bl	8015340 <uxr_prepare_next_reliable_buffer_to_send>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d1e7      	bne.n	800e1a4 <uxr_flash_output_streams+0xa4>
 800e1d4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e1d8:	f109 0901 	add.w	r9, r9, #1
 800e1dc:	fa5f f089 	uxtb.w	r0, r9
 800e1e0:	4283      	cmp	r3, r0
 800e1e2:	d8d4      	bhi.n	800e18e <uxr_flash_output_streams+0x8e>
 800e1e4:	b004      	add	sp, #16
 800e1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ea:	bf00      	nop

0800e1ec <read_submessage_info>:
 800e1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f0:	460d      	mov	r5, r1
 800e1f2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800e1f6:	4669      	mov	r1, sp
 800e1f8:	4607      	mov	r7, r0
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	f001 ff28 	bl	8010050 <uxr_deserialize_BaseObjectReply>
 800e200:	a902      	add	r1, sp, #8
 800e202:	4604      	mov	r4, r0
 800e204:	4628      	mov	r0, r5
 800e206:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e20a:	f7fe fba7 	bl	800c95c <ucdr_deserialize_bool>
 800e20e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e212:	4004      	ands	r4, r0
 800e214:	b2e4      	uxtb	r4, r4
 800e216:	b95b      	cbnz	r3, 800e230 <read_submessage_info+0x44>
 800e218:	a987      	add	r1, sp, #540	; 0x21c
 800e21a:	4628      	mov	r0, r5
 800e21c:	f7fe fb9e 	bl	800c95c <ucdr_deserialize_bool>
 800e220:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800e224:	4606      	mov	r6, r0
 800e226:	b94b      	cbnz	r3, 800e23c <read_submessage_info+0x50>
 800e228:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800e22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e230:	a903      	add	r1, sp, #12
 800e232:	4628      	mov	r0, r5
 800e234:	f001 fdb4 	bl	800fda0 <uxr_deserialize_ObjectVariant>
 800e238:	4004      	ands	r4, r0
 800e23a:	e7ed      	b.n	800e218 <read_submessage_info+0x2c>
 800e23c:	a988      	add	r1, sp, #544	; 0x220
 800e23e:	4628      	mov	r0, r5
 800e240:	f7fe fbba 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800e244:	4234      	tst	r4, r6
 800e246:	d0ef      	beq.n	800e228 <read_submessage_info+0x3c>
 800e248:	2800      	cmp	r0, #0
 800e24a:	d0ed      	beq.n	800e228 <read_submessage_info+0x3c>
 800e24c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800e250:	2b0d      	cmp	r3, #13
 800e252:	d1e9      	bne.n	800e228 <read_submessage_info+0x3c>
 800e254:	a98a      	add	r1, sp, #552	; 0x228
 800e256:	4628      	mov	r0, r5
 800e258:	f7ff f954 	bl	800d504 <ucdr_deserialize_int16_t>
 800e25c:	b140      	cbz	r0, 800e270 <read_submessage_info+0x84>
 800e25e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800e262:	2b00      	cmp	r3, #0
 800e264:	dd07      	ble.n	800e276 <read_submessage_info+0x8a>
 800e266:	f1b8 0f00 	cmp.w	r8, #0
 800e26a:	bf14      	ite	ne
 800e26c:	2001      	movne	r0, #1
 800e26e:	2002      	moveq	r0, #2
 800e270:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800e274:	e7d8      	b.n	800e228 <read_submessage_info+0x3c>
 800e276:	2000      	movs	r0, #0
 800e278:	e7fa      	b.n	800e270 <read_submessage_info+0x84>
 800e27a:	bf00      	nop

0800e27c <read_submessage_list>:
 800e27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e280:	b097      	sub	sp, #92	; 0x5c
 800e282:	4ec1      	ldr	r6, [pc, #772]	; (800e588 <read_submessage_list+0x30c>)
 800e284:	9209      	str	r2, [sp, #36]	; 0x24
 800e286:	4604      	mov	r4, r0
 800e288:	460d      	mov	r5, r1
 800e28a:	f04f 0801 	mov.w	r8, #1
 800e28e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800e292:	aa0c      	add	r2, sp, #48	; 0x30
 800e294:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800e298:	4628      	mov	r0, r5
 800e29a:	f000 fff7 	bl	800f28c <uxr_read_submessage_header>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	f000 813e 	beq.w	800e520 <read_submessage_list+0x2a4>
 800e2a4:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800e2a8:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800e2ac:	3b02      	subs	r3, #2
 800e2ae:	2b0d      	cmp	r3, #13
 800e2b0:	d8ed      	bhi.n	800e28e <read_submessage_list+0x12>
 800e2b2:	a101      	add	r1, pc, #4	; (adr r1, 800e2b8 <read_submessage_list+0x3c>)
 800e2b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2b8:	0800e517 	.word	0x0800e517
 800e2bc:	0800e28f 	.word	0x0800e28f
 800e2c0:	0800e507 	.word	0x0800e507
 800e2c4:	0800e4a5 	.word	0x0800e4a5
 800e2c8:	0800e49b 	.word	0x0800e49b
 800e2cc:	0800e28f 	.word	0x0800e28f
 800e2d0:	0800e28f 	.word	0x0800e28f
 800e2d4:	0800e3fb 	.word	0x0800e3fb
 800e2d8:	0800e38b 	.word	0x0800e38b
 800e2dc:	0800e34b 	.word	0x0800e34b
 800e2e0:	0800e28f 	.word	0x0800e28f
 800e2e4:	0800e28f 	.word	0x0800e28f
 800e2e8:	0800e28f 	.word	0x0800e28f
 800e2ec:	0800e2f1 	.word	0x0800e2f1
 800e2f0:	a910      	add	r1, sp, #64	; 0x40
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	f002 f8d0 	bl	8010498 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800e2f8:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800e2fc:	f1b9 0f00 	cmp.w	r9, #0
 800e300:	f000 8116 	beq.w	800e530 <read_submessage_list+0x2b4>
 800e304:	f001 f808 	bl	800f318 <uxr_nanos>
 800e308:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800e30a:	4602      	mov	r2, r0
 800e30c:	460b      	mov	r3, r1
 800e30e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e310:	2100      	movs	r1, #0
 800e312:	468c      	mov	ip, r1
 800e314:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e318:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800e31c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e31e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800e320:	468c      	mov	ip, r1
 800e322:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e326:	46e2      	mov	sl, ip
 800e328:	46bc      	mov	ip, r7
 800e32a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800e32e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800e332:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800e336:	e9cd 7100 	strd	r7, r1, [sp]
 800e33a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800e33e:	9106      	str	r1, [sp, #24]
 800e340:	4620      	mov	r0, r4
 800e342:	47c8      	blx	r9
 800e344:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800e348:	e7a1      	b.n	800e28e <read_submessage_list+0x12>
 800e34a:	a910      	add	r1, sp, #64	; 0x40
 800e34c:	4628      	mov	r0, r5
 800e34e:	f002 f891 	bl	8010474 <uxr_deserialize_HEARTBEAT_Payload>
 800e352:	2100      	movs	r1, #0
 800e354:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800e358:	f000 fe70 	bl	800f03c <uxr_stream_id_from_raw>
 800e35c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e360:	900f      	str	r0, [sp, #60]	; 0x3c
 800e362:	4639      	mov	r1, r7
 800e364:	f104 0008 	add.w	r0, r4, #8
 800e368:	f000 ff56 	bl	800f218 <uxr_get_input_reliable_stream>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	d08e      	beq.n	800e28e <read_submessage_list+0x12>
 800e370:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800e374:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800e378:	f006 fd32 	bl	8014de0 <uxr_process_heartbeat>
 800e37c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800e380:	463a      	mov	r2, r7
 800e382:	4620      	mov	r0, r4
 800e384:	f7ff fdf6 	bl	800df74 <write_submessage_acknack.isra.0>
 800e388:	e781      	b.n	800e28e <read_submessage_list+0x12>
 800e38a:	a910      	add	r1, sp, #64	; 0x40
 800e38c:	4628      	mov	r0, r5
 800e38e:	f002 f849 	bl	8010424 <uxr_deserialize_ACKNACK_Payload>
 800e392:	2100      	movs	r1, #0
 800e394:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800e398:	f000 fe50 	bl	800f03c <uxr_stream_id_from_raw>
 800e39c:	900d      	str	r0, [sp, #52]	; 0x34
 800e39e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e3a2:	f104 0008 	add.w	r0, r4, #8
 800e3a6:	f000 ff23 	bl	800f1f0 <uxr_get_output_reliable_stream>
 800e3aa:	4607      	mov	r7, r0
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	f43f af6e 	beq.w	800e28e <read_submessage_list+0x12>
 800e3b2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800e3b6:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800e3ba:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800e3be:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e3c2:	b289      	uxth	r1, r1
 800e3c4:	f007 f866 	bl	8015494 <uxr_process_acknack>
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f007 f823 	bl	8015414 <uxr_begin_output_nack_buffer_it>
 800e3ce:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800e3d2:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800e3d6:	e006      	b.n	800e3e6 <read_submessage_list+0x16a>
 800e3d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e3da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e3dc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e3e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e3e2:	6818      	ldr	r0, [r3, #0]
 800e3e4:	47c8      	blx	r9
 800e3e6:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800e3ea:	aa0f      	add	r2, sp, #60	; 0x3c
 800e3ec:	4651      	mov	r1, sl
 800e3ee:	4638      	mov	r0, r7
 800e3f0:	f007 f812 	bl	8015418 <uxr_next_reliable_nack_buffer_to_send>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d1ef      	bne.n	800e3d8 <read_submessage_list+0x15c>
 800e3f8:	e749      	b.n	800e28e <read_submessage_list+0x12>
 800e3fa:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800e3fe:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800e402:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800e406:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800e40a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800e40e:	4651      	mov	r1, sl
 800e410:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e414:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800e418:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800e41c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800e420:	4628      	mov	r0, r5
 800e422:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800e426:	f001 fd5d 	bl	800fee4 <uxr_deserialize_BaseObjectRequest>
 800e42a:	4650      	mov	r0, sl
 800e42c:	a90f      	add	r1, sp, #60	; 0x3c
 800e42e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800e432:	f000 fdc7 	bl	800efc4 <uxr_parse_base_object_request>
 800e436:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800e43a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e43c:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800e440:	9110      	str	r1, [sp, #64]	; 0x40
 800e442:	3f04      	subs	r7, #4
 800e444:	f009 090e 	and.w	r9, r9, #14
 800e448:	b2bf      	uxth	r7, r7
 800e44a:	f1bb 0f00 	cmp.w	fp, #0
 800e44e:	d006      	beq.n	800e45e <read_submessage_list+0x1e2>
 800e450:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	4652      	mov	r2, sl
 800e458:	2300      	movs	r3, #0
 800e45a:	4620      	mov	r0, r4
 800e45c:	47d8      	blx	fp
 800e45e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800e460:	b16a      	cbz	r2, 800e47e <read_submessage_list+0x202>
 800e462:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800e464:	2100      	movs	r1, #0
 800e466:	3802      	subs	r0, #2
 800e468:	e002      	b.n	800e470 <read_submessage_list+0x1f4>
 800e46a:	3101      	adds	r1, #1
 800e46c:	4291      	cmp	r1, r2
 800e46e:	d006      	beq.n	800e47e <read_submessage_list+0x202>
 800e470:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e474:	4553      	cmp	r3, sl
 800e476:	d1f8      	bne.n	800e46a <read_submessage_list+0x1ee>
 800e478:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e47a:	2200      	movs	r2, #0
 800e47c:	545a      	strb	r2, [r3, r1]
 800e47e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800e482:	9102      	str	r1, [sp, #8]
 800e484:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e486:	9101      	str	r1, [sp, #4]
 800e488:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e48a:	9100      	str	r1, [sp, #0]
 800e48c:	464b      	mov	r3, r9
 800e48e:	463a      	mov	r2, r7
 800e490:	4629      	mov	r1, r5
 800e492:	4620      	mov	r0, r4
 800e494:	f7ff fc4c 	bl	800dd30 <read_submessage_format>
 800e498:	e6f9      	b.n	800e28e <read_submessage_list+0x12>
 800e49a:	4629      	mov	r1, r5
 800e49c:	4620      	mov	r0, r4
 800e49e:	f7ff fea5 	bl	800e1ec <read_submessage_info>
 800e4a2:	e6f4      	b.n	800e28e <read_submessage_list+0x12>
 800e4a4:	2a00      	cmp	r2, #0
 800e4a6:	d03e      	beq.n	800e526 <read_submessage_list+0x2aa>
 800e4a8:	a910      	add	r1, sp, #64	; 0x40
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	f001 ff16 	bl	80102dc <uxr_deserialize_STATUS_Payload>
 800e4b0:	a90e      	add	r1, sp, #56	; 0x38
 800e4b2:	aa0d      	add	r2, sp, #52	; 0x34
 800e4b4:	a810      	add	r0, sp, #64	; 0x40
 800e4b6:	f000 fd85 	bl	800efc4 <uxr_parse_base_object_request>
 800e4ba:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800e4be:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e4c0:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800e4c4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800e4c8:	910f      	str	r1, [sp, #60]	; 0x3c
 800e4ca:	f1ba 0f00 	cmp.w	sl, #0
 800e4ce:	d006      	beq.n	800e4de <read_submessage_list+0x262>
 800e4d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	463a      	mov	r2, r7
 800e4d8:	464b      	mov	r3, r9
 800e4da:	4620      	mov	r0, r4
 800e4dc:	47d0      	blx	sl
 800e4de:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800e4e0:	2a00      	cmp	r2, #0
 800e4e2:	f43f aed4 	beq.w	800e28e <read_submessage_list+0x12>
 800e4e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	3802      	subs	r0, #2
 800e4ec:	e003      	b.n	800e4f6 <read_submessage_list+0x27a>
 800e4ee:	3101      	adds	r1, #1
 800e4f0:	4291      	cmp	r1, r2
 800e4f2:	f43f aecc 	beq.w	800e28e <read_submessage_list+0x12>
 800e4f6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e4fa:	42bb      	cmp	r3, r7
 800e4fc:	d1f7      	bne.n	800e4ee <read_submessage_list+0x272>
 800e4fe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e500:	f803 9001 	strb.w	r9, [r3, r1]
 800e504:	e6c3      	b.n	800e28e <read_submessage_list+0x12>
 800e506:	2a00      	cmp	r2, #0
 800e508:	f47f aec1 	bne.w	800e28e <read_submessage_list+0x12>
 800e50c:	4629      	mov	r1, r5
 800e50e:	4620      	mov	r0, r4
 800e510:	f000 fc9e 	bl	800ee50 <uxr_read_create_session_status>
 800e514:	e6bb      	b.n	800e28e <read_submessage_list+0x12>
 800e516:	4629      	mov	r1, r5
 800e518:	4620      	mov	r0, r4
 800e51a:	f7ff fcf5 	bl	800df08 <read_submessage_get_info>
 800e51e:	e6b6      	b.n	800e28e <read_submessage_list+0x12>
 800e520:	b017      	add	sp, #92	; 0x5c
 800e522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e526:	4629      	mov	r1, r5
 800e528:	4620      	mov	r0, r4
 800e52a:	f000 fc9d 	bl	800ee68 <uxr_read_delete_session_status>
 800e52e:	e6ae      	b.n	800e28e <read_submessage_list+0x12>
 800e530:	f000 fef2 	bl	800f318 <uxr_nanos>
 800e534:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e536:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e538:	464f      	mov	r7, r9
 800e53a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800e53e:	1812      	adds	r2, r2, r0
 800e540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e542:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e544:	eb47 0101 	adc.w	r1, r7, r1
 800e548:	464f      	mov	r7, r9
 800e54a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800e54e:	463b      	mov	r3, r7
 800e550:	4684      	mov	ip, r0
 800e552:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800e556:	fbc7 0906 	smlal	r0, r9, r7, r6
 800e55a:	eb1c 0c00 	adds.w	ip, ip, r0
 800e55e:	464f      	mov	r7, r9
 800e560:	eb43 0307 	adc.w	r3, r3, r7
 800e564:	ebb2 0c0c 	subs.w	ip, r2, ip
 800e568:	eb61 0303 	sbc.w	r3, r1, r3
 800e56c:	0fda      	lsrs	r2, r3, #31
 800e56e:	eb12 020c 	adds.w	r2, r2, ip
 800e572:	f143 0300 	adc.w	r3, r3, #0
 800e576:	0852      	lsrs	r2, r2, #1
 800e578:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e57c:	105b      	asrs	r3, r3, #1
 800e57e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800e582:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800e586:	e6dd      	b.n	800e344 <read_submessage_list+0xc8>
 800e588:	3b9aca00 	.word	0x3b9aca00

0800e58c <listen_message_reliably>:
 800e58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e590:	1e0b      	subs	r3, r1, #0
 800e592:	b09d      	sub	sp, #116	; 0x74
 800e594:	bfb8      	it	lt
 800e596:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800e59a:	4680      	mov	r8, r0
 800e59c:	9305      	str	r3, [sp, #20]
 800e59e:	f000 fea1 	bl	800f2e4 <uxr_millis>
 800e5a2:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800e5a6:	4681      	mov	r9, r0
 800e5a8:	2a00      	cmp	r2, #0
 800e5aa:	f000 80a1 	beq.w	800e6f0 <listen_message_reliably+0x164>
 800e5ae:	2600      	movs	r6, #0
 800e5b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e5b4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e5b8:	9303      	str	r3, [sp, #12]
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	460f      	mov	r7, r1
 800e5be:	e00f      	b.n	800e5e0 <listen_message_reliably+0x54>
 800e5c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e5c4:	9903      	ldr	r1, [sp, #12]
 800e5c6:	455a      	cmp	r2, fp
 800e5c8:	f106 0601 	add.w	r6, r6, #1
 800e5cc:	eb73 0101 	sbcs.w	r1, r3, r1
 800e5d0:	b2f0      	uxtb	r0, r6
 800e5d2:	da01      	bge.n	800e5d8 <listen_message_reliably+0x4c>
 800e5d4:	4693      	mov	fp, r2
 800e5d6:	9303      	str	r3, [sp, #12]
 800e5d8:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800e5dc:	4283      	cmp	r3, r0
 800e5de:	d960      	bls.n	800e6a2 <listen_message_reliably+0x116>
 800e5e0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e5e4:	2102      	movs	r1, #2
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	f000 fcfe 	bl	800efe8 <uxr_stream_id>
 800e5ec:	00e4      	lsls	r4, r4, #3
 800e5ee:	f104 0520 	add.w	r5, r4, #32
 800e5f2:	4445      	add	r5, r8
 800e5f4:	4601      	mov	r1, r0
 800e5f6:	463b      	mov	r3, r7
 800e5f8:	464a      	mov	r2, r9
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	9109      	str	r1, [sp, #36]	; 0x24
 800e5fe:	f006 fedf 	bl	80153c0 <uxr_update_output_stream_heartbeat_timestamp>
 800e602:	eb08 0304 	add.w	r3, r8, r4
 800e606:	2800      	cmp	r0, #0
 800e608:	d0da      	beq.n	800e5c0 <listen_message_reliably+0x34>
 800e60a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e60e:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800e612:	9304      	str	r3, [sp, #16]
 800e614:	4640      	mov	r0, r8
 800e616:	f000 fcaf 	bl	800ef78 <uxr_session_header_offset>
 800e61a:	3501      	adds	r5, #1
 800e61c:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800e620:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e624:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800e628:	2300      	movs	r3, #0
 800e62a:	2211      	movs	r2, #17
 800e62c:	9000      	str	r0, [sp, #0]
 800e62e:	a90c      	add	r1, sp, #48	; 0x30
 800e630:	4650      	mov	r0, sl
 800e632:	f7ff f945 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 800e636:	2300      	movs	r3, #0
 800e638:	2205      	movs	r2, #5
 800e63a:	210b      	movs	r1, #11
 800e63c:	4650      	mov	r0, sl
 800e63e:	f000 fe0b 	bl	800f258 <uxr_buffer_submessage_header>
 800e642:	8968      	ldrh	r0, [r5, #10]
 800e644:	2101      	movs	r1, #1
 800e646:	f006 ff7d 	bl	8015544 <uxr_seq_num_add>
 800e64a:	892b      	ldrh	r3, [r5, #8]
 800e64c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800e650:	4602      	mov	r2, r0
 800e652:	9b04      	ldr	r3, [sp, #16]
 800e654:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800e658:	a90a      	add	r1, sp, #40	; 0x28
 800e65a:	4650      	mov	r0, sl
 800e65c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800e660:	f001 fef4 	bl	801044c <uxr_serialize_HEARTBEAT_Payload>
 800e664:	2200      	movs	r2, #0
 800e666:	4611      	mov	r1, r2
 800e668:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e66a:	4640      	mov	r0, r8
 800e66c:	f000 fc2e 	bl	800eecc <uxr_stamp_session_header>
 800e670:	4650      	mov	r0, sl
 800e672:	f7ff f963 	bl	800d93c <ucdr_buffer_length>
 800e676:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800e67a:	4602      	mov	r2, r0
 800e67c:	a90c      	add	r1, sp, #48	; 0x30
 800e67e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e682:	4444      	add	r4, r8
 800e684:	47a8      	blx	r5
 800e686:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800e68a:	9903      	ldr	r1, [sp, #12]
 800e68c:	455a      	cmp	r2, fp
 800e68e:	f106 0601 	add.w	r6, r6, #1
 800e692:	eb73 0101 	sbcs.w	r1, r3, r1
 800e696:	b2f0      	uxtb	r0, r6
 800e698:	db9c      	blt.n	800e5d4 <listen_message_reliably+0x48>
 800e69a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800e69e:	4283      	cmp	r3, r0
 800e6a0:	d89e      	bhi.n	800e5e0 <listen_message_reliably+0x54>
 800e6a2:	9a03      	ldr	r2, [sp, #12]
 800e6a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	bf08      	it	eq
 800e6ac:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800e6b0:	d01e      	beq.n	800e6f0 <listen_message_reliably+0x164>
 800e6b2:	ebab 0309 	sub.w	r3, fp, r9
 800e6b6:	9905      	ldr	r1, [sp, #20]
 800e6b8:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	bf08      	it	eq
 800e6c0:	2301      	moveq	r3, #1
 800e6c2:	4299      	cmp	r1, r3
 800e6c4:	bfa8      	it	ge
 800e6c6:	4619      	movge	r1, r3
 800e6c8:	6894      	ldr	r4, [r2, #8]
 800e6ca:	6810      	ldr	r0, [r2, #0]
 800e6cc:	4689      	mov	r9, r1
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	aa08      	add	r2, sp, #32
 800e6d2:	a907      	add	r1, sp, #28
 800e6d4:	47a0      	blx	r4
 800e6d6:	b968      	cbnz	r0, 800e6f4 <listen_message_reliably+0x168>
 800e6d8:	9b05      	ldr	r3, [sp, #20]
 800e6da:	eba3 0309 	sub.w	r3, r3, r9
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	9305      	str	r3, [sp, #20]
 800e6e2:	f73f af5c 	bgt.w	800e59e <listen_message_reliably+0x12>
 800e6e6:	4604      	mov	r4, r0
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	b01d      	add	sp, #116	; 0x74
 800e6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f0:	9b05      	ldr	r3, [sp, #20]
 800e6f2:	e7e0      	b.n	800e6b6 <listen_message_reliably+0x12a>
 800e6f4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	a80c      	add	r0, sp, #48	; 0x30
 800e6fc:	f7ff f8f2 	bl	800d8e4 <ucdr_init_buffer>
 800e700:	2500      	movs	r5, #0
 800e702:	f10d 031a 	add.w	r3, sp, #26
 800e706:	aa06      	add	r2, sp, #24
 800e708:	a90c      	add	r1, sp, #48	; 0x30
 800e70a:	4640      	mov	r0, r8
 800e70c:	f88d 5018 	strb.w	r5, [sp, #24]
 800e710:	f000 fbf0 	bl	800eef4 <uxr_read_session_header>
 800e714:	b918      	cbnz	r0, 800e71e <listen_message_reliably+0x192>
 800e716:	4620      	mov	r0, r4
 800e718:	b01d      	add	sp, #116	; 0x74
 800e71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e71e:	4629      	mov	r1, r5
 800e720:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e724:	f000 fc8a 	bl	800f03c <uxr_stream_id_from_raw>
 800e728:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800e72c:	2d01      	cmp	r5, #1
 800e72e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800e732:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800e736:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e73a:	d04b      	beq.n	800e7d4 <listen_message_reliably+0x248>
 800e73c:	2d02      	cmp	r5, #2
 800e73e:	d00f      	beq.n	800e760 <listen_message_reliably+0x1d4>
 800e740:	2d00      	cmp	r5, #0
 800e742:	d1e8      	bne.n	800e716 <listen_message_reliably+0x18a>
 800e744:	4629      	mov	r1, r5
 800e746:	4628      	mov	r0, r5
 800e748:	f000 fc78 	bl	800f03c <uxr_stream_id_from_raw>
 800e74c:	a90c      	add	r1, sp, #48	; 0x30
 800e74e:	4602      	mov	r2, r0
 800e750:	4640      	mov	r0, r8
 800e752:	920a      	str	r2, [sp, #40]	; 0x28
 800e754:	f7ff fd92 	bl	800e27c <read_submessage_list>
 800e758:	4620      	mov	r0, r4
 800e75a:	b01d      	add	sp, #116	; 0x74
 800e75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e760:	4631      	mov	r1, r6
 800e762:	f108 0008 	add.w	r0, r8, #8
 800e766:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800e76a:	f000 fd55 	bl	800f218 <uxr_get_input_reliable_stream>
 800e76e:	4607      	mov	r7, r0
 800e770:	b338      	cbz	r0, 800e7c2 <listen_message_reliably+0x236>
 800e772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e774:	9203      	str	r2, [sp, #12]
 800e776:	a80c      	add	r0, sp, #48	; 0x30
 800e778:	f7ff f8e4 	bl	800d944 <ucdr_buffer_remaining>
 800e77c:	4603      	mov	r3, r0
 800e77e:	f10d 0019 	add.w	r0, sp, #25
 800e782:	9000      	str	r0, [sp, #0]
 800e784:	9a03      	ldr	r2, [sp, #12]
 800e786:	4651      	mov	r1, sl
 800e788:	4638      	mov	r0, r7
 800e78a:	f006 fa2f 	bl	8014bec <uxr_receive_reliable_message>
 800e78e:	b1c0      	cbz	r0, 800e7c2 <listen_message_reliably+0x236>
 800e790:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e794:	b393      	cbz	r3, 800e7fc <listen_message_reliably+0x270>
 800e796:	ad14      	add	r5, sp, #80	; 0x50
 800e798:	f04f 0a02 	mov.w	sl, #2
 800e79c:	e00a      	b.n	800e7b4 <listen_message_reliably+0x228>
 800e79e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800e7a2:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800e7a6:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800e7aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	f7ff fd64 	bl	800e27c <read_submessage_list>
 800e7b4:	2204      	movs	r2, #4
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	f006 fa97 	bl	8014cec <uxr_next_input_reliable_buffer_available>
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	d1ed      	bne.n	800e79e <listen_message_reliably+0x212>
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	4632      	mov	r2, r6
 800e7c6:	4649      	mov	r1, r9
 800e7c8:	f7ff fbd4 	bl	800df74 <write_submessage_acknack.isra.0>
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	b01d      	add	sp, #116	; 0x74
 800e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d4:	4631      	mov	r1, r6
 800e7d6:	f108 0008 	add.w	r0, r8, #8
 800e7da:	f000 fd13 	bl	800f204 <uxr_get_input_best_effort_stream>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d099      	beq.n	800e716 <listen_message_reliably+0x18a>
 800e7e2:	4651      	mov	r1, sl
 800e7e4:	f006 f96e 	bl	8014ac4 <uxr_receive_best_effort_message>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d094      	beq.n	800e716 <listen_message_reliably+0x18a>
 800e7ec:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800e7f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7f2:	a90c      	add	r1, sp, #48	; 0x30
 800e7f4:	4640      	mov	r0, r8
 800e7f6:	f7ff fd41 	bl	800e27c <read_submessage_list>
 800e7fa:	e78c      	b.n	800e716 <listen_message_reliably+0x18a>
 800e7fc:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800e800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e802:	a90c      	add	r1, sp, #48	; 0x30
 800e804:	4640      	mov	r0, r8
 800e806:	f7ff fd39 	bl	800e27c <read_submessage_list>
 800e80a:	e7c4      	b.n	800e796 <listen_message_reliably+0x20a>

0800e80c <uxr_run_session_timeout>:
 800e80c:	b570      	push	{r4, r5, r6, lr}
 800e80e:	4604      	mov	r4, r0
 800e810:	460d      	mov	r5, r1
 800e812:	f000 fd67 	bl	800f2e4 <uxr_millis>
 800e816:	4606      	mov	r6, r0
 800e818:	4620      	mov	r0, r4
 800e81a:	f7ff fc71 	bl	800e100 <uxr_flash_output_streams>
 800e81e:	4629      	mov	r1, r5
 800e820:	4620      	mov	r0, r4
 800e822:	f7ff feb3 	bl	800e58c <listen_message_reliably>
 800e826:	f000 fd5d 	bl	800f2e4 <uxr_millis>
 800e82a:	1b83      	subs	r3, r0, r6
 800e82c:	1ae9      	subs	r1, r5, r3
 800e82e:	2900      	cmp	r1, #0
 800e830:	dcf6      	bgt.n	800e820 <uxr_run_session_timeout+0x14>
 800e832:	f104 0008 	add.w	r0, r4, #8
 800e836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e83a:	f000 bcf7 	b.w	800f22c <uxr_output_streams_confirmed>
 800e83e:	bf00      	nop

0800e840 <uxr_run_session_until_data>:
 800e840:	b570      	push	{r4, r5, r6, lr}
 800e842:	4604      	mov	r4, r0
 800e844:	460d      	mov	r5, r1
 800e846:	f000 fd4d 	bl	800f2e4 <uxr_millis>
 800e84a:	4606      	mov	r6, r0
 800e84c:	4620      	mov	r0, r4
 800e84e:	f7ff fc57 	bl	800e100 <uxr_flash_output_streams>
 800e852:	2300      	movs	r3, #0
 800e854:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800e858:	4629      	mov	r1, r5
 800e85a:	e005      	b.n	800e868 <uxr_run_session_until_data+0x28>
 800e85c:	f000 fd42 	bl	800f2e4 <uxr_millis>
 800e860:	1b83      	subs	r3, r0, r6
 800e862:	1ae9      	subs	r1, r5, r3
 800e864:	2900      	cmp	r1, #0
 800e866:	dd07      	ble.n	800e878 <uxr_run_session_until_data+0x38>
 800e868:	4620      	mov	r0, r4
 800e86a:	f7ff fe8f 	bl	800e58c <listen_message_reliably>
 800e86e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800e872:	2800      	cmp	r0, #0
 800e874:	d0f2      	beq.n	800e85c <uxr_run_session_until_data+0x1c>
 800e876:	bd70      	pop	{r4, r5, r6, pc}
 800e878:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800e87c:	bd70      	pop	{r4, r5, r6, pc}
 800e87e:	bf00      	nop

0800e880 <uxr_run_session_until_confirm_delivery>:
 800e880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e884:	4606      	mov	r6, r0
 800e886:	460d      	mov	r5, r1
 800e888:	f000 fd2c 	bl	800f2e4 <uxr_millis>
 800e88c:	4607      	mov	r7, r0
 800e88e:	4630      	mov	r0, r6
 800e890:	f7ff fc36 	bl	800e100 <uxr_flash_output_streams>
 800e894:	2d00      	cmp	r5, #0
 800e896:	f106 0808 	add.w	r8, r6, #8
 800e89a:	bfa8      	it	ge
 800e89c:	462c      	movge	r4, r5
 800e89e:	da07      	bge.n	800e8b0 <uxr_run_session_until_confirm_delivery+0x30>
 800e8a0:	e00e      	b.n	800e8c0 <uxr_run_session_until_confirm_delivery+0x40>
 800e8a2:	f7ff fe73 	bl	800e58c <listen_message_reliably>
 800e8a6:	f000 fd1d 	bl	800f2e4 <uxr_millis>
 800e8aa:	1bc3      	subs	r3, r0, r7
 800e8ac:	1aec      	subs	r4, r5, r3
 800e8ae:	d407      	bmi.n	800e8c0 <uxr_run_session_until_confirm_delivery+0x40>
 800e8b0:	4640      	mov	r0, r8
 800e8b2:	f000 fcbb 	bl	800f22c <uxr_output_streams_confirmed>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	4621      	mov	r1, r4
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d0f0      	beq.n	800e8a2 <uxr_run_session_until_confirm_delivery+0x22>
 800e8c0:	4640      	mov	r0, r8
 800e8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c6:	f000 bcb1 	b.w	800f22c <uxr_output_streams_confirmed>
 800e8ca:	bf00      	nop

0800e8cc <uxr_run_session_until_all_status>:
 800e8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8d0:	9c08      	ldr	r4, [sp, #32]
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	460f      	mov	r7, r1
 800e8d6:	4691      	mov	r9, r2
 800e8d8:	461d      	mov	r5, r3
 800e8da:	f7ff fc11 	bl	800e100 <uxr_flash_output_streams>
 800e8de:	b124      	cbz	r4, 800e8ea <uxr_run_session_until_all_status+0x1e>
 800e8e0:	4622      	mov	r2, r4
 800e8e2:	21ff      	movs	r1, #255	; 0xff
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	f008 fa0f 	bl	8016d08 <memset>
 800e8ea:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800e8ee:	67f4      	str	r4, [r6, #124]	; 0x7c
 800e8f0:	f000 fcf8 	bl	800f2e4 <uxr_millis>
 800e8f4:	3d01      	subs	r5, #1
 800e8f6:	f1a9 0902 	sub.w	r9, r9, #2
 800e8fa:	4680      	mov	r8, r0
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	4630      	mov	r0, r6
 800e900:	f7ff fe44 	bl	800e58c <listen_message_reliably>
 800e904:	f000 fcee 	bl	800f2e4 <uxr_millis>
 800e908:	eba0 0008 	sub.w	r0, r0, r8
 800e90c:	1a39      	subs	r1, r7, r0
 800e90e:	b344      	cbz	r4, 800e962 <uxr_run_session_until_all_status+0x96>
 800e910:	4628      	mov	r0, r5
 800e912:	46ac      	mov	ip, r5
 800e914:	2301      	movs	r3, #1
 800e916:	e002      	b.n	800e91e <uxr_run_session_until_all_status+0x52>
 800e918:	42a3      	cmp	r3, r4
 800e91a:	d20d      	bcs.n	800e938 <uxr_run_session_until_all_status+0x6c>
 800e91c:	3301      	adds	r3, #1
 800e91e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800e922:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800e926:	d1f7      	bne.n	800e918 <uxr_run_session_until_all_status+0x4c>
 800e928:	42a3      	cmp	r3, r4
 800e92a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800e92e:	d213      	bcs.n	800e958 <uxr_run_session_until_all_status+0x8c>
 800e930:	2a00      	cmp	r2, #0
 800e932:	d0f3      	beq.n	800e91c <uxr_run_session_until_all_status+0x50>
 800e934:	2900      	cmp	r1, #0
 800e936:	dce2      	bgt.n	800e8fe <uxr_run_session_until_all_status+0x32>
 800e938:	2300      	movs	r3, #0
 800e93a:	67f3      	str	r3, [r6, #124]	; 0x7c
 800e93c:	442c      	add	r4, r5
 800e93e:	e001      	b.n	800e944 <uxr_run_session_until_all_status+0x78>
 800e940:	2b01      	cmp	r3, #1
 800e942:	d812      	bhi.n	800e96a <uxr_run_session_until_all_status+0x9e>
 800e944:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e948:	4284      	cmp	r4, r0
 800e94a:	d1f9      	bne.n	800e940 <uxr_run_session_until_all_status+0x74>
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	bf8c      	ite	hi
 800e950:	2000      	movhi	r0, #0
 800e952:	2001      	movls	r0, #1
 800e954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e958:	2900      	cmp	r1, #0
 800e95a:	dded      	ble.n	800e938 <uxr_run_session_until_all_status+0x6c>
 800e95c:	2a00      	cmp	r2, #0
 800e95e:	d1ce      	bne.n	800e8fe <uxr_run_session_until_all_status+0x32>
 800e960:	e7ea      	b.n	800e938 <uxr_run_session_until_all_status+0x6c>
 800e962:	67f4      	str	r4, [r6, #124]	; 0x7c
 800e964:	2001      	movs	r0, #1
 800e966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e96a:	2000      	movs	r0, #0
 800e96c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e970 <wait_session_status>:
 800e970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e974:	4604      	mov	r4, r0
 800e976:	b09d      	sub	sp, #116	; 0x74
 800e978:	20ff      	movs	r0, #255	; 0xff
 800e97a:	7160      	strb	r0, [r4, #5]
 800e97c:	9303      	str	r3, [sp, #12]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 80b6 	beq.w	800eaf0 <wait_session_status+0x180>
 800e984:	468a      	mov	sl, r1
 800e986:	4691      	mov	r9, r2
 800e988:	f04f 0b00 	mov.w	fp, #0
 800e98c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e98e:	464a      	mov	r2, r9
 800e990:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e994:	4651      	mov	r1, sl
 800e996:	47a8      	blx	r5
 800e998:	f000 fca4 	bl	800f2e4 <uxr_millis>
 800e99c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e9a0:	4605      	mov	r5, r0
 800e9a2:	e009      	b.n	800e9b8 <wait_session_status+0x48>
 800e9a4:	f000 fc9e 	bl	800f2e4 <uxr_millis>
 800e9a8:	1b40      	subs	r0, r0, r5
 800e9aa:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	dd40      	ble.n	800ea34 <wait_session_status+0xc4>
 800e9b2:	7960      	ldrb	r0, [r4, #5]
 800e9b4:	28ff      	cmp	r0, #255	; 0xff
 800e9b6:	d145      	bne.n	800ea44 <wait_session_status+0xd4>
 800e9b8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800e9ba:	a908      	add	r1, sp, #32
 800e9bc:	6896      	ldr	r6, [r2, #8]
 800e9be:	6810      	ldr	r0, [r2, #0]
 800e9c0:	aa09      	add	r2, sp, #36	; 0x24
 800e9c2:	47b0      	blx	r6
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	d0ed      	beq.n	800e9a4 <wait_session_status+0x34>
 800e9c8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e9cc:	a80c      	add	r0, sp, #48	; 0x30
 800e9ce:	f7fe ff89 	bl	800d8e4 <ucdr_init_buffer>
 800e9d2:	2600      	movs	r6, #0
 800e9d4:	f10d 031e 	add.w	r3, sp, #30
 800e9d8:	aa07      	add	r2, sp, #28
 800e9da:	a90c      	add	r1, sp, #48	; 0x30
 800e9dc:	4620      	mov	r0, r4
 800e9de:	f88d 601c 	strb.w	r6, [sp, #28]
 800e9e2:	f000 fa87 	bl	800eef4 <uxr_read_session_header>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	d0dc      	beq.n	800e9a4 <wait_session_status+0x34>
 800e9ea:	4631      	mov	r1, r6
 800e9ec:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e9f0:	f000 fb24 	bl	800f03c <uxr_stream_id_from_raw>
 800e9f4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e9f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e9fc:	9302      	str	r3, [sp, #8]
 800e9fe:	2f01      	cmp	r7, #1
 800ea00:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800ea04:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ea08:	d05c      	beq.n	800eac4 <wait_session_status+0x154>
 800ea0a:	2f02      	cmp	r7, #2
 800ea0c:	d020      	beq.n	800ea50 <wait_session_status+0xe0>
 800ea0e:	2f00      	cmp	r7, #0
 800ea10:	d1c8      	bne.n	800e9a4 <wait_session_status+0x34>
 800ea12:	4639      	mov	r1, r7
 800ea14:	4638      	mov	r0, r7
 800ea16:	f000 fb11 	bl	800f03c <uxr_stream_id_from_raw>
 800ea1a:	a90c      	add	r1, sp, #48	; 0x30
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	900b      	str	r0, [sp, #44]	; 0x2c
 800ea20:	4620      	mov	r0, r4
 800ea22:	f7ff fc2b 	bl	800e27c <read_submessage_list>
 800ea26:	f000 fc5d 	bl	800f2e4 <uxr_millis>
 800ea2a:	1b40      	subs	r0, r0, r5
 800ea2c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	dcbe      	bgt.n	800e9b2 <wait_session_status+0x42>
 800ea34:	9b03      	ldr	r3, [sp, #12]
 800ea36:	7960      	ldrb	r0, [r4, #5]
 800ea38:	f10b 0b01 	add.w	fp, fp, #1
 800ea3c:	455b      	cmp	r3, fp
 800ea3e:	d001      	beq.n	800ea44 <wait_session_status+0xd4>
 800ea40:	28ff      	cmp	r0, #255	; 0xff
 800ea42:	d0a3      	beq.n	800e98c <wait_session_status+0x1c>
 800ea44:	38ff      	subs	r0, #255	; 0xff
 800ea46:	bf18      	it	ne
 800ea48:	2001      	movne	r0, #1
 800ea4a:	b01d      	add	sp, #116	; 0x74
 800ea4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea50:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800ea54:	9304      	str	r3, [sp, #16]
 800ea56:	4631      	mov	r1, r6
 800ea58:	f104 0008 	add.w	r0, r4, #8
 800ea5c:	f000 fbdc 	bl	800f218 <uxr_get_input_reliable_stream>
 800ea60:	4680      	mov	r8, r0
 800ea62:	b348      	cbz	r0, 800eab8 <wait_session_status+0x148>
 800ea64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea66:	9205      	str	r2, [sp, #20]
 800ea68:	a80c      	add	r0, sp, #48	; 0x30
 800ea6a:	f7fe ff6b 	bl	800d944 <ucdr_buffer_remaining>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	f10d 001d 	add.w	r0, sp, #29
 800ea74:	9000      	str	r0, [sp, #0]
 800ea76:	9a05      	ldr	r2, [sp, #20]
 800ea78:	9902      	ldr	r1, [sp, #8]
 800ea7a:	4640      	mov	r0, r8
 800ea7c:	f006 f8b6 	bl	8014bec <uxr_receive_reliable_message>
 800ea80:	b1d0      	cbz	r0, 800eab8 <wait_session_status+0x148>
 800ea82:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d03a      	beq.n	800eb00 <wait_session_status+0x190>
 800ea8a:	9f04      	ldr	r7, [sp, #16]
 800ea8c:	e00a      	b.n	800eaa4 <wait_session_status+0x134>
 800ea8e:	f04f 0302 	mov.w	r3, #2
 800ea92:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800ea96:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ea9a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800ea9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eaa0:	f7ff fbec 	bl	800e27c <read_submessage_list>
 800eaa4:	a914      	add	r1, sp, #80	; 0x50
 800eaa6:	2204      	movs	r2, #4
 800eaa8:	4640      	mov	r0, r8
 800eaaa:	f006 f91f 	bl	8014cec <uxr_next_input_reliable_buffer_available>
 800eaae:	4603      	mov	r3, r0
 800eab0:	a914      	add	r1, sp, #80	; 0x50
 800eab2:	4620      	mov	r0, r4
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1ea      	bne.n	800ea8e <wait_session_status+0x11e>
 800eab8:	9904      	ldr	r1, [sp, #16]
 800eaba:	4632      	mov	r2, r6
 800eabc:	4620      	mov	r0, r4
 800eabe:	f7ff fa59 	bl	800df74 <write_submessage_acknack.isra.0>
 800eac2:	e76f      	b.n	800e9a4 <wait_session_status+0x34>
 800eac4:	4631      	mov	r1, r6
 800eac6:	f104 0008 	add.w	r0, r4, #8
 800eaca:	f000 fb9b 	bl	800f204 <uxr_get_input_best_effort_stream>
 800eace:	2800      	cmp	r0, #0
 800ead0:	f43f af68 	beq.w	800e9a4 <wait_session_status+0x34>
 800ead4:	9902      	ldr	r1, [sp, #8]
 800ead6:	f005 fff5 	bl	8014ac4 <uxr_receive_best_effort_message>
 800eada:	2800      	cmp	r0, #0
 800eadc:	f43f af62 	beq.w	800e9a4 <wait_session_status+0x34>
 800eae0:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800eae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eae6:	a90c      	add	r1, sp, #48	; 0x30
 800eae8:	4620      	mov	r0, r4
 800eaea:	f7ff fbc7 	bl	800e27c <read_submessage_list>
 800eaee:	e759      	b.n	800e9a4 <wait_session_status+0x34>
 800eaf0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800eaf2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800eaf6:	47a0      	blx	r4
 800eaf8:	2001      	movs	r0, #1
 800eafa:	b01d      	add	sp, #116	; 0x74
 800eafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb00:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800eb04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb06:	a90c      	add	r1, sp, #48	; 0x30
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f7ff fbb7 	bl	800e27c <read_submessage_list>
 800eb0e:	e7bc      	b.n	800ea8a <wait_session_status+0x11a>

0800eb10 <uxr_delete_session_retries>:
 800eb10:	b530      	push	{r4, r5, lr}
 800eb12:	b08f      	sub	sp, #60	; 0x3c
 800eb14:	4604      	mov	r4, r0
 800eb16:	460d      	mov	r5, r1
 800eb18:	f000 fa2e 	bl	800ef78 <uxr_session_header_offset>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	2210      	movs	r2, #16
 800eb20:	9000      	str	r0, [sp, #0]
 800eb22:	a902      	add	r1, sp, #8
 800eb24:	a806      	add	r0, sp, #24
 800eb26:	f7fe fecb 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 800eb2a:	a906      	add	r1, sp, #24
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f000 f973 	bl	800ee18 <uxr_buffer_delete_session>
 800eb32:	2200      	movs	r2, #0
 800eb34:	4611      	mov	r1, r2
 800eb36:	9b06      	ldr	r3, [sp, #24]
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f000 f9c7 	bl	800eecc <uxr_stamp_session_header>
 800eb3e:	a806      	add	r0, sp, #24
 800eb40:	f7fe fefc 	bl	800d93c <ucdr_buffer_length>
 800eb44:	462b      	mov	r3, r5
 800eb46:	4602      	mov	r2, r0
 800eb48:	a902      	add	r1, sp, #8
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f7ff ff10 	bl	800e970 <wait_session_status>
 800eb50:	b118      	cbz	r0, 800eb5a <uxr_delete_session_retries+0x4a>
 800eb52:	7960      	ldrb	r0, [r4, #5]
 800eb54:	fab0 f080 	clz	r0, r0
 800eb58:	0940      	lsrs	r0, r0, #5
 800eb5a:	b00f      	add	sp, #60	; 0x3c
 800eb5c:	bd30      	pop	{r4, r5, pc}
 800eb5e:	bf00      	nop

0800eb60 <uxr_create_session>:
 800eb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb64:	f100 0b08 	add.w	fp, r0, #8
 800eb68:	b0ab      	sub	sp, #172	; 0xac
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	4658      	mov	r0, fp
 800eb6e:	f000 fa99 	bl	800f0a4 <uxr_reset_stream_storage>
 800eb72:	4620      	mov	r0, r4
 800eb74:	f000 fa00 	bl	800ef78 <uxr_session_header_offset>
 800eb78:	2300      	movs	r3, #0
 800eb7a:	9000      	str	r0, [sp, #0]
 800eb7c:	221c      	movs	r2, #28
 800eb7e:	a90b      	add	r1, sp, #44	; 0x2c
 800eb80:	a812      	add	r0, sp, #72	; 0x48
 800eb82:	f7fe fe9d 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 800eb86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800eb88:	8a1a      	ldrh	r2, [r3, #16]
 800eb8a:	3a04      	subs	r2, #4
 800eb8c:	b292      	uxth	r2, r2
 800eb8e:	a912      	add	r1, sp, #72	; 0x48
 800eb90:	4620      	mov	r0, r4
 800eb92:	f000 f917 	bl	800edc4 <uxr_buffer_create_session>
 800eb96:	9912      	ldr	r1, [sp, #72]	; 0x48
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f000 f983 	bl	800eea4 <uxr_stamp_create_session_header>
 800eb9e:	a812      	add	r0, sp, #72	; 0x48
 800eba0:	f7fe fecc 	bl	800d93c <ucdr_buffer_length>
 800eba4:	23ff      	movs	r3, #255	; 0xff
 800eba6:	7163      	strb	r3, [r4, #5]
 800eba8:	230a      	movs	r3, #10
 800ebaa:	46da      	mov	sl, fp
 800ebac:	9303      	str	r3, [sp, #12]
 800ebae:	4683      	mov	fp, r0
 800ebb0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ebb2:	465a      	mov	r2, fp
 800ebb4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ebb8:	a90b      	add	r1, sp, #44	; 0x2c
 800ebba:	47a8      	blx	r5
 800ebbc:	f000 fb92 	bl	800f2e4 <uxr_millis>
 800ebc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ebc4:	4605      	mov	r5, r0
 800ebc6:	e009      	b.n	800ebdc <uxr_create_session+0x7c>
 800ebc8:	f000 fb8c 	bl	800f2e4 <uxr_millis>
 800ebcc:	1b40      	subs	r0, r0, r5
 800ebce:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	7962      	ldrb	r2, [r4, #5]
 800ebd6:	dd38      	ble.n	800ec4a <uxr_create_session+0xea>
 800ebd8:	2aff      	cmp	r2, #255	; 0xff
 800ebda:	d13c      	bne.n	800ec56 <uxr_create_session+0xf6>
 800ebdc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ebde:	a907      	add	r1, sp, #28
 800ebe0:	6896      	ldr	r6, [r2, #8]
 800ebe2:	6810      	ldr	r0, [r2, #0]
 800ebe4:	aa08      	add	r2, sp, #32
 800ebe6:	47b0      	blx	r6
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	d0ed      	beq.n	800ebc8 <uxr_create_session+0x68>
 800ebec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ebf0:	a81a      	add	r0, sp, #104	; 0x68
 800ebf2:	f7fe fe77 	bl	800d8e4 <ucdr_init_buffer>
 800ebf6:	2600      	movs	r6, #0
 800ebf8:	f10d 031a 	add.w	r3, sp, #26
 800ebfc:	aa06      	add	r2, sp, #24
 800ebfe:	a91a      	add	r1, sp, #104	; 0x68
 800ec00:	4620      	mov	r0, r4
 800ec02:	f88d 6018 	strb.w	r6, [sp, #24]
 800ec06:	f000 f975 	bl	800eef4 <uxr_read_session_header>
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	d0dc      	beq.n	800ebc8 <uxr_create_session+0x68>
 800ec0e:	4631      	mov	r1, r6
 800ec10:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ec14:	f000 fa12 	bl	800f03c <uxr_stream_id_from_raw>
 800ec18:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800ec1c:	2e01      	cmp	r6, #1
 800ec1e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800ec22:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800ec26:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ec2a:	d053      	beq.n	800ecd4 <uxr_create_session+0x174>
 800ec2c:	2e02      	cmp	r6, #2
 800ec2e:	d018      	beq.n	800ec62 <uxr_create_session+0x102>
 800ec30:	2e00      	cmp	r6, #0
 800ec32:	d1c9      	bne.n	800ebc8 <uxr_create_session+0x68>
 800ec34:	4631      	mov	r1, r6
 800ec36:	4630      	mov	r0, r6
 800ec38:	f000 fa00 	bl	800f03c <uxr_stream_id_from_raw>
 800ec3c:	a91a      	add	r1, sp, #104	; 0x68
 800ec3e:	4602      	mov	r2, r0
 800ec40:	900a      	str	r0, [sp, #40]	; 0x28
 800ec42:	4620      	mov	r0, r4
 800ec44:	f7ff fb1a 	bl	800e27c <read_submessage_list>
 800ec48:	e7be      	b.n	800ebc8 <uxr_create_session+0x68>
 800ec4a:	9b03      	ldr	r3, [sp, #12]
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	9303      	str	r3, [sp, #12]
 800ec50:	d001      	beq.n	800ec56 <uxr_create_session+0xf6>
 800ec52:	2aff      	cmp	r2, #255	; 0xff
 800ec54:	d0ac      	beq.n	800ebb0 <uxr_create_session+0x50>
 800ec56:	2a00      	cmp	r2, #0
 800ec58:	d051      	beq.n	800ecfe <uxr_create_session+0x19e>
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	b02b      	add	sp, #172	; 0xac
 800ec5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec62:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ec66:	9304      	str	r3, [sp, #16]
 800ec68:	4639      	mov	r1, r7
 800ec6a:	4650      	mov	r0, sl
 800ec6c:	f000 fad4 	bl	800f218 <uxr_get_input_reliable_stream>
 800ec70:	4680      	mov	r8, r0
 800ec72:	b348      	cbz	r0, 800ecc8 <uxr_create_session+0x168>
 800ec74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ec76:	9205      	str	r2, [sp, #20]
 800ec78:	a81a      	add	r0, sp, #104	; 0x68
 800ec7a:	f7fe fe63 	bl	800d944 <ucdr_buffer_remaining>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	f10d 0019 	add.w	r0, sp, #25
 800ec84:	9000      	str	r0, [sp, #0]
 800ec86:	9a05      	ldr	r2, [sp, #20]
 800ec88:	4649      	mov	r1, r9
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	f005 ffae 	bl	8014bec <uxr_receive_reliable_message>
 800ec90:	b1d0      	cbz	r0, 800ecc8 <uxr_create_session+0x168>
 800ec92:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d038      	beq.n	800ed0c <uxr_create_session+0x1ac>
 800ec9a:	9e04      	ldr	r6, [sp, #16]
 800ec9c:	e00a      	b.n	800ecb4 <uxr_create_session+0x154>
 800ec9e:	f04f 0302 	mov.w	r3, #2
 800eca2:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800eca6:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800ecaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecb0:	f7ff fae4 	bl	800e27c <read_submessage_list>
 800ecb4:	a922      	add	r1, sp, #136	; 0x88
 800ecb6:	2204      	movs	r2, #4
 800ecb8:	4640      	mov	r0, r8
 800ecba:	f006 f817 	bl	8014cec <uxr_next_input_reliable_buffer_available>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	a922      	add	r1, sp, #136	; 0x88
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1ea      	bne.n	800ec9e <uxr_create_session+0x13e>
 800ecc8:	9904      	ldr	r1, [sp, #16]
 800ecca:	463a      	mov	r2, r7
 800eccc:	4620      	mov	r0, r4
 800ecce:	f7ff f951 	bl	800df74 <write_submessage_acknack.isra.0>
 800ecd2:	e779      	b.n	800ebc8 <uxr_create_session+0x68>
 800ecd4:	4639      	mov	r1, r7
 800ecd6:	4650      	mov	r0, sl
 800ecd8:	f000 fa94 	bl	800f204 <uxr_get_input_best_effort_stream>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	f43f af73 	beq.w	800ebc8 <uxr_create_session+0x68>
 800ece2:	4649      	mov	r1, r9
 800ece4:	f005 feee 	bl	8014ac4 <uxr_receive_best_effort_message>
 800ece8:	2800      	cmp	r0, #0
 800ecea:	f43f af6d 	beq.w	800ebc8 <uxr_create_session+0x68>
 800ecee:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800ecf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecf4:	a91a      	add	r1, sp, #104	; 0x68
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f7ff fac0 	bl	800e27c <read_submessage_list>
 800ecfc:	e764      	b.n	800ebc8 <uxr_create_session+0x68>
 800ecfe:	4650      	mov	r0, sl
 800ed00:	f000 f9d0 	bl	800f0a4 <uxr_reset_stream_storage>
 800ed04:	2001      	movs	r0, #1
 800ed06:	b02b      	add	sp, #172	; 0xac
 800ed08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed0c:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800ed10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed12:	a91a      	add	r1, sp, #104	; 0x68
 800ed14:	4620      	mov	r0, r4
 800ed16:	f7ff fab1 	bl	800e27c <read_submessage_list>
 800ed1a:	e7be      	b.n	800ec9a <uxr_create_session+0x13a>

0800ed1c <uxr_prepare_stream_to_write_submessage>:
 800ed1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed20:	b082      	sub	sp, #8
 800ed22:	4682      	mov	sl, r0
 800ed24:	4610      	mov	r0, r2
 800ed26:	4615      	mov	r5, r2
 800ed28:	461e      	mov	r6, r3
 800ed2a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800ed2e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800ed32:	9101      	str	r1, [sp, #4]
 800ed34:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ed38:	f000 face 	bl	800f2d8 <uxr_submessage_padding>
 800ed3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ed40:	f105 0904 	add.w	r9, r5, #4
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	4481      	add	r9, r0
 800ed48:	d01d      	beq.n	800ed86 <uxr_prepare_stream_to_write_submessage+0x6a>
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	d116      	bne.n	800ed7c <uxr_prepare_stream_to_write_submessage+0x60>
 800ed4e:	4621      	mov	r1, r4
 800ed50:	f10a 0008 	add.w	r0, sl, #8
 800ed54:	f000 fa4c 	bl	800f1f0 <uxr_get_output_reliable_stream>
 800ed58:	4604      	mov	r4, r0
 800ed5a:	b158      	cbz	r0, 800ed74 <uxr_prepare_stream_to_write_submessage+0x58>
 800ed5c:	4649      	mov	r1, r9
 800ed5e:	4632      	mov	r2, r6
 800ed60:	f006 f980 	bl	8015064 <uxr_prepare_reliable_buffer_to_write>
 800ed64:	4604      	mov	r4, r0
 800ed66:	b12c      	cbz	r4, 800ed74 <uxr_prepare_stream_to_write_submessage+0x58>
 800ed68:	4643      	mov	r3, r8
 800ed6a:	b2aa      	uxth	r2, r5
 800ed6c:	4639      	mov	r1, r7
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f000 fa72 	bl	800f258 <uxr_buffer_submessage_header>
 800ed74:	4620      	mov	r0, r4
 800ed76:	b002      	add	sp, #8
 800ed78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed7c:	2400      	movs	r4, #0
 800ed7e:	4620      	mov	r0, r4
 800ed80:	b002      	add	sp, #8
 800ed82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed86:	4621      	mov	r1, r4
 800ed88:	f10a 0008 	add.w	r0, sl, #8
 800ed8c:	f000 fa28 	bl	800f1e0 <uxr_get_output_best_effort_stream>
 800ed90:	4604      	mov	r4, r0
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d0ee      	beq.n	800ed74 <uxr_prepare_stream_to_write_submessage+0x58>
 800ed96:	4649      	mov	r1, r9
 800ed98:	4632      	mov	r2, r6
 800ed9a:	f006 f893 	bl	8014ec4 <uxr_prepare_best_effort_buffer_to_write>
 800ed9e:	4604      	mov	r4, r0
 800eda0:	e7e1      	b.n	800ed66 <uxr_prepare_stream_to_write_submessage+0x4a>
 800eda2:	bf00      	nop

0800eda4 <uxr_init_session_info>:
 800eda4:	0e13      	lsrs	r3, r2, #24
 800eda6:	7043      	strb	r3, [r0, #1]
 800eda8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800edac:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800edb0:	7001      	strb	r1, [r0, #0]
 800edb2:	70c3      	strb	r3, [r0, #3]
 800edb4:	2109      	movs	r1, #9
 800edb6:	23ff      	movs	r3, #255	; 0xff
 800edb8:	f880 c002 	strb.w	ip, [r0, #2]
 800edbc:	7102      	strb	r2, [r0, #4]
 800edbe:	80c1      	strh	r1, [r0, #6]
 800edc0:	7143      	strb	r3, [r0, #5]
 800edc2:	4770      	bx	lr

0800edc4 <uxr_buffer_create_session>:
 800edc4:	b530      	push	{r4, r5, lr}
 800edc6:	b089      	sub	sp, #36	; 0x24
 800edc8:	2300      	movs	r3, #0
 800edca:	4d12      	ldr	r5, [pc, #72]	; (800ee14 <uxr_buffer_create_session+0x50>)
 800edcc:	9307      	str	r3, [sp, #28]
 800edce:	f8ad 201c 	strh.w	r2, [sp, #28]
 800edd2:	2201      	movs	r2, #1
 800edd4:	9301      	str	r3, [sp, #4]
 800edd6:	80c2      	strh	r2, [r0, #6]
 800edd8:	f88d 2004 	strb.w	r2, [sp, #4]
 800eddc:	682a      	ldr	r2, [r5, #0]
 800edde:	9200      	str	r2, [sp, #0]
 800ede0:	88aa      	ldrh	r2, [r5, #4]
 800ede2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ede6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800edea:	9202      	str	r2, [sp, #8]
 800edec:	460c      	mov	r4, r1
 800edee:	7802      	ldrb	r2, [r0, #0]
 800edf0:	9303      	str	r3, [sp, #12]
 800edf2:	4619      	mov	r1, r3
 800edf4:	f88d 200c 	strb.w	r2, [sp, #12]
 800edf8:	4620      	mov	r0, r4
 800edfa:	2210      	movs	r2, #16
 800edfc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800ee00:	9306      	str	r3, [sp, #24]
 800ee02:	f000 fa29 	bl	800f258 <uxr_buffer_submessage_header>
 800ee06:	4669      	mov	r1, sp
 800ee08:	4620      	mov	r0, r4
 800ee0a:	f001 f981 	bl	8010110 <uxr_serialize_CREATE_CLIENT_Payload>
 800ee0e:	b009      	add	sp, #36	; 0x24
 800ee10:	bd30      	pop	{r4, r5, pc}
 800ee12:	bf00      	nop
 800ee14:	08017d50 	.word	0x08017d50

0800ee18 <uxr_buffer_delete_session>:
 800ee18:	b510      	push	{r4, lr}
 800ee1a:	4b0c      	ldr	r3, [pc, #48]	; (800ee4c <uxr_buffer_delete_session+0x34>)
 800ee1c:	b082      	sub	sp, #8
 800ee1e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800ee22:	f8ad c006 	strh.w	ip, [sp, #6]
 800ee26:	460c      	mov	r4, r1
 800ee28:	2202      	movs	r2, #2
 800ee2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee2e:	80c2      	strh	r2, [r0, #6]
 800ee30:	f8ad 3004 	strh.w	r3, [sp, #4]
 800ee34:	2204      	movs	r2, #4
 800ee36:	2300      	movs	r3, #0
 800ee38:	2103      	movs	r1, #3
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f000 fa0c 	bl	800f258 <uxr_buffer_submessage_header>
 800ee40:	a901      	add	r1, sp, #4
 800ee42:	4620      	mov	r0, r4
 800ee44:	f001 fa0a 	bl	801025c <uxr_serialize_DELETE_Payload>
 800ee48:	b002      	add	sp, #8
 800ee4a:	bd10      	pop	{r4, pc}
 800ee4c:	08017d50 	.word	0x08017d50

0800ee50 <uxr_read_create_session_status>:
 800ee50:	b510      	push	{r4, lr}
 800ee52:	b088      	sub	sp, #32
 800ee54:	4604      	mov	r4, r0
 800ee56:	4608      	mov	r0, r1
 800ee58:	a901      	add	r1, sp, #4
 800ee5a:	f001 fa0f 	bl	801027c <uxr_deserialize_STATUS_AGENT_Payload>
 800ee5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee62:	7163      	strb	r3, [r4, #5]
 800ee64:	b008      	add	sp, #32
 800ee66:	bd10      	pop	{r4, pc}

0800ee68 <uxr_read_delete_session_status>:
 800ee68:	b510      	push	{r4, lr}
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	b084      	sub	sp, #16
 800ee6e:	4608      	mov	r0, r1
 800ee70:	a902      	add	r1, sp, #8
 800ee72:	f001 fa33 	bl	80102dc <uxr_deserialize_STATUS_Payload>
 800ee76:	88e3      	ldrh	r3, [r4, #6]
 800ee78:	2b02      	cmp	r3, #2
 800ee7a:	d001      	beq.n	800ee80 <uxr_read_delete_session_status+0x18>
 800ee7c:	b004      	add	sp, #16
 800ee7e:	bd10      	pop	{r4, pc}
 800ee80:	f10d 000a 	add.w	r0, sp, #10
 800ee84:	f7fe ff06 	bl	800dc94 <uxr_object_id_from_raw>
 800ee88:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800ee8c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800ee90:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	bf04      	itt	eq
 800ee9a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800ee9e:	7163      	strbeq	r3, [r4, #5]
 800eea0:	b004      	add	sp, #16
 800eea2:	bd10      	pop	{r4, pc}

0800eea4 <uxr_stamp_create_session_header>:
 800eea4:	b510      	push	{r4, lr}
 800eea6:	2208      	movs	r2, #8
 800eea8:	b08a      	sub	sp, #40	; 0x28
 800eeaa:	4604      	mov	r4, r0
 800eeac:	eb0d 0002 	add.w	r0, sp, r2
 800eeb0:	f7fe fd18 	bl	800d8e4 <ucdr_init_buffer>
 800eeb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb8:	9400      	str	r4, [sp, #0]
 800eeba:	2300      	movs	r3, #0
 800eebc:	461a      	mov	r2, r3
 800eebe:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800eec2:	a802      	add	r0, sp, #8
 800eec4:	f000 fbc2 	bl	800f64c <uxr_serialize_message_header>
 800eec8:	b00a      	add	sp, #40	; 0x28
 800eeca:	bd10      	pop	{r4, pc}

0800eecc <uxr_stamp_session_header>:
 800eecc:	b530      	push	{r4, r5, lr}
 800eece:	b08d      	sub	sp, #52	; 0x34
 800eed0:	4604      	mov	r4, r0
 800eed2:	460d      	mov	r5, r1
 800eed4:	9203      	str	r2, [sp, #12]
 800eed6:	4619      	mov	r1, r3
 800eed8:	a804      	add	r0, sp, #16
 800eeda:	2208      	movs	r2, #8
 800eedc:	f7fe fd02 	bl	800d8e4 <ucdr_init_buffer>
 800eee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee4:	9b03      	ldr	r3, [sp, #12]
 800eee6:	9400      	str	r4, [sp, #0]
 800eee8:	462a      	mov	r2, r5
 800eeea:	a804      	add	r0, sp, #16
 800eeec:	f000 fbae 	bl	800f64c <uxr_serialize_message_header>
 800eef0:	b00d      	add	sp, #52	; 0x34
 800eef2:	bd30      	pop	{r4, r5, pc}

0800eef4 <uxr_read_session_header>:
 800eef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef8:	4607      	mov	r7, r0
 800eefa:	b084      	sub	sp, #16
 800eefc:	4608      	mov	r0, r1
 800eefe:	460c      	mov	r4, r1
 800ef00:	4615      	mov	r5, r2
 800ef02:	461e      	mov	r6, r3
 800ef04:	f7fe fd1e 	bl	800d944 <ucdr_buffer_remaining>
 800ef08:	2808      	cmp	r0, #8
 800ef0a:	d803      	bhi.n	800ef14 <uxr_read_session_header+0x20>
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	b004      	add	sp, #16
 800ef10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef14:	f10d 080c 	add.w	r8, sp, #12
 800ef18:	4633      	mov	r3, r6
 800ef1a:	462a      	mov	r2, r5
 800ef1c:	f8cd 8000 	str.w	r8, [sp]
 800ef20:	4620      	mov	r0, r4
 800ef22:	f10d 010b 	add.w	r1, sp, #11
 800ef26:	f000 fbaf 	bl	800f688 <uxr_deserialize_message_header>
 800ef2a:	783a      	ldrb	r2, [r7, #0]
 800ef2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d1eb      	bne.n	800ef0c <uxr_read_session_header+0x18>
 800ef34:	061b      	lsls	r3, r3, #24
 800ef36:	d41c      	bmi.n	800ef72 <uxr_read_session_header+0x7e>
 800ef38:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ef3c:	787b      	ldrb	r3, [r7, #1]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d003      	beq.n	800ef4a <uxr_read_session_header+0x56>
 800ef42:	2001      	movs	r0, #1
 800ef44:	f080 0001 	eor.w	r0, r0, #1
 800ef48:	e7e1      	b.n	800ef0e <uxr_read_session_header+0x1a>
 800ef4a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ef4e:	78bb      	ldrb	r3, [r7, #2]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	f107 0102 	add.w	r1, r7, #2
 800ef56:	d1f4      	bne.n	800ef42 <uxr_read_session_header+0x4e>
 800ef58:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ef5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d1ee      	bne.n	800ef42 <uxr_read_session_header+0x4e>
 800ef64:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ef68:	784b      	ldrb	r3, [r1, #1]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d1e9      	bne.n	800ef42 <uxr_read_session_header+0x4e>
 800ef6e:	2000      	movs	r0, #0
 800ef70:	e7e8      	b.n	800ef44 <uxr_read_session_header+0x50>
 800ef72:	2001      	movs	r0, #1
 800ef74:	e7cb      	b.n	800ef0e <uxr_read_session_header+0x1a>
 800ef76:	bf00      	nop

0800ef78 <uxr_session_header_offset>:
 800ef78:	f990 3000 	ldrsb.w	r3, [r0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	bfac      	ite	ge
 800ef80:	2008      	movge	r0, #8
 800ef82:	2004      	movlt	r0, #4
 800ef84:	4770      	bx	lr
 800ef86:	bf00      	nop

0800ef88 <uxr_init_base_object_request>:
 800ef88:	b510      	push	{r4, lr}
 800ef8a:	88c3      	ldrh	r3, [r0, #6]
 800ef8c:	b082      	sub	sp, #8
 800ef8e:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800ef92:	9101      	str	r1, [sp, #4]
 800ef94:	f1a3 010a 	sub.w	r1, r3, #10
 800ef98:	b289      	uxth	r1, r1
 800ef9a:	42a1      	cmp	r1, r4
 800ef9c:	d80e      	bhi.n	800efbc <uxr_init_base_object_request+0x34>
 800ef9e:	3301      	adds	r3, #1
 800efa0:	b29c      	uxth	r4, r3
 800efa2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	80c4      	strh	r4, [r0, #6]
 800efaa:	9801      	ldr	r0, [sp, #4]
 800efac:	7011      	strb	r1, [r2, #0]
 800efae:	7053      	strb	r3, [r2, #1]
 800efb0:	1c91      	adds	r1, r2, #2
 800efb2:	f7fe fe83 	bl	800dcbc <uxr_object_id_to_raw>
 800efb6:	4620      	mov	r0, r4
 800efb8:	b002      	add	sp, #8
 800efba:	bd10      	pop	{r4, pc}
 800efbc:	230a      	movs	r3, #10
 800efbe:	2100      	movs	r1, #0
 800efc0:	461c      	mov	r4, r3
 800efc2:	e7f1      	b.n	800efa8 <uxr_init_base_object_request+0x20>

0800efc4 <uxr_parse_base_object_request>:
 800efc4:	b570      	push	{r4, r5, r6, lr}
 800efc6:	4604      	mov	r4, r0
 800efc8:	3002      	adds	r0, #2
 800efca:	460d      	mov	r5, r1
 800efcc:	4616      	mov	r6, r2
 800efce:	f7fe fe61 	bl	800dc94 <uxr_object_id_from_raw>
 800efd2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800efd6:	8028      	strh	r0, [r5, #0]
 800efd8:	806b      	strh	r3, [r5, #2]
 800efda:	7822      	ldrb	r2, [r4, #0]
 800efdc:	7863      	ldrb	r3, [r4, #1]
 800efde:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800efe2:	8033      	strh	r3, [r6, #0]
 800efe4:	bd70      	pop	{r4, r5, r6, pc}
 800efe6:	bf00      	nop

0800efe8 <uxr_stream_id>:
 800efe8:	2901      	cmp	r1, #1
 800efea:	b082      	sub	sp, #8
 800efec:	d01d      	beq.n	800f02a <uxr_stream_id+0x42>
 800efee:	2902      	cmp	r1, #2
 800eff0:	f04f 0c00 	mov.w	ip, #0
 800eff4:	d01e      	beq.n	800f034 <uxr_stream_id+0x4c>
 800eff6:	2300      	movs	r3, #0
 800eff8:	f36c 0307 	bfi	r3, ip, #0, #8
 800effc:	f360 230f 	bfi	r3, r0, #8, #8
 800f000:	f361 4317 	bfi	r3, r1, #16, #8
 800f004:	f362 631f 	bfi	r3, r2, #24, #8
 800f008:	b2da      	uxtb	r2, r3
 800f00a:	2000      	movs	r0, #0
 800f00c:	f362 0007 	bfi	r0, r2, #0, #8
 800f010:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f014:	f362 200f 	bfi	r0, r2, #8, #8
 800f018:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f01c:	f362 4017 	bfi	r0, r2, #16, #8
 800f020:	0e1b      	lsrs	r3, r3, #24
 800f022:	f363 601f 	bfi	r0, r3, #24, #8
 800f026:	b002      	add	sp, #8
 800f028:	4770      	bx	lr
 800f02a:	f100 0c01 	add.w	ip, r0, #1
 800f02e:	fa5f fc8c 	uxtb.w	ip, ip
 800f032:	e7e0      	b.n	800eff6 <uxr_stream_id+0xe>
 800f034:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800f038:	e7dd      	b.n	800eff6 <uxr_stream_id+0xe>
 800f03a:	bf00      	nop

0800f03c <uxr_stream_id_from_raw>:
 800f03c:	b082      	sub	sp, #8
 800f03e:	b130      	cbz	r0, 800f04e <uxr_stream_id_from_raw+0x12>
 800f040:	0603      	lsls	r3, r0, #24
 800f042:	d420      	bmi.n	800f086 <uxr_stream_id_from_raw+0x4a>
 800f044:	1e42      	subs	r2, r0, #1
 800f046:	b2d2      	uxtb	r2, r2
 800f048:	f04f 0c01 	mov.w	ip, #1
 800f04c:	e001      	b.n	800f052 <uxr_stream_id_from_raw+0x16>
 800f04e:	4684      	mov	ip, r0
 800f050:	4602      	mov	r2, r0
 800f052:	2300      	movs	r3, #0
 800f054:	f360 0307 	bfi	r3, r0, #0, #8
 800f058:	f362 230f 	bfi	r3, r2, #8, #8
 800f05c:	f36c 4317 	bfi	r3, ip, #16, #8
 800f060:	f361 631f 	bfi	r3, r1, #24, #8
 800f064:	b2da      	uxtb	r2, r3
 800f066:	2000      	movs	r0, #0
 800f068:	f362 0007 	bfi	r0, r2, #0, #8
 800f06c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f070:	f362 200f 	bfi	r0, r2, #8, #8
 800f074:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f078:	f362 4017 	bfi	r0, r2, #16, #8
 800f07c:	0e1b      	lsrs	r3, r3, #24
 800f07e:	f363 601f 	bfi	r0, r3, #24, #8
 800f082:	b002      	add	sp, #8
 800f084:	4770      	bx	lr
 800f086:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800f08a:	f04f 0c02 	mov.w	ip, #2
 800f08e:	e7e0      	b.n	800f052 <uxr_stream_id_from_raw+0x16>

0800f090 <uxr_init_stream_storage>:
 800f090:	2300      	movs	r3, #0
 800f092:	7403      	strb	r3, [r0, #16]
 800f094:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800f098:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800f09c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop

0800f0a4 <uxr_reset_stream_storage>:
 800f0a4:	b570      	push	{r4, r5, r6, lr}
 800f0a6:	7c03      	ldrb	r3, [r0, #16]
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	b153      	cbz	r3, 800f0c2 <uxr_reset_stream_storage+0x1e>
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	2500      	movs	r5, #0
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f005 ff01 	bl	8014eb8 <uxr_reset_output_best_effort_stream>
 800f0b6:	7c23      	ldrb	r3, [r4, #16]
 800f0b8:	3501      	adds	r5, #1
 800f0ba:	42ab      	cmp	r3, r5
 800f0bc:	f106 0610 	add.w	r6, r6, #16
 800f0c0:	d8f6      	bhi.n	800f0b0 <uxr_reset_stream_storage+0xc>
 800f0c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f0c6:	b163      	cbz	r3, 800f0e2 <uxr_reset_stream_storage+0x3e>
 800f0c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f0cc:	2500      	movs	r5, #0
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	f005 fcf4 	bl	8014abc <uxr_reset_input_best_effort_stream>
 800f0d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f0d8:	3501      	adds	r5, #1
 800f0da:	42ab      	cmp	r3, r5
 800f0dc:	f106 0602 	add.w	r6, r6, #2
 800f0e0:	d8f5      	bhi.n	800f0ce <uxr_reset_stream_storage+0x2a>
 800f0e2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f0e6:	b163      	cbz	r3, 800f102 <uxr_reset_stream_storage+0x5e>
 800f0e8:	f104 0618 	add.w	r6, r4, #24
 800f0ec:	2500      	movs	r5, #0
 800f0ee:	4630      	mov	r0, r6
 800f0f0:	f005 ff8e 	bl	8015010 <uxr_reset_output_reliable_stream>
 800f0f4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f0f8:	3501      	adds	r5, #1
 800f0fa:	42ab      	cmp	r3, r5
 800f0fc:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800f100:	d8f5      	bhi.n	800f0ee <uxr_reset_stream_storage+0x4a>
 800f102:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800f106:	b163      	cbz	r3, 800f122 <uxr_reset_stream_storage+0x7e>
 800f108:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800f10c:	2500      	movs	r5, #0
 800f10e:	4630      	mov	r0, r6
 800f110:	f005 fd48 	bl	8014ba4 <uxr_reset_input_reliable_stream>
 800f114:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800f118:	3501      	adds	r5, #1
 800f11a:	42ab      	cmp	r3, r5
 800f11c:	f106 0618 	add.w	r6, r6, #24
 800f120:	d8f5      	bhi.n	800f10e <uxr_reset_stream_storage+0x6a>
 800f122:	bd70      	pop	{r4, r5, r6, pc}

0800f124 <uxr_add_output_best_effort_buffer>:
 800f124:	b510      	push	{r4, lr}
 800f126:	7c04      	ldrb	r4, [r0, #16]
 800f128:	f104 0c01 	add.w	ip, r4, #1
 800f12c:	b082      	sub	sp, #8
 800f12e:	f880 c010 	strb.w	ip, [r0, #16]
 800f132:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f136:	f005 feb5 	bl	8014ea4 <uxr_init_output_best_effort_stream>
 800f13a:	2201      	movs	r2, #1
 800f13c:	4611      	mov	r1, r2
 800f13e:	4620      	mov	r0, r4
 800f140:	b002      	add	sp, #8
 800f142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f146:	f7ff bf4f 	b.w	800efe8 <uxr_stream_id>
 800f14a:	bf00      	nop

0800f14c <uxr_add_output_reliable_buffer>:
 800f14c:	b510      	push	{r4, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	4684      	mov	ip, r0
 800f152:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f156:	9000      	str	r0, [sp, #0]
 800f158:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800f15c:	2028      	movs	r0, #40	; 0x28
 800f15e:	fb00 c004 	mla	r0, r0, r4, ip
 800f162:	f104 0e01 	add.w	lr, r4, #1
 800f166:	3018      	adds	r0, #24
 800f168:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800f16c:	f005 ff18 	bl	8014fa0 <uxr_init_output_reliable_stream>
 800f170:	2201      	movs	r2, #1
 800f172:	2102      	movs	r1, #2
 800f174:	4620      	mov	r0, r4
 800f176:	b004      	add	sp, #16
 800f178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f17c:	f7ff bf34 	b.w	800efe8 <uxr_stream_id>

0800f180 <uxr_add_input_best_effort_buffer>:
 800f180:	b510      	push	{r4, lr}
 800f182:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800f186:	4603      	mov	r3, r0
 800f188:	1c62      	adds	r2, r4, #1
 800f18a:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800f18e:	b082      	sub	sp, #8
 800f190:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800f194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f198:	f005 fc8c 	bl	8014ab4 <uxr_init_input_best_effort_stream>
 800f19c:	2200      	movs	r2, #0
 800f19e:	2101      	movs	r1, #1
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	b002      	add	sp, #8
 800f1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1a8:	f7ff bf1e 	b.w	800efe8 <uxr_stream_id>

0800f1ac <uxr_add_input_reliable_buffer>:
 800f1ac:	b510      	push	{r4, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	4684      	mov	ip, r0
 800f1b2:	9806      	ldr	r0, [sp, #24]
 800f1b4:	9000      	str	r0, [sp, #0]
 800f1b6:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800f1ba:	2018      	movs	r0, #24
 800f1bc:	fb00 c004 	mla	r0, r0, r4, ip
 800f1c0:	f104 0e01 	add.w	lr, r4, #1
 800f1c4:	3048      	adds	r0, #72	; 0x48
 800f1c6:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800f1ca:	f005 fcbf 	bl	8014b4c <uxr_init_input_reliable_stream>
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	2102      	movs	r1, #2
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	b004      	add	sp, #16
 800f1d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1da:	f7ff bf05 	b.w	800efe8 <uxr_stream_id>
 800f1de:	bf00      	nop

0800f1e0 <uxr_get_output_best_effort_stream>:
 800f1e0:	7c03      	ldrb	r3, [r0, #16]
 800f1e2:	428b      	cmp	r3, r1
 800f1e4:	bf8c      	ite	hi
 800f1e6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800f1ea:	2000      	movls	r0, #0
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop

0800f1f0 <uxr_get_output_reliable_stream>:
 800f1f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800f1f4:	428b      	cmp	r3, r1
 800f1f6:	bf83      	ittte	hi
 800f1f8:	2328      	movhi	r3, #40	; 0x28
 800f1fa:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f1fe:	3018      	addhi	r0, #24
 800f200:	2000      	movls	r0, #0
 800f202:	4770      	bx	lr

0800f204 <uxr_get_input_best_effort_stream>:
 800f204:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800f208:	428b      	cmp	r3, r1
 800f20a:	bf86      	itte	hi
 800f20c:	3121      	addhi	r1, #33	; 0x21
 800f20e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800f212:	2000      	movls	r0, #0
 800f214:	4770      	bx	lr
 800f216:	bf00      	nop

0800f218 <uxr_get_input_reliable_stream>:
 800f218:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800f21c:	428b      	cmp	r3, r1
 800f21e:	bf83      	ittte	hi
 800f220:	2318      	movhi	r3, #24
 800f222:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f226:	3048      	addhi	r0, #72	; 0x48
 800f228:	2000      	movls	r0, #0
 800f22a:	4770      	bx	lr

0800f22c <uxr_output_streams_confirmed>:
 800f22c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800f230:	b183      	cbz	r3, 800f254 <uxr_output_streams_confirmed+0x28>
 800f232:	b570      	push	{r4, r5, r6, lr}
 800f234:	4606      	mov	r6, r0
 800f236:	f100 0518 	add.w	r5, r0, #24
 800f23a:	2400      	movs	r4, #0
 800f23c:	e001      	b.n	800f242 <uxr_output_streams_confirmed+0x16>
 800f23e:	3528      	adds	r5, #40	; 0x28
 800f240:	b138      	cbz	r0, 800f252 <uxr_output_streams_confirmed+0x26>
 800f242:	4628      	mov	r0, r5
 800f244:	f006 f954 	bl	80154f0 <uxr_is_output_up_to_date>
 800f248:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800f24c:	3401      	adds	r4, #1
 800f24e:	42a3      	cmp	r3, r4
 800f250:	d8f5      	bhi.n	800f23e <uxr_output_streams_confirmed+0x12>
 800f252:	bd70      	pop	{r4, r5, r6, pc}
 800f254:	2001      	movs	r0, #1
 800f256:	4770      	bx	lr

0800f258 <uxr_buffer_submessage_header>:
 800f258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25a:	4604      	mov	r4, r0
 800f25c:	460e      	mov	r6, r1
 800f25e:	2104      	movs	r1, #4
 800f260:	4615      	mov	r5, r2
 800f262:	461f      	mov	r7, r3
 800f264:	f7fe fb58 	bl	800d918 <ucdr_align_to>
 800f268:	2301      	movs	r3, #1
 800f26a:	ea47 0203 	orr.w	r2, r7, r3
 800f26e:	4631      	mov	r1, r6
 800f270:	7523      	strb	r3, [r4, #20]
 800f272:	4620      	mov	r0, r4
 800f274:	462b      	mov	r3, r5
 800f276:	f000 fa27 	bl	800f6c8 <uxr_serialize_submessage_header>
 800f27a:	4620      	mov	r0, r4
 800f27c:	f7fe fb62 	bl	800d944 <ucdr_buffer_remaining>
 800f280:	42a8      	cmp	r0, r5
 800f282:	bf34      	ite	cc
 800f284:	2000      	movcc	r0, #0
 800f286:	2001      	movcs	r0, #1
 800f288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f28a:	bf00      	nop

0800f28c <uxr_read_submessage_header>:
 800f28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f290:	4604      	mov	r4, r0
 800f292:	460d      	mov	r5, r1
 800f294:	2104      	movs	r1, #4
 800f296:	4616      	mov	r6, r2
 800f298:	4698      	mov	r8, r3
 800f29a:	f7fe fb3d 	bl	800d918 <ucdr_align_to>
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f7fe fb50 	bl	800d944 <ucdr_buffer_remaining>
 800f2a4:	2803      	cmp	r0, #3
 800f2a6:	bf8c      	ite	hi
 800f2a8:	2701      	movhi	r7, #1
 800f2aa:	2700      	movls	r7, #0
 800f2ac:	d802      	bhi.n	800f2b4 <uxr_read_submessage_header+0x28>
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2b4:	4633      	mov	r3, r6
 800f2b6:	4642      	mov	r2, r8
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	f000 fa18 	bl	800f6f0 <uxr_deserialize_submessage_header>
 800f2c0:	f898 3000 	ldrb.w	r3, [r8]
 800f2c4:	f003 0201 	and.w	r2, r3, #1
 800f2c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800f2cc:	f888 3000 	strb.w	r3, [r8]
 800f2d0:	7522      	strb	r2, [r4, #20]
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f2d8 <uxr_submessage_padding>:
 800f2d8:	f010 0003 	ands.w	r0, r0, #3
 800f2dc:	bf18      	it	ne
 800f2de:	f1c0 0004 	rsbne	r0, r0, #4
 800f2e2:	4770      	bx	lr

0800f2e4 <uxr_millis>:
 800f2e4:	b510      	push	{r4, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	4669      	mov	r1, sp
 800f2ea:	2001      	movs	r0, #1
 800f2ec:	f7f2 f8e4 	bl	80014b8 <clock_gettime>
 800f2f0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800f2f4:	4906      	ldr	r1, [pc, #24]	; (800f310 <uxr_millis+0x2c>)
 800f2f6:	fba0 0301 	umull	r0, r3, r0, r1
 800f2fa:	1900      	adds	r0, r0, r4
 800f2fc:	fb01 3102 	mla	r1, r1, r2, r3
 800f300:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800f304:	4a03      	ldr	r2, [pc, #12]	; (800f314 <uxr_millis+0x30>)
 800f306:	2300      	movs	r3, #0
 800f308:	f7f0 ffca 	bl	80002a0 <__aeabi_ldivmod>
 800f30c:	b004      	add	sp, #16
 800f30e:	bd10      	pop	{r4, pc}
 800f310:	3b9aca00 	.word	0x3b9aca00
 800f314:	000f4240 	.word	0x000f4240

0800f318 <uxr_nanos>:
 800f318:	b510      	push	{r4, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	4669      	mov	r1, sp
 800f31e:	2001      	movs	r0, #1
 800f320:	f7f2 f8ca 	bl	80014b8 <clock_gettime>
 800f324:	4a06      	ldr	r2, [pc, #24]	; (800f340 <uxr_nanos+0x28>)
 800f326:	9800      	ldr	r0, [sp, #0]
 800f328:	9902      	ldr	r1, [sp, #8]
 800f32a:	9c01      	ldr	r4, [sp, #4]
 800f32c:	fba0 0302 	umull	r0, r3, r0, r2
 800f330:	1840      	adds	r0, r0, r1
 800f332:	fb02 3304 	mla	r3, r2, r4, r3
 800f336:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800f33a:	b004      	add	sp, #16
 800f33c:	bd10      	pop	{r4, pc}
 800f33e:	bf00      	nop
 800f340:	3b9aca00 	.word	0x3b9aca00

0800f344 <on_full_output_buffer_fragmented>:
 800f344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f348:	460c      	mov	r4, r1
 800f34a:	b08a      	sub	sp, #40	; 0x28
 800f34c:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800f350:	4606      	mov	r6, r0
 800f352:	f104 0008 	add.w	r0, r4, #8
 800f356:	f7ff ff4b 	bl	800f1f0 <uxr_get_output_reliable_stream>
 800f35a:	4605      	mov	r5, r0
 800f35c:	f006 f8d2 	bl	8015504 <get_available_free_slots>
 800f360:	b968      	cbnz	r0, 800f37e <on_full_output_buffer_fragmented+0x3a>
 800f362:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800f366:	4620      	mov	r0, r4
 800f368:	4798      	blx	r3
 800f36a:	b918      	cbnz	r0, 800f374 <on_full_output_buffer_fragmented+0x30>
 800f36c:	2001      	movs	r0, #1
 800f36e:	b00a      	add	sp, #40	; 0x28
 800f370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f374:	4628      	mov	r0, r5
 800f376:	f006 f8c5 	bl	8015504 <get_available_free_slots>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d0f6      	beq.n	800f36c <on_full_output_buffer_fragmented+0x28>
 800f37e:	8929      	ldrh	r1, [r5, #8]
 800f380:	89eb      	ldrh	r3, [r5, #14]
 800f382:	7b28      	ldrb	r0, [r5, #12]
 800f384:	686a      	ldr	r2, [r5, #4]
 800f386:	fbb2 f8f1 	udiv	r8, r2, r1
 800f38a:	fbb3 f2f1 	udiv	r2, r3, r1
 800f38e:	fb01 3112 	mls	r1, r1, r2, r3
 800f392:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800f396:	b289      	uxth	r1, r1
 800f398:	fb08 f101 	mul.w	r1, r8, r1
 800f39c:	30fc      	adds	r0, #252	; 0xfc
 800f39e:	f1a8 0804 	sub.w	r8, r8, #4
 800f3a2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800f3a6:	4440      	add	r0, r8
 800f3a8:	b287      	uxth	r7, r0
 800f3aa:	1bdb      	subs	r3, r3, r7
 800f3ac:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800f3b0:	682b      	ldr	r3, [r5, #0]
 800f3b2:	3104      	adds	r1, #4
 800f3b4:	4419      	add	r1, r3
 800f3b6:	4642      	mov	r2, r8
 800f3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3bc:	9300      	str	r3, [sp, #0]
 800f3be:	a802      	add	r0, sp, #8
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	f7fe fa7d 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 800f3c6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800f3ca:	f102 0308 	add.w	r3, r2, #8
 800f3ce:	4543      	cmp	r3, r8
 800f3d0:	d928      	bls.n	800f424 <on_full_output_buffer_fragmented+0xe0>
 800f3d2:	463a      	mov	r2, r7
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	210d      	movs	r1, #13
 800f3d8:	a802      	add	r0, sp, #8
 800f3da:	f7ff ff3d 	bl	800f258 <uxr_buffer_submessage_header>
 800f3de:	8929      	ldrh	r1, [r5, #8]
 800f3e0:	89eb      	ldrh	r3, [r5, #14]
 800f3e2:	fbb3 f2f1 	udiv	r2, r3, r1
 800f3e6:	fb01 3312 	mls	r3, r1, r2, r3
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	686a      	ldr	r2, [r5, #4]
 800f3ee:	fbb2 f2f1 	udiv	r2, r2, r1
 800f3f2:	fb02 f303 	mul.w	r3, r2, r3
 800f3f6:	682a      	ldr	r2, [r5, #0]
 800f3f8:	f842 8003 	str.w	r8, [r2, r3]
 800f3fc:	89e8      	ldrh	r0, [r5, #14]
 800f3fe:	2101      	movs	r1, #1
 800f400:	f006 f8a0 	bl	8015544 <uxr_seq_num_add>
 800f404:	9904      	ldr	r1, [sp, #16]
 800f406:	9a03      	ldr	r2, [sp, #12]
 800f408:	81e8      	strh	r0, [r5, #14]
 800f40a:	1a52      	subs	r2, r2, r1
 800f40c:	4630      	mov	r0, r6
 800f40e:	f7fe fa69 	bl	800d8e4 <ucdr_init_buffer>
 800f412:	4630      	mov	r0, r6
 800f414:	490f      	ldr	r1, [pc, #60]	; (800f454 <on_full_output_buffer_fragmented+0x110>)
 800f416:	4622      	mov	r2, r4
 800f418:	f7fe fa38 	bl	800d88c <ucdr_set_on_full_buffer_callback>
 800f41c:	2000      	movs	r0, #0
 800f41e:	b00a      	add	sp, #40	; 0x28
 800f420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f424:	b292      	uxth	r2, r2
 800f426:	2302      	movs	r3, #2
 800f428:	210d      	movs	r1, #13
 800f42a:	a802      	add	r0, sp, #8
 800f42c:	f7ff ff14 	bl	800f258 <uxr_buffer_submessage_header>
 800f430:	8928      	ldrh	r0, [r5, #8]
 800f432:	89eb      	ldrh	r3, [r5, #14]
 800f434:	fbb3 f1f0 	udiv	r1, r3, r0
 800f438:	fb00 3311 	mls	r3, r0, r1, r3
 800f43c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800f440:	6869      	ldr	r1, [r5, #4]
 800f442:	fbb1 f1f0 	udiv	r1, r1, r0
 800f446:	b29b      	uxth	r3, r3
 800f448:	fb01 f303 	mul.w	r3, r1, r3
 800f44c:	6829      	ldr	r1, [r5, #0]
 800f44e:	3208      	adds	r2, #8
 800f450:	50ca      	str	r2, [r1, r3]
 800f452:	e7d3      	b.n	800f3fc <on_full_output_buffer_fragmented+0xb8>
 800f454:	0800f345 	.word	0x0800f345

0800f458 <uxr_prepare_output_stream>:
 800f458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45a:	b087      	sub	sp, #28
 800f45c:	2707      	movs	r7, #7
 800f45e:	9202      	str	r2, [sp, #8]
 800f460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f462:	9103      	str	r1, [sp, #12]
 800f464:	2500      	movs	r5, #0
 800f466:	3204      	adds	r2, #4
 800f468:	e9cd 7500 	strd	r7, r5, [sp]
 800f46c:	461c      	mov	r4, r3
 800f46e:	4606      	mov	r6, r0
 800f470:	f7ff fc54 	bl	800ed1c <uxr_prepare_stream_to_write_submessage>
 800f474:	f080 0201 	eor.w	r2, r0, #1
 800f478:	b2d2      	uxtb	r2, r2
 800f47a:	75a2      	strb	r2, [r4, #22]
 800f47c:	b112      	cbz	r2, 800f484 <uxr_prepare_output_stream+0x2c>
 800f47e:	4628      	mov	r0, r5
 800f480:	b007      	add	sp, #28
 800f482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f484:	aa05      	add	r2, sp, #20
 800f486:	9902      	ldr	r1, [sp, #8]
 800f488:	4630      	mov	r0, r6
 800f48a:	f7ff fd7d 	bl	800ef88 <uxr_init_base_object_request>
 800f48e:	a905      	add	r1, sp, #20
 800f490:	4605      	mov	r5, r0
 800f492:	4620      	mov	r0, r4
 800f494:	f000 ffa0 	bl	80103d8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f498:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f49c:	69a6      	ldr	r6, [r4, #24]
 800f49e:	69e7      	ldr	r7, [r4, #28]
 800f4a0:	1a52      	subs	r2, r2, r1
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f7fe fa1e 	bl	800d8e4 <ucdr_init_buffer>
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	463a      	mov	r2, r7
 800f4ac:	4631      	mov	r1, r6
 800f4ae:	f7fe f9ed 	bl	800d88c <ucdr_set_on_full_buffer_callback>
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	b007      	add	sp, #28
 800f4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f4b8 <uxr_prepare_output_stream_fragmented>:
 800f4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4bc:	b091      	sub	sp, #68	; 0x44
 800f4be:	4605      	mov	r5, r0
 800f4c0:	9105      	str	r1, [sp, #20]
 800f4c2:	3008      	adds	r0, #8
 800f4c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f4c8:	461e      	mov	r6, r3
 800f4ca:	9204      	str	r2, [sp, #16]
 800f4cc:	f7ff fe90 	bl	800f1f0 <uxr_get_output_reliable_stream>
 800f4d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	f000 8091 	beq.w	800f5fc <uxr_prepare_output_stream_fragmented+0x144>
 800f4da:	4604      	mov	r4, r0
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	f000 808d 	beq.w	800f5fc <uxr_prepare_output_stream_fragmented+0x144>
 800f4e2:	f006 f80f 	bl	8015504 <get_available_free_slots>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	f000 8083 	beq.w	800f5f2 <uxr_prepare_output_stream_fragmented+0x13a>
 800f4ec:	8922      	ldrh	r2, [r4, #8]
 800f4ee:	89e7      	ldrh	r7, [r4, #14]
 800f4f0:	fbb7 f9f2 	udiv	r9, r7, r2
 800f4f4:	fb02 7919 	mls	r9, r2, r9, r7
 800f4f8:	fa1f f989 	uxth.w	r9, r9
 800f4fc:	6863      	ldr	r3, [r4, #4]
 800f4fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800f502:	6823      	ldr	r3, [r4, #0]
 800f504:	9203      	str	r2, [sp, #12]
 800f506:	fb02 f909 	mul.w	r9, r2, r9
 800f50a:	f109 0904 	add.w	r9, r9, #4
 800f50e:	4499      	add	r9, r3
 800f510:	7b23      	ldrb	r3, [r4, #12]
 800f512:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f516:	4543      	cmp	r3, r8
 800f518:	f1a2 0b04 	sub.w	fp, r2, #4
 800f51c:	d37a      	bcc.n	800f614 <uxr_prepare_output_stream_fragmented+0x15c>
 800f51e:	f1ab 0a04 	sub.w	sl, fp, #4
 800f522:	ebaa 0a03 	sub.w	sl, sl, r3
 800f526:	465a      	mov	r2, fp
 800f528:	2300      	movs	r3, #0
 800f52a:	4649      	mov	r1, r9
 800f52c:	a808      	add	r0, sp, #32
 800f52e:	f8cd 8000 	str.w	r8, [sp]
 800f532:	f7fe f9c5 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 800f536:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f538:	fa1f fa8a 	uxth.w	sl, sl
 800f53c:	4652      	mov	r2, sl
 800f53e:	f103 0a08 	add.w	sl, r3, #8
 800f542:	45da      	cmp	sl, fp
 800f544:	bf34      	ite	cc
 800f546:	2302      	movcc	r3, #2
 800f548:	2300      	movcs	r3, #0
 800f54a:	210d      	movs	r1, #13
 800f54c:	a808      	add	r0, sp, #32
 800f54e:	f7ff fe83 	bl	800f258 <uxr_buffer_submessage_header>
 800f552:	8921      	ldrh	r1, [r4, #8]
 800f554:	fbb7 f2f1 	udiv	r2, r7, r1
 800f558:	fb01 7212 	mls	r2, r1, r2, r7
 800f55c:	b292      	uxth	r2, r2
 800f55e:	6863      	ldr	r3, [r4, #4]
 800f560:	fbb3 f3f1 	udiv	r3, r3, r1
 800f564:	fb02 f303 	mul.w	r3, r2, r3
 800f568:	6822      	ldr	r2, [r4, #0]
 800f56a:	4638      	mov	r0, r7
 800f56c:	f842 b003 	str.w	fp, [r2, r3]
 800f570:	2101      	movs	r1, #1
 800f572:	f005 ffe7 	bl	8015544 <uxr_seq_num_add>
 800f576:	9b03      	ldr	r3, [sp, #12]
 800f578:	f108 0104 	add.w	r1, r8, #4
 800f57c:	f1a3 0208 	sub.w	r2, r3, #8
 800f580:	eba2 0208 	sub.w	r2, r2, r8
 800f584:	4449      	add	r1, r9
 800f586:	4607      	mov	r7, r0
 800f588:	4630      	mov	r0, r6
 800f58a:	f7fe f9ab 	bl	800d8e4 <ucdr_init_buffer>
 800f58e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f590:	81e7      	strh	r7, [r4, #14]
 800f592:	1d1a      	adds	r2, r3, #4
 800f594:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f598:	bf28      	it	cs
 800f59a:	2200      	movcs	r2, #0
 800f59c:	2300      	movs	r3, #0
 800f59e:	b292      	uxth	r2, r2
 800f5a0:	2107      	movs	r1, #7
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	f7ff fe58 	bl	800f258 <uxr_buffer_submessage_header>
 800f5a8:	9904      	ldr	r1, [sp, #16]
 800f5aa:	aa07      	add	r2, sp, #28
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	f7ff fceb 	bl	800ef88 <uxr_init_base_object_request>
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	b318      	cbz	r0, 800f5fe <uxr_prepare_output_stream_fragmented+0x146>
 800f5b6:	a907      	add	r1, sp, #28
 800f5b8:	4630      	mov	r0, r6
 800f5ba:	f000 ff0d 	bl	80103d8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f5be:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	1a52      	subs	r2, r2, r1
 800f5c6:	f7fe f98d 	bl	800d8e4 <ucdr_init_buffer>
 800f5ca:	9b05      	ldr	r3, [sp, #20]
 800f5cc:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800f5d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5d2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800f5d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f5d8:	491b      	ldr	r1, [pc, #108]	; (800f648 <uxr_prepare_output_stream_fragmented+0x190>)
 800f5da:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800f5de:	4630      	mov	r0, r6
 800f5e0:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800f5e4:	462a      	mov	r2, r5
 800f5e6:	f7fe f951 	bl	800d88c <ucdr_set_on_full_buffer_callback>
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	b011      	add	sp, #68	; 0x44
 800f5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f5f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	4798      	blx	r3
 800f5fa:	b920      	cbnz	r0, 800f606 <uxr_prepare_output_stream_fragmented+0x14e>
 800f5fc:	2400      	movs	r4, #0
 800f5fe:	4620      	mov	r0, r4
 800f600:	b011      	add	sp, #68	; 0x44
 800f602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f606:	4620      	mov	r0, r4
 800f608:	f005 ff7c 	bl	8015504 <get_available_free_slots>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	f47f af6d 	bne.w	800f4ec <uxr_prepare_output_stream_fragmented+0x34>
 800f612:	e7f3      	b.n	800f5fc <uxr_prepare_output_stream_fragmented+0x144>
 800f614:	4638      	mov	r0, r7
 800f616:	2101      	movs	r1, #1
 800f618:	f005 ff94 	bl	8015544 <uxr_seq_num_add>
 800f61c:	8921      	ldrh	r1, [r4, #8]
 800f61e:	fbb0 f2f1 	udiv	r2, r0, r1
 800f622:	fb01 0912 	mls	r9, r1, r2, r0
 800f626:	fa1f f289 	uxth.w	r2, r9
 800f62a:	6863      	ldr	r3, [r4, #4]
 800f62c:	fbb3 f9f1 	udiv	r9, r3, r1
 800f630:	6823      	ldr	r3, [r4, #0]
 800f632:	fb02 f909 	mul.w	r9, r2, r9
 800f636:	f109 0904 	add.w	r9, r9, #4
 800f63a:	4499      	add	r9, r3
 800f63c:	4607      	mov	r7, r0
 800f63e:	7b23      	ldrb	r3, [r4, #12]
 800f640:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f644:	e76b      	b.n	800f51e <uxr_prepare_output_stream_fragmented+0x66>
 800f646:	bf00      	nop
 800f648:	0800f345 	.word	0x0800f345

0800f64c <uxr_serialize_message_header>:
 800f64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f64e:	b083      	sub	sp, #12
 800f650:	4616      	mov	r6, r2
 800f652:	4604      	mov	r4, r0
 800f654:	9301      	str	r3, [sp, #4]
 800f656:	460d      	mov	r5, r1
 800f658:	9f08      	ldr	r7, [sp, #32]
 800f65a:	f7fd f997 	bl	800c98c <ucdr_serialize_uint8_t>
 800f65e:	4631      	mov	r1, r6
 800f660:	4620      	mov	r0, r4
 800f662:	f7fd f993 	bl	800c98c <ucdr_serialize_uint8_t>
 800f666:	9a01      	ldr	r2, [sp, #4]
 800f668:	2101      	movs	r1, #1
 800f66a:	4620      	mov	r0, r4
 800f66c:	f7fd fa3a 	bl	800cae4 <ucdr_serialize_endian_uint16_t>
 800f670:	062b      	lsls	r3, r5, #24
 800f672:	d501      	bpl.n	800f678 <uxr_serialize_message_header+0x2c>
 800f674:	b003      	add	sp, #12
 800f676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f678:	2204      	movs	r2, #4
 800f67a:	4639      	mov	r1, r7
 800f67c:	4620      	mov	r0, r4
 800f67e:	b003      	add	sp, #12
 800f680:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f684:	f005 b81c 	b.w	80146c0 <ucdr_serialize_array_uint8_t>

0800f688 <uxr_deserialize_message_header>:
 800f688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f68a:	b083      	sub	sp, #12
 800f68c:	4616      	mov	r6, r2
 800f68e:	4604      	mov	r4, r0
 800f690:	9301      	str	r3, [sp, #4]
 800f692:	460d      	mov	r5, r1
 800f694:	9f08      	ldr	r7, [sp, #32]
 800f696:	f7fd f98f 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800f69a:	4631      	mov	r1, r6
 800f69c:	4620      	mov	r0, r4
 800f69e:	f7fd f98b 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800f6a2:	9a01      	ldr	r2, [sp, #4]
 800f6a4:	2101      	movs	r1, #1
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	f7fd fb10 	bl	800cccc <ucdr_deserialize_endian_uint16_t>
 800f6ac:	f995 3000 	ldrsb.w	r3, [r5]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	da01      	bge.n	800f6b8 <uxr_deserialize_message_header+0x30>
 800f6b4:	b003      	add	sp, #12
 800f6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6b8:	2204      	movs	r2, #4
 800f6ba:	4639      	mov	r1, r7
 800f6bc:	4620      	mov	r0, r4
 800f6be:	b003      	add	sp, #12
 800f6c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f6c4:	f005 b860 	b.w	8014788 <ucdr_deserialize_array_uint8_t>

0800f6c8 <uxr_serialize_submessage_header>:
 800f6c8:	b530      	push	{r4, r5, lr}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	4615      	mov	r5, r2
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	9301      	str	r3, [sp, #4]
 800f6d2:	f7fd f95b 	bl	800c98c <ucdr_serialize_uint8_t>
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f7fd f957 	bl	800c98c <ucdr_serialize_uint8_t>
 800f6de:	9a01      	ldr	r2, [sp, #4]
 800f6e0:	2101      	movs	r1, #1
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	b003      	add	sp, #12
 800f6e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6ea:	f7fd b9fb 	b.w	800cae4 <ucdr_serialize_endian_uint16_t>
 800f6ee:	bf00      	nop

0800f6f0 <uxr_deserialize_submessage_header>:
 800f6f0:	b530      	push	{r4, r5, lr}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	4615      	mov	r5, r2
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	9301      	str	r3, [sp, #4]
 800f6fa:	f7fd f95d 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800f6fe:	4629      	mov	r1, r5
 800f700:	4620      	mov	r0, r4
 800f702:	f7fd f959 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800f706:	9a01      	ldr	r2, [sp, #4]
 800f708:	2101      	movs	r1, #1
 800f70a:	4620      	mov	r0, r4
 800f70c:	b003      	add	sp, #12
 800f70e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f712:	f7fd badb 	b.w	800cccc <ucdr_deserialize_endian_uint16_t>
 800f716:	bf00      	nop

0800f718 <uxr_serialize_CLIENT_Representation>:
 800f718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f71c:	2204      	movs	r2, #4
 800f71e:	460e      	mov	r6, r1
 800f720:	4605      	mov	r5, r0
 800f722:	f004 ffcd 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800f726:	2202      	movs	r2, #2
 800f728:	4607      	mov	r7, r0
 800f72a:	1d31      	adds	r1, r6, #4
 800f72c:	4628      	mov	r0, r5
 800f72e:	f004 ffc7 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800f732:	4038      	ands	r0, r7
 800f734:	2202      	movs	r2, #2
 800f736:	1db1      	adds	r1, r6, #6
 800f738:	b2c7      	uxtb	r7, r0
 800f73a:	4628      	mov	r0, r5
 800f73c:	f004 ffc0 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800f740:	2204      	movs	r2, #4
 800f742:	4007      	ands	r7, r0
 800f744:	f106 0108 	add.w	r1, r6, #8
 800f748:	4628      	mov	r0, r5
 800f74a:	f004 ffb9 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800f74e:	7b31      	ldrb	r1, [r6, #12]
 800f750:	4007      	ands	r7, r0
 800f752:	4628      	mov	r0, r5
 800f754:	f7fd f91a 	bl	800c98c <ucdr_serialize_uint8_t>
 800f758:	7b71      	ldrb	r1, [r6, #13]
 800f75a:	4007      	ands	r7, r0
 800f75c:	4628      	mov	r0, r5
 800f75e:	f7fd f8e7 	bl	800c930 <ucdr_serialize_bool>
 800f762:	7b73      	ldrb	r3, [r6, #13]
 800f764:	ea07 0800 	and.w	r8, r7, r0
 800f768:	b93b      	cbnz	r3, 800f77a <uxr_serialize_CLIENT_Representation+0x62>
 800f76a:	8bb1      	ldrh	r1, [r6, #28]
 800f76c:	4628      	mov	r0, r5
 800f76e:	f7fd f939 	bl	800c9e4 <ucdr_serialize_uint16_t>
 800f772:	ea08 0000 	and.w	r0, r8, r0
 800f776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f77a:	6931      	ldr	r1, [r6, #16]
 800f77c:	4628      	mov	r0, r5
 800f77e:	f7fd fb1b 	bl	800cdb8 <ucdr_serialize_uint32_t>
 800f782:	6933      	ldr	r3, [r6, #16]
 800f784:	b1e3      	cbz	r3, 800f7c0 <uxr_serialize_CLIENT_Representation+0xa8>
 800f786:	b1c0      	cbz	r0, 800f7ba <uxr_serialize_CLIENT_Representation+0xa2>
 800f788:	4637      	mov	r7, r6
 800f78a:	f04f 0900 	mov.w	r9, #0
 800f78e:	e001      	b.n	800f794 <uxr_serialize_CLIENT_Representation+0x7c>
 800f790:	3708      	adds	r7, #8
 800f792:	b194      	cbz	r4, 800f7ba <uxr_serialize_CLIENT_Representation+0xa2>
 800f794:	6979      	ldr	r1, [r7, #20]
 800f796:	4628      	mov	r0, r5
 800f798:	f005 f8b2 	bl	8014900 <ucdr_serialize_string>
 800f79c:	69b9      	ldr	r1, [r7, #24]
 800f79e:	4604      	mov	r4, r0
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	f005 f8ad 	bl	8014900 <ucdr_serialize_string>
 800f7a6:	6933      	ldr	r3, [r6, #16]
 800f7a8:	f109 0901 	add.w	r9, r9, #1
 800f7ac:	4004      	ands	r4, r0
 800f7ae:	4599      	cmp	r9, r3
 800f7b0:	b2e4      	uxtb	r4, r4
 800f7b2:	d3ed      	bcc.n	800f790 <uxr_serialize_CLIENT_Representation+0x78>
 800f7b4:	ea08 0804 	and.w	r8, r8, r4
 800f7b8:	e7d7      	b.n	800f76a <uxr_serialize_CLIENT_Representation+0x52>
 800f7ba:	f04f 0800 	mov.w	r8, #0
 800f7be:	e7d4      	b.n	800f76a <uxr_serialize_CLIENT_Representation+0x52>
 800f7c0:	ea08 0800 	and.w	r8, r8, r0
 800f7c4:	e7d1      	b.n	800f76a <uxr_serialize_CLIENT_Representation+0x52>
 800f7c6:	bf00      	nop

0800f7c8 <uxr_deserialize_CLIENT_Representation>:
 800f7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7cc:	2204      	movs	r2, #4
 800f7ce:	460c      	mov	r4, r1
 800f7d0:	4605      	mov	r5, r0
 800f7d2:	f004 ffd9 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800f7d6:	2202      	movs	r2, #2
 800f7d8:	4607      	mov	r7, r0
 800f7da:	1d21      	adds	r1, r4, #4
 800f7dc:	4628      	mov	r0, r5
 800f7de:	f004 ffd3 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800f7e2:	4038      	ands	r0, r7
 800f7e4:	2202      	movs	r2, #2
 800f7e6:	1da1      	adds	r1, r4, #6
 800f7e8:	b2c6      	uxtb	r6, r0
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	f004 ffcc 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800f7f0:	2204      	movs	r2, #4
 800f7f2:	4006      	ands	r6, r0
 800f7f4:	f104 0108 	add.w	r1, r4, #8
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f004 ffc5 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800f7fe:	f104 010c 	add.w	r1, r4, #12
 800f802:	4006      	ands	r6, r0
 800f804:	4628      	mov	r0, r5
 800f806:	f7fd f8d7 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800f80a:	f104 010d 	add.w	r1, r4, #13
 800f80e:	ea06 0700 	and.w	r7, r6, r0
 800f812:	4628      	mov	r0, r5
 800f814:	f7fd f8a2 	bl	800c95c <ucdr_deserialize_bool>
 800f818:	7b63      	ldrb	r3, [r4, #13]
 800f81a:	4007      	ands	r7, r0
 800f81c:	b93b      	cbnz	r3, 800f82e <uxr_deserialize_CLIENT_Representation+0x66>
 800f81e:	f104 011c 	add.w	r1, r4, #28
 800f822:	4628      	mov	r0, r5
 800f824:	f7fd f9de 	bl	800cbe4 <ucdr_deserialize_uint16_t>
 800f828:	4038      	ands	r0, r7
 800f82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f82e:	f104 0110 	add.w	r1, r4, #16
 800f832:	4628      	mov	r0, r5
 800f834:	f7fd fbf0 	bl	800d018 <ucdr_deserialize_uint32_t>
 800f838:	6923      	ldr	r3, [r4, #16]
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d903      	bls.n	800f846 <uxr_deserialize_CLIENT_Representation+0x7e>
 800f83e:	2301      	movs	r3, #1
 800f840:	75ab      	strb	r3, [r5, #22]
 800f842:	2700      	movs	r7, #0
 800f844:	e7eb      	b.n	800f81e <uxr_deserialize_CLIENT_Representation+0x56>
 800f846:	b30b      	cbz	r3, 800f88c <uxr_deserialize_CLIENT_Representation+0xc4>
 800f848:	2800      	cmp	r0, #0
 800f84a:	d0fa      	beq.n	800f842 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f84c:	46a0      	mov	r8, r4
 800f84e:	f04f 0900 	mov.w	r9, #0
 800f852:	e001      	b.n	800f858 <uxr_deserialize_CLIENT_Representation+0x90>
 800f854:	2e00      	cmp	r6, #0
 800f856:	d0f4      	beq.n	800f842 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f858:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f85c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f860:	4628      	mov	r0, r5
 800f862:	f005 f85d 	bl	8014920 <ucdr_deserialize_string>
 800f866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f86a:	4606      	mov	r6, r0
 800f86c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f870:	4628      	mov	r0, r5
 800f872:	f005 f855 	bl	8014920 <ucdr_deserialize_string>
 800f876:	6923      	ldr	r3, [r4, #16]
 800f878:	f109 0901 	add.w	r9, r9, #1
 800f87c:	4006      	ands	r6, r0
 800f87e:	4599      	cmp	r9, r3
 800f880:	f108 0808 	add.w	r8, r8, #8
 800f884:	b2f6      	uxtb	r6, r6
 800f886:	d3e5      	bcc.n	800f854 <uxr_deserialize_CLIENT_Representation+0x8c>
 800f888:	4037      	ands	r7, r6
 800f88a:	e7c8      	b.n	800f81e <uxr_deserialize_CLIENT_Representation+0x56>
 800f88c:	4007      	ands	r7, r0
 800f88e:	e7c6      	b.n	800f81e <uxr_deserialize_CLIENT_Representation+0x56>

0800f890 <uxr_serialize_AGENT_Representation>:
 800f890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f894:	2204      	movs	r2, #4
 800f896:	460f      	mov	r7, r1
 800f898:	4605      	mov	r5, r0
 800f89a:	f004 ff11 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800f89e:	2202      	movs	r2, #2
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	1d39      	adds	r1, r7, #4
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	f004 ff0b 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800f8aa:	4020      	ands	r0, r4
 800f8ac:	2202      	movs	r2, #2
 800f8ae:	1db9      	adds	r1, r7, #6
 800f8b0:	b2c4      	uxtb	r4, r0
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f004 ff04 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800f8b8:	7a39      	ldrb	r1, [r7, #8]
 800f8ba:	4004      	ands	r4, r0
 800f8bc:	4628      	mov	r0, r5
 800f8be:	f7fd f837 	bl	800c930 <ucdr_serialize_bool>
 800f8c2:	7a3b      	ldrb	r3, [r7, #8]
 800f8c4:	ea00 0804 	and.w	r8, r0, r4
 800f8c8:	b913      	cbnz	r3, 800f8d0 <uxr_serialize_AGENT_Representation+0x40>
 800f8ca:	4640      	mov	r0, r8
 800f8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8d0:	68f9      	ldr	r1, [r7, #12]
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f7fd fa70 	bl	800cdb8 <ucdr_serialize_uint32_t>
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	b303      	cbz	r3, 800f91e <uxr_serialize_AGENT_Representation+0x8e>
 800f8dc:	b1d0      	cbz	r0, 800f914 <uxr_serialize_AGENT_Representation+0x84>
 800f8de:	463e      	mov	r6, r7
 800f8e0:	f04f 0900 	mov.w	r9, #0
 800f8e4:	e001      	b.n	800f8ea <uxr_serialize_AGENT_Representation+0x5a>
 800f8e6:	3608      	adds	r6, #8
 800f8e8:	b1a4      	cbz	r4, 800f914 <uxr_serialize_AGENT_Representation+0x84>
 800f8ea:	6931      	ldr	r1, [r6, #16]
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f005 f807 	bl	8014900 <ucdr_serialize_string>
 800f8f2:	6971      	ldr	r1, [r6, #20]
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f005 f802 	bl	8014900 <ucdr_serialize_string>
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f109 0901 	add.w	r9, r9, #1
 800f902:	4004      	ands	r4, r0
 800f904:	4599      	cmp	r9, r3
 800f906:	b2e4      	uxtb	r4, r4
 800f908:	d3ed      	bcc.n	800f8e6 <uxr_serialize_AGENT_Representation+0x56>
 800f90a:	ea08 0804 	and.w	r8, r8, r4
 800f90e:	4640      	mov	r0, r8
 800f910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f914:	f04f 0800 	mov.w	r8, #0
 800f918:	4640      	mov	r0, r8
 800f91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f91e:	ea08 0800 	and.w	r8, r8, r0
 800f922:	e7d2      	b.n	800f8ca <uxr_serialize_AGENT_Representation+0x3a>

0800f924 <uxr_serialize_DATAWRITER_Representation>:
 800f924:	b570      	push	{r4, r5, r6, lr}
 800f926:	460d      	mov	r5, r1
 800f928:	7809      	ldrb	r1, [r1, #0]
 800f92a:	4606      	mov	r6, r0
 800f92c:	f7fd f82e 	bl	800c98c <ucdr_serialize_uint8_t>
 800f930:	4604      	mov	r4, r0
 800f932:	b130      	cbz	r0, 800f942 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f934:	782b      	ldrb	r3, [r5, #0]
 800f936:	2b02      	cmp	r3, #2
 800f938:	d00c      	beq.n	800f954 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f93a:	2b03      	cmp	r3, #3
 800f93c:	d010      	beq.n	800f960 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d008      	beq.n	800f954 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f942:	2202      	movs	r2, #2
 800f944:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800f948:	4630      	mov	r0, r6
 800f94a:	f004 feb9 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800f94e:	4020      	ands	r0, r4
 800f950:	b2c0      	uxtb	r0, r0
 800f952:	bd70      	pop	{r4, r5, r6, pc}
 800f954:	6869      	ldr	r1, [r5, #4]
 800f956:	4630      	mov	r0, r6
 800f958:	f004 ffd2 	bl	8014900 <ucdr_serialize_string>
 800f95c:	4604      	mov	r4, r0
 800f95e:	e7f0      	b.n	800f942 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f960:	4629      	mov	r1, r5
 800f962:	4630      	mov	r0, r6
 800f964:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f968:	3104      	adds	r1, #4
 800f96a:	f004 ff9d 	bl	80148a8 <ucdr_serialize_sequence_uint8_t>
 800f96e:	4604      	mov	r4, r0
 800f970:	e7e7      	b.n	800f942 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f972:	bf00      	nop

0800f974 <uxr_serialize_ObjectVariant.part.0>:
 800f974:	b570      	push	{r4, r5, r6, lr}
 800f976:	780b      	ldrb	r3, [r1, #0]
 800f978:	3b01      	subs	r3, #1
 800f97a:	460c      	mov	r4, r1
 800f97c:	4605      	mov	r5, r0
 800f97e:	2b0d      	cmp	r3, #13
 800f980:	d854      	bhi.n	800fa2c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f982:	e8df f003 	tbb	[pc, r3]
 800f986:	0730      	.short	0x0730
 800f988:	07071b1b 	.word	0x07071b1b
 800f98c:	0c530707 	.word	0x0c530707
 800f990:	494e0c0c 	.word	0x494e0c0c
 800f994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f998:	3104      	adds	r1, #4
 800f99a:	f7ff bfc3 	b.w	800f924 <uxr_serialize_DATAWRITER_Representation>
 800f99e:	7909      	ldrb	r1, [r1, #4]
 800f9a0:	f7fc fff4 	bl	800c98c <ucdr_serialize_uint8_t>
 800f9a4:	b1e8      	cbz	r0, 800f9e2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800f9a6:	7923      	ldrb	r3, [r4, #4]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d001      	beq.n	800f9b0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	d13d      	bne.n	800fa2c <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f9b0:	68a1      	ldr	r1, [r4, #8]
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9b8:	f004 bfa2 	b.w	8014900 <ucdr_serialize_string>
 800f9bc:	7909      	ldrb	r1, [r1, #4]
 800f9be:	f7fc ffe5 	bl	800c98c <ucdr_serialize_uint8_t>
 800f9c2:	4606      	mov	r6, r0
 800f9c4:	b120      	cbz	r0, 800f9d0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f9c6:	7923      	ldrb	r3, [r4, #4]
 800f9c8:	2b02      	cmp	r3, #2
 800f9ca:	d039      	beq.n	800fa40 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800f9cc:	2b03      	cmp	r3, #3
 800f9ce:	d02f      	beq.n	800fa30 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800f9d0:	2202      	movs	r2, #2
 800f9d2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	f004 fe72 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800f9dc:	4030      	ands	r0, r6
 800f9de:	b2c0      	uxtb	r0, r0
 800f9e0:	bd70      	pop	{r4, r5, r6, pc}
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	bd70      	pop	{r4, r5, r6, pc}
 800f9e6:	7909      	ldrb	r1, [r1, #4]
 800f9e8:	f7fc ffd0 	bl	800c98c <ucdr_serialize_uint8_t>
 800f9ec:	4606      	mov	r6, r0
 800f9ee:	b158      	cbz	r0, 800fa08 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f9f0:	7923      	ldrb	r3, [r4, #4]
 800f9f2:	2b02      	cmp	r3, #2
 800f9f4:	d003      	beq.n	800f9fe <uxr_serialize_ObjectVariant.part.0+0x8a>
 800f9f6:	2b03      	cmp	r3, #3
 800f9f8:	d028      	beq.n	800fa4c <uxr_serialize_ObjectVariant.part.0+0xd8>
 800f9fa:	2b01      	cmp	r3, #1
 800f9fc:	d104      	bne.n	800fa08 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f9fe:	68a1      	ldr	r1, [r4, #8]
 800fa00:	4628      	mov	r0, r5
 800fa02:	f004 ff7d 	bl	8014900 <ucdr_serialize_string>
 800fa06:	4606      	mov	r6, r0
 800fa08:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f7fd fcf9 	bl	800d404 <ucdr_serialize_int16_t>
 800fa12:	4030      	ands	r0, r6
 800fa14:	b2c0      	uxtb	r0, r0
 800fa16:	bd70      	pop	{r4, r5, r6, pc}
 800fa18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa1c:	3104      	adds	r1, #4
 800fa1e:	f7ff be7b 	b.w	800f718 <uxr_serialize_CLIENT_Representation>
 800fa22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa26:	3104      	adds	r1, #4
 800fa28:	f7ff bf32 	b.w	800f890 <uxr_serialize_AGENT_Representation>
 800fa2c:	2001      	movs	r0, #1
 800fa2e:	bd70      	pop	{r4, r5, r6, pc}
 800fa30:	68a2      	ldr	r2, [r4, #8]
 800fa32:	f104 010c 	add.w	r1, r4, #12
 800fa36:	4628      	mov	r0, r5
 800fa38:	f004 ff36 	bl	80148a8 <ucdr_serialize_sequence_uint8_t>
 800fa3c:	4606      	mov	r6, r0
 800fa3e:	e7c7      	b.n	800f9d0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800fa40:	68a1      	ldr	r1, [r4, #8]
 800fa42:	4628      	mov	r0, r5
 800fa44:	f004 ff5c 	bl	8014900 <ucdr_serialize_string>
 800fa48:	4606      	mov	r6, r0
 800fa4a:	e7c1      	b.n	800f9d0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800fa4c:	68a2      	ldr	r2, [r4, #8]
 800fa4e:	f104 010c 	add.w	r1, r4, #12
 800fa52:	4628      	mov	r0, r5
 800fa54:	f004 ff28 	bl	80148a8 <ucdr_serialize_sequence_uint8_t>
 800fa58:	4606      	mov	r6, r0
 800fa5a:	e7d5      	b.n	800fa08 <uxr_serialize_ObjectVariant.part.0+0x94>

0800fa5c <uxr_deserialize_DATAWRITER_Representation>:
 800fa5c:	b570      	push	{r4, r5, r6, lr}
 800fa5e:	4606      	mov	r6, r0
 800fa60:	460d      	mov	r5, r1
 800fa62:	f7fc ffa9 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800fa66:	4604      	mov	r4, r0
 800fa68:	b130      	cbz	r0, 800fa78 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fa6a:	782b      	ldrb	r3, [r5, #0]
 800fa6c:	2b02      	cmp	r3, #2
 800fa6e:	d00c      	beq.n	800fa8a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800fa70:	2b03      	cmp	r3, #3
 800fa72:	d012      	beq.n	800fa9a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d008      	beq.n	800fa8a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800fa78:	2202      	movs	r2, #2
 800fa7a:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800fa7e:	4630      	mov	r0, r6
 800fa80:	f004 fe82 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800fa84:	4020      	ands	r0, r4
 800fa86:	b2c0      	uxtb	r0, r0
 800fa88:	bd70      	pop	{r4, r5, r6, pc}
 800fa8a:	6869      	ldr	r1, [r5, #4]
 800fa8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa90:	4630      	mov	r0, r6
 800fa92:	f004 ff45 	bl	8014920 <ucdr_deserialize_string>
 800fa96:	4604      	mov	r4, r0
 800fa98:	e7ee      	b.n	800fa78 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fa9a:	1d2b      	adds	r3, r5, #4
 800fa9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800faa0:	f105 0108 	add.w	r1, r5, #8
 800faa4:	4630      	mov	r0, r6
 800faa6:	f004 ff11 	bl	80148cc <ucdr_deserialize_sequence_uint8_t>
 800faaa:	4604      	mov	r4, r0
 800faac:	e7e4      	b.n	800fa78 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800faae:	bf00      	nop

0800fab0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800fab0:	b570      	push	{r4, r5, r6, lr}
 800fab2:	460d      	mov	r5, r1
 800fab4:	7809      	ldrb	r1, [r1, #0]
 800fab6:	4606      	mov	r6, r0
 800fab8:	f7fc ff3a 	bl	800c930 <ucdr_serialize_bool>
 800fabc:	782b      	ldrb	r3, [r5, #0]
 800fabe:	4604      	mov	r4, r0
 800fac0:	b94b      	cbnz	r3, 800fad6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800fac2:	7a29      	ldrb	r1, [r5, #8]
 800fac4:	4630      	mov	r0, r6
 800fac6:	f7fc ff33 	bl	800c930 <ucdr_serialize_bool>
 800faca:	7a2b      	ldrb	r3, [r5, #8]
 800facc:	4004      	ands	r4, r0
 800face:	b2e4      	uxtb	r4, r4
 800fad0:	b943      	cbnz	r3, 800fae4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800fad2:	4620      	mov	r0, r4
 800fad4:	bd70      	pop	{r4, r5, r6, pc}
 800fad6:	6869      	ldr	r1, [r5, #4]
 800fad8:	4630      	mov	r0, r6
 800fada:	f004 ff11 	bl	8014900 <ucdr_serialize_string>
 800fade:	4004      	ands	r4, r0
 800fae0:	b2e4      	uxtb	r4, r4
 800fae2:	e7ee      	b.n	800fac2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800fae4:	68e9      	ldr	r1, [r5, #12]
 800fae6:	4630      	mov	r0, r6
 800fae8:	f004 ff0a 	bl	8014900 <ucdr_serialize_string>
 800faec:	4004      	ands	r4, r0
 800faee:	4620      	mov	r0, r4
 800faf0:	bd70      	pop	{r4, r5, r6, pc}
 800faf2:	bf00      	nop

0800faf4 <uxr_serialize_OBJK_Topic_Binary>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	460d      	mov	r5, r1
 800faf8:	6809      	ldr	r1, [r1, #0]
 800fafa:	4606      	mov	r6, r0
 800fafc:	f004 ff00 	bl	8014900 <ucdr_serialize_string>
 800fb00:	7929      	ldrb	r1, [r5, #4]
 800fb02:	4604      	mov	r4, r0
 800fb04:	4630      	mov	r0, r6
 800fb06:	f7fc ff13 	bl	800c930 <ucdr_serialize_bool>
 800fb0a:	792b      	ldrb	r3, [r5, #4]
 800fb0c:	4004      	ands	r4, r0
 800fb0e:	b2e4      	uxtb	r4, r4
 800fb10:	b943      	cbnz	r3, 800fb24 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800fb12:	7b29      	ldrb	r1, [r5, #12]
 800fb14:	4630      	mov	r0, r6
 800fb16:	f7fc ff0b 	bl	800c930 <ucdr_serialize_bool>
 800fb1a:	7b2b      	ldrb	r3, [r5, #12]
 800fb1c:	4004      	ands	r4, r0
 800fb1e:	b93b      	cbnz	r3, 800fb30 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800fb20:	4620      	mov	r0, r4
 800fb22:	bd70      	pop	{r4, r5, r6, pc}
 800fb24:	68a9      	ldr	r1, [r5, #8]
 800fb26:	4630      	mov	r0, r6
 800fb28:	f004 feea 	bl	8014900 <ucdr_serialize_string>
 800fb2c:	4004      	ands	r4, r0
 800fb2e:	e7f0      	b.n	800fb12 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800fb30:	6929      	ldr	r1, [r5, #16]
 800fb32:	4630      	mov	r0, r6
 800fb34:	f004 fee4 	bl	8014900 <ucdr_serialize_string>
 800fb38:	4004      	ands	r4, r0
 800fb3a:	b2e4      	uxtb	r4, r4
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	bd70      	pop	{r4, r5, r6, pc}

0800fb40 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800fb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb44:	460c      	mov	r4, r1
 800fb46:	7809      	ldrb	r1, [r1, #0]
 800fb48:	4606      	mov	r6, r0
 800fb4a:	f7fc fef1 	bl	800c930 <ucdr_serialize_bool>
 800fb4e:	7823      	ldrb	r3, [r4, #0]
 800fb50:	4605      	mov	r5, r0
 800fb52:	b96b      	cbnz	r3, 800fb70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800fb54:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800fb58:	4630      	mov	r0, r6
 800fb5a:	f7fc fee9 	bl	800c930 <ucdr_serialize_bool>
 800fb5e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fb62:	4005      	ands	r5, r0
 800fb64:	b2ed      	uxtb	r5, r5
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d169      	bne.n	800fc3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb70:	6861      	ldr	r1, [r4, #4]
 800fb72:	4630      	mov	r0, r6
 800fb74:	f7fd f920 	bl	800cdb8 <ucdr_serialize_uint32_t>
 800fb78:	6863      	ldr	r3, [r4, #4]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d06b      	beq.n	800fc56 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d067      	beq.n	800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fb82:	68a1      	ldr	r1, [r4, #8]
 800fb84:	4630      	mov	r0, r6
 800fb86:	f004 febb 	bl	8014900 <ucdr_serialize_string>
 800fb8a:	6863      	ldr	r3, [r4, #4]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d953      	bls.n	800fc38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d05e      	beq.n	800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fb94:	68e1      	ldr	r1, [r4, #12]
 800fb96:	4630      	mov	r0, r6
 800fb98:	f004 feb2 	bl	8014900 <ucdr_serialize_string>
 800fb9c:	6863      	ldr	r3, [r4, #4]
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d94a      	bls.n	800fc38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d055      	beq.n	800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fba6:	6921      	ldr	r1, [r4, #16]
 800fba8:	4630      	mov	r0, r6
 800fbaa:	f004 fea9 	bl	8014900 <ucdr_serialize_string>
 800fbae:	6863      	ldr	r3, [r4, #4]
 800fbb0:	2b03      	cmp	r3, #3
 800fbb2:	d941      	bls.n	800fc38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	d04c      	beq.n	800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fbb8:	6961      	ldr	r1, [r4, #20]
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f004 fea0 	bl	8014900 <ucdr_serialize_string>
 800fbc0:	6863      	ldr	r3, [r4, #4]
 800fbc2:	2b04      	cmp	r3, #4
 800fbc4:	d938      	bls.n	800fc38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	d043      	beq.n	800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fbca:	69a1      	ldr	r1, [r4, #24]
 800fbcc:	4630      	mov	r0, r6
 800fbce:	f004 fe97 	bl	8014900 <ucdr_serialize_string>
 800fbd2:	6863      	ldr	r3, [r4, #4]
 800fbd4:	2b05      	cmp	r3, #5
 800fbd6:	d92f      	bls.n	800fc38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	d03a      	beq.n	800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fbdc:	69e1      	ldr	r1, [r4, #28]
 800fbde:	4630      	mov	r0, r6
 800fbe0:	f004 fe8e 	bl	8014900 <ucdr_serialize_string>
 800fbe4:	6863      	ldr	r3, [r4, #4]
 800fbe6:	2b06      	cmp	r3, #6
 800fbe8:	d926      	bls.n	800fc38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fbea:	b390      	cbz	r0, 800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fbec:	6a21      	ldr	r1, [r4, #32]
 800fbee:	4630      	mov	r0, r6
 800fbf0:	f004 fe86 	bl	8014900 <ucdr_serialize_string>
 800fbf4:	6863      	ldr	r3, [r4, #4]
 800fbf6:	2b07      	cmp	r3, #7
 800fbf8:	d91e      	bls.n	800fc38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fbfa:	b350      	cbz	r0, 800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fbfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fbfe:	4630      	mov	r0, r6
 800fc00:	f004 fe7e 	bl	8014900 <ucdr_serialize_string>
 800fc04:	6863      	ldr	r3, [r4, #4]
 800fc06:	2b08      	cmp	r3, #8
 800fc08:	d916      	bls.n	800fc38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fc0a:	b310      	cbz	r0, 800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fc0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800fc0e:	4630      	mov	r0, r6
 800fc10:	f004 fe76 	bl	8014900 <ucdr_serialize_string>
 800fc14:	6863      	ldr	r3, [r4, #4]
 800fc16:	2b09      	cmp	r3, #9
 800fc18:	d90e      	bls.n	800fc38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fc1a:	b1d0      	cbz	r0, 800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fc1c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800fc20:	2709      	movs	r7, #9
 800fc22:	e000      	b.n	800fc26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800fc24:	b1a8      	cbz	r0, 800fc52 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fc26:	f858 1b04 	ldr.w	r1, [r8], #4
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	f004 fe68 	bl	8014900 <ucdr_serialize_string>
 800fc30:	6862      	ldr	r2, [r4, #4]
 800fc32:	3701      	adds	r7, #1
 800fc34:	4297      	cmp	r7, r2
 800fc36:	d3f5      	bcc.n	800fc24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800fc38:	4005      	ands	r5, r0
 800fc3a:	b2ed      	uxtb	r5, r5
 800fc3c:	e78a      	b.n	800fb54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fc3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fc40:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800fc44:	4630      	mov	r0, r6
 800fc46:	f004 fe2f 	bl	80148a8 <ucdr_serialize_sequence_uint8_t>
 800fc4a:	4005      	ands	r5, r0
 800fc4c:	4628      	mov	r0, r5
 800fc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc52:	2500      	movs	r5, #0
 800fc54:	e77e      	b.n	800fb54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fc56:	4028      	ands	r0, r5
 800fc58:	b2c5      	uxtb	r5, r0
 800fc5a:	e77b      	b.n	800fb54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800fc5c <uxr_serialize_OBJK_Publisher_Binary>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	460d      	mov	r5, r1
 800fc60:	7809      	ldrb	r1, [r1, #0]
 800fc62:	4606      	mov	r6, r0
 800fc64:	f7fc fe64 	bl	800c930 <ucdr_serialize_bool>
 800fc68:	782b      	ldrb	r3, [r5, #0]
 800fc6a:	4604      	mov	r4, r0
 800fc6c:	b94b      	cbnz	r3, 800fc82 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800fc6e:	7a29      	ldrb	r1, [r5, #8]
 800fc70:	4630      	mov	r0, r6
 800fc72:	f7fc fe5d 	bl	800c930 <ucdr_serialize_bool>
 800fc76:	7a2b      	ldrb	r3, [r5, #8]
 800fc78:	4004      	ands	r4, r0
 800fc7a:	b2e4      	uxtb	r4, r4
 800fc7c:	b943      	cbnz	r3, 800fc90 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800fc7e:	4620      	mov	r0, r4
 800fc80:	bd70      	pop	{r4, r5, r6, pc}
 800fc82:	6869      	ldr	r1, [r5, #4]
 800fc84:	4630      	mov	r0, r6
 800fc86:	f004 fe3b 	bl	8014900 <ucdr_serialize_string>
 800fc8a:	4004      	ands	r4, r0
 800fc8c:	b2e4      	uxtb	r4, r4
 800fc8e:	e7ee      	b.n	800fc6e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800fc90:	f105 010c 	add.w	r1, r5, #12
 800fc94:	4630      	mov	r0, r6
 800fc96:	f7ff ff53 	bl	800fb40 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800fc9a:	4004      	ands	r4, r0
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	bd70      	pop	{r4, r5, r6, pc}

0800fca0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800fca0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800fca4:	4688      	mov	r8, r1
 800fca6:	8809      	ldrh	r1, [r1, #0]
 800fca8:	4681      	mov	r9, r0
 800fcaa:	f7fc fe9b 	bl	800c9e4 <ucdr_serialize_uint16_t>
 800fcae:	f898 1002 	ldrb.w	r1, [r8, #2]
 800fcb2:	4606      	mov	r6, r0
 800fcb4:	4648      	mov	r0, r9
 800fcb6:	f7fc fe3b 	bl	800c930 <ucdr_serialize_bool>
 800fcba:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fcbe:	4006      	ands	r6, r0
 800fcc0:	b2f5      	uxtb	r5, r6
 800fcc2:	b9eb      	cbnz	r3, 800fd00 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800fcc4:	f898 1006 	ldrb.w	r1, [r8, #6]
 800fcc8:	4648      	mov	r0, r9
 800fcca:	f7fc fe31 	bl	800c930 <ucdr_serialize_bool>
 800fcce:	f898 3006 	ldrb.w	r3, [r8, #6]
 800fcd2:	4005      	ands	r5, r0
 800fcd4:	bb7b      	cbnz	r3, 800fd36 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800fcd6:	f898 100c 	ldrb.w	r1, [r8, #12]
 800fcda:	4648      	mov	r0, r9
 800fcdc:	f7fc fe28 	bl	800c930 <ucdr_serialize_bool>
 800fce0:	f898 300c 	ldrb.w	r3, [r8, #12]
 800fce4:	4005      	ands	r5, r0
 800fce6:	b9f3      	cbnz	r3, 800fd26 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800fce8:	f898 1014 	ldrb.w	r1, [r8, #20]
 800fcec:	4648      	mov	r0, r9
 800fcee:	f7fc fe1f 	bl	800c930 <ucdr_serialize_bool>
 800fcf2:	f898 3014 	ldrb.w	r3, [r8, #20]
 800fcf6:	4005      	ands	r5, r0
 800fcf8:	b94b      	cbnz	r3, 800fd0e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800fd00:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800fd04:	4648      	mov	r0, r9
 800fd06:	f7fc fe6d 	bl	800c9e4 <ucdr_serialize_uint16_t>
 800fd0a:	4005      	ands	r5, r0
 800fd0c:	e7da      	b.n	800fcc4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800fd0e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800fd12:	f108 011c 	add.w	r1, r8, #28
 800fd16:	4648      	mov	r0, r9
 800fd18:	f004 fdc6 	bl	80148a8 <ucdr_serialize_sequence_uint8_t>
 800fd1c:	4028      	ands	r0, r5
 800fd1e:	b2c5      	uxtb	r5, r0
 800fd20:	4628      	mov	r0, r5
 800fd22:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800fd26:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fd2a:	4648      	mov	r0, r9
 800fd2c:	f7fd f844 	bl	800cdb8 <ucdr_serialize_uint32_t>
 800fd30:	4028      	ands	r0, r5
 800fd32:	b2c5      	uxtb	r5, r0
 800fd34:	e7d8      	b.n	800fce8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800fd36:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fd3a:	4648      	mov	r0, r9
 800fd3c:	f7fd f83c 	bl	800cdb8 <ucdr_serialize_uint32_t>
 800fd40:	4028      	ands	r0, r5
 800fd42:	b2c5      	uxtb	r5, r0
 800fd44:	e7c7      	b.n	800fcd6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800fd46:	bf00      	nop

0800fd48 <uxr_serialize_OBJK_DataWriter_Binary>:
 800fd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4a:	2202      	movs	r2, #2
 800fd4c:	460d      	mov	r5, r1
 800fd4e:	4606      	mov	r6, r0
 800fd50:	f004 fcb6 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800fd54:	78a9      	ldrb	r1, [r5, #2]
 800fd56:	4604      	mov	r4, r0
 800fd58:	4630      	mov	r0, r6
 800fd5a:	f7fc fde9 	bl	800c930 <ucdr_serialize_bool>
 800fd5e:	78ab      	ldrb	r3, [r5, #2]
 800fd60:	4004      	ands	r4, r0
 800fd62:	b2e4      	uxtb	r4, r4
 800fd64:	b90b      	cbnz	r3, 800fd6a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800fd66:	4620      	mov	r0, r4
 800fd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd6a:	f105 0108 	add.w	r1, r5, #8
 800fd6e:	4630      	mov	r0, r6
 800fd70:	f7ff ff96 	bl	800fca0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fd74:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800fd78:	4607      	mov	r7, r0
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	f7fc fdd8 	bl	800c930 <ucdr_serialize_bool>
 800fd80:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800fd84:	4038      	ands	r0, r7
 800fd86:	b2c7      	uxtb	r7, r0
 800fd88:	b913      	cbnz	r3, 800fd90 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800fd8a:	403c      	ands	r4, r7
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd90:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800fd94:	4630      	mov	r0, r6
 800fd96:	f7fd fa65 	bl	800d264 <ucdr_serialize_uint64_t>
 800fd9a:	4007      	ands	r7, r0
 800fd9c:	e7f5      	b.n	800fd8a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800fd9e:	bf00      	nop

0800fda0 <uxr_deserialize_ObjectVariant>:
 800fda0:	b570      	push	{r4, r5, r6, lr}
 800fda2:	4605      	mov	r5, r0
 800fda4:	460e      	mov	r6, r1
 800fda6:	f7fc fe07 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800fdaa:	b168      	cbz	r0, 800fdc8 <uxr_deserialize_ObjectVariant+0x28>
 800fdac:	7833      	ldrb	r3, [r6, #0]
 800fdae:	3b01      	subs	r3, #1
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	2b0d      	cmp	r3, #13
 800fdb4:	d809      	bhi.n	800fdca <uxr_deserialize_ObjectVariant+0x2a>
 800fdb6:	e8df f003 	tbb	[pc, r3]
 800fdba:	0a41      	.short	0x0a41
 800fdbc:	0a0a2323 	.word	0x0a0a2323
 800fdc0:	10080a0a 	.word	0x10080a0a
 800fdc4:	565c1010 	.word	0x565c1010
 800fdc8:	2400      	movs	r4, #0
 800fdca:	4620      	mov	r0, r4
 800fdcc:	bd70      	pop	{r4, r5, r6, pc}
 800fdce:	1d31      	adds	r1, r6, #4
 800fdd0:	4628      	mov	r0, r5
 800fdd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdd6:	f7ff be41 	b.w	800fa5c <uxr_deserialize_DATAWRITER_Representation>
 800fdda:	1d31      	adds	r1, r6, #4
 800fddc:	4628      	mov	r0, r5
 800fdde:	f7fc fdeb 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800fde2:	2800      	cmp	r0, #0
 800fde4:	d0f0      	beq.n	800fdc8 <uxr_deserialize_ObjectVariant+0x28>
 800fde6:	7933      	ldrb	r3, [r6, #4]
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d001      	beq.n	800fdf0 <uxr_deserialize_ObjectVariant+0x50>
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	d1ec      	bne.n	800fdca <uxr_deserialize_ObjectVariant+0x2a>
 800fdf0:	68b1      	ldr	r1, [r6, #8]
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fdf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdfc:	f004 bd90 	b.w	8014920 <ucdr_deserialize_string>
 800fe00:	1d31      	adds	r1, r6, #4
 800fe02:	4628      	mov	r0, r5
 800fe04:	f7fc fdd8 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800fe08:	4604      	mov	r4, r0
 800fe0a:	b170      	cbz	r0, 800fe2a <uxr_deserialize_ObjectVariant+0x8a>
 800fe0c:	7933      	ldrb	r3, [r6, #4]
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	d04c      	beq.n	800feac <uxr_deserialize_ObjectVariant+0x10c>
 800fe12:	2b03      	cmp	r3, #3
 800fe14:	d109      	bne.n	800fe2a <uxr_deserialize_ObjectVariant+0x8a>
 800fe16:	f106 0308 	add.w	r3, r6, #8
 800fe1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe1e:	f106 010c 	add.w	r1, r6, #12
 800fe22:	4628      	mov	r0, r5
 800fe24:	f004 fd52 	bl	80148cc <ucdr_deserialize_sequence_uint8_t>
 800fe28:	4604      	mov	r4, r0
 800fe2a:	2202      	movs	r2, #2
 800fe2c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800fe30:	4628      	mov	r0, r5
 800fe32:	f004 fca9 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800fe36:	4020      	ands	r0, r4
 800fe38:	b2c4      	uxtb	r4, r0
 800fe3a:	e7c6      	b.n	800fdca <uxr_deserialize_ObjectVariant+0x2a>
 800fe3c:	1d31      	adds	r1, r6, #4
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f7fc fdba 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 800fe44:	4604      	mov	r4, r0
 800fe46:	b130      	cbz	r0, 800fe56 <uxr_deserialize_ObjectVariant+0xb6>
 800fe48:	7933      	ldrb	r3, [r6, #4]
 800fe4a:	2b02      	cmp	r3, #2
 800fe4c:	d036      	beq.n	800febc <uxr_deserialize_ObjectVariant+0x11c>
 800fe4e:	2b03      	cmp	r3, #3
 800fe50:	d03c      	beq.n	800fecc <uxr_deserialize_ObjectVariant+0x12c>
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d032      	beq.n	800febc <uxr_deserialize_ObjectVariant+0x11c>
 800fe56:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	f7fd fb52 	bl	800d504 <ucdr_deserialize_int16_t>
 800fe60:	4020      	ands	r0, r4
 800fe62:	b2c4      	uxtb	r4, r0
 800fe64:	e7b1      	b.n	800fdca <uxr_deserialize_ObjectVariant+0x2a>
 800fe66:	1d31      	adds	r1, r6, #4
 800fe68:	4628      	mov	r0, r5
 800fe6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe6e:	f7ff bcab 	b.w	800f7c8 <uxr_deserialize_CLIENT_Representation>
 800fe72:	2204      	movs	r2, #4
 800fe74:	18b1      	adds	r1, r6, r2
 800fe76:	4628      	mov	r0, r5
 800fe78:	f004 fc86 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800fe7c:	2202      	movs	r2, #2
 800fe7e:	f106 0108 	add.w	r1, r6, #8
 800fe82:	4604      	mov	r4, r0
 800fe84:	4628      	mov	r0, r5
 800fe86:	f004 fc7f 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800fe8a:	2202      	movs	r2, #2
 800fe8c:	4004      	ands	r4, r0
 800fe8e:	f106 010a 	add.w	r1, r6, #10
 800fe92:	4628      	mov	r0, r5
 800fe94:	f004 fc78 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800fe98:	b2e4      	uxtb	r4, r4
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	f106 010c 	add.w	r1, r6, #12
 800fea0:	4628      	mov	r0, r5
 800fea2:	401c      	ands	r4, r3
 800fea4:	f7fc fd5a 	bl	800c95c <ucdr_deserialize_bool>
 800fea8:	4004      	ands	r4, r0
 800feaa:	e78e      	b.n	800fdca <uxr_deserialize_ObjectVariant+0x2a>
 800feac:	68b1      	ldr	r1, [r6, #8]
 800feae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800feb2:	4628      	mov	r0, r5
 800feb4:	f004 fd34 	bl	8014920 <ucdr_deserialize_string>
 800feb8:	4604      	mov	r4, r0
 800feba:	e7b6      	b.n	800fe2a <uxr_deserialize_ObjectVariant+0x8a>
 800febc:	68b1      	ldr	r1, [r6, #8]
 800febe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fec2:	4628      	mov	r0, r5
 800fec4:	f004 fd2c 	bl	8014920 <ucdr_deserialize_string>
 800fec8:	4604      	mov	r4, r0
 800feca:	e7c4      	b.n	800fe56 <uxr_deserialize_ObjectVariant+0xb6>
 800fecc:	f106 0308 	add.w	r3, r6, #8
 800fed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fed4:	f106 010c 	add.w	r1, r6, #12
 800fed8:	4628      	mov	r0, r5
 800feda:	f004 fcf7 	bl	80148cc <ucdr_deserialize_sequence_uint8_t>
 800fede:	4604      	mov	r4, r0
 800fee0:	e7b9      	b.n	800fe56 <uxr_deserialize_ObjectVariant+0xb6>
 800fee2:	bf00      	nop

0800fee4 <uxr_deserialize_BaseObjectRequest>:
 800fee4:	b570      	push	{r4, r5, r6, lr}
 800fee6:	2202      	movs	r2, #2
 800fee8:	4605      	mov	r5, r0
 800feea:	460e      	mov	r6, r1
 800feec:	f004 fc4c 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800fef0:	2202      	movs	r2, #2
 800fef2:	4604      	mov	r4, r0
 800fef4:	18b1      	adds	r1, r6, r2
 800fef6:	4628      	mov	r0, r5
 800fef8:	f004 fc46 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 800fefc:	4020      	ands	r0, r4
 800fefe:	b2c0      	uxtb	r0, r0
 800ff00:	bd70      	pop	{r4, r5, r6, pc}
 800ff02:	bf00      	nop

0800ff04 <uxr_serialize_ActivityInfoVariant>:
 800ff04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff08:	460d      	mov	r5, r1
 800ff0a:	7809      	ldrb	r1, [r1, #0]
 800ff0c:	4607      	mov	r7, r0
 800ff0e:	f7fc fd3d 	bl	800c98c <ucdr_serialize_uint8_t>
 800ff12:	4681      	mov	r9, r0
 800ff14:	b138      	cbz	r0, 800ff26 <uxr_serialize_ActivityInfoVariant+0x22>
 800ff16:	782b      	ldrb	r3, [r5, #0]
 800ff18:	2b06      	cmp	r3, #6
 800ff1a:	f000 8082 	beq.w	8010022 <uxr_serialize_ActivityInfoVariant+0x11e>
 800ff1e:	2b0d      	cmp	r3, #13
 800ff20:	d016      	beq.n	800ff50 <uxr_serialize_ActivityInfoVariant+0x4c>
 800ff22:	2b05      	cmp	r3, #5
 800ff24:	d002      	beq.n	800ff2c <uxr_serialize_ActivityInfoVariant+0x28>
 800ff26:	4648      	mov	r0, r9
 800ff28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ff30:	4638      	mov	r0, r7
 800ff32:	f7fd fa67 	bl	800d404 <ucdr_serialize_int16_t>
 800ff36:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800ff3a:	4681      	mov	r9, r0
 800ff3c:	4638      	mov	r0, r7
 800ff3e:	f7fd f991 	bl	800d264 <ucdr_serialize_uint64_t>
 800ff42:	ea09 0000 	and.w	r0, r9, r0
 800ff46:	fa5f f980 	uxtb.w	r9, r0
 800ff4a:	4648      	mov	r0, r9
 800ff4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff50:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ff54:	4638      	mov	r0, r7
 800ff56:	f7fd fa55 	bl	800d404 <ucdr_serialize_int16_t>
 800ff5a:	68e9      	ldr	r1, [r5, #12]
 800ff5c:	4681      	mov	r9, r0
 800ff5e:	4638      	mov	r0, r7
 800ff60:	f7fc ff2a 	bl	800cdb8 <ucdr_serialize_uint32_t>
 800ff64:	68eb      	ldr	r3, [r5, #12]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d0eb      	beq.n	800ff42 <uxr_serialize_ActivityInfoVariant+0x3e>
 800ff6a:	b320      	cbz	r0, 800ffb6 <uxr_serialize_ActivityInfoVariant+0xb2>
 800ff6c:	f105 080c 	add.w	r8, r5, #12
 800ff70:	2600      	movs	r6, #0
 800ff72:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ff76:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ff7a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800ff7e:	4638      	mov	r0, r7
 800ff80:	f7fc fd04 	bl	800c98c <ucdr_serialize_uint8_t>
 800ff84:	2800      	cmp	r0, #0
 800ff86:	d053      	beq.n	8010030 <uxr_serialize_ActivityInfoVariant+0x12c>
 800ff88:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800ff8c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800ff90:	0074      	lsls	r4, r6, #1
 800ff92:	00c9      	lsls	r1, r1, #3
 800ff94:	2b03      	cmp	r3, #3
 800ff96:	d854      	bhi.n	8010042 <uxr_serialize_ActivityInfoVariant+0x13e>
 800ff98:	e8df f003 	tbb	[pc, r3]
 800ff9c:	02102132 	.word	0x02102132
 800ffa0:	4441      	add	r1, r8
 800ffa2:	4638      	mov	r0, r7
 800ffa4:	6889      	ldr	r1, [r1, #8]
 800ffa6:	f004 fcab 	bl	8014900 <ucdr_serialize_string>
 800ffaa:	68ea      	ldr	r2, [r5, #12]
 800ffac:	3601      	adds	r6, #1
 800ffae:	4296      	cmp	r6, r2
 800ffb0:	d242      	bcs.n	8010038 <uxr_serialize_ActivityInfoVariant+0x134>
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d1dd      	bne.n	800ff72 <uxr_serialize_ActivityInfoVariant+0x6e>
 800ffb6:	f04f 0900 	mov.w	r9, #0
 800ffba:	e7b4      	b.n	800ff26 <uxr_serialize_ActivityInfoVariant+0x22>
 800ffbc:	3108      	adds	r1, #8
 800ffbe:	4441      	add	r1, r8
 800ffc0:	2210      	movs	r2, #16
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	f004 fb7c 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800ffc8:	4434      	add	r4, r6
 800ffca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ffce:	4604      	mov	r4, r0
 800ffd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ffd2:	4638      	mov	r0, r7
 800ffd4:	f7fc fef0 	bl	800cdb8 <ucdr_serialize_uint32_t>
 800ffd8:	4020      	ands	r0, r4
 800ffda:	b2c0      	uxtb	r0, r0
 800ffdc:	e7e5      	b.n	800ffaa <uxr_serialize_ActivityInfoVariant+0xa6>
 800ffde:	3108      	adds	r1, #8
 800ffe0:	4441      	add	r1, r8
 800ffe2:	2204      	movs	r2, #4
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	f004 fb6b 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 800ffea:	4434      	add	r4, r6
 800ffec:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fff0:	4604      	mov	r4, r0
 800fff2:	8b19      	ldrh	r1, [r3, #24]
 800fff4:	4638      	mov	r0, r7
 800fff6:	f7fc fcf5 	bl	800c9e4 <ucdr_serialize_uint16_t>
 800fffa:	4020      	ands	r0, r4
 800fffc:	b2c0      	uxtb	r0, r0
 800fffe:	e7d4      	b.n	800ffaa <uxr_serialize_ActivityInfoVariant+0xa6>
 8010000:	3108      	adds	r1, #8
 8010002:	4441      	add	r1, r8
 8010004:	2202      	movs	r2, #2
 8010006:	4638      	mov	r0, r7
 8010008:	f004 fb5a 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 801000c:	4434      	add	r4, r6
 801000e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010012:	4604      	mov	r4, r0
 8010014:	7d99      	ldrb	r1, [r3, #22]
 8010016:	4638      	mov	r0, r7
 8010018:	f7fc fcb8 	bl	800c98c <ucdr_serialize_uint8_t>
 801001c:	4020      	ands	r0, r4
 801001e:	b2c0      	uxtb	r0, r0
 8010020:	e7c3      	b.n	800ffaa <uxr_serialize_ActivityInfoVariant+0xa6>
 8010022:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010026:	4638      	mov	r0, r7
 8010028:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801002c:	f7fd b9ea 	b.w	800d404 <ucdr_serialize_int16_t>
 8010030:	68ea      	ldr	r2, [r5, #12]
 8010032:	3601      	adds	r6, #1
 8010034:	42b2      	cmp	r2, r6
 8010036:	d8be      	bhi.n	800ffb6 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010038:	ea09 0900 	and.w	r9, r9, r0
 801003c:	fa5f f989 	uxtb.w	r9, r9
 8010040:	e771      	b.n	800ff26 <uxr_serialize_ActivityInfoVariant+0x22>
 8010042:	68eb      	ldr	r3, [r5, #12]
 8010044:	3601      	adds	r6, #1
 8010046:	429e      	cmp	r6, r3
 8010048:	f10a 0a18 	add.w	sl, sl, #24
 801004c:	d395      	bcc.n	800ff7a <uxr_serialize_ActivityInfoVariant+0x76>
 801004e:	e76a      	b.n	800ff26 <uxr_serialize_ActivityInfoVariant+0x22>

08010050 <uxr_deserialize_BaseObjectReply>:
 8010050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010054:	2202      	movs	r2, #2
 8010056:	4606      	mov	r6, r0
 8010058:	460f      	mov	r7, r1
 801005a:	f004 fb95 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 801005e:	2202      	movs	r2, #2
 8010060:	18b9      	adds	r1, r7, r2
 8010062:	4605      	mov	r5, r0
 8010064:	4630      	mov	r0, r6
 8010066:	f004 fb8f 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 801006a:	1d39      	adds	r1, r7, #4
 801006c:	4680      	mov	r8, r0
 801006e:	4630      	mov	r0, r6
 8010070:	f7fc fca2 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 8010074:	1d79      	adds	r1, r7, #5
 8010076:	4604      	mov	r4, r0
 8010078:	4630      	mov	r0, r6
 801007a:	f7fc fc9d 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 801007e:	ea05 0508 	and.w	r5, r5, r8
 8010082:	402c      	ands	r4, r5
 8010084:	4020      	ands	r0, r4
 8010086:	b2c0      	uxtb	r0, r0
 8010088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801008c <uxr_serialize_ReadSpecification>:
 801008c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010090:	460e      	mov	r6, r1
 8010092:	7809      	ldrb	r1, [r1, #0]
 8010094:	4607      	mov	r7, r0
 8010096:	f7fc fc79 	bl	800c98c <ucdr_serialize_uint8_t>
 801009a:	7871      	ldrb	r1, [r6, #1]
 801009c:	4604      	mov	r4, r0
 801009e:	4638      	mov	r0, r7
 80100a0:	f7fc fc74 	bl	800c98c <ucdr_serialize_uint8_t>
 80100a4:	78b1      	ldrb	r1, [r6, #2]
 80100a6:	4004      	ands	r4, r0
 80100a8:	4638      	mov	r0, r7
 80100aa:	f7fc fc41 	bl	800c930 <ucdr_serialize_bool>
 80100ae:	78b3      	ldrb	r3, [r6, #2]
 80100b0:	b2e4      	uxtb	r4, r4
 80100b2:	4004      	ands	r4, r0
 80100b4:	b94b      	cbnz	r3, 80100ca <uxr_serialize_ReadSpecification+0x3e>
 80100b6:	7a31      	ldrb	r1, [r6, #8]
 80100b8:	4638      	mov	r0, r7
 80100ba:	f7fc fc39 	bl	800c930 <ucdr_serialize_bool>
 80100be:	7a33      	ldrb	r3, [r6, #8]
 80100c0:	4004      	ands	r4, r0
 80100c2:	b943      	cbnz	r3, 80100d6 <uxr_serialize_ReadSpecification+0x4a>
 80100c4:	4620      	mov	r0, r4
 80100c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ca:	6871      	ldr	r1, [r6, #4]
 80100cc:	4638      	mov	r0, r7
 80100ce:	f004 fc17 	bl	8014900 <ucdr_serialize_string>
 80100d2:	4004      	ands	r4, r0
 80100d4:	e7ef      	b.n	80100b6 <uxr_serialize_ReadSpecification+0x2a>
 80100d6:	8971      	ldrh	r1, [r6, #10]
 80100d8:	4638      	mov	r0, r7
 80100da:	f7fc fc83 	bl	800c9e4 <ucdr_serialize_uint16_t>
 80100de:	89b1      	ldrh	r1, [r6, #12]
 80100e0:	4605      	mov	r5, r0
 80100e2:	4638      	mov	r0, r7
 80100e4:	f7fc fc7e 	bl	800c9e4 <ucdr_serialize_uint16_t>
 80100e8:	89f1      	ldrh	r1, [r6, #14]
 80100ea:	4005      	ands	r5, r0
 80100ec:	4638      	mov	r0, r7
 80100ee:	f7fc fc79 	bl	800c9e4 <ucdr_serialize_uint16_t>
 80100f2:	8a31      	ldrh	r1, [r6, #16]
 80100f4:	4680      	mov	r8, r0
 80100f6:	4638      	mov	r0, r7
 80100f8:	f7fc fc74 	bl	800c9e4 <ucdr_serialize_uint16_t>
 80100fc:	b2ed      	uxtb	r5, r5
 80100fe:	4025      	ands	r5, r4
 8010100:	ea08 0505 	and.w	r5, r8, r5
 8010104:	ea00 0405 	and.w	r4, r0, r5
 8010108:	4620      	mov	r0, r4
 801010a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801010e:	bf00      	nop

08010110 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010110:	f7ff bb02 	b.w	800f718 <uxr_serialize_CLIENT_Representation>

08010114 <uxr_serialize_CREATE_Payload>:
 8010114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010116:	2202      	movs	r2, #2
 8010118:	4607      	mov	r7, r0
 801011a:	460e      	mov	r6, r1
 801011c:	f004 fad0 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 8010120:	2202      	movs	r2, #2
 8010122:	18b1      	adds	r1, r6, r2
 8010124:	4605      	mov	r5, r0
 8010126:	4638      	mov	r0, r7
 8010128:	f004 faca 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 801012c:	7931      	ldrb	r1, [r6, #4]
 801012e:	4604      	mov	r4, r0
 8010130:	4638      	mov	r0, r7
 8010132:	f7fc fc2b 	bl	800c98c <ucdr_serialize_uint8_t>
 8010136:	b170      	cbz	r0, 8010156 <uxr_serialize_CREATE_Payload+0x42>
 8010138:	7933      	ldrb	r3, [r6, #4]
 801013a:	402c      	ands	r4, r5
 801013c:	3b01      	subs	r3, #1
 801013e:	b2e4      	uxtb	r4, r4
 8010140:	2b0d      	cmp	r3, #13
 8010142:	d809      	bhi.n	8010158 <uxr_serialize_CREATE_Payload+0x44>
 8010144:	e8df f003 	tbb	[pc, r3]
 8010148:	23230a4c 	.word	0x23230a4c
 801014c:	0a0a0a0a 	.word	0x0a0a0a0a
 8010150:	12121208 	.word	0x12121208
 8010154:	3e45      	.short	0x3e45
 8010156:	2400      	movs	r4, #0
 8010158:	4620      	mov	r0, r4
 801015a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801015c:	f106 0108 	add.w	r1, r6, #8
 8010160:	4638      	mov	r0, r7
 8010162:	f7ff fbdf 	bl	800f924 <uxr_serialize_DATAWRITER_Representation>
 8010166:	4004      	ands	r4, r0
 8010168:	4620      	mov	r0, r4
 801016a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801016c:	7a31      	ldrb	r1, [r6, #8]
 801016e:	4638      	mov	r0, r7
 8010170:	f7fc fc0c 	bl	800c98c <ucdr_serialize_uint8_t>
 8010174:	2800      	cmp	r0, #0
 8010176:	d0ee      	beq.n	8010156 <uxr_serialize_CREATE_Payload+0x42>
 8010178:	7a33      	ldrb	r3, [r6, #8]
 801017a:	2b01      	cmp	r3, #1
 801017c:	d001      	beq.n	8010182 <uxr_serialize_CREATE_Payload+0x6e>
 801017e:	2b02      	cmp	r3, #2
 8010180:	d1ea      	bne.n	8010158 <uxr_serialize_CREATE_Payload+0x44>
 8010182:	68f1      	ldr	r1, [r6, #12]
 8010184:	4638      	mov	r0, r7
 8010186:	f004 fbbb 	bl	8014900 <ucdr_serialize_string>
 801018a:	4004      	ands	r4, r0
 801018c:	e7e4      	b.n	8010158 <uxr_serialize_CREATE_Payload+0x44>
 801018e:	7a31      	ldrb	r1, [r6, #8]
 8010190:	4638      	mov	r0, r7
 8010192:	f7fc fbfb 	bl	800c98c <ucdr_serialize_uint8_t>
 8010196:	4605      	mov	r5, r0
 8010198:	b158      	cbz	r0, 80101b2 <uxr_serialize_CREATE_Payload+0x9e>
 801019a:	7a33      	ldrb	r3, [r6, #8]
 801019c:	2b02      	cmp	r3, #2
 801019e:	d034      	beq.n	801020a <uxr_serialize_CREATE_Payload+0xf6>
 80101a0:	2b03      	cmp	r3, #3
 80101a2:	d106      	bne.n	80101b2 <uxr_serialize_CREATE_Payload+0x9e>
 80101a4:	68f2      	ldr	r2, [r6, #12]
 80101a6:	f106 0110 	add.w	r1, r6, #16
 80101aa:	4638      	mov	r0, r7
 80101ac:	f004 fb7c 	bl	80148a8 <ucdr_serialize_sequence_uint8_t>
 80101b0:	4605      	mov	r5, r0
 80101b2:	2202      	movs	r2, #2
 80101b4:	f506 7104 	add.w	r1, r6, #528	; 0x210
 80101b8:	4638      	mov	r0, r7
 80101ba:	f004 fa81 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 80101be:	4028      	ands	r0, r5
 80101c0:	4004      	ands	r4, r0
 80101c2:	e7c9      	b.n	8010158 <uxr_serialize_CREATE_Payload+0x44>
 80101c4:	f106 0108 	add.w	r1, r6, #8
 80101c8:	4638      	mov	r0, r7
 80101ca:	f7ff faa5 	bl	800f718 <uxr_serialize_CLIENT_Representation>
 80101ce:	4004      	ands	r4, r0
 80101d0:	e7c2      	b.n	8010158 <uxr_serialize_CREATE_Payload+0x44>
 80101d2:	f106 0108 	add.w	r1, r6, #8
 80101d6:	4638      	mov	r0, r7
 80101d8:	f7ff fb5a 	bl	800f890 <uxr_serialize_AGENT_Representation>
 80101dc:	4004      	ands	r4, r0
 80101de:	e7bb      	b.n	8010158 <uxr_serialize_CREATE_Payload+0x44>
 80101e0:	7a31      	ldrb	r1, [r6, #8]
 80101e2:	4638      	mov	r0, r7
 80101e4:	f7fc fbd2 	bl	800c98c <ucdr_serialize_uint8_t>
 80101e8:	4605      	mov	r5, r0
 80101ea:	b130      	cbz	r0, 80101fa <uxr_serialize_CREATE_Payload+0xe6>
 80101ec:	7a33      	ldrb	r3, [r6, #8]
 80101ee:	2b02      	cmp	r3, #2
 80101f0:	d011      	beq.n	8010216 <uxr_serialize_CREATE_Payload+0x102>
 80101f2:	2b03      	cmp	r3, #3
 80101f4:	d015      	beq.n	8010222 <uxr_serialize_CREATE_Payload+0x10e>
 80101f6:	2b01      	cmp	r3, #1
 80101f8:	d00d      	beq.n	8010216 <uxr_serialize_CREATE_Payload+0x102>
 80101fa:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 80101fe:	4638      	mov	r0, r7
 8010200:	f7fd f900 	bl	800d404 <ucdr_serialize_int16_t>
 8010204:	4028      	ands	r0, r5
 8010206:	4004      	ands	r4, r0
 8010208:	e7a6      	b.n	8010158 <uxr_serialize_CREATE_Payload+0x44>
 801020a:	68f1      	ldr	r1, [r6, #12]
 801020c:	4638      	mov	r0, r7
 801020e:	f004 fb77 	bl	8014900 <ucdr_serialize_string>
 8010212:	4605      	mov	r5, r0
 8010214:	e7cd      	b.n	80101b2 <uxr_serialize_CREATE_Payload+0x9e>
 8010216:	68f1      	ldr	r1, [r6, #12]
 8010218:	4638      	mov	r0, r7
 801021a:	f004 fb71 	bl	8014900 <ucdr_serialize_string>
 801021e:	4605      	mov	r5, r0
 8010220:	e7eb      	b.n	80101fa <uxr_serialize_CREATE_Payload+0xe6>
 8010222:	68f2      	ldr	r2, [r6, #12]
 8010224:	f106 0110 	add.w	r1, r6, #16
 8010228:	4638      	mov	r0, r7
 801022a:	f004 fb3d 	bl	80148a8 <ucdr_serialize_sequence_uint8_t>
 801022e:	4605      	mov	r5, r0
 8010230:	e7e3      	b.n	80101fa <uxr_serialize_CREATE_Payload+0xe6>
 8010232:	bf00      	nop

08010234 <uxr_deserialize_GET_INFO_Payload>:
 8010234:	b570      	push	{r4, r5, r6, lr}
 8010236:	2202      	movs	r2, #2
 8010238:	4605      	mov	r5, r0
 801023a:	460e      	mov	r6, r1
 801023c:	f004 faa4 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 8010240:	2202      	movs	r2, #2
 8010242:	18b1      	adds	r1, r6, r2
 8010244:	4604      	mov	r4, r0
 8010246:	4628      	mov	r0, r5
 8010248:	f004 fa9e 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 801024c:	1d31      	adds	r1, r6, #4
 801024e:	4004      	ands	r4, r0
 8010250:	4628      	mov	r0, r5
 8010252:	f7fc fee1 	bl	800d018 <ucdr_deserialize_uint32_t>
 8010256:	b2e4      	uxtb	r4, r4
 8010258:	4020      	ands	r0, r4
 801025a:	bd70      	pop	{r4, r5, r6, pc}

0801025c <uxr_serialize_DELETE_Payload>:
 801025c:	b570      	push	{r4, r5, r6, lr}
 801025e:	2202      	movs	r2, #2
 8010260:	4605      	mov	r5, r0
 8010262:	460e      	mov	r6, r1
 8010264:	f004 fa2c 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 8010268:	2202      	movs	r2, #2
 801026a:	4604      	mov	r4, r0
 801026c:	18b1      	adds	r1, r6, r2
 801026e:	4628      	mov	r0, r5
 8010270:	f004 fa26 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 8010274:	4020      	ands	r0, r4
 8010276:	b2c0      	uxtb	r0, r0
 8010278:	bd70      	pop	{r4, r5, r6, pc}
 801027a:	bf00      	nop

0801027c <uxr_deserialize_STATUS_AGENT_Payload>:
 801027c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010280:	4605      	mov	r5, r0
 8010282:	460e      	mov	r6, r1
 8010284:	f7fc fb98 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 8010288:	1c71      	adds	r1, r6, #1
 801028a:	4604      	mov	r4, r0
 801028c:	4628      	mov	r0, r5
 801028e:	f7fc fb93 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 8010292:	2204      	movs	r2, #4
 8010294:	18b1      	adds	r1, r6, r2
 8010296:	4680      	mov	r8, r0
 8010298:	4628      	mov	r0, r5
 801029a:	f004 fa75 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 801029e:	f106 0108 	add.w	r1, r6, #8
 80102a2:	4607      	mov	r7, r0
 80102a4:	2202      	movs	r2, #2
 80102a6:	4628      	mov	r0, r5
 80102a8:	f004 fa6e 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 80102ac:	ea04 0308 	and.w	r3, r4, r8
 80102b0:	b2db      	uxtb	r3, r3
 80102b2:	ea03 0407 	and.w	r4, r3, r7
 80102b6:	2202      	movs	r2, #2
 80102b8:	4607      	mov	r7, r0
 80102ba:	f106 010a 	add.w	r1, r6, #10
 80102be:	4628      	mov	r0, r5
 80102c0:	f004 fa62 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 80102c4:	f106 010c 	add.w	r1, r6, #12
 80102c8:	4603      	mov	r3, r0
 80102ca:	4628      	mov	r0, r5
 80102cc:	461d      	mov	r5, r3
 80102ce:	f7fc fb45 	bl	800c95c <ucdr_deserialize_bool>
 80102d2:	403c      	ands	r4, r7
 80102d4:	4025      	ands	r5, r4
 80102d6:	4028      	ands	r0, r5
 80102d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080102dc <uxr_deserialize_STATUS_Payload>:
 80102dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e0:	2202      	movs	r2, #2
 80102e2:	4606      	mov	r6, r0
 80102e4:	460f      	mov	r7, r1
 80102e6:	f004 fa4f 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 80102ea:	2202      	movs	r2, #2
 80102ec:	18b9      	adds	r1, r7, r2
 80102ee:	4605      	mov	r5, r0
 80102f0:	4630      	mov	r0, r6
 80102f2:	f004 fa49 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 80102f6:	1d39      	adds	r1, r7, #4
 80102f8:	4680      	mov	r8, r0
 80102fa:	4630      	mov	r0, r6
 80102fc:	f7fc fb5c 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 8010300:	1d79      	adds	r1, r7, #5
 8010302:	4604      	mov	r4, r0
 8010304:	4630      	mov	r0, r6
 8010306:	f7fc fb57 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 801030a:	ea05 0508 	and.w	r5, r5, r8
 801030e:	402c      	ands	r4, r5
 8010310:	4020      	ands	r0, r4
 8010312:	b2c0      	uxtb	r0, r0
 8010314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010318 <uxr_serialize_INFO_Payload>:
 8010318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801031c:	2202      	movs	r2, #2
 801031e:	460c      	mov	r4, r1
 8010320:	4605      	mov	r5, r0
 8010322:	f004 f9cd 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 8010326:	2202      	movs	r2, #2
 8010328:	18a1      	adds	r1, r4, r2
 801032a:	4680      	mov	r8, r0
 801032c:	4628      	mov	r0, r5
 801032e:	f004 f9c7 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 8010332:	7921      	ldrb	r1, [r4, #4]
 8010334:	4607      	mov	r7, r0
 8010336:	4628      	mov	r0, r5
 8010338:	f7fc fb28 	bl	800c98c <ucdr_serialize_uint8_t>
 801033c:	7961      	ldrb	r1, [r4, #5]
 801033e:	4606      	mov	r6, r0
 8010340:	4628      	mov	r0, r5
 8010342:	f7fc fb23 	bl	800c98c <ucdr_serialize_uint8_t>
 8010346:	ea08 0807 	and.w	r8, r8, r7
 801034a:	ea06 0608 	and.w	r6, r6, r8
 801034e:	4006      	ands	r6, r0
 8010350:	7a21      	ldrb	r1, [r4, #8]
 8010352:	4628      	mov	r0, r5
 8010354:	f7fc faec 	bl	800c930 <ucdr_serialize_bool>
 8010358:	7a23      	ldrb	r3, [r4, #8]
 801035a:	b2f7      	uxtb	r7, r6
 801035c:	4606      	mov	r6, r0
 801035e:	b96b      	cbnz	r3, 801037c <uxr_serialize_INFO_Payload+0x64>
 8010360:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8010364:	4628      	mov	r0, r5
 8010366:	f7fc fae3 	bl	800c930 <ucdr_serialize_bool>
 801036a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801036e:	4030      	ands	r0, r6
 8010370:	b2c6      	uxtb	r6, r0
 8010372:	b983      	cbnz	r3, 8010396 <uxr_serialize_INFO_Payload+0x7e>
 8010374:	ea06 0007 	and.w	r0, r6, r7
 8010378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801037c:	7b21      	ldrb	r1, [r4, #12]
 801037e:	4628      	mov	r0, r5
 8010380:	f7fc fb04 	bl	800c98c <ucdr_serialize_uint8_t>
 8010384:	b188      	cbz	r0, 80103aa <uxr_serialize_INFO_Payload+0x92>
 8010386:	f104 010c 	add.w	r1, r4, #12
 801038a:	4628      	mov	r0, r5
 801038c:	f7ff faf2 	bl	800f974 <uxr_serialize_ObjectVariant.part.0>
 8010390:	4030      	ands	r0, r6
 8010392:	b2c6      	uxtb	r6, r0
 8010394:	e7e4      	b.n	8010360 <uxr_serialize_INFO_Payload+0x48>
 8010396:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801039a:	4628      	mov	r0, r5
 801039c:	f7ff fdb2 	bl	800ff04 <uxr_serialize_ActivityInfoVariant>
 80103a0:	4006      	ands	r6, r0
 80103a2:	ea06 0007 	and.w	r0, r6, r7
 80103a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103aa:	4606      	mov	r6, r0
 80103ac:	e7d8      	b.n	8010360 <uxr_serialize_INFO_Payload+0x48>
 80103ae:	bf00      	nop

080103b0 <uxr_serialize_READ_DATA_Payload>:
 80103b0:	b570      	push	{r4, r5, r6, lr}
 80103b2:	2202      	movs	r2, #2
 80103b4:	4605      	mov	r5, r0
 80103b6:	460e      	mov	r6, r1
 80103b8:	f004 f982 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 80103bc:	2202      	movs	r2, #2
 80103be:	18b1      	adds	r1, r6, r2
 80103c0:	4604      	mov	r4, r0
 80103c2:	4628      	mov	r0, r5
 80103c4:	f004 f97c 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 80103c8:	1d31      	adds	r1, r6, #4
 80103ca:	4004      	ands	r4, r0
 80103cc:	4628      	mov	r0, r5
 80103ce:	f7ff fe5d 	bl	801008c <uxr_serialize_ReadSpecification>
 80103d2:	b2e4      	uxtb	r4, r4
 80103d4:	4020      	ands	r0, r4
 80103d6:	bd70      	pop	{r4, r5, r6, pc}

080103d8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	2202      	movs	r2, #2
 80103dc:	4605      	mov	r5, r0
 80103de:	460e      	mov	r6, r1
 80103e0:	f004 f96e 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 80103e4:	2202      	movs	r2, #2
 80103e6:	4604      	mov	r4, r0
 80103e8:	18b1      	adds	r1, r6, r2
 80103ea:	4628      	mov	r0, r5
 80103ec:	f004 f968 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 80103f0:	4020      	ands	r0, r4
 80103f2:	b2c0      	uxtb	r0, r0
 80103f4:	bd70      	pop	{r4, r5, r6, pc}
 80103f6:	bf00      	nop

080103f8 <uxr_serialize_ACKNACK_Payload>:
 80103f8:	b570      	push	{r4, r5, r6, lr}
 80103fa:	460c      	mov	r4, r1
 80103fc:	460e      	mov	r6, r1
 80103fe:	f834 1b02 	ldrh.w	r1, [r4], #2
 8010402:	4605      	mov	r5, r0
 8010404:	f7fc faee 	bl	800c9e4 <ucdr_serialize_uint16_t>
 8010408:	2202      	movs	r2, #2
 801040a:	4621      	mov	r1, r4
 801040c:	4604      	mov	r4, r0
 801040e:	4628      	mov	r0, r5
 8010410:	f004 f956 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 8010414:	7931      	ldrb	r1, [r6, #4]
 8010416:	4004      	ands	r4, r0
 8010418:	4628      	mov	r0, r5
 801041a:	f7fc fab7 	bl	800c98c <ucdr_serialize_uint8_t>
 801041e:	b2e4      	uxtb	r4, r4
 8010420:	4020      	ands	r0, r4
 8010422:	bd70      	pop	{r4, r5, r6, pc}

08010424 <uxr_deserialize_ACKNACK_Payload>:
 8010424:	b570      	push	{r4, r5, r6, lr}
 8010426:	4605      	mov	r5, r0
 8010428:	460e      	mov	r6, r1
 801042a:	f7fc fbdb 	bl	800cbe4 <ucdr_deserialize_uint16_t>
 801042e:	2202      	movs	r2, #2
 8010430:	18b1      	adds	r1, r6, r2
 8010432:	4604      	mov	r4, r0
 8010434:	4628      	mov	r0, r5
 8010436:	f004 f9a7 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 801043a:	1d31      	adds	r1, r6, #4
 801043c:	4004      	ands	r4, r0
 801043e:	4628      	mov	r0, r5
 8010440:	f7fc faba 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 8010444:	b2e4      	uxtb	r4, r4
 8010446:	4020      	ands	r0, r4
 8010448:	bd70      	pop	{r4, r5, r6, pc}
 801044a:	bf00      	nop

0801044c <uxr_serialize_HEARTBEAT_Payload>:
 801044c:	b570      	push	{r4, r5, r6, lr}
 801044e:	460d      	mov	r5, r1
 8010450:	8809      	ldrh	r1, [r1, #0]
 8010452:	4606      	mov	r6, r0
 8010454:	f7fc fac6 	bl	800c9e4 <ucdr_serialize_uint16_t>
 8010458:	8869      	ldrh	r1, [r5, #2]
 801045a:	4604      	mov	r4, r0
 801045c:	4630      	mov	r0, r6
 801045e:	f7fc fac1 	bl	800c9e4 <ucdr_serialize_uint16_t>
 8010462:	7929      	ldrb	r1, [r5, #4]
 8010464:	4004      	ands	r4, r0
 8010466:	4630      	mov	r0, r6
 8010468:	f7fc fa90 	bl	800c98c <ucdr_serialize_uint8_t>
 801046c:	b2e4      	uxtb	r4, r4
 801046e:	4020      	ands	r0, r4
 8010470:	bd70      	pop	{r4, r5, r6, pc}
 8010472:	bf00      	nop

08010474 <uxr_deserialize_HEARTBEAT_Payload>:
 8010474:	b570      	push	{r4, r5, r6, lr}
 8010476:	4605      	mov	r5, r0
 8010478:	460e      	mov	r6, r1
 801047a:	f7fc fbb3 	bl	800cbe4 <ucdr_deserialize_uint16_t>
 801047e:	1cb1      	adds	r1, r6, #2
 8010480:	4604      	mov	r4, r0
 8010482:	4628      	mov	r0, r5
 8010484:	f7fc fbae 	bl	800cbe4 <ucdr_deserialize_uint16_t>
 8010488:	1d31      	adds	r1, r6, #4
 801048a:	4004      	ands	r4, r0
 801048c:	4628      	mov	r0, r5
 801048e:	f7fc fa93 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 8010492:	b2e4      	uxtb	r4, r4
 8010494:	4020      	ands	r0, r4
 8010496:	bd70      	pop	{r4, r5, r6, pc}

08010498 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801049c:	4605      	mov	r5, r0
 801049e:	460e      	mov	r6, r1
 80104a0:	f7fd f93c 	bl	800d71c <ucdr_deserialize_int32_t>
 80104a4:	1d31      	adds	r1, r6, #4
 80104a6:	4607      	mov	r7, r0
 80104a8:	4628      	mov	r0, r5
 80104aa:	f7fc fdb5 	bl	800d018 <ucdr_deserialize_uint32_t>
 80104ae:	f106 0108 	add.w	r1, r6, #8
 80104b2:	4680      	mov	r8, r0
 80104b4:	4628      	mov	r0, r5
 80104b6:	f7fd f931 	bl	800d71c <ucdr_deserialize_int32_t>
 80104ba:	f106 010c 	add.w	r1, r6, #12
 80104be:	4604      	mov	r4, r0
 80104c0:	4628      	mov	r0, r5
 80104c2:	f7fc fda9 	bl	800d018 <ucdr_deserialize_uint32_t>
 80104c6:	ea07 0708 	and.w	r7, r7, r8
 80104ca:	403c      	ands	r4, r7
 80104cc:	f106 0110 	add.w	r1, r6, #16
 80104d0:	4004      	ands	r4, r0
 80104d2:	4628      	mov	r0, r5
 80104d4:	f7fd f922 	bl	800d71c <ucdr_deserialize_int32_t>
 80104d8:	f106 0114 	add.w	r1, r6, #20
 80104dc:	4607      	mov	r7, r0
 80104de:	4628      	mov	r0, r5
 80104e0:	f7fc fd9a 	bl	800d018 <ucdr_deserialize_uint32_t>
 80104e4:	b2e4      	uxtb	r4, r4
 80104e6:	403c      	ands	r4, r7
 80104e8:	4020      	ands	r0, r4
 80104ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104ee:	bf00      	nop

080104f0 <uxr_serialize_SampleIdentity>:
 80104f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104f4:	220c      	movs	r2, #12
 80104f6:	4604      	mov	r4, r0
 80104f8:	460d      	mov	r5, r1
 80104fa:	f004 f8e1 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 80104fe:	2203      	movs	r2, #3
 8010500:	f105 010c 	add.w	r1, r5, #12
 8010504:	4607      	mov	r7, r0
 8010506:	4620      	mov	r0, r4
 8010508:	f004 f8da 	bl	80146c0 <ucdr_serialize_array_uint8_t>
 801050c:	7be9      	ldrb	r1, [r5, #15]
 801050e:	4680      	mov	r8, r0
 8010510:	4620      	mov	r0, r4
 8010512:	f7fc fa3b 	bl	800c98c <ucdr_serialize_uint8_t>
 8010516:	6929      	ldr	r1, [r5, #16]
 8010518:	4606      	mov	r6, r0
 801051a:	4620      	mov	r0, r4
 801051c:	f7fd f866 	bl	800d5ec <ucdr_serialize_int32_t>
 8010520:	6969      	ldr	r1, [r5, #20]
 8010522:	4603      	mov	r3, r0
 8010524:	4620      	mov	r0, r4
 8010526:	ea07 0708 	and.w	r7, r7, r8
 801052a:	461c      	mov	r4, r3
 801052c:	f7fc fc44 	bl	800cdb8 <ucdr_serialize_uint32_t>
 8010530:	403e      	ands	r6, r7
 8010532:	4034      	ands	r4, r6
 8010534:	4020      	ands	r0, r4
 8010536:	b2c0      	uxtb	r0, r0
 8010538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801053c <uxr_deserialize_SampleIdentity>:
 801053c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010540:	220c      	movs	r2, #12
 8010542:	4604      	mov	r4, r0
 8010544:	460d      	mov	r5, r1
 8010546:	f004 f91f 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 801054a:	2203      	movs	r2, #3
 801054c:	f105 010c 	add.w	r1, r5, #12
 8010550:	4607      	mov	r7, r0
 8010552:	4620      	mov	r0, r4
 8010554:	f004 f918 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 8010558:	f105 010f 	add.w	r1, r5, #15
 801055c:	4680      	mov	r8, r0
 801055e:	4620      	mov	r0, r4
 8010560:	f7fc fa2a 	bl	800c9b8 <ucdr_deserialize_uint8_t>
 8010564:	f105 0110 	add.w	r1, r5, #16
 8010568:	4606      	mov	r6, r0
 801056a:	4620      	mov	r0, r4
 801056c:	f7fd f8d6 	bl	800d71c <ucdr_deserialize_int32_t>
 8010570:	f105 0114 	add.w	r1, r5, #20
 8010574:	4603      	mov	r3, r0
 8010576:	4620      	mov	r0, r4
 8010578:	ea07 0708 	and.w	r7, r7, r8
 801057c:	461c      	mov	r4, r3
 801057e:	f7fc fd4b 	bl	800d018 <ucdr_deserialize_uint32_t>
 8010582:	403e      	ands	r6, r7
 8010584:	4034      	ands	r4, r6
 8010586:	4020      	ands	r0, r4
 8010588:	b2c0      	uxtb	r0, r0
 801058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801058e:	bf00      	nop

08010590 <rcl_client_get_rmw_handle>:
 8010590:	b118      	cbz	r0, 801059a <rcl_client_get_rmw_handle+0xa>
 8010592:	6800      	ldr	r0, [r0, #0]
 8010594:	b108      	cbz	r0, 801059a <rcl_client_get_rmw_handle+0xa>
 8010596:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801059a:	4770      	bx	lr

0801059c <rcl_send_request>:
 801059c:	b570      	push	{r4, r5, r6, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	b1e8      	cbz	r0, 80105de <rcl_send_request+0x42>
 80105a2:	4604      	mov	r4, r0
 80105a4:	6800      	ldr	r0, [r0, #0]
 80105a6:	b1d0      	cbz	r0, 80105de <rcl_send_request+0x42>
 80105a8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80105ac:	b1bb      	cbz	r3, 80105de <rcl_send_request+0x42>
 80105ae:	460e      	mov	r6, r1
 80105b0:	b1d1      	cbz	r1, 80105e8 <rcl_send_request+0x4c>
 80105b2:	4615      	mov	r5, r2
 80105b4:	b1c2      	cbz	r2, 80105e8 <rcl_send_request+0x4c>
 80105b6:	2105      	movs	r1, #5
 80105b8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80105bc:	f002 fe08 	bl	80131d0 <__atomic_load_8>
 80105c0:	6823      	ldr	r3, [r4, #0]
 80105c2:	e9c5 0100 	strd	r0, r1, [r5]
 80105c6:	462a      	mov	r2, r5
 80105c8:	4631      	mov	r1, r6
 80105ca:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80105ce:	f003 fc6d 	bl	8013eac <rmw_send_request>
 80105d2:	4606      	mov	r6, r0
 80105d4:	b160      	cbz	r0, 80105f0 <rcl_send_request+0x54>
 80105d6:	2601      	movs	r6, #1
 80105d8:	4630      	mov	r0, r6
 80105da:	b002      	add	sp, #8
 80105dc:	bd70      	pop	{r4, r5, r6, pc}
 80105de:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 80105e2:	4630      	mov	r0, r6
 80105e4:	b002      	add	sp, #8
 80105e6:	bd70      	pop	{r4, r5, r6, pc}
 80105e8:	260b      	movs	r6, #11
 80105ea:	4630      	mov	r0, r6
 80105ec:	b002      	add	sp, #8
 80105ee:	bd70      	pop	{r4, r5, r6, pc}
 80105f0:	6820      	ldr	r0, [r4, #0]
 80105f2:	2105      	movs	r1, #5
 80105f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105f8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80105fc:	9100      	str	r1, [sp, #0]
 80105fe:	f002 fe53 	bl	80132a8 <__atomic_exchange_8>
 8010602:	4630      	mov	r0, r6
 8010604:	b002      	add	sp, #8
 8010606:	bd70      	pop	{r4, r5, r6, pc}

08010608 <rcl_take_response>:
 8010608:	b570      	push	{r4, r5, r6, lr}
 801060a:	468e      	mov	lr, r1
 801060c:	460c      	mov	r4, r1
 801060e:	4616      	mov	r6, r2
 8010610:	4605      	mov	r5, r0
 8010612:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010616:	b08c      	sub	sp, #48	; 0x30
 8010618:	f10d 0c18 	add.w	ip, sp, #24
 801061c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010620:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010624:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010628:	b35d      	cbz	r5, 8010682 <rcl_take_response+0x7a>
 801062a:	682b      	ldr	r3, [r5, #0]
 801062c:	b34b      	cbz	r3, 8010682 <rcl_take_response+0x7a>
 801062e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010632:	b330      	cbz	r0, 8010682 <rcl_take_response+0x7a>
 8010634:	b346      	cbz	r6, 8010688 <rcl_take_response+0x80>
 8010636:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010690 <rcl_take_response+0x88>
 801063a:	2300      	movs	r3, #0
 801063c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010640:	4632      	mov	r2, r6
 8010642:	f10d 0307 	add.w	r3, sp, #7
 8010646:	a902      	add	r1, sp, #8
 8010648:	ed8d 7b02 	vstr	d7, [sp, #8]
 801064c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010650:	f003 fd34 	bl	80140bc <rmw_take_response>
 8010654:	4605      	mov	r5, r0
 8010656:	b9c8      	cbnz	r0, 801068c <rcl_take_response+0x84>
 8010658:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801065c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8010660:	2a00      	cmp	r2, #0
 8010662:	bf08      	it	eq
 8010664:	461d      	moveq	r5, r3
 8010666:	f10d 0e18 	add.w	lr, sp, #24
 801066a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801066e:	46a4      	mov	ip, r4
 8010670:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010674:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010678:	e88c 0003 	stmia.w	ip, {r0, r1}
 801067c:	4628      	mov	r0, r5
 801067e:	b00c      	add	sp, #48	; 0x30
 8010680:	bd70      	pop	{r4, r5, r6, pc}
 8010682:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8010686:	e7ee      	b.n	8010666 <rcl_take_response+0x5e>
 8010688:	250b      	movs	r5, #11
 801068a:	e7ec      	b.n	8010666 <rcl_take_response+0x5e>
 801068c:	2501      	movs	r5, #1
 801068e:	e7ea      	b.n	8010666 <rcl_take_response+0x5e>
	...

08010698 <rcl_client_is_valid>:
 8010698:	b130      	cbz	r0, 80106a8 <rcl_client_is_valid+0x10>
 801069a:	6800      	ldr	r0, [r0, #0]
 801069c:	b120      	cbz	r0, 80106a8 <rcl_client_is_valid+0x10>
 801069e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80106a2:	3800      	subs	r0, #0
 80106a4:	bf18      	it	ne
 80106a6:	2001      	movne	r0, #1
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop

080106ac <rcl_convert_rmw_ret_to_rcl_ret>:
 80106ac:	280b      	cmp	r0, #11
 80106ae:	dc0d      	bgt.n	80106cc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80106b0:	2800      	cmp	r0, #0
 80106b2:	db09      	blt.n	80106c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80106b4:	280b      	cmp	r0, #11
 80106b6:	d807      	bhi.n	80106c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80106b8:	e8df f000 	tbb	[pc, r0]
 80106bc:	07060607 	.word	0x07060607
 80106c0:	06060606 	.word	0x06060606
 80106c4:	07070606 	.word	0x07070606
 80106c8:	2001      	movs	r0, #1
 80106ca:	4770      	bx	lr
 80106cc:	28cb      	cmp	r0, #203	; 0xcb
 80106ce:	bf18      	it	ne
 80106d0:	2001      	movne	r0, #1
 80106d2:	4770      	bx	lr

080106d4 <rcl_get_zero_initialized_context>:
 80106d4:	4a03      	ldr	r2, [pc, #12]	; (80106e4 <rcl_get_zero_initialized_context+0x10>)
 80106d6:	4603      	mov	r3, r0
 80106d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80106e0:	4618      	mov	r0, r3
 80106e2:	4770      	bx	lr
 80106e4:	08018404 	.word	0x08018404

080106e8 <rcl_context_is_valid>:
 80106e8:	b118      	cbz	r0, 80106f2 <rcl_context_is_valid+0xa>
 80106ea:	6840      	ldr	r0, [r0, #4]
 80106ec:	3800      	subs	r0, #0
 80106ee:	bf18      	it	ne
 80106f0:	2001      	movne	r0, #1
 80106f2:	4770      	bx	lr

080106f4 <__cleanup_context>:
 80106f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106f8:	4606      	mov	r6, r0
 80106fa:	6800      	ldr	r0, [r0, #0]
 80106fc:	2300      	movs	r3, #0
 80106fe:	6073      	str	r3, [r6, #4]
 8010700:	2800      	cmp	r0, #0
 8010702:	d049      	beq.n	8010798 <__cleanup_context+0xa4>
 8010704:	6947      	ldr	r7, [r0, #20]
 8010706:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801070a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801070e:	b137      	cbz	r7, 801071e <__cleanup_context+0x2a>
 8010710:	3014      	adds	r0, #20
 8010712:	f000 fac9 	bl	8010ca8 <rcl_init_options_fini>
 8010716:	4607      	mov	r7, r0
 8010718:	2800      	cmp	r0, #0
 801071a:	d144      	bne.n	80107a6 <__cleanup_context+0xb2>
 801071c:	6830      	ldr	r0, [r6, #0]
 801071e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010720:	b143      	cbz	r3, 8010734 <__cleanup_context+0x40>
 8010722:	3028      	adds	r0, #40	; 0x28
 8010724:	f003 fb1e 	bl	8013d64 <rmw_context_fini>
 8010728:	b118      	cbz	r0, 8010732 <__cleanup_context+0x3e>
 801072a:	2f00      	cmp	r7, #0
 801072c:	d03e      	beq.n	80107ac <__cleanup_context+0xb8>
 801072e:	f7fa ff33 	bl	800b598 <rcutils_reset_error>
 8010732:	6830      	ldr	r0, [r6, #0]
 8010734:	6a03      	ldr	r3, [r0, #32]
 8010736:	b1db      	cbz	r3, 8010770 <__cleanup_context+0x7c>
 8010738:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801073c:	2a01      	cmp	r2, #1
 801073e:	f17c 0100 	sbcs.w	r1, ip, #0
 8010742:	db11      	blt.n	8010768 <__cleanup_context+0x74>
 8010744:	2400      	movs	r4, #0
 8010746:	4625      	mov	r5, r4
 8010748:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801074c:	4649      	mov	r1, r9
 801074e:	b1b8      	cbz	r0, 8010780 <__cleanup_context+0x8c>
 8010750:	47c0      	blx	r8
 8010752:	6833      	ldr	r3, [r6, #0]
 8010754:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010758:	3401      	adds	r4, #1
 801075a:	f145 0500 	adc.w	r5, r5, #0
 801075e:	4294      	cmp	r4, r2
 8010760:	eb75 010c 	sbcs.w	r1, r5, ip
 8010764:	6a1b      	ldr	r3, [r3, #32]
 8010766:	dbef      	blt.n	8010748 <__cleanup_context+0x54>
 8010768:	4618      	mov	r0, r3
 801076a:	4649      	mov	r1, r9
 801076c:	47c0      	blx	r8
 801076e:	6830      	ldr	r0, [r6, #0]
 8010770:	4649      	mov	r1, r9
 8010772:	47c0      	blx	r8
 8010774:	2300      	movs	r3, #0
 8010776:	e9c6 3300 	strd	r3, r3, [r6]
 801077a:	4638      	mov	r0, r7
 801077c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010780:	3401      	adds	r4, #1
 8010782:	f145 0500 	adc.w	r5, r5, #0
 8010786:	4294      	cmp	r4, r2
 8010788:	eb75 010c 	sbcs.w	r1, r5, ip
 801078c:	dbdc      	blt.n	8010748 <__cleanup_context+0x54>
 801078e:	4618      	mov	r0, r3
 8010790:	4649      	mov	r1, r9
 8010792:	47c0      	blx	r8
 8010794:	6830      	ldr	r0, [r6, #0]
 8010796:	e7eb      	b.n	8010770 <__cleanup_context+0x7c>
 8010798:	4607      	mov	r7, r0
 801079a:	2300      	movs	r3, #0
 801079c:	e9c6 3300 	strd	r3, r3, [r6]
 80107a0:	4638      	mov	r0, r7
 80107a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107a6:	f7fa fef7 	bl	800b598 <rcutils_reset_error>
 80107aa:	e7b7      	b.n	801071c <__cleanup_context+0x28>
 80107ac:	f7ff ff7e 	bl	80106ac <rcl_convert_rmw_ret_to_rcl_ret>
 80107b0:	4607      	mov	r7, r0
 80107b2:	e7bc      	b.n	801072e <__cleanup_context+0x3a>

080107b4 <rcl_get_zero_initialized_guard_condition>:
 80107b4:	4a03      	ldr	r2, [pc, #12]	; (80107c4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80107b6:	4603      	mov	r3, r0
 80107b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80107c0:	4618      	mov	r0, r3
 80107c2:	4770      	bx	lr
 80107c4:	0801840c 	.word	0x0801840c

080107c8 <rcl_guard_condition_init>:
 80107c8:	b082      	sub	sp, #8
 80107ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107cc:	b087      	sub	sp, #28
 80107ce:	ac0c      	add	r4, sp, #48	; 0x30
 80107d0:	e884 000c 	stmia.w	r4, {r2, r3}
 80107d4:	46a6      	mov	lr, r4
 80107d6:	460d      	mov	r5, r1
 80107d8:	4604      	mov	r4, r0
 80107da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107de:	f10d 0c04 	add.w	ip, sp, #4
 80107e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107e6:	f8de 3000 	ldr.w	r3, [lr]
 80107ea:	f8cc 3000 	str.w	r3, [ip]
 80107ee:	a801      	add	r0, sp, #4
 80107f0:	f7fa fe96 	bl	800b520 <rcutils_allocator_is_valid>
 80107f4:	b338      	cbz	r0, 8010846 <rcl_guard_condition_init+0x7e>
 80107f6:	b334      	cbz	r4, 8010846 <rcl_guard_condition_init+0x7e>
 80107f8:	6866      	ldr	r6, [r4, #4]
 80107fa:	b9ee      	cbnz	r6, 8010838 <rcl_guard_condition_init+0x70>
 80107fc:	b31d      	cbz	r5, 8010846 <rcl_guard_condition_init+0x7e>
 80107fe:	4628      	mov	r0, r5
 8010800:	f7ff ff72 	bl	80106e8 <rcl_context_is_valid>
 8010804:	b308      	cbz	r0, 801084a <rcl_guard_condition_init+0x82>
 8010806:	9b01      	ldr	r3, [sp, #4]
 8010808:	9905      	ldr	r1, [sp, #20]
 801080a:	201c      	movs	r0, #28
 801080c:	4798      	blx	r3
 801080e:	4607      	mov	r7, r0
 8010810:	6060      	str	r0, [r4, #4]
 8010812:	b310      	cbz	r0, 801085a <rcl_guard_condition_init+0x92>
 8010814:	6828      	ldr	r0, [r5, #0]
 8010816:	3028      	adds	r0, #40	; 0x28
 8010818:	f003 f84e 	bl	80138b8 <rmw_create_guard_condition>
 801081c:	6038      	str	r0, [r7, #0]
 801081e:	6860      	ldr	r0, [r4, #4]
 8010820:	6805      	ldr	r5, [r0, #0]
 8010822:	b1a5      	cbz	r5, 801084e <rcl_guard_condition_init+0x86>
 8010824:	2301      	movs	r3, #1
 8010826:	ac01      	add	r4, sp, #4
 8010828:	7103      	strb	r3, [r0, #4]
 801082a:	f100 0708 	add.w	r7, r0, #8
 801082e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010830:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010832:	6823      	ldr	r3, [r4, #0]
 8010834:	603b      	str	r3, [r7, #0]
 8010836:	e000      	b.n	801083a <rcl_guard_condition_init+0x72>
 8010838:	2664      	movs	r6, #100	; 0x64
 801083a:	4630      	mov	r0, r6
 801083c:	b007      	add	sp, #28
 801083e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010842:	b002      	add	sp, #8
 8010844:	4770      	bx	lr
 8010846:	260b      	movs	r6, #11
 8010848:	e7f7      	b.n	801083a <rcl_guard_condition_init+0x72>
 801084a:	2665      	movs	r6, #101	; 0x65
 801084c:	e7f5      	b.n	801083a <rcl_guard_condition_init+0x72>
 801084e:	9b02      	ldr	r3, [sp, #8]
 8010850:	9905      	ldr	r1, [sp, #20]
 8010852:	4798      	blx	r3
 8010854:	2601      	movs	r6, #1
 8010856:	6065      	str	r5, [r4, #4]
 8010858:	e7ef      	b.n	801083a <rcl_guard_condition_init+0x72>
 801085a:	260a      	movs	r6, #10
 801085c:	e7ed      	b.n	801083a <rcl_guard_condition_init+0x72>
 801085e:	bf00      	nop

08010860 <rcl_guard_condition_init_from_rmw>:
 8010860:	b082      	sub	sp, #8
 8010862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010866:	b086      	sub	sp, #24
 8010868:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801086c:	4604      	mov	r4, r0
 801086e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8010872:	460e      	mov	r6, r1
 8010874:	4617      	mov	r7, r2
 8010876:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801087a:	f10d 0e04 	add.w	lr, sp, #4
 801087e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010882:	f8dc 3000 	ldr.w	r3, [ip]
 8010886:	f8ce 3000 	str.w	r3, [lr]
 801088a:	a801      	add	r0, sp, #4
 801088c:	f7fa fe48 	bl	800b520 <rcutils_allocator_is_valid>
 8010890:	b350      	cbz	r0, 80108e8 <rcl_guard_condition_init_from_rmw+0x88>
 8010892:	b34c      	cbz	r4, 80108e8 <rcl_guard_condition_init_from_rmw+0x88>
 8010894:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010898:	f1b8 0f00 	cmp.w	r8, #0
 801089c:	d11e      	bne.n	80108dc <rcl_guard_condition_init_from_rmw+0x7c>
 801089e:	b31f      	cbz	r7, 80108e8 <rcl_guard_condition_init_from_rmw+0x88>
 80108a0:	4638      	mov	r0, r7
 80108a2:	f7ff ff21 	bl	80106e8 <rcl_context_is_valid>
 80108a6:	b328      	cbz	r0, 80108f4 <rcl_guard_condition_init_from_rmw+0x94>
 80108a8:	9b01      	ldr	r3, [sp, #4]
 80108aa:	9905      	ldr	r1, [sp, #20]
 80108ac:	201c      	movs	r0, #28
 80108ae:	4798      	blx	r3
 80108b0:	4605      	mov	r5, r0
 80108b2:	6060      	str	r0, [r4, #4]
 80108b4:	b358      	cbz	r0, 801090e <rcl_guard_condition_init_from_rmw+0xae>
 80108b6:	b1fe      	cbz	r6, 80108f8 <rcl_guard_condition_init_from_rmw+0x98>
 80108b8:	6006      	str	r6, [r0, #0]
 80108ba:	f880 8004 	strb.w	r8, [r0, #4]
 80108be:	ac01      	add	r4, sp, #4
 80108c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108c2:	f105 0c08 	add.w	ip, r5, #8
 80108c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	f8cc 3000 	str.w	r3, [ip]
 80108d0:	2000      	movs	r0, #0
 80108d2:	b006      	add	sp, #24
 80108d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108d8:	b002      	add	sp, #8
 80108da:	4770      	bx	lr
 80108dc:	2064      	movs	r0, #100	; 0x64
 80108de:	b006      	add	sp, #24
 80108e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108e4:	b002      	add	sp, #8
 80108e6:	4770      	bx	lr
 80108e8:	200b      	movs	r0, #11
 80108ea:	b006      	add	sp, #24
 80108ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108f0:	b002      	add	sp, #8
 80108f2:	4770      	bx	lr
 80108f4:	2065      	movs	r0, #101	; 0x65
 80108f6:	e7f2      	b.n	80108de <rcl_guard_condition_init_from_rmw+0x7e>
 80108f8:	6838      	ldr	r0, [r7, #0]
 80108fa:	3028      	adds	r0, #40	; 0x28
 80108fc:	f002 ffdc 	bl	80138b8 <rmw_create_guard_condition>
 8010900:	6028      	str	r0, [r5, #0]
 8010902:	6865      	ldr	r5, [r4, #4]
 8010904:	682e      	ldr	r6, [r5, #0]
 8010906:	b126      	cbz	r6, 8010912 <rcl_guard_condition_init_from_rmw+0xb2>
 8010908:	2301      	movs	r3, #1
 801090a:	712b      	strb	r3, [r5, #4]
 801090c:	e7d7      	b.n	80108be <rcl_guard_condition_init_from_rmw+0x5e>
 801090e:	200a      	movs	r0, #10
 8010910:	e7e5      	b.n	80108de <rcl_guard_condition_init_from_rmw+0x7e>
 8010912:	4628      	mov	r0, r5
 8010914:	9b02      	ldr	r3, [sp, #8]
 8010916:	9905      	ldr	r1, [sp, #20]
 8010918:	4798      	blx	r3
 801091a:	6066      	str	r6, [r4, #4]
 801091c:	2001      	movs	r0, #1
 801091e:	e7de      	b.n	80108de <rcl_guard_condition_init_from_rmw+0x7e>

08010920 <rcl_guard_condition_fini>:
 8010920:	b570      	push	{r4, r5, r6, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	b1f0      	cbz	r0, 8010964 <rcl_guard_condition_fini+0x44>
 8010926:	6843      	ldr	r3, [r0, #4]
 8010928:	4604      	mov	r4, r0
 801092a:	b163      	cbz	r3, 8010946 <rcl_guard_condition_fini+0x26>
 801092c:	6818      	ldr	r0, [r3, #0]
 801092e:	68de      	ldr	r6, [r3, #12]
 8010930:	6999      	ldr	r1, [r3, #24]
 8010932:	b160      	cbz	r0, 801094e <rcl_guard_condition_fini+0x2e>
 8010934:	791d      	ldrb	r5, [r3, #4]
 8010936:	b965      	cbnz	r5, 8010952 <rcl_guard_condition_fini+0x32>
 8010938:	4618      	mov	r0, r3
 801093a:	47b0      	blx	r6
 801093c:	2300      	movs	r3, #0
 801093e:	4628      	mov	r0, r5
 8010940:	6063      	str	r3, [r4, #4]
 8010942:	b002      	add	sp, #8
 8010944:	bd70      	pop	{r4, r5, r6, pc}
 8010946:	461d      	mov	r5, r3
 8010948:	4628      	mov	r0, r5
 801094a:	b002      	add	sp, #8
 801094c:	bd70      	pop	{r4, r5, r6, pc}
 801094e:	4605      	mov	r5, r0
 8010950:	e7f2      	b.n	8010938 <rcl_guard_condition_fini+0x18>
 8010952:	9101      	str	r1, [sp, #4]
 8010954:	f002 ffc4 	bl	80138e0 <rmw_destroy_guard_condition>
 8010958:	1e05      	subs	r5, r0, #0
 801095a:	6863      	ldr	r3, [r4, #4]
 801095c:	9901      	ldr	r1, [sp, #4]
 801095e:	bf18      	it	ne
 8010960:	2501      	movne	r5, #1
 8010962:	e7e9      	b.n	8010938 <rcl_guard_condition_fini+0x18>
 8010964:	250b      	movs	r5, #11
 8010966:	4628      	mov	r0, r5
 8010968:	b002      	add	sp, #8
 801096a:	bd70      	pop	{r4, r5, r6, pc}

0801096c <rcl_guard_condition_get_default_options>:
 801096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801096e:	b087      	sub	sp, #28
 8010970:	4606      	mov	r6, r0
 8010972:	4668      	mov	r0, sp
 8010974:	f7fa fdc6 	bl	800b504 <rcutils_get_default_allocator>
 8010978:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <rcl_guard_condition_get_default_options+0x34>)
 801097a:	46ee      	mov	lr, sp
 801097c:	469c      	mov	ip, r3
 801097e:	461d      	mov	r5, r3
 8010980:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010984:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801098a:	4634      	mov	r4, r6
 801098c:	f8de 7000 	ldr.w	r7, [lr]
 8010990:	f8cc 7000 	str.w	r7, [ip]
 8010994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010996:	4630      	mov	r0, r6
 8010998:	6027      	str	r7, [r4, #0]
 801099a:	b007      	add	sp, #28
 801099c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801099e:	bf00      	nop
 80109a0:	2000ddec 	.word	0x2000ddec

080109a4 <rcl_trigger_guard_condition>:
 80109a4:	b148      	cbz	r0, 80109ba <rcl_trigger_guard_condition+0x16>
 80109a6:	b508      	push	{r3, lr}
 80109a8:	6843      	ldr	r3, [r0, #4]
 80109aa:	b143      	cbz	r3, 80109be <rcl_trigger_guard_condition+0x1a>
 80109ac:	6818      	ldr	r0, [r3, #0]
 80109ae:	f003 fc23 	bl	80141f8 <rmw_trigger_guard_condition>
 80109b2:	3800      	subs	r0, #0
 80109b4:	bf18      	it	ne
 80109b6:	2001      	movne	r0, #1
 80109b8:	bd08      	pop	{r3, pc}
 80109ba:	200b      	movs	r0, #11
 80109bc:	4770      	bx	lr
 80109be:	200b      	movs	r0, #11
 80109c0:	bd08      	pop	{r3, pc}
 80109c2:	bf00      	nop

080109c4 <rcl_guard_condition_get_rmw_handle>:
 80109c4:	b110      	cbz	r0, 80109cc <rcl_guard_condition_get_rmw_handle+0x8>
 80109c6:	6840      	ldr	r0, [r0, #4]
 80109c8:	b100      	cbz	r0, 80109cc <rcl_guard_condition_get_rmw_handle+0x8>
 80109ca:	6800      	ldr	r0, [r0, #0]
 80109cc:	4770      	bx	lr
 80109ce:	bf00      	nop

080109d0 <rcl_init>:
 80109d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109d4:	1e05      	subs	r5, r0, #0
 80109d6:	b09e      	sub	sp, #120	; 0x78
 80109d8:	460e      	mov	r6, r1
 80109da:	4690      	mov	r8, r2
 80109dc:	461f      	mov	r7, r3
 80109de:	f340 809c 	ble.w	8010b1a <rcl_init+0x14a>
 80109e2:	2900      	cmp	r1, #0
 80109e4:	f000 809c 	beq.w	8010b20 <rcl_init+0x150>
 80109e8:	f1a1 0e04 	sub.w	lr, r1, #4
 80109ec:	f04f 0c00 	mov.w	ip, #0
 80109f0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80109f4:	f10c 0c01 	add.w	ip, ip, #1
 80109f8:	2c00      	cmp	r4, #0
 80109fa:	f000 8091 	beq.w	8010b20 <rcl_init+0x150>
 80109fe:	4565      	cmp	r5, ip
 8010a00:	d1f6      	bne.n	80109f0 <rcl_init+0x20>
 8010a02:	f1b8 0f00 	cmp.w	r8, #0
 8010a06:	f000 808b 	beq.w	8010b20 <rcl_init+0x150>
 8010a0a:	f8d8 4000 	ldr.w	r4, [r8]
 8010a0e:	2c00      	cmp	r4, #0
 8010a10:	f000 8086 	beq.w	8010b20 <rcl_init+0x150>
 8010a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a16:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8010a1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a1e:	6823      	ldr	r3, [r4, #0]
 8010a20:	f8cc 3000 	str.w	r3, [ip]
 8010a24:	a819      	add	r0, sp, #100	; 0x64
 8010a26:	f7fa fd7b 	bl	800b520 <rcutils_allocator_is_valid>
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	d078      	beq.n	8010b20 <rcl_init+0x150>
 8010a2e:	2f00      	cmp	r7, #0
 8010a30:	d076      	beq.n	8010b20 <rcl_init+0x150>
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d178      	bne.n	8010b2a <rcl_init+0x15a>
 8010a38:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8010a3c:	2178      	movs	r1, #120	; 0x78
 8010a3e:	2001      	movs	r0, #1
 8010a40:	4798      	blx	r3
 8010a42:	4604      	mov	r4, r0
 8010a44:	6038      	str	r0, [r7, #0]
 8010a46:	2800      	cmp	r0, #0
 8010a48:	f000 80b6 	beq.w	8010bb8 <rcl_init+0x1e8>
 8010a4c:	a802      	add	r0, sp, #8
 8010a4e:	f002 fd9f 	bl	8013590 <rmw_get_zero_initialized_context>
 8010a52:	a902      	add	r1, sp, #8
 8010a54:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010a58:	2250      	movs	r2, #80	; 0x50
 8010a5a:	ac19      	add	r4, sp, #100	; 0x64
 8010a5c:	f006 fa1c 	bl	8016e98 <memcpy>
 8010a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a62:	f8d7 e000 	ldr.w	lr, [r7]
 8010a66:	46f4      	mov	ip, lr
 8010a68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a6c:	6823      	ldr	r3, [r4, #0]
 8010a6e:	f8cc 3000 	str.w	r3, [ip]
 8010a72:	f10e 0114 	add.w	r1, lr, #20
 8010a76:	4640      	mov	r0, r8
 8010a78:	f000 f940 	bl	8010cfc <rcl_init_options_copy>
 8010a7c:	4604      	mov	r4, r0
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	d144      	bne.n	8010b0c <rcl_init+0x13c>
 8010a82:	f8d7 9000 	ldr.w	r9, [r7]
 8010a86:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8010a8a:	f8c9 0020 	str.w	r0, [r9, #32]
 8010a8e:	f8c9 5018 	str.w	r5, [r9, #24]
 8010a92:	f8c9 801c 	str.w	r8, [r9, #28]
 8010a96:	2d00      	cmp	r5, #0
 8010a98:	d04e      	beq.n	8010b38 <rcl_init+0x168>
 8010a9a:	2e00      	cmp	r6, #0
 8010a9c:	d04c      	beq.n	8010b38 <rcl_init+0x168>
 8010a9e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8010aa2:	2104      	movs	r1, #4
 8010aa4:	4628      	mov	r0, r5
 8010aa6:	4798      	blx	r3
 8010aa8:	f8c9 0020 	str.w	r0, [r9, #32]
 8010aac:	f8d7 9000 	ldr.w	r9, [r7]
 8010ab0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8010ab4:	46ca      	mov	sl, r9
 8010ab6:	b343      	cbz	r3, 8010b0a <rcl_init+0x13a>
 8010ab8:	2d01      	cmp	r5, #1
 8010aba:	f178 0300 	sbcs.w	r3, r8, #0
 8010abe:	db3b      	blt.n	8010b38 <rcl_init+0x168>
 8010ac0:	2400      	movs	r4, #0
 8010ac2:	3e04      	subs	r6, #4
 8010ac4:	46a1      	mov	r9, r4
 8010ac6:	e00b      	b.n	8010ae0 <rcl_init+0x110>
 8010ac8:	6831      	ldr	r1, [r6, #0]
 8010aca:	f006 f9e5 	bl	8016e98 <memcpy>
 8010ace:	3401      	adds	r4, #1
 8010ad0:	f149 0900 	adc.w	r9, r9, #0
 8010ad4:	45c8      	cmp	r8, r9
 8010ad6:	bf08      	it	eq
 8010ad8:	42a5      	cmpeq	r5, r4
 8010ada:	d02b      	beq.n	8010b34 <rcl_init+0x164>
 8010adc:	f8d7 a000 	ldr.w	sl, [r7]
 8010ae0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010ae4:	f7ef fb7e 	bl	80001e4 <strlen>
 8010ae8:	1c42      	adds	r2, r0, #1
 8010aea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010aec:	991d      	ldr	r1, [sp, #116]	; 0x74
 8010aee:	f8da a020 	ldr.w	sl, [sl, #32]
 8010af2:	9201      	str	r2, [sp, #4]
 8010af4:	4610      	mov	r0, r2
 8010af6:	4798      	blx	r3
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8010afe:	6a1b      	ldr	r3, [r3, #32]
 8010b00:	9a01      	ldr	r2, [sp, #4]
 8010b02:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010b06:	2800      	cmp	r0, #0
 8010b08:	d1de      	bne.n	8010ac8 <rcl_init+0xf8>
 8010b0a:	240a      	movs	r4, #10
 8010b0c:	4638      	mov	r0, r7
 8010b0e:	f7ff fdf1 	bl	80106f4 <__cleanup_context>
 8010b12:	4620      	mov	r0, r4
 8010b14:	b01e      	add	sp, #120	; 0x78
 8010b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b1a:	2900      	cmp	r1, #0
 8010b1c:	f43f af71 	beq.w	8010a02 <rcl_init+0x32>
 8010b20:	240b      	movs	r4, #11
 8010b22:	4620      	mov	r0, r4
 8010b24:	b01e      	add	sp, #120	; 0x78
 8010b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b2a:	2464      	movs	r4, #100	; 0x64
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	b01e      	add	sp, #120	; 0x78
 8010b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b34:	f8d7 9000 	ldr.w	r9, [r7]
 8010b38:	4926      	ldr	r1, [pc, #152]	; (8010bd4 <rcl_init+0x204>)
 8010b3a:	680b      	ldr	r3, [r1, #0]
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	d036      	beq.n	8010bae <rcl_init+0x1de>
 8010b40:	600b      	str	r3, [r1, #0]
 8010b42:	461a      	mov	r2, r3
 8010b44:	2400      	movs	r4, #0
 8010b46:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010b4a:	607b      	str	r3, [r7, #4]
 8010b4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010b4e:	3301      	adds	r3, #1
 8010b50:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8010b54:	d034      	beq.n	8010bc0 <rcl_init+0x1f0>
 8010b56:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8010b5a:	b93b      	cbnz	r3, 8010b6c <rcl_init+0x19c>
 8010b5c:	3030      	adds	r0, #48	; 0x30
 8010b5e:	f000 f939 	bl	8010dd4 <rcl_get_localhost_only>
 8010b62:	4604      	mov	r4, r0
 8010b64:	2800      	cmp	r0, #0
 8010b66:	d1d1      	bne.n	8010b0c <rcl_init+0x13c>
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	6958      	ldr	r0, [r3, #20]
 8010b6c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8010b6e:	aa18      	add	r2, sp, #96	; 0x60
 8010b70:	a917      	add	r1, sp, #92	; 0x5c
 8010b72:	f000 ffcb 	bl	8011b0c <rcl_validate_enclave_name>
 8010b76:	4604      	mov	r4, r0
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	d1c7      	bne.n	8010b0c <rcl_init+0x13c>
 8010b7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b7e:	b9eb      	cbnz	r3, 8010bbc <rcl_init+0x1ec>
 8010b80:	6839      	ldr	r1, [r7, #0]
 8010b82:	694b      	ldr	r3, [r1, #20]
 8010b84:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010b86:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010b8a:	f000 fa99 	bl	80110c0 <rcl_get_security_options_from_environment>
 8010b8e:	4604      	mov	r4, r0
 8010b90:	2800      	cmp	r0, #0
 8010b92:	d1bb      	bne.n	8010b0c <rcl_init+0x13c>
 8010b94:	6839      	ldr	r1, [r7, #0]
 8010b96:	6948      	ldr	r0, [r1, #20]
 8010b98:	3128      	adds	r1, #40	; 0x28
 8010b9a:	3018      	adds	r0, #24
 8010b9c:	f002 ffac 	bl	8013af8 <rmw_init>
 8010ba0:	4604      	mov	r4, r0
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	d0bd      	beq.n	8010b22 <rcl_init+0x152>
 8010ba6:	f7ff fd81 	bl	80106ac <rcl_convert_rmw_ret_to_rcl_ret>
 8010baa:	4604      	mov	r4, r0
 8010bac:	e7ae      	b.n	8010b0c <rcl_init+0x13c>
 8010bae:	2201      	movs	r2, #1
 8010bb0:	461c      	mov	r4, r3
 8010bb2:	600a      	str	r2, [r1, #0]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	e7c6      	b.n	8010b46 <rcl_init+0x176>
 8010bb8:	240a      	movs	r4, #10
 8010bba:	e7b2      	b.n	8010b22 <rcl_init+0x152>
 8010bbc:	2401      	movs	r4, #1
 8010bbe:	e7a5      	b.n	8010b0c <rcl_init+0x13c>
 8010bc0:	3024      	adds	r0, #36	; 0x24
 8010bc2:	f005 f971 	bl	8015ea8 <rcl_get_default_domain_id>
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	2800      	cmp	r0, #0
 8010bca:	d19f      	bne.n	8010b0c <rcl_init+0x13c>
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	6958      	ldr	r0, [r3, #20]
 8010bd0:	e7c1      	b.n	8010b56 <rcl_init+0x186>
 8010bd2:	bf00      	nop
 8010bd4:	2000de00 	.word	0x2000de00

08010bd8 <rcl_get_zero_initialized_init_options>:
 8010bd8:	2000      	movs	r0, #0
 8010bda:	4770      	bx	lr

08010bdc <rcl_init_options_init>:
 8010bdc:	b084      	sub	sp, #16
 8010bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010be0:	b097      	sub	sp, #92	; 0x5c
 8010be2:	ae1d      	add	r6, sp, #116	; 0x74
 8010be4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8010be8:	2800      	cmp	r0, #0
 8010bea:	d058      	beq.n	8010c9e <rcl_init_options_init+0xc2>
 8010bec:	6803      	ldr	r3, [r0, #0]
 8010bee:	4605      	mov	r5, r0
 8010bf0:	b133      	cbz	r3, 8010c00 <rcl_init_options_init+0x24>
 8010bf2:	2464      	movs	r4, #100	; 0x64
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	b017      	add	sp, #92	; 0x5c
 8010bf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010bfc:	b004      	add	sp, #16
 8010bfe:	4770      	bx	lr
 8010c00:	4630      	mov	r0, r6
 8010c02:	f7fa fc8d 	bl	800b520 <rcutils_allocator_is_valid>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d049      	beq.n	8010c9e <rcl_init_options_init+0xc2>
 8010c0a:	46b4      	mov	ip, r6
 8010c0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c10:	ac11      	add	r4, sp, #68	; 0x44
 8010c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c14:	f8dc 3000 	ldr.w	r3, [ip]
 8010c18:	6023      	str	r3, [r4, #0]
 8010c1a:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010c1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010c1e:	2050      	movs	r0, #80	; 0x50
 8010c20:	4798      	blx	r3
 8010c22:	4604      	mov	r4, r0
 8010c24:	6028      	str	r0, [r5, #0]
 8010c26:	2800      	cmp	r0, #0
 8010c28:	d03b      	beq.n	8010ca2 <rcl_init_options_init+0xc6>
 8010c2a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010c2e:	4686      	mov	lr, r0
 8010c30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c34:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010c38:	f8dc 3000 	ldr.w	r3, [ip]
 8010c3c:	f8ce 3000 	str.w	r3, [lr]
 8010c40:	a802      	add	r0, sp, #8
 8010c42:	f002 fcb5 	bl	80135b0 <rmw_get_zero_initialized_init_options>
 8010c46:	f10d 0e08 	add.w	lr, sp, #8
 8010c4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c4e:	f104 0c18 	add.w	ip, r4, #24
 8010c52:	682f      	ldr	r7, [r5, #0]
 8010c54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c68:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010c6c:	ac20      	add	r4, sp, #128	; 0x80
 8010c6e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010c72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010c76:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010c7a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8010c7e:	f107 0018 	add.w	r0, r7, #24
 8010c82:	f002 fe41 	bl	8013908 <rmw_init_options_init>
 8010c86:	4604      	mov	r4, r0
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	d0b3      	beq.n	8010bf4 <rcl_init_options_init+0x18>
 8010c8c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010c8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010c90:	6828      	ldr	r0, [r5, #0]
 8010c92:	4798      	blx	r3
 8010c94:	4620      	mov	r0, r4
 8010c96:	f7ff fd09 	bl	80106ac <rcl_convert_rmw_ret_to_rcl_ret>
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	e7aa      	b.n	8010bf4 <rcl_init_options_init+0x18>
 8010c9e:	240b      	movs	r4, #11
 8010ca0:	e7a8      	b.n	8010bf4 <rcl_init_options_init+0x18>
 8010ca2:	240a      	movs	r4, #10
 8010ca4:	e7a6      	b.n	8010bf4 <rcl_init_options_init+0x18>
 8010ca6:	bf00      	nop

08010ca8 <rcl_init_options_fini>:
 8010ca8:	b530      	push	{r4, r5, lr}
 8010caa:	b087      	sub	sp, #28
 8010cac:	b1f0      	cbz	r0, 8010cec <rcl_init_options_fini+0x44>
 8010cae:	6803      	ldr	r3, [r0, #0]
 8010cb0:	4604      	mov	r4, r0
 8010cb2:	b1db      	cbz	r3, 8010cec <rcl_init_options_fini+0x44>
 8010cb4:	469c      	mov	ip, r3
 8010cb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010cba:	f10d 0e04 	add.w	lr, sp, #4
 8010cbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010cc2:	f8dc 3000 	ldr.w	r3, [ip]
 8010cc6:	f8ce 3000 	str.w	r3, [lr]
 8010cca:	a801      	add	r0, sp, #4
 8010ccc:	f7fa fc28 	bl	800b520 <rcutils_allocator_is_valid>
 8010cd0:	b160      	cbz	r0, 8010cec <rcl_init_options_fini+0x44>
 8010cd2:	6820      	ldr	r0, [r4, #0]
 8010cd4:	3018      	adds	r0, #24
 8010cd6:	f002 fec7 	bl	8013a68 <rmw_init_options_fini>
 8010cda:	4605      	mov	r5, r0
 8010cdc:	b950      	cbnz	r0, 8010cf4 <rcl_init_options_fini+0x4c>
 8010cde:	6820      	ldr	r0, [r4, #0]
 8010ce0:	9b02      	ldr	r3, [sp, #8]
 8010ce2:	9905      	ldr	r1, [sp, #20]
 8010ce4:	4798      	blx	r3
 8010ce6:	4628      	mov	r0, r5
 8010ce8:	b007      	add	sp, #28
 8010cea:	bd30      	pop	{r4, r5, pc}
 8010cec:	250b      	movs	r5, #11
 8010cee:	4628      	mov	r0, r5
 8010cf0:	b007      	add	sp, #28
 8010cf2:	bd30      	pop	{r4, r5, pc}
 8010cf4:	f7ff fcda 	bl	80106ac <rcl_convert_rmw_ret_to_rcl_ret>
 8010cf8:	4605      	mov	r5, r0
 8010cfa:	e7f8      	b.n	8010cee <rcl_init_options_fini+0x46>

08010cfc <rcl_init_options_copy>:
 8010cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d00:	b094      	sub	sp, #80	; 0x50
 8010d02:	2800      	cmp	r0, #0
 8010d04:	d058      	beq.n	8010db8 <rcl_init_options_copy+0xbc>
 8010d06:	4604      	mov	r4, r0
 8010d08:	6800      	ldr	r0, [r0, #0]
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	d054      	beq.n	8010db8 <rcl_init_options_copy+0xbc>
 8010d0e:	460e      	mov	r6, r1
 8010d10:	f7fa fc06 	bl	800b520 <rcutils_allocator_is_valid>
 8010d14:	2800      	cmp	r0, #0
 8010d16:	d04f      	beq.n	8010db8 <rcl_init_options_copy+0xbc>
 8010d18:	2e00      	cmp	r6, #0
 8010d1a:	d04d      	beq.n	8010db8 <rcl_init_options_copy+0xbc>
 8010d1c:	6833      	ldr	r3, [r6, #0]
 8010d1e:	b123      	cbz	r3, 8010d2a <rcl_init_options_copy+0x2e>
 8010d20:	2464      	movs	r4, #100	; 0x64
 8010d22:	4620      	mov	r0, r4
 8010d24:	b014      	add	sp, #80	; 0x50
 8010d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d2a:	6827      	ldr	r7, [r4, #0]
 8010d2c:	46bc      	mov	ip, r7
 8010d2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d32:	ad0f      	add	r5, sp, #60	; 0x3c
 8010d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010d36:	f8dc 3000 	ldr.w	r3, [ip]
 8010d3a:	f8d7 8000 	ldr.w	r8, [r7]
 8010d3e:	602b      	str	r3, [r5, #0]
 8010d40:	4619      	mov	r1, r3
 8010d42:	2050      	movs	r0, #80	; 0x50
 8010d44:	47c0      	blx	r8
 8010d46:	4605      	mov	r5, r0
 8010d48:	6030      	str	r0, [r6, #0]
 8010d4a:	b3d0      	cbz	r0, 8010dc2 <rcl_init_options_copy+0xc6>
 8010d4c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8010d50:	4686      	mov	lr, r0
 8010d52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d5a:	f8dc 3000 	ldr.w	r3, [ip]
 8010d5e:	f8ce 3000 	str.w	r3, [lr]
 8010d62:	4668      	mov	r0, sp
 8010d64:	f002 fc24 	bl	80135b0 <rmw_get_zero_initialized_init_options>
 8010d68:	46ee      	mov	lr, sp
 8010d6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d6e:	f105 0c18 	add.w	ip, r5, #24
 8010d72:	6824      	ldr	r4, [r4, #0]
 8010d74:	6835      	ldr	r5, [r6, #0]
 8010d76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d8a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010d8e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d92:	f104 0018 	add.w	r0, r4, #24
 8010d96:	f105 0118 	add.w	r1, r5, #24
 8010d9a:	f002 fe1d 	bl	80139d8 <rmw_init_options_copy>
 8010d9e:	4604      	mov	r4, r0
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d0be      	beq.n	8010d22 <rcl_init_options_copy+0x26>
 8010da4:	f7fa fbe2 	bl	800b56c <rcutils_get_error_string>
 8010da8:	f7fa fbf6 	bl	800b598 <rcutils_reset_error>
 8010dac:	4630      	mov	r0, r6
 8010dae:	f7ff ff7b 	bl	8010ca8 <rcl_init_options_fini>
 8010db2:	b140      	cbz	r0, 8010dc6 <rcl_init_options_copy+0xca>
 8010db4:	4604      	mov	r4, r0
 8010db6:	e7b4      	b.n	8010d22 <rcl_init_options_copy+0x26>
 8010db8:	240b      	movs	r4, #11
 8010dba:	4620      	mov	r0, r4
 8010dbc:	b014      	add	sp, #80	; 0x50
 8010dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dc2:	240a      	movs	r4, #10
 8010dc4:	e7ad      	b.n	8010d22 <rcl_init_options_copy+0x26>
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	b014      	add	sp, #80	; 0x50
 8010dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dce:	f7ff bc6d 	b.w	80106ac <rcl_convert_rmw_ret_to_rcl_ret>
 8010dd2:	bf00      	nop

08010dd4 <rcl_get_localhost_only>:
 8010dd4:	b510      	push	{r4, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	2300      	movs	r3, #0
 8010dda:	9301      	str	r3, [sp, #4]
 8010ddc:	b1b8      	cbz	r0, 8010e0e <rcl_get_localhost_only+0x3a>
 8010dde:	4604      	mov	r4, r0
 8010de0:	a901      	add	r1, sp, #4
 8010de2:	480c      	ldr	r0, [pc, #48]	; (8010e14 <rcl_get_localhost_only+0x40>)
 8010de4:	f7fa fbaa 	bl	800b53c <rcutils_get_env>
 8010de8:	b110      	cbz	r0, 8010df0 <rcl_get_localhost_only+0x1c>
 8010dea:	2001      	movs	r0, #1
 8010dec:	b002      	add	sp, #8
 8010dee:	bd10      	pop	{r4, pc}
 8010df0:	9b01      	ldr	r3, [sp, #4]
 8010df2:	b113      	cbz	r3, 8010dfa <rcl_get_localhost_only+0x26>
 8010df4:	781a      	ldrb	r2, [r3, #0]
 8010df6:	2a31      	cmp	r2, #49	; 0x31
 8010df8:	d004      	beq.n	8010e04 <rcl_get_localhost_only+0x30>
 8010dfa:	2302      	movs	r3, #2
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	7023      	strb	r3, [r4, #0]
 8010e00:	b002      	add	sp, #8
 8010e02:	bd10      	pop	{r4, pc}
 8010e04:	785b      	ldrb	r3, [r3, #1]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1f7      	bne.n	8010dfa <rcl_get_localhost_only+0x26>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e7f6      	b.n	8010dfc <rcl_get_localhost_only+0x28>
 8010e0e:	200b      	movs	r0, #11
 8010e10:	b002      	add	sp, #8
 8010e12:	bd10      	pop	{r4, pc}
 8010e14:	08018414 	.word	0x08018414

08010e18 <rcl_node_resolve_name>:
 8010e18:	b082      	sub	sp, #8
 8010e1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1e:	b091      	sub	sp, #68	; 0x44
 8010e20:	ac1a      	add	r4, sp, #104	; 0x68
 8010e22:	e884 000c 	stmia.w	r4, {r2, r3}
 8010e26:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8010e2a:	2800      	cmp	r0, #0
 8010e2c:	d03b      	beq.n	8010ea6 <rcl_node_resolve_name+0x8e>
 8010e2e:	460c      	mov	r4, r1
 8010e30:	4605      	mov	r5, r0
 8010e32:	f7f9 fab7 	bl	800a3a4 <rcl_node_get_options>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d037      	beq.n	8010eaa <rcl_node_resolve_name+0x92>
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f7f9 faa2 	bl	800a384 <rcl_node_get_name>
 8010e40:	4606      	mov	r6, r0
 8010e42:	4628      	mov	r0, r5
 8010e44:	f7f9 faa6 	bl	800a394 <rcl_node_get_namespace>
 8010e48:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8010e4c:	4681      	mov	r9, r0
 8010e4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e52:	ad0b      	add	r5, sp, #44	; 0x2c
 8010e54:	46ac      	mov	ip, r5
 8010e56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e5a:	f8de 3000 	ldr.w	r3, [lr]
 8010e5e:	f8cc 3000 	str.w	r3, [ip]
 8010e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e64:	b1fb      	cbz	r3, 8010ea6 <rcl_node_resolve_name+0x8e>
 8010e66:	468a      	mov	sl, r1
 8010e68:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8010e6c:	f002 fa64 	bl	8013338 <rcutils_get_zero_initialized_string_map>
 8010e70:	ab10      	add	r3, sp, #64	; 0x40
 8010e72:	9008      	str	r0, [sp, #32]
 8010e74:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010e78:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010e7c:	2100      	movs	r1, #0
 8010e7e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010e82:	a808      	add	r0, sp, #32
 8010e84:	f002 fad0 	bl	8013428 <rcutils_string_map_init>
 8010e88:	4607      	mov	r7, r0
 8010e8a:	b180      	cbz	r0, 8010eae <rcl_node_resolve_name+0x96>
 8010e8c:	f7fa fb6e 	bl	800b56c <rcutils_get_error_string>
 8010e90:	f7fa fb82 	bl	800b598 <rcutils_reset_error>
 8010e94:	2f0a      	cmp	r7, #10
 8010e96:	bf18      	it	ne
 8010e98:	2701      	movne	r7, #1
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	b011      	add	sp, #68	; 0x44
 8010e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea2:	b002      	add	sp, #8
 8010ea4:	4770      	bx	lr
 8010ea6:	270b      	movs	r7, #11
 8010ea8:	e7f7      	b.n	8010e9a <rcl_node_resolve_name+0x82>
 8010eaa:	2701      	movs	r7, #1
 8010eac:	e7f5      	b.n	8010e9a <rcl_node_resolve_name+0x82>
 8010eae:	9009      	str	r0, [sp, #36]	; 0x24
 8010eb0:	9007      	str	r0, [sp, #28]
 8010eb2:	a808      	add	r0, sp, #32
 8010eb4:	f005 f98a 	bl	80161cc <rcl_get_default_topic_name_substitutions>
 8010eb8:	4607      	mov	r7, r0
 8010eba:	b1a8      	cbz	r0, 8010ee8 <rcl_node_resolve_name+0xd0>
 8010ebc:	280a      	cmp	r0, #10
 8010ebe:	9c07      	ldr	r4, [sp, #28]
 8010ec0:	d000      	beq.n	8010ec4 <rcl_node_resolve_name+0xac>
 8010ec2:	2701      	movs	r7, #1
 8010ec4:	a808      	add	r0, sp, #32
 8010ec6:	f002 faef 	bl	80134a8 <rcutils_string_map_fini>
 8010eca:	2800      	cmp	r0, #0
 8010ecc:	d13d      	bne.n	8010f4a <rcl_node_resolve_name+0x132>
 8010ece:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ed0:	4659      	mov	r1, fp
 8010ed2:	47d0      	blx	sl
 8010ed4:	4659      	mov	r1, fp
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	47d0      	blx	sl
 8010eda:	f1b8 0f00 	cmp.w	r8, #0
 8010ede:	d0dc      	beq.n	8010e9a <rcl_node_resolve_name+0x82>
 8010ee0:	2f67      	cmp	r7, #103	; 0x67
 8010ee2:	bf08      	it	eq
 8010ee4:	2768      	moveq	r7, #104	; 0x68
 8010ee6:	e7d8      	b.n	8010e9a <rcl_node_resolve_name+0x82>
 8010ee8:	ab09      	add	r3, sp, #36	; 0x24
 8010eea:	9305      	str	r3, [sp, #20]
 8010eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010eee:	46ec      	mov	ip, sp
 8010ef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ef4:	682b      	ldr	r3, [r5, #0]
 8010ef6:	f8cc 3000 	str.w	r3, [ip]
 8010efa:	464a      	mov	r2, r9
 8010efc:	4631      	mov	r1, r6
 8010efe:	4620      	mov	r0, r4
 8010f00:	ab08      	add	r3, sp, #32
 8010f02:	f005 f805 	bl	8015f10 <rcl_expand_topic_name>
 8010f06:	4607      	mov	r7, r0
 8010f08:	b9b8      	cbnz	r0, 8010f3a <rcl_node_resolve_name+0x122>
 8010f0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010f0c:	9009      	str	r0, [sp, #36]	; 0x24
 8010f0e:	4602      	mov	r2, r0
 8010f10:	a90a      	add	r1, sp, #40	; 0x28
 8010f12:	4620      	mov	r0, r4
 8010f14:	f002 fbec 	bl	80136f0 <rmw_validate_full_topic_name>
 8010f18:	b988      	cbnz	r0, 8010f3e <rcl_node_resolve_name+0x126>
 8010f1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010f1c:	b9d5      	cbnz	r5, 8010f54 <rcl_node_resolve_name+0x13c>
 8010f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f20:	a808      	add	r0, sp, #32
 8010f22:	601c      	str	r4, [r3, #0]
 8010f24:	f002 fac0 	bl	80134a8 <rcutils_string_map_fini>
 8010f28:	4607      	mov	r7, r0
 8010f2a:	b1a8      	cbz	r0, 8010f58 <rcl_node_resolve_name+0x140>
 8010f2c:	f7fa fb1e 	bl	800b56c <rcutils_get_error_string>
 8010f30:	462c      	mov	r4, r5
 8010f32:	f7fa fb31 	bl	800b598 <rcutils_reset_error>
 8010f36:	2701      	movs	r7, #1
 8010f38:	e7c9      	b.n	8010ece <rcl_node_resolve_name+0xb6>
 8010f3a:	9c07      	ldr	r4, [sp, #28]
 8010f3c:	e7c2      	b.n	8010ec4 <rcl_node_resolve_name+0xac>
 8010f3e:	f7fa fb15 	bl	800b56c <rcutils_get_error_string>
 8010f42:	2701      	movs	r7, #1
 8010f44:	f7fa fb28 	bl	800b598 <rcutils_reset_error>
 8010f48:	e7bc      	b.n	8010ec4 <rcl_node_resolve_name+0xac>
 8010f4a:	f7fa fb0f 	bl	800b56c <rcutils_get_error_string>
 8010f4e:	f7fa fb23 	bl	800b598 <rcutils_reset_error>
 8010f52:	e7bc      	b.n	8010ece <rcl_node_resolve_name+0xb6>
 8010f54:	2767      	movs	r7, #103	; 0x67
 8010f56:	e7b5      	b.n	8010ec4 <rcl_node_resolve_name+0xac>
 8010f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f5a:	4659      	mov	r1, fp
 8010f5c:	47d0      	blx	sl
 8010f5e:	4659      	mov	r1, fp
 8010f60:	4638      	mov	r0, r7
 8010f62:	47d0      	blx	sl
 8010f64:	e799      	b.n	8010e9a <rcl_node_resolve_name+0x82>
 8010f66:	bf00      	nop

08010f68 <exact_match_lookup>:
 8010f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f6a:	f102 0708 	add.w	r7, r2, #8
 8010f6e:	460b      	mov	r3, r1
 8010f70:	4614      	mov	r4, r2
 8010f72:	4606      	mov	r6, r0
 8010f74:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010f78:	b085      	sub	sp, #20
 8010f7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	4919      	ldr	r1, [pc, #100]	; (8010fe8 <exact_match_lookup+0x80>)
 8010f82:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010f86:	f002 f9c9 	bl	801331c <rcutils_join_path>
 8010f8a:	7833      	ldrb	r3, [r6, #0]
 8010f8c:	2b2f      	cmp	r3, #47	; 0x2f
 8010f8e:	4605      	mov	r5, r0
 8010f90:	d023      	beq.n	8010fda <exact_match_lookup+0x72>
 8010f92:	f104 030c 	add.w	r3, r4, #12
 8010f96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010f9a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010f9e:	1c70      	adds	r0, r6, #1
 8010fa0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010fa4:	f002 f9c0 	bl	8013328 <rcutils_to_native_path>
 8010fa8:	4606      	mov	r6, r0
 8010faa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010fae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010fb2:	4631      	mov	r1, r6
 8010fb4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010fb8:	4628      	mov	r0, r5
 8010fba:	f002 f9af 	bl	801331c <rcutils_join_path>
 8010fbe:	6862      	ldr	r2, [r4, #4]
 8010fc0:	6921      	ldr	r1, [r4, #16]
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	461e      	mov	r6, r3
 8010fc8:	4790      	blx	r2
 8010fca:	4628      	mov	r0, r5
 8010fcc:	6863      	ldr	r3, [r4, #4]
 8010fce:	6921      	ldr	r1, [r4, #16]
 8010fd0:	4798      	blx	r3
 8010fd2:	4635      	mov	r5, r6
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	b005      	add	sp, #20
 8010fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fda:	7873      	ldrb	r3, [r6, #1]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d1d8      	bne.n	8010f92 <exact_match_lookup+0x2a>
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	b005      	add	sp, #20
 8010fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	08018464 	.word	0x08018464

08010fec <rcl_get_secure_root>:
 8010fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ff0:	b085      	sub	sp, #20
 8010ff2:	b168      	cbz	r0, 8011010 <rcl_get_secure_root+0x24>
 8010ff4:	4607      	mov	r7, r0
 8010ff6:	4608      	mov	r0, r1
 8010ff8:	460c      	mov	r4, r1
 8010ffa:	f7fa fa91 	bl	800b520 <rcutils_allocator_is_valid>
 8010ffe:	b138      	cbz	r0, 8011010 <rcl_get_secure_root+0x24>
 8011000:	2300      	movs	r3, #0
 8011002:	482d      	ldr	r0, [pc, #180]	; (80110b8 <rcl_get_secure_root+0xcc>)
 8011004:	9303      	str	r3, [sp, #12]
 8011006:	a903      	add	r1, sp, #12
 8011008:	f7fa fa98 	bl	800b53c <rcutils_get_env>
 801100c:	4605      	mov	r5, r0
 801100e:	b120      	cbz	r0, 801101a <rcl_get_secure_root+0x2e>
 8011010:	2500      	movs	r5, #0
 8011012:	4628      	mov	r0, r5
 8011014:	b005      	add	sp, #20
 8011016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801101a:	9b03      	ldr	r3, [sp, #12]
 801101c:	781a      	ldrb	r2, [r3, #0]
 801101e:	2a00      	cmp	r2, #0
 8011020:	d0f6      	beq.n	8011010 <rcl_get_secure_root+0x24>
 8011022:	f104 090c 	add.w	r9, r4, #12
 8011026:	e899 0003 	ldmia.w	r9, {r0, r1}
 801102a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801102e:	4618      	mov	r0, r3
 8011030:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011034:	f7fa fbe6 	bl	800b804 <rcutils_strdup>
 8011038:	4680      	mov	r8, r0
 801103a:	2800      	cmp	r0, #0
 801103c:	d0e8      	beq.n	8011010 <rcl_get_secure_root+0x24>
 801103e:	481f      	ldr	r0, [pc, #124]	; (80110bc <rcl_get_secure_root+0xd0>)
 8011040:	9503      	str	r5, [sp, #12]
 8011042:	a903      	add	r1, sp, #12
 8011044:	f7fa fa7a 	bl	800b53c <rcutils_get_env>
 8011048:	b160      	cbz	r0, 8011064 <rcl_get_secure_root+0x78>
 801104a:	2600      	movs	r6, #0
 801104c:	6863      	ldr	r3, [r4, #4]
 801104e:	6921      	ldr	r1, [r4, #16]
 8011050:	4630      	mov	r0, r6
 8011052:	4798      	blx	r3
 8011054:	4640      	mov	r0, r8
 8011056:	6863      	ldr	r3, [r4, #4]
 8011058:	6921      	ldr	r1, [r4, #16]
 801105a:	4798      	blx	r3
 801105c:	4628      	mov	r0, r5
 801105e:	b005      	add	sp, #20
 8011060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011064:	9b03      	ldr	r3, [sp, #12]
 8011066:	781e      	ldrb	r6, [r3, #0]
 8011068:	b1f6      	cbz	r6, 80110a8 <rcl_get_secure_root+0xbc>
 801106a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801106e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011072:	4618      	mov	r0, r3
 8011074:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011078:	f7fa fbc4 	bl	800b804 <rcutils_strdup>
 801107c:	4606      	mov	r6, r0
 801107e:	2800      	cmp	r0, #0
 8011080:	d0e3      	beq.n	801104a <rcl_get_secure_root+0x5e>
 8011082:	4622      	mov	r2, r4
 8011084:	4641      	mov	r1, r8
 8011086:	f7ff ff6f 	bl	8010f68 <exact_match_lookup>
 801108a:	4605      	mov	r5, r0
 801108c:	2d00      	cmp	r5, #0
 801108e:	d0dd      	beq.n	801104c <rcl_get_secure_root+0x60>
 8011090:	4628      	mov	r0, r5
 8011092:	f002 f941 	bl	8013318 <rcutils_is_directory>
 8011096:	4603      	mov	r3, r0
 8011098:	2800      	cmp	r0, #0
 801109a:	d1d7      	bne.n	801104c <rcl_get_secure_root+0x60>
 801109c:	4628      	mov	r0, r5
 801109e:	6921      	ldr	r1, [r4, #16]
 80110a0:	461d      	mov	r5, r3
 80110a2:	6863      	ldr	r3, [r4, #4]
 80110a4:	4798      	blx	r3
 80110a6:	e7d1      	b.n	801104c <rcl_get_secure_root+0x60>
 80110a8:	4622      	mov	r2, r4
 80110aa:	4638      	mov	r0, r7
 80110ac:	4641      	mov	r1, r8
 80110ae:	f7ff ff5b 	bl	8010f68 <exact_match_lookup>
 80110b2:	4605      	mov	r5, r0
 80110b4:	e7ea      	b.n	801108c <rcl_get_secure_root+0xa0>
 80110b6:	bf00      	nop
 80110b8:	08018470 	.word	0x08018470
 80110bc:	08018488 	.word	0x08018488

080110c0 <rcl_get_security_options_from_environment>:
 80110c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c4:	b082      	sub	sp, #8
 80110c6:	2300      	movs	r3, #0
 80110c8:	4606      	mov	r6, r0
 80110ca:	460f      	mov	r7, r1
 80110cc:	4820      	ldr	r0, [pc, #128]	; (8011150 <rcl_get_security_options_from_environment+0x90>)
 80110ce:	9301      	str	r3, [sp, #4]
 80110d0:	a901      	add	r1, sp, #4
 80110d2:	4690      	mov	r8, r2
 80110d4:	f7fa fa32 	bl	800b53c <rcutils_get_env>
 80110d8:	b120      	cbz	r0, 80110e4 <rcl_get_security_options_from_environment+0x24>
 80110da:	2501      	movs	r5, #1
 80110dc:	4628      	mov	r0, r5
 80110de:	b002      	add	sp, #8
 80110e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e4:	491b      	ldr	r1, [pc, #108]	; (8011154 <rcl_get_security_options_from_environment+0x94>)
 80110e6:	4604      	mov	r4, r0
 80110e8:	9801      	ldr	r0, [sp, #4]
 80110ea:	f7ef f871 	bl	80001d0 <strcmp>
 80110ee:	4605      	mov	r5, r0
 80110f0:	b9e8      	cbnz	r0, 801112e <rcl_get_security_options_from_environment+0x6e>
 80110f2:	9001      	str	r0, [sp, #4]
 80110f4:	f1b8 0f00 	cmp.w	r8, #0
 80110f8:	d020      	beq.n	801113c <rcl_get_security_options_from_environment+0x7c>
 80110fa:	4817      	ldr	r0, [pc, #92]	; (8011158 <rcl_get_security_options_from_environment+0x98>)
 80110fc:	a901      	add	r1, sp, #4
 80110fe:	f7fa fa1d 	bl	800b53c <rcutils_get_env>
 8011102:	2800      	cmp	r0, #0
 8011104:	d1e9      	bne.n	80110da <rcl_get_security_options_from_environment+0x1a>
 8011106:	4915      	ldr	r1, [pc, #84]	; (801115c <rcl_get_security_options_from_environment+0x9c>)
 8011108:	9801      	ldr	r0, [sp, #4]
 801110a:	f7ef f861 	bl	80001d0 <strcmp>
 801110e:	fab0 f080 	clz	r0, r0
 8011112:	0940      	lsrs	r0, r0, #5
 8011114:	f888 0000 	strb.w	r0, [r8]
 8011118:	4639      	mov	r1, r7
 801111a:	4630      	mov	r0, r6
 801111c:	f7ff ff66 	bl	8010fec <rcl_get_secure_root>
 8011120:	b170      	cbz	r0, 8011140 <rcl_get_security_options_from_environment+0x80>
 8011122:	f8c8 0004 	str.w	r0, [r8, #4]
 8011126:	4628      	mov	r0, r5
 8011128:	b002      	add	sp, #8
 801112a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801112e:	4625      	mov	r5, r4
 8011130:	4628      	mov	r0, r5
 8011132:	f888 4000 	strb.w	r4, [r8]
 8011136:	b002      	add	sp, #8
 8011138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801113c:	250b      	movs	r5, #11
 801113e:	e7cd      	b.n	80110dc <rcl_get_security_options_from_environment+0x1c>
 8011140:	f898 5000 	ldrb.w	r5, [r8]
 8011144:	f1a5 0501 	sub.w	r5, r5, #1
 8011148:	fab5 f585 	clz	r5, r5
 801114c:	096d      	lsrs	r5, r5, #5
 801114e:	e7c5      	b.n	80110dc <rcl_get_security_options_from_environment+0x1c>
 8011150:	08018428 	.word	0x08018428
 8011154:	0801843c 	.word	0x0801843c
 8011158:	08018444 	.word	0x08018444
 801115c:	0801845c 	.word	0x0801845c

08011160 <rcl_service_get_rmw_handle>:
 8011160:	b118      	cbz	r0, 801116a <rcl_service_get_rmw_handle+0xa>
 8011162:	6800      	ldr	r0, [r0, #0]
 8011164:	b108      	cbz	r0, 801116a <rcl_service_get_rmw_handle+0xa>
 8011166:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801116a:	4770      	bx	lr

0801116c <rcl_take_request>:
 801116c:	b570      	push	{r4, r5, r6, lr}
 801116e:	468e      	mov	lr, r1
 8011170:	460c      	mov	r4, r1
 8011172:	4616      	mov	r6, r2
 8011174:	4605      	mov	r5, r0
 8011176:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801117a:	b08c      	sub	sp, #48	; 0x30
 801117c:	f10d 0c18 	add.w	ip, sp, #24
 8011180:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011184:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011188:	e88c 0003 	stmia.w	ip, {r0, r1}
 801118c:	b30d      	cbz	r5, 80111d2 <rcl_take_request+0x66>
 801118e:	682b      	ldr	r3, [r5, #0]
 8011190:	b1fb      	cbz	r3, 80111d2 <rcl_take_request+0x66>
 8011192:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8011196:	b1e0      	cbz	r0, 80111d2 <rcl_take_request+0x66>
 8011198:	b336      	cbz	r6, 80111e8 <rcl_take_request+0x7c>
 801119a:	2300      	movs	r3, #0
 801119c:	f88d 3007 	strb.w	r3, [sp, #7]
 80111a0:	4632      	mov	r2, r6
 80111a2:	f10d 0307 	add.w	r3, sp, #7
 80111a6:	a902      	add	r1, sp, #8
 80111a8:	f002 fece 	bl	8013f48 <rmw_take_request>
 80111ac:	4605      	mov	r5, r0
 80111ae:	b198      	cbz	r0, 80111d8 <rcl_take_request+0x6c>
 80111b0:	280a      	cmp	r0, #10
 80111b2:	bf18      	it	ne
 80111b4:	2501      	movne	r5, #1
 80111b6:	f10d 0e18 	add.w	lr, sp, #24
 80111ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80111be:	46a4      	mov	ip, r4
 80111c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80111c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80111cc:	4628      	mov	r0, r5
 80111ce:	b00c      	add	sp, #48	; 0x30
 80111d0:	bd70      	pop	{r4, r5, r6, pc}
 80111d2:	f44f 7516 	mov.w	r5, #600	; 0x258
 80111d6:	e7ee      	b.n	80111b6 <rcl_take_request+0x4a>
 80111d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80111dc:	f240 2359 	movw	r3, #601	; 0x259
 80111e0:	2a00      	cmp	r2, #0
 80111e2:	bf08      	it	eq
 80111e4:	461d      	moveq	r5, r3
 80111e6:	e7e6      	b.n	80111b6 <rcl_take_request+0x4a>
 80111e8:	250b      	movs	r5, #11
 80111ea:	e7e4      	b.n	80111b6 <rcl_take_request+0x4a>

080111ec <rcl_send_response>:
 80111ec:	b170      	cbz	r0, 801120c <rcl_send_response+0x20>
 80111ee:	6800      	ldr	r0, [r0, #0]
 80111f0:	b160      	cbz	r0, 801120c <rcl_send_response+0x20>
 80111f2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80111f6:	b148      	cbz	r0, 801120c <rcl_send_response+0x20>
 80111f8:	b159      	cbz	r1, 8011212 <rcl_send_response+0x26>
 80111fa:	b510      	push	{r4, lr}
 80111fc:	b15a      	cbz	r2, 8011216 <rcl_send_response+0x2a>
 80111fe:	f002 ff01 	bl	8014004 <rmw_send_response>
 8011202:	b110      	cbz	r0, 801120a <rcl_send_response+0x1e>
 8011204:	2802      	cmp	r0, #2
 8011206:	bf18      	it	ne
 8011208:	2001      	movne	r0, #1
 801120a:	bd10      	pop	{r4, pc}
 801120c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8011210:	4770      	bx	lr
 8011212:	200b      	movs	r0, #11
 8011214:	4770      	bx	lr
 8011216:	200b      	movs	r0, #11
 8011218:	bd10      	pop	{r4, pc}
 801121a:	bf00      	nop

0801121c <rcl_service_is_valid>:
 801121c:	b130      	cbz	r0, 801122c <rcl_service_is_valid+0x10>
 801121e:	6800      	ldr	r0, [r0, #0]
 8011220:	b120      	cbz	r0, 801122c <rcl_service_is_valid+0x10>
 8011222:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011226:	3800      	subs	r0, #0
 8011228:	bf18      	it	ne
 801122a:	2001      	movne	r0, #1
 801122c:	4770      	bx	lr
 801122e:	bf00      	nop

08011230 <rcl_take>:
 8011230:	2800      	cmp	r0, #0
 8011232:	d04a      	beq.n	80112ca <rcl_take+0x9a>
 8011234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011238:	4604      	mov	r4, r0
 801123a:	6800      	ldr	r0, [r0, #0]
 801123c:	b0a4      	sub	sp, #144	; 0x90
 801123e:	2800      	cmp	r0, #0
 8011240:	d03b      	beq.n	80112ba <rcl_take+0x8a>
 8011242:	461f      	mov	r7, r3
 8011244:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d036      	beq.n	80112ba <rcl_take+0x8a>
 801124c:	460e      	mov	r6, r1
 801124e:	2900      	cmp	r1, #0
 8011250:	d039      	beq.n	80112c6 <rcl_take+0x96>
 8011252:	4615      	mov	r5, r2
 8011254:	2a00      	cmp	r2, #0
 8011256:	d03c      	beq.n	80112d2 <rcl_take+0xa2>
 8011258:	a802      	add	r0, sp, #8
 801125a:	f002 fa41 	bl	80136e0 <rmw_get_zero_initialized_message_info>
 801125e:	f10d 0c08 	add.w	ip, sp, #8
 8011262:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011266:	46ae      	mov	lr, r5
 8011268:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801126c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011270:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011274:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011278:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801127c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8011280:	f04f 0800 	mov.w	r8, #0
 8011284:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8011288:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 801128c:	6822      	ldr	r2, [r4, #0]
 801128e:	462b      	mov	r3, r5
 8011290:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 8011294:	9700      	str	r7, [sp, #0]
 8011296:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 801129a:	4631      	mov	r1, r6
 801129c:	f002 ff58 	bl	8014150 <rmw_take_with_info>
 80112a0:	4603      	mov	r3, r0
 80112a2:	b9c0      	cbnz	r0, 80112d6 <rcl_take+0xa6>
 80112a4:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 80112a8:	f240 1291 	movw	r2, #401	; 0x191
 80112ac:	2900      	cmp	r1, #0
 80112ae:	bf08      	it	eq
 80112b0:	4613      	moveq	r3, r2
 80112b2:	4618      	mov	r0, r3
 80112b4:	b024      	add	sp, #144	; 0x90
 80112b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80112be:	4618      	mov	r0, r3
 80112c0:	b024      	add	sp, #144	; 0x90
 80112c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c6:	230b      	movs	r3, #11
 80112c8:	e7f3      	b.n	80112b2 <rcl_take+0x82>
 80112ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80112ce:	4618      	mov	r0, r3
 80112d0:	4770      	bx	lr
 80112d2:	ad14      	add	r5, sp, #80	; 0x50
 80112d4:	e7c0      	b.n	8011258 <rcl_take+0x28>
 80112d6:	f7ff f9e9 	bl	80106ac <rcl_convert_rmw_ret_to_rcl_ret>
 80112da:	4603      	mov	r3, r0
 80112dc:	e7e9      	b.n	80112b2 <rcl_take+0x82>
 80112de:	bf00      	nop

080112e0 <rcl_subscription_get_rmw_handle>:
 80112e0:	b118      	cbz	r0, 80112ea <rcl_subscription_get_rmw_handle+0xa>
 80112e2:	6800      	ldr	r0, [r0, #0]
 80112e4:	b108      	cbz	r0, 80112ea <rcl_subscription_get_rmw_handle+0xa>
 80112e6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80112ea:	4770      	bx	lr

080112ec <rcl_subscription_is_valid>:
 80112ec:	b130      	cbz	r0, 80112fc <rcl_subscription_is_valid+0x10>
 80112ee:	6800      	ldr	r0, [r0, #0]
 80112f0:	b120      	cbz	r0, 80112fc <rcl_subscription_is_valid+0x10>
 80112f2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80112f6:	3800      	subs	r0, #0
 80112f8:	bf18      	it	ne
 80112fa:	2001      	movne	r0, #1
 80112fc:	4770      	bx	lr
 80112fe:	bf00      	nop

08011300 <rcl_get_system_time>:
 8011300:	4608      	mov	r0, r1
 8011302:	f7fa babd 	b.w	800b880 <rcutils_system_time_now>
 8011306:	bf00      	nop

08011308 <rcl_get_steady_time>:
 8011308:	4608      	mov	r0, r1
 801130a:	f7fa bae1 	b.w	800b8d0 <rcutils_steady_time_now>
 801130e:	bf00      	nop

08011310 <rcl_get_ros_time>:
 8011310:	7a03      	ldrb	r3, [r0, #8]
 8011312:	b510      	push	{r4, lr}
 8011314:	460c      	mov	r4, r1
 8011316:	b133      	cbz	r3, 8011326 <rcl_get_ros_time+0x16>
 8011318:	2105      	movs	r1, #5
 801131a:	f001 ff59 	bl	80131d0 <__atomic_load_8>
 801131e:	e9c4 0100 	strd	r0, r1, [r4]
 8011322:	2000      	movs	r0, #0
 8011324:	bd10      	pop	{r4, pc}
 8011326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801132a:	4608      	mov	r0, r1
 801132c:	f7fa baa8 	b.w	800b880 <rcutils_system_time_now>

08011330 <rcl_clock_init>:
 8011330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011332:	4605      	mov	r5, r0
 8011334:	4610      	mov	r0, r2
 8011336:	4614      	mov	r4, r2
 8011338:	460e      	mov	r6, r1
 801133a:	f7fa f8f1 	bl	800b520 <rcutils_allocator_is_valid>
 801133e:	b128      	cbz	r0, 801134c <rcl_clock_init+0x1c>
 8011340:	2d03      	cmp	r5, #3
 8011342:	d803      	bhi.n	801134c <rcl_clock_init+0x1c>
 8011344:	e8df f005 	tbb	[pc, r5]
 8011348:	06532e1d 	.word	0x06532e1d
 801134c:	f04f 0c0b 	mov.w	ip, #11
 8011350:	4660      	mov	r0, ip
 8011352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011354:	2e00      	cmp	r6, #0
 8011356:	d0f9      	beq.n	801134c <rcl_clock_init+0x1c>
 8011358:	2c00      	cmp	r4, #0
 801135a:	d0f7      	beq.n	801134c <rcl_clock_init+0x1c>
 801135c:	2300      	movs	r3, #0
 801135e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011362:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8011418 <rcl_clock_init+0xe8>
 8011366:	6133      	str	r3, [r6, #16]
 8011368:	f106 0514 	add.w	r5, r6, #20
 801136c:	469c      	mov	ip, r3
 801136e:	2703      	movs	r7, #3
 8011370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011374:	6823      	ldr	r3, [r4, #0]
 8011376:	602b      	str	r3, [r5, #0]
 8011378:	7037      	strb	r7, [r6, #0]
 801137a:	f8c6 e00c 	str.w	lr, [r6, #12]
 801137e:	4660      	mov	r0, ip
 8011380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011382:	2e00      	cmp	r6, #0
 8011384:	d0e2      	beq.n	801134c <rcl_clock_init+0x1c>
 8011386:	2300      	movs	r3, #0
 8011388:	7033      	strb	r3, [r6, #0]
 801138a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801138e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011392:	469c      	mov	ip, r3
 8011394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011396:	f106 0514 	add.w	r5, r6, #20
 801139a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801139c:	6823      	ldr	r3, [r4, #0]
 801139e:	602b      	str	r3, [r5, #0]
 80113a0:	4660      	mov	r0, ip
 80113a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113a4:	2e00      	cmp	r6, #0
 80113a6:	d0d1      	beq.n	801134c <rcl_clock_init+0x1c>
 80113a8:	2c00      	cmp	r4, #0
 80113aa:	d0cf      	beq.n	801134c <rcl_clock_init+0x1c>
 80113ac:	2700      	movs	r7, #0
 80113ae:	7037      	strb	r7, [r6, #0]
 80113b0:	46a4      	mov	ip, r4
 80113b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80113b6:	f106 0514 	add.w	r5, r6, #20
 80113ba:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80113be:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80113c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80113c4:	f8dc 3000 	ldr.w	r3, [ip]
 80113c8:	602b      	str	r3, [r5, #0]
 80113ca:	6921      	ldr	r1, [r4, #16]
 80113cc:	6823      	ldr	r3, [r4, #0]
 80113ce:	2010      	movs	r0, #16
 80113d0:	4798      	blx	r3
 80113d2:	6130      	str	r0, [r6, #16]
 80113d4:	b1d0      	cbz	r0, 801140c <rcl_clock_init+0xdc>
 80113d6:	2200      	movs	r2, #0
 80113d8:	2300      	movs	r3, #0
 80113da:	e9c0 2300 	strd	r2, r3, [r0]
 80113de:	2301      	movs	r3, #1
 80113e0:	7207      	strb	r7, [r0, #8]
 80113e2:	4a0c      	ldr	r2, [pc, #48]	; (8011414 <rcl_clock_init+0xe4>)
 80113e4:	7033      	strb	r3, [r6, #0]
 80113e6:	46bc      	mov	ip, r7
 80113e8:	60f2      	str	r2, [r6, #12]
 80113ea:	4660      	mov	r0, ip
 80113ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ee:	2e00      	cmp	r6, #0
 80113f0:	d0ac      	beq.n	801134c <rcl_clock_init+0x1c>
 80113f2:	2c00      	cmp	r4, #0
 80113f4:	d0aa      	beq.n	801134c <rcl_clock_init+0x1c>
 80113f6:	2300      	movs	r3, #0
 80113f8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80113fc:	f8df e01c 	ldr.w	lr, [pc, #28]	; 801141c <rcl_clock_init+0xec>
 8011400:	6133      	str	r3, [r6, #16]
 8011402:	f106 0514 	add.w	r5, r6, #20
 8011406:	469c      	mov	ip, r3
 8011408:	2702      	movs	r7, #2
 801140a:	e7b1      	b.n	8011370 <rcl_clock_init+0x40>
 801140c:	f04f 0c0a 	mov.w	ip, #10
 8011410:	e79e      	b.n	8011350 <rcl_clock_init+0x20>
 8011412:	bf00      	nop
 8011414:	08011311 	.word	0x08011311
 8011418:	08011309 	.word	0x08011309
 801141c:	08011301 	.word	0x08011301

08011420 <rcl_clock_get_now>:
 8011420:	b140      	cbz	r0, 8011434 <rcl_clock_get_now+0x14>
 8011422:	b139      	cbz	r1, 8011434 <rcl_clock_get_now+0x14>
 8011424:	7803      	ldrb	r3, [r0, #0]
 8011426:	b11b      	cbz	r3, 8011430 <rcl_clock_get_now+0x10>
 8011428:	68c3      	ldr	r3, [r0, #12]
 801142a:	b10b      	cbz	r3, 8011430 <rcl_clock_get_now+0x10>
 801142c:	6900      	ldr	r0, [r0, #16]
 801142e:	4718      	bx	r3
 8011430:	2001      	movs	r0, #1
 8011432:	4770      	bx	lr
 8011434:	200b      	movs	r0, #11
 8011436:	4770      	bx	lr

08011438 <rcl_clock_add_jump_callback>:
 8011438:	b082      	sub	sp, #8
 801143a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801143e:	a906      	add	r1, sp, #24
 8011440:	e881 000c 	stmia.w	r1, {r2, r3}
 8011444:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8011448:	b320      	cbz	r0, 8011494 <rcl_clock_add_jump_callback+0x5c>
 801144a:	4604      	mov	r4, r0
 801144c:	3014      	adds	r0, #20
 801144e:	f7fa f867 	bl	800b520 <rcutils_allocator_is_valid>
 8011452:	b1f8      	cbz	r0, 8011494 <rcl_clock_add_jump_callback+0x5c>
 8011454:	b1f6      	cbz	r6, 8011494 <rcl_clock_add_jump_callback+0x5c>
 8011456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011458:	2b00      	cmp	r3, #0
 801145a:	db1b      	blt.n	8011494 <rcl_clock_add_jump_callback+0x5c>
 801145c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011460:	2a01      	cmp	r2, #1
 8011462:	f173 0300 	sbcs.w	r3, r3, #0
 8011466:	da15      	bge.n	8011494 <rcl_clock_add_jump_callback+0x5c>
 8011468:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801146c:	2f00      	cmp	r7, #0
 801146e:	d042      	beq.n	80114f6 <rcl_clock_add_jump_callback+0xbe>
 8011470:	2300      	movs	r3, #0
 8011472:	4602      	mov	r2, r0
 8011474:	e003      	b.n	801147e <rcl_clock_add_jump_callback+0x46>
 8011476:	42bb      	cmp	r3, r7
 8011478:	f102 0228 	add.w	r2, r2, #40	; 0x28
 801147c:	d011      	beq.n	80114a2 <rcl_clock_add_jump_callback+0x6a>
 801147e:	6811      	ldr	r1, [r2, #0]
 8011480:	42b1      	cmp	r1, r6
 8011482:	f103 0301 	add.w	r3, r3, #1
 8011486:	d1f6      	bne.n	8011476 <rcl_clock_add_jump_callback+0x3e>
 8011488:	6a11      	ldr	r1, [r2, #32]
 801148a:	42a9      	cmp	r1, r5
 801148c:	d1f3      	bne.n	8011476 <rcl_clock_add_jump_callback+0x3e>
 801148e:	f04f 0e01 	mov.w	lr, #1
 8011492:	e001      	b.n	8011498 <rcl_clock_add_jump_callback+0x60>
 8011494:	f04f 0e0b 	mov.w	lr, #11
 8011498:	4670      	mov	r0, lr
 801149a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801149e:	b002      	add	sp, #8
 80114a0:	4770      	bx	lr
 80114a2:	3301      	adds	r3, #1
 80114a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80114a8:	00d9      	lsls	r1, r3, #3
 80114aa:	69e3      	ldr	r3, [r4, #28]
 80114ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80114ae:	4798      	blx	r3
 80114b0:	b1f0      	cbz	r0, 80114f0 <rcl_clock_add_jump_callback+0xb8>
 80114b2:	68a3      	ldr	r3, [r4, #8]
 80114b4:	6060      	str	r0, [r4, #4]
 80114b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80114ba:	f10d 0c18 	add.w	ip, sp, #24
 80114be:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 80114c2:	f103 0801 	add.w	r8, r3, #1
 80114c6:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80114ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80114ce:	f106 0708 	add.w	r7, r6, #8
 80114d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80114d4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80114d8:	f04f 0e00 	mov.w	lr, #0
 80114dc:	e887 0003 	stmia.w	r7, {r0, r1}
 80114e0:	6235      	str	r5, [r6, #32]
 80114e2:	4670      	mov	r0, lr
 80114e4:	f8c4 8008 	str.w	r8, [r4, #8]
 80114e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114ec:	b002      	add	sp, #8
 80114ee:	4770      	bx	lr
 80114f0:	f04f 0e0a 	mov.w	lr, #10
 80114f4:	e7d0      	b.n	8011498 <rcl_clock_add_jump_callback+0x60>
 80114f6:	2128      	movs	r1, #40	; 0x28
 80114f8:	e7d7      	b.n	80114aa <rcl_clock_add_jump_callback+0x72>
 80114fa:	bf00      	nop

080114fc <rcl_clock_remove_jump_callback>:
 80114fc:	2800      	cmp	r0, #0
 80114fe:	d057      	beq.n	80115b0 <rcl_clock_remove_jump_callback+0xb4>
 8011500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011504:	4605      	mov	r5, r0
 8011506:	3014      	adds	r0, #20
 8011508:	4688      	mov	r8, r1
 801150a:	4692      	mov	sl, r2
 801150c:	f7fa f808 	bl	800b520 <rcutils_allocator_is_valid>
 8011510:	2800      	cmp	r0, #0
 8011512:	d03b      	beq.n	801158c <rcl_clock_remove_jump_callback+0x90>
 8011514:	f1b8 0f00 	cmp.w	r8, #0
 8011518:	d038      	beq.n	801158c <rcl_clock_remove_jump_callback+0x90>
 801151a:	68ae      	ldr	r6, [r5, #8]
 801151c:	b166      	cbz	r6, 8011538 <rcl_clock_remove_jump_callback+0x3c>
 801151e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011522:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8011526:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801152a:	464c      	mov	r4, r9
 801152c:	6823      	ldr	r3, [r4, #0]
 801152e:	4543      	cmp	r3, r8
 8011530:	d005      	beq.n	801153e <rcl_clock_remove_jump_callback+0x42>
 8011532:	3428      	adds	r4, #40	; 0x28
 8011534:	42a7      	cmp	r7, r4
 8011536:	d1f9      	bne.n	801152c <rcl_clock_remove_jump_callback+0x30>
 8011538:	2001      	movs	r0, #1
 801153a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801153e:	6a23      	ldr	r3, [r4, #32]
 8011540:	3428      	adds	r4, #40	; 0x28
 8011542:	42bc      	cmp	r4, r7
 8011544:	d02d      	beq.n	80115a2 <rcl_clock_remove_jump_callback+0xa6>
 8011546:	4553      	cmp	r3, sl
 8011548:	d1f0      	bne.n	801152c <rcl_clock_remove_jump_callback+0x30>
 801154a:	46a6      	mov	lr, r4
 801154c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011550:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 8011554:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011558:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801155c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011560:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011564:	3428      	adds	r4, #40	; 0x28
 8011566:	42a7      	cmp	r7, r4
 8011568:	e88c 0003 	stmia.w	ip, {r0, r1}
 801156c:	d1ed      	bne.n	801154a <rcl_clock_remove_jump_callback+0x4e>
 801156e:	3e01      	subs	r6, #1
 8011570:	60ae      	str	r6, [r5, #8]
 8011572:	b176      	cbz	r6, 8011592 <rcl_clock_remove_jump_callback+0x96>
 8011574:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8011578:	69eb      	ldr	r3, [r5, #28]
 801157a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801157c:	00f1      	lsls	r1, r6, #3
 801157e:	4648      	mov	r0, r9
 8011580:	4798      	blx	r3
 8011582:	b1b8      	cbz	r0, 80115b4 <rcl_clock_remove_jump_callback+0xb8>
 8011584:	6068      	str	r0, [r5, #4]
 8011586:	2000      	movs	r0, #0
 8011588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801158c:	200b      	movs	r0, #11
 801158e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011592:	4648      	mov	r0, r9
 8011594:	69ab      	ldr	r3, [r5, #24]
 8011596:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8011598:	4798      	blx	r3
 801159a:	606e      	str	r6, [r5, #4]
 801159c:	4630      	mov	r0, r6
 801159e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115a2:	4553      	cmp	r3, sl
 80115a4:	d1c8      	bne.n	8011538 <rcl_clock_remove_jump_callback+0x3c>
 80115a6:	3e01      	subs	r6, #1
 80115a8:	60ae      	str	r6, [r5, #8]
 80115aa:	2e00      	cmp	r6, #0
 80115ac:	d1e2      	bne.n	8011574 <rcl_clock_remove_jump_callback+0x78>
 80115ae:	e7f0      	b.n	8011592 <rcl_clock_remove_jump_callback+0x96>
 80115b0:	200b      	movs	r0, #11
 80115b2:	4770      	bx	lr
 80115b4:	200a      	movs	r0, #10
 80115b6:	e7ea      	b.n	801158e <rcl_clock_remove_jump_callback+0x92>

080115b8 <_rcl_timer_time_jump>:
 80115b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115bc:	4605      	mov	r5, r0
 80115be:	b084      	sub	sp, #16
 80115c0:	4614      	mov	r4, r2
 80115c2:	b131      	cbz	r1, 80115d2 <_rcl_timer_time_jump+0x1a>
 80115c4:	7803      	ldrb	r3, [r0, #0]
 80115c6:	3b02      	subs	r3, #2
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	d93f      	bls.n	801164c <_rcl_timer_time_jump+0x94>
 80115cc:	b004      	add	sp, #16
 80115ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115d2:	6813      	ldr	r3, [r2, #0]
 80115d4:	a902      	add	r1, sp, #8
 80115d6:	6818      	ldr	r0, [r3, #0]
 80115d8:	f7ff ff22 	bl	8011420 <rcl_clock_get_now>
 80115dc:	2800      	cmp	r0, #0
 80115de:	d1f5      	bne.n	80115cc <_rcl_timer_time_jump+0x14>
 80115e0:	6820      	ldr	r0, [r4, #0]
 80115e2:	2105      	movs	r1, #5
 80115e4:	3020      	adds	r0, #32
 80115e6:	f001 fdf3 	bl	80131d0 <__atomic_load_8>
 80115ea:	6823      	ldr	r3, [r4, #0]
 80115ec:	4681      	mov	r9, r0
 80115ee:	4688      	mov	r8, r1
 80115f0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80115f4:	2105      	movs	r1, #5
 80115f6:	f001 fdeb 	bl	80131d0 <__atomic_load_8>
 80115fa:	4607      	mov	r7, r0
 80115fc:	6820      	ldr	r0, [r4, #0]
 80115fe:	460e      	mov	r6, r1
 8011600:	3018      	adds	r0, #24
 8011602:	2105      	movs	r1, #5
 8011604:	f001 fde4 	bl	80131d0 <__atomic_load_8>
 8011608:	782b      	ldrb	r3, [r5, #0]
 801160a:	9a02      	ldr	r2, [sp, #8]
 801160c:	3b02      	subs	r3, #2
 801160e:	2b01      	cmp	r3, #1
 8011610:	460d      	mov	r5, r1
 8011612:	9b03      	ldr	r3, [sp, #12]
 8011614:	4682      	mov	sl, r0
 8011616:	d937      	bls.n	8011688 <_rcl_timer_time_jump+0xd0>
 8011618:	42ba      	cmp	r2, r7
 801161a:	eb73 0106 	sbcs.w	r1, r3, r6
 801161e:	da5f      	bge.n	80116e0 <_rcl_timer_time_jump+0x128>
 8011620:	454a      	cmp	r2, r9
 8011622:	eb73 0108 	sbcs.w	r1, r3, r8
 8011626:	dad1      	bge.n	80115cc <_rcl_timer_time_jump+0x14>
 8011628:	6820      	ldr	r0, [r4, #0]
 801162a:	eb1a 0202 	adds.w	r2, sl, r2
 801162e:	eb43 0305 	adc.w	r3, r3, r5
 8011632:	2505      	movs	r5, #5
 8011634:	3028      	adds	r0, #40	; 0x28
 8011636:	9500      	str	r5, [sp, #0]
 8011638:	f001 fe00 	bl	801323c <__atomic_store_8>
 801163c:	6820      	ldr	r0, [r4, #0]
 801163e:	9500      	str	r5, [sp, #0]
 8011640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011644:	3020      	adds	r0, #32
 8011646:	f001 fdf9 	bl	801323c <__atomic_store_8>
 801164a:	e7bf      	b.n	80115cc <_rcl_timer_time_jump+0x14>
 801164c:	6813      	ldr	r3, [r2, #0]
 801164e:	a902      	add	r1, sp, #8
 8011650:	6818      	ldr	r0, [r3, #0]
 8011652:	f7ff fee5 	bl	8011420 <rcl_clock_get_now>
 8011656:	2800      	cmp	r0, #0
 8011658:	d1b8      	bne.n	80115cc <_rcl_timer_time_jump+0x14>
 801165a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801165e:	4313      	orrs	r3, r2
 8011660:	d0b4      	beq.n	80115cc <_rcl_timer_time_jump+0x14>
 8011662:	6820      	ldr	r0, [r4, #0]
 8011664:	2105      	movs	r1, #5
 8011666:	3028      	adds	r0, #40	; 0x28
 8011668:	f001 fdb2 	bl	80131d0 <__atomic_load_8>
 801166c:	9d02      	ldr	r5, [sp, #8]
 801166e:	9b03      	ldr	r3, [sp, #12]
 8011670:	4602      	mov	r2, r0
 8011672:	6820      	ldr	r0, [r4, #0]
 8011674:	1b52      	subs	r2, r2, r5
 8011676:	f04f 0405 	mov.w	r4, #5
 801167a:	9400      	str	r4, [sp, #0]
 801167c:	eb61 0303 	sbc.w	r3, r1, r3
 8011680:	3030      	adds	r0, #48	; 0x30
 8011682:	f001 fddb 	bl	801323c <__atomic_store_8>
 8011686:	e7a1      	b.n	80115cc <_rcl_timer_time_jump+0x14>
 8011688:	4313      	orrs	r3, r2
 801168a:	d09f      	beq.n	80115cc <_rcl_timer_time_jump+0x14>
 801168c:	6820      	ldr	r0, [r4, #0]
 801168e:	f04f 0805 	mov.w	r8, #5
 8011692:	2300      	movs	r3, #0
 8011694:	f8cd 8000 	str.w	r8, [sp]
 8011698:	3030      	adds	r0, #48	; 0x30
 801169a:	2200      	movs	r2, #0
 801169c:	f001 fe04 	bl	80132a8 <__atomic_exchange_8>
 80116a0:	ea51 0300 	orrs.w	r3, r1, r0
 80116a4:	4606      	mov	r6, r0
 80116a6:	460f      	mov	r7, r1
 80116a8:	d090      	beq.n	80115cc <_rcl_timer_time_jump+0x14>
 80116aa:	9a02      	ldr	r2, [sp, #8]
 80116ac:	9b03      	ldr	r3, [sp, #12]
 80116ae:	f8cd 8000 	str.w	r8, [sp]
 80116b2:	1a12      	subs	r2, r2, r0
 80116b4:	6820      	ldr	r0, [r4, #0]
 80116b6:	eb63 0301 	sbc.w	r3, r3, r1
 80116ba:	eb12 020a 	adds.w	r2, r2, sl
 80116be:	eb43 0305 	adc.w	r3, r3, r5
 80116c2:	3028      	adds	r0, #40	; 0x28
 80116c4:	f001 fdba 	bl	801323c <__atomic_store_8>
 80116c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80116cc:	f8cd 8000 	str.w	r8, [sp]
 80116d0:	6820      	ldr	r0, [r4, #0]
 80116d2:	1b92      	subs	r2, r2, r6
 80116d4:	eb63 0307 	sbc.w	r3, r3, r7
 80116d8:	3020      	adds	r0, #32
 80116da:	f001 fdaf 	bl	801323c <__atomic_store_8>
 80116de:	e775      	b.n	80115cc <_rcl_timer_time_jump+0x14>
 80116e0:	6820      	ldr	r0, [r4, #0]
 80116e2:	3008      	adds	r0, #8
 80116e4:	f7ff f95e 	bl	80109a4 <rcl_trigger_guard_condition>
 80116e8:	e770      	b.n	80115cc <_rcl_timer_time_jump+0x14>
 80116ea:	bf00      	nop

080116ec <rcl_get_zero_initialized_timer>:
 80116ec:	4b01      	ldr	r3, [pc, #4]	; (80116f4 <rcl_get_zero_initialized_timer+0x8>)
 80116ee:	6818      	ldr	r0, [r3, #0]
 80116f0:	4770      	bx	lr
 80116f2:	bf00      	nop
 80116f4:	080184a8 	.word	0x080184a8

080116f8 <rcl_timer_init>:
 80116f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116fc:	b0aa      	sub	sp, #168	; 0xa8
 80116fe:	4604      	mov	r4, r0
 8011700:	a835      	add	r0, sp, #212	; 0xd4
 8011702:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	; 0xc8
 8011706:	460d      	mov	r5, r1
 8011708:	4692      	mov	sl, r2
 801170a:	f7f9 ff09 	bl	800b520 <rcutils_allocator_is_valid>
 801170e:	2800      	cmp	r0, #0
 8011710:	d064      	beq.n	80117dc <rcl_timer_init+0xe4>
 8011712:	2c00      	cmp	r4, #0
 8011714:	d062      	beq.n	80117dc <rcl_timer_init+0xe4>
 8011716:	2d00      	cmp	r5, #0
 8011718:	d060      	beq.n	80117dc <rcl_timer_init+0xe4>
 801171a:	2f00      	cmp	r7, #0
 801171c:	db5e      	blt.n	80117dc <rcl_timer_init+0xe4>
 801171e:	6823      	ldr	r3, [r4, #0]
 8011720:	b123      	cbz	r3, 801172c <rcl_timer_init+0x34>
 8011722:	2664      	movs	r6, #100	; 0x64
 8011724:	4630      	mov	r0, r6
 8011726:	b02a      	add	sp, #168	; 0xa8
 8011728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801172c:	a908      	add	r1, sp, #32
 801172e:	4628      	mov	r0, r5
 8011730:	f7ff fe76 	bl	8011420 <rcl_clock_get_now>
 8011734:	4606      	mov	r6, r0
 8011736:	2800      	cmp	r0, #0
 8011738:	d1f4      	bne.n	8011724 <rcl_timer_init+0x2c>
 801173a:	ae06      	add	r6, sp, #24
 801173c:	4630      	mov	r0, r6
 801173e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 8011742:	f7ff f837 	bl	80107b4 <rcl_get_zero_initialized_guard_condition>
 8011746:	e896 0003 	ldmia.w	r6, {r0, r1}
 801174a:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801174e:	ae0b      	add	r6, sp, #44	; 0x2c
 8011750:	e889 0003 	stmia.w	r9, {r0, r1}
 8011754:	4630      	mov	r0, r6
 8011756:	f7ff f909 	bl	801096c <rcl_guard_condition_get_default_options>
 801175a:	ab0d      	add	r3, sp, #52	; 0x34
 801175c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011760:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011764:	4651      	mov	r1, sl
 8011766:	e896 000c 	ldmia.w	r6, {r2, r3}
 801176a:	4648      	mov	r0, r9
 801176c:	f7ff f82c 	bl	80107c8 <rcl_guard_condition_init>
 8011770:	4606      	mov	r6, r0
 8011772:	2800      	cmp	r0, #0
 8011774:	d1d6      	bne.n	8011724 <rcl_timer_init+0x2c>
 8011776:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	2b01      	cmp	r3, #1
 801177c:	d033      	beq.n	80117e6 <rcl_timer_init+0xee>
 801177e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8011780:	911a      	str	r1, [sp, #104]	; 0x68
 8011782:	4642      	mov	r2, r8
 8011784:	463b      	mov	r3, r7
 8011786:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 801178a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801178e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8011840 <rcl_timer_init+0x148>
 8011792:	eb12 0008 	adds.w	r0, r2, r8
 8011796:	eb47 0103 	adc.w	r1, r7, r3
 801179a:	f10d 0ed4 	add.w	lr, sp, #212	; 0xd4
 801179e:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 80117a2:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80117a6:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 80117aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80117ae:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 80117b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117b6:	f8de 3000 	ldr.w	r3, [lr]
 80117ba:	f8cc 3000 	str.w	r3, [ip]
 80117be:	f04f 0a00 	mov.w	sl, #0
 80117c2:	4619      	mov	r1, r3
 80117c4:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 80117c8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80117ca:	2050      	movs	r0, #80	; 0x50
 80117cc:	4798      	blx	r3
 80117ce:	6020      	str	r0, [r4, #0]
 80117d0:	b358      	cbz	r0, 801182a <rcl_timer_init+0x132>
 80117d2:	2250      	movs	r2, #80	; 0x50
 80117d4:	a916      	add	r1, sp, #88	; 0x58
 80117d6:	f005 fb5f 	bl	8016e98 <memcpy>
 80117da:	e7a3      	b.n	8011724 <rcl_timer_init+0x2c>
 80117dc:	260b      	movs	r6, #11
 80117de:	4630      	mov	r0, r6
 80117e0:	b02a      	add	sp, #168	; 0xa8
 80117e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117e6:	2001      	movs	r0, #1
 80117e8:	2100      	movs	r1, #0
 80117ea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80117ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80117f6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80117fa:	4a13      	ldr	r2, [pc, #76]	; (8011848 <rcl_timer_init+0x150>)
 80117fc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8011800:	9405      	str	r4, [sp, #20]
 8011802:	9204      	str	r2, [sp, #16]
 8011804:	ab12      	add	r3, sp, #72	; 0x48
 8011806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011808:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801180c:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8011810:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8011814:	4628      	mov	r0, r5
 8011816:	f7ff fe0f 	bl	8011438 <rcl_clock_add_jump_callback>
 801181a:	4682      	mov	sl, r0
 801181c:	2800      	cmp	r0, #0
 801181e:	d0ae      	beq.n	801177e <rcl_timer_init+0x86>
 8011820:	4648      	mov	r0, r9
 8011822:	f7ff f87d 	bl	8010920 <rcl_guard_condition_fini>
 8011826:	4656      	mov	r6, sl
 8011828:	e77c      	b.n	8011724 <rcl_timer_init+0x2c>
 801182a:	4648      	mov	r0, r9
 801182c:	f7ff f878 	bl	8010920 <rcl_guard_condition_fini>
 8011830:	4905      	ldr	r1, [pc, #20]	; (8011848 <rcl_timer_init+0x150>)
 8011832:	4622      	mov	r2, r4
 8011834:	4628      	mov	r0, r5
 8011836:	f7ff fe61 	bl	80114fc <rcl_clock_remove_jump_callback>
 801183a:	260a      	movs	r6, #10
 801183c:	e772      	b.n	8011724 <rcl_timer_init+0x2c>
 801183e:	bf00      	nop
	...
 8011848:	080115b9 	.word	0x080115b9

0801184c <rcl_timer_call>:
 801184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011850:	b087      	sub	sp, #28
 8011852:	2800      	cmp	r0, #0
 8011854:	d06d      	beq.n	8011932 <rcl_timer_call+0xe6>
 8011856:	6803      	ldr	r3, [r0, #0]
 8011858:	4604      	mov	r4, r0
 801185a:	2b00      	cmp	r3, #0
 801185c:	d063      	beq.n	8011926 <rcl_timer_call+0xda>
 801185e:	f3bf 8f5b 	dmb	ish
 8011862:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011866:	f3bf 8f5b 	dmb	ish
 801186a:	2b00      	cmp	r3, #0
 801186c:	d150      	bne.n	8011910 <rcl_timer_call+0xc4>
 801186e:	6803      	ldr	r3, [r0, #0]
 8011870:	a904      	add	r1, sp, #16
 8011872:	6818      	ldr	r0, [r3, #0]
 8011874:	f7ff fdd4 	bl	8011420 <rcl_clock_get_now>
 8011878:	4605      	mov	r5, r0
 801187a:	2800      	cmp	r0, #0
 801187c:	d14a      	bne.n	8011914 <rcl_timer_call+0xc8>
 801187e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011882:	2b00      	cmp	r3, #0
 8011884:	db4a      	blt.n	801191c <rcl_timer_call+0xd0>
 8011886:	6820      	ldr	r0, [r4, #0]
 8011888:	f04f 0a05 	mov.w	sl, #5
 801188c:	f8cd a000 	str.w	sl, [sp]
 8011890:	3020      	adds	r0, #32
 8011892:	f001 fd09 	bl	80132a8 <__atomic_exchange_8>
 8011896:	6823      	ldr	r3, [r4, #0]
 8011898:	f3bf 8f5b 	dmb	ish
 801189c:	4680      	mov	r8, r0
 801189e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80118a2:	f3bf 8f5b 	dmb	ish
 80118a6:	6820      	ldr	r0, [r4, #0]
 80118a8:	4689      	mov	r9, r1
 80118aa:	3028      	adds	r0, #40	; 0x28
 80118ac:	4651      	mov	r1, sl
 80118ae:	f001 fc8f 	bl	80131d0 <__atomic_load_8>
 80118b2:	4606      	mov	r6, r0
 80118b4:	6820      	ldr	r0, [r4, #0]
 80118b6:	460f      	mov	r7, r1
 80118b8:	3018      	adds	r0, #24
 80118ba:	4651      	mov	r1, sl
 80118bc:	f001 fc88 	bl	80131d0 <__atomic_load_8>
 80118c0:	1836      	adds	r6, r6, r0
 80118c2:	4602      	mov	r2, r0
 80118c4:	4682      	mov	sl, r0
 80118c6:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80118ca:	eb47 0701 	adc.w	r7, r7, r1
 80118ce:	4286      	cmp	r6, r0
 80118d0:	460b      	mov	r3, r1
 80118d2:	eb77 010c 	sbcs.w	r1, r7, ip
 80118d6:	da04      	bge.n	80118e2 <rcl_timer_call+0x96>
 80118d8:	ea53 0102 	orrs.w	r1, r3, r2
 80118dc:	d12e      	bne.n	801193c <rcl_timer_call+0xf0>
 80118de:	4606      	mov	r6, r0
 80118e0:	4667      	mov	r7, ip
 80118e2:	6820      	ldr	r0, [r4, #0]
 80118e4:	2105      	movs	r1, #5
 80118e6:	4632      	mov	r2, r6
 80118e8:	463b      	mov	r3, r7
 80118ea:	3028      	adds	r0, #40	; 0x28
 80118ec:	9100      	str	r1, [sp, #0]
 80118ee:	f001 fca5 	bl	801323c <__atomic_store_8>
 80118f2:	f1bb 0f00 	cmp.w	fp, #0
 80118f6:	d00d      	beq.n	8011914 <rcl_timer_call+0xc8>
 80118f8:	9a04      	ldr	r2, [sp, #16]
 80118fa:	9b05      	ldr	r3, [sp, #20]
 80118fc:	ebb2 0208 	subs.w	r2, r2, r8
 8011900:	4620      	mov	r0, r4
 8011902:	eb63 0309 	sbc.w	r3, r3, r9
 8011906:	47d8      	blx	fp
 8011908:	4628      	mov	r0, r5
 801190a:	b007      	add	sp, #28
 801190c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011910:	f240 3521 	movw	r5, #801	; 0x321
 8011914:	4628      	mov	r0, r5
 8011916:	b007      	add	sp, #28
 8011918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801191c:	2501      	movs	r5, #1
 801191e:	4628      	mov	r0, r5
 8011920:	b007      	add	sp, #28
 8011922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011926:	f44f 7548 	mov.w	r5, #800	; 0x320
 801192a:	4628      	mov	r0, r5
 801192c:	b007      	add	sp, #28
 801192e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011932:	250b      	movs	r5, #11
 8011934:	4628      	mov	r0, r5
 8011936:	b007      	add	sp, #28
 8011938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193c:	1b80      	subs	r0, r0, r6
 801193e:	eb6c 0107 	sbc.w	r1, ip, r7
 8011942:	3801      	subs	r0, #1
 8011944:	f161 0100 	sbc.w	r1, r1, #0
 8011948:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801194c:	f7ee fca8 	bl	80002a0 <__aeabi_ldivmod>
 8011950:	9b02      	ldr	r3, [sp, #8]
 8011952:	3001      	adds	r0, #1
 8011954:	f141 0100 	adc.w	r1, r1, #0
 8011958:	fb00 f303 	mul.w	r3, r0, r3
 801195c:	fb01 330a 	mla	r3, r1, sl, r3
 8011960:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011964:	1986      	adds	r6, r0, r6
 8011966:	4453      	add	r3, sl
 8011968:	eb43 0707 	adc.w	r7, r3, r7
 801196c:	e7b9      	b.n	80118e2 <rcl_timer_call+0x96>
 801196e:	bf00      	nop

08011970 <rcl_timer_is_ready>:
 8011970:	b570      	push	{r4, r5, r6, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	b378      	cbz	r0, 80119d6 <rcl_timer_is_ready+0x66>
 8011976:	6803      	ldr	r3, [r0, #0]
 8011978:	4604      	mov	r4, r0
 801197a:	b383      	cbz	r3, 80119de <rcl_timer_is_ready+0x6e>
 801197c:	460d      	mov	r5, r1
 801197e:	b351      	cbz	r1, 80119d6 <rcl_timer_is_ready+0x66>
 8011980:	f3bf 8f5b 	dmb	ish
 8011984:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011988:	f3bf 8f5b 	dmb	ish
 801198c:	b953      	cbnz	r3, 80119a4 <rcl_timer_is_ready+0x34>
 801198e:	6803      	ldr	r3, [r0, #0]
 8011990:	4669      	mov	r1, sp
 8011992:	6818      	ldr	r0, [r3, #0]
 8011994:	f7ff fd44 	bl	8011420 <rcl_clock_get_now>
 8011998:	4606      	mov	r6, r0
 801199a:	b140      	cbz	r0, 80119ae <rcl_timer_is_ready+0x3e>
 801199c:	f240 3321 	movw	r3, #801	; 0x321
 80119a0:	4298      	cmp	r0, r3
 80119a2:	d101      	bne.n	80119a8 <rcl_timer_is_ready+0x38>
 80119a4:	2600      	movs	r6, #0
 80119a6:	702e      	strb	r6, [r5, #0]
 80119a8:	4630      	mov	r0, r6
 80119aa:	b002      	add	sp, #8
 80119ac:	bd70      	pop	{r4, r5, r6, pc}
 80119ae:	6820      	ldr	r0, [r4, #0]
 80119b0:	2105      	movs	r1, #5
 80119b2:	3028      	adds	r0, #40	; 0x28
 80119b4:	f001 fc0c 	bl	80131d0 <__atomic_load_8>
 80119b8:	9b00      	ldr	r3, [sp, #0]
 80119ba:	1ac0      	subs	r0, r0, r3
 80119bc:	9b01      	ldr	r3, [sp, #4]
 80119be:	eb61 0103 	sbc.w	r1, r1, r3
 80119c2:	2801      	cmp	r0, #1
 80119c4:	f171 0300 	sbcs.w	r3, r1, #0
 80119c8:	bfb4      	ite	lt
 80119ca:	2301      	movlt	r3, #1
 80119cc:	2300      	movge	r3, #0
 80119ce:	4630      	mov	r0, r6
 80119d0:	702b      	strb	r3, [r5, #0]
 80119d2:	b002      	add	sp, #8
 80119d4:	bd70      	pop	{r4, r5, r6, pc}
 80119d6:	260b      	movs	r6, #11
 80119d8:	4630      	mov	r0, r6
 80119da:	b002      	add	sp, #8
 80119dc:	bd70      	pop	{r4, r5, r6, pc}
 80119de:	f44f 7648 	mov.w	r6, #800	; 0x320
 80119e2:	e7e1      	b.n	80119a8 <rcl_timer_is_ready+0x38>

080119e4 <rcl_timer_get_time_until_next_call>:
 80119e4:	b570      	push	{r4, r5, r6, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	b330      	cbz	r0, 8011a38 <rcl_timer_get_time_until_next_call+0x54>
 80119ea:	6803      	ldr	r3, [r0, #0]
 80119ec:	4604      	mov	r4, r0
 80119ee:	b33b      	cbz	r3, 8011a40 <rcl_timer_get_time_until_next_call+0x5c>
 80119f0:	460d      	mov	r5, r1
 80119f2:	b309      	cbz	r1, 8011a38 <rcl_timer_get_time_until_next_call+0x54>
 80119f4:	f3bf 8f5b 	dmb	ish
 80119f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80119fc:	f3bf 8f5b 	dmb	ish
 8011a00:	b9ab      	cbnz	r3, 8011a2e <rcl_timer_get_time_until_next_call+0x4a>
 8011a02:	6803      	ldr	r3, [r0, #0]
 8011a04:	4669      	mov	r1, sp
 8011a06:	6818      	ldr	r0, [r3, #0]
 8011a08:	f7ff fd0a 	bl	8011420 <rcl_clock_get_now>
 8011a0c:	4606      	mov	r6, r0
 8011a0e:	b958      	cbnz	r0, 8011a28 <rcl_timer_get_time_until_next_call+0x44>
 8011a10:	6820      	ldr	r0, [r4, #0]
 8011a12:	2105      	movs	r1, #5
 8011a14:	3028      	adds	r0, #40	; 0x28
 8011a16:	f001 fbdb 	bl	80131d0 <__atomic_load_8>
 8011a1a:	9b00      	ldr	r3, [sp, #0]
 8011a1c:	1ac0      	subs	r0, r0, r3
 8011a1e:	9b01      	ldr	r3, [sp, #4]
 8011a20:	6028      	str	r0, [r5, #0]
 8011a22:	eb61 0103 	sbc.w	r1, r1, r3
 8011a26:	6069      	str	r1, [r5, #4]
 8011a28:	4630      	mov	r0, r6
 8011a2a:	b002      	add	sp, #8
 8011a2c:	bd70      	pop	{r4, r5, r6, pc}
 8011a2e:	f240 3621 	movw	r6, #801	; 0x321
 8011a32:	4630      	mov	r0, r6
 8011a34:	b002      	add	sp, #8
 8011a36:	bd70      	pop	{r4, r5, r6, pc}
 8011a38:	260b      	movs	r6, #11
 8011a3a:	4630      	mov	r0, r6
 8011a3c:	b002      	add	sp, #8
 8011a3e:	bd70      	pop	{r4, r5, r6, pc}
 8011a40:	f44f 7648 	mov.w	r6, #800	; 0x320
 8011a44:	e7f0      	b.n	8011a28 <rcl_timer_get_time_until_next_call+0x44>
 8011a46:	bf00      	nop

08011a48 <rcl_timer_get_guard_condition>:
 8011a48:	b130      	cbz	r0, 8011a58 <rcl_timer_get_guard_condition+0x10>
 8011a4a:	6800      	ldr	r0, [r0, #0]
 8011a4c:	b120      	cbz	r0, 8011a58 <rcl_timer_get_guard_condition+0x10>
 8011a4e:	68c3      	ldr	r3, [r0, #12]
 8011a50:	b10b      	cbz	r3, 8011a56 <rcl_timer_get_guard_condition+0xe>
 8011a52:	3008      	adds	r0, #8
 8011a54:	4770      	bx	lr
 8011a56:	4618      	mov	r0, r3
 8011a58:	4770      	bx	lr
 8011a5a:	bf00      	nop

08011a5c <rcl_validate_enclave_name_with_size>:
 8011a5c:	b378      	cbz	r0, 8011abe <rcl_validate_enclave_name_with_size+0x62>
 8011a5e:	b570      	push	{r4, r5, r6, lr}
 8011a60:	4615      	mov	r5, r2
 8011a62:	b0c2      	sub	sp, #264	; 0x108
 8011a64:	b302      	cbz	r2, 8011aa8 <rcl_validate_enclave_name_with_size+0x4c>
 8011a66:	461e      	mov	r6, r3
 8011a68:	466a      	mov	r2, sp
 8011a6a:	ab01      	add	r3, sp, #4
 8011a6c:	460c      	mov	r4, r1
 8011a6e:	f7f9 ff5b 	bl	800b928 <rmw_validate_namespace_with_size>
 8011a72:	4684      	mov	ip, r0
 8011a74:	b9e8      	cbnz	r0, 8011ab2 <rcl_validate_enclave_name_with_size+0x56>
 8011a76:	9b00      	ldr	r3, [sp, #0]
 8011a78:	b923      	cbnz	r3, 8011a84 <rcl_validate_enclave_name_with_size+0x28>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	602b      	str	r3, [r5, #0]
 8011a7e:	4660      	mov	r0, ip
 8011a80:	b042      	add	sp, #264	; 0x108
 8011a82:	bd70      	pop	{r4, r5, r6, pc}
 8011a84:	2b07      	cmp	r3, #7
 8011a86:	d007      	beq.n	8011a98 <rcl_validate_enclave_name_with_size+0x3c>
 8011a88:	1e5a      	subs	r2, r3, #1
 8011a8a:	2a05      	cmp	r2, #5
 8011a8c:	d833      	bhi.n	8011af6 <rcl_validate_enclave_name_with_size+0x9a>
 8011a8e:	e8df f002 	tbb	[pc, r2]
 8011a92:	2c2f      	.short	0x2c2f
 8011a94:	1a232629 	.word	0x1a232629
 8011a98:	2cff      	cmp	r4, #255	; 0xff
 8011a9a:	d9ee      	bls.n	8011a7a <rcl_validate_enclave_name_with_size+0x1e>
 8011a9c:	602b      	str	r3, [r5, #0]
 8011a9e:	2e00      	cmp	r6, #0
 8011aa0:	d0ed      	beq.n	8011a7e <rcl_validate_enclave_name_with_size+0x22>
 8011aa2:	23fe      	movs	r3, #254	; 0xfe
 8011aa4:	6033      	str	r3, [r6, #0]
 8011aa6:	e7ea      	b.n	8011a7e <rcl_validate_enclave_name_with_size+0x22>
 8011aa8:	f04f 0c0b 	mov.w	ip, #11
 8011aac:	4660      	mov	r0, ip
 8011aae:	b042      	add	sp, #264	; 0x108
 8011ab0:	bd70      	pop	{r4, r5, r6, pc}
 8011ab2:	f7fe fdfb 	bl	80106ac <rcl_convert_rmw_ret_to_rcl_ret>
 8011ab6:	4684      	mov	ip, r0
 8011ab8:	4660      	mov	r0, ip
 8011aba:	b042      	add	sp, #264	; 0x108
 8011abc:	bd70      	pop	{r4, r5, r6, pc}
 8011abe:	f04f 0c0b 	mov.w	ip, #11
 8011ac2:	4660      	mov	r0, ip
 8011ac4:	4770      	bx	lr
 8011ac6:	2306      	movs	r3, #6
 8011ac8:	602b      	str	r3, [r5, #0]
 8011aca:	2e00      	cmp	r6, #0
 8011acc:	d0d7      	beq.n	8011a7e <rcl_validate_enclave_name_with_size+0x22>
 8011ace:	9b01      	ldr	r3, [sp, #4]
 8011ad0:	6033      	str	r3, [r6, #0]
 8011ad2:	4660      	mov	r0, ip
 8011ad4:	b042      	add	sp, #264	; 0x108
 8011ad6:	bd70      	pop	{r4, r5, r6, pc}
 8011ad8:	2305      	movs	r3, #5
 8011ada:	602b      	str	r3, [r5, #0]
 8011adc:	e7f5      	b.n	8011aca <rcl_validate_enclave_name_with_size+0x6e>
 8011ade:	2304      	movs	r3, #4
 8011ae0:	602b      	str	r3, [r5, #0]
 8011ae2:	e7f2      	b.n	8011aca <rcl_validate_enclave_name_with_size+0x6e>
 8011ae4:	2303      	movs	r3, #3
 8011ae6:	602b      	str	r3, [r5, #0]
 8011ae8:	e7ef      	b.n	8011aca <rcl_validate_enclave_name_with_size+0x6e>
 8011aea:	2302      	movs	r3, #2
 8011aec:	602b      	str	r3, [r5, #0]
 8011aee:	e7ec      	b.n	8011aca <rcl_validate_enclave_name_with_size+0x6e>
 8011af0:	2301      	movs	r3, #1
 8011af2:	602b      	str	r3, [r5, #0]
 8011af4:	e7e9      	b.n	8011aca <rcl_validate_enclave_name_with_size+0x6e>
 8011af6:	4a04      	ldr	r2, [pc, #16]	; (8011b08 <rcl_validate_enclave_name_with_size+0xac>)
 8011af8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011afc:	a802      	add	r0, sp, #8
 8011afe:	f7f9 fe55 	bl	800b7ac <rcutils_snprintf>
 8011b02:	f04f 0c01 	mov.w	ip, #1
 8011b06:	e7ba      	b.n	8011a7e <rcl_validate_enclave_name_with_size+0x22>
 8011b08:	080184ac 	.word	0x080184ac

08011b0c <rcl_validate_enclave_name>:
 8011b0c:	b168      	cbz	r0, 8011b2a <rcl_validate_enclave_name+0x1e>
 8011b0e:	b570      	push	{r4, r5, r6, lr}
 8011b10:	460d      	mov	r5, r1
 8011b12:	4616      	mov	r6, r2
 8011b14:	4604      	mov	r4, r0
 8011b16:	f7ee fb65 	bl	80001e4 <strlen>
 8011b1a:	4633      	mov	r3, r6
 8011b1c:	4601      	mov	r1, r0
 8011b1e:	462a      	mov	r2, r5
 8011b20:	4620      	mov	r0, r4
 8011b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b26:	f7ff bf99 	b.w	8011a5c <rcl_validate_enclave_name_with_size>
 8011b2a:	200b      	movs	r0, #11
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop

08011b30 <rcl_get_zero_initialized_wait_set>:
 8011b30:	b510      	push	{r4, lr}
 8011b32:	4c08      	ldr	r4, [pc, #32]	; (8011b54 <rcl_get_zero_initialized_wait_set+0x24>)
 8011b34:	4686      	mov	lr, r0
 8011b36:	4684      	mov	ip, r0
 8011b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b4a:	6823      	ldr	r3, [r4, #0]
 8011b4c:	f8cc 3000 	str.w	r3, [ip]
 8011b50:	4670      	mov	r0, lr
 8011b52:	bd10      	pop	{r4, pc}
 8011b54:	0801850c 	.word	0x0801850c

08011b58 <rcl_wait_set_is_valid>:
 8011b58:	b118      	cbz	r0, 8011b62 <rcl_wait_set_is_valid+0xa>
 8011b5a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011b5c:	3800      	subs	r0, #0
 8011b5e:	bf18      	it	ne
 8011b60:	2001      	movne	r0, #1
 8011b62:	4770      	bx	lr

08011b64 <rcl_wait_set_fini>:
 8011b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b68:	b082      	sub	sp, #8
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	f000 8095 	beq.w	8011c9a <rcl_wait_set_fini+0x136>
 8011b70:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8011b72:	4604      	mov	r4, r0
 8011b74:	2e00      	cmp	r6, #0
 8011b76:	f000 808c 	beq.w	8011c92 <rcl_wait_set_fini+0x12e>
 8011b7a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8011b7c:	f002 fce6 	bl	801454c <rmw_destroy_wait_set>
 8011b80:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011b82:	1e06      	subs	r6, r0, #0
 8011b84:	bf18      	it	ne
 8011b86:	f44f 7661 	movne.w	r6, #900	; 0x384
 8011b8a:	2d00      	cmp	r5, #0
 8011b8c:	f000 8081 	beq.w	8011c92 <rcl_wait_set_fini+0x12e>
 8011b90:	6820      	ldr	r0, [r4, #0]
 8011b92:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011b96:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011b98:	2700      	movs	r7, #0
 8011b9a:	6067      	str	r7, [r4, #4]
 8011b9c:	602f      	str	r7, [r5, #0]
 8011b9e:	b120      	cbz	r0, 8011baa <rcl_wait_set_fini+0x46>
 8011ba0:	9101      	str	r1, [sp, #4]
 8011ba2:	47c0      	blx	r8
 8011ba4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011ba6:	9901      	ldr	r1, [sp, #4]
 8011ba8:	6027      	str	r7, [r4, #0]
 8011baa:	68a8      	ldr	r0, [r5, #8]
 8011bac:	b120      	cbz	r0, 8011bb8 <rcl_wait_set_fini+0x54>
 8011bae:	47c0      	blx	r8
 8011bb0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8011bb8:	68a0      	ldr	r0, [r4, #8]
 8011bba:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011bbc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011bbe:	f04f 0800 	mov.w	r8, #0
 8011bc2:	f8c4 800c 	str.w	r8, [r4, #12]
 8011bc6:	f8c5 800c 	str.w	r8, [r5, #12]
 8011bca:	b128      	cbz	r0, 8011bd8 <rcl_wait_set_fini+0x74>
 8011bcc:	47b8      	blx	r7
 8011bce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011bd0:	f8c4 8008 	str.w	r8, [r4, #8]
 8011bd4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011bd6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011bd8:	6968      	ldr	r0, [r5, #20]
 8011bda:	f04f 0800 	mov.w	r8, #0
 8011bde:	f8c5 8010 	str.w	r8, [r5, #16]
 8011be2:	b128      	cbz	r0, 8011bf0 <rcl_wait_set_fini+0x8c>
 8011be4:	47b8      	blx	r7
 8011be6:	f8c5 8014 	str.w	r8, [r5, #20]
 8011bea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011bec:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011bee:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011bf0:	6920      	ldr	r0, [r4, #16]
 8011bf2:	f04f 0800 	mov.w	r8, #0
 8011bf6:	f8c4 8014 	str.w	r8, [r4, #20]
 8011bfa:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8011bfe:	b128      	cbz	r0, 8011c0c <rcl_wait_set_fini+0xa8>
 8011c00:	47b8      	blx	r7
 8011c02:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011c04:	f8c4 8010 	str.w	r8, [r4, #16]
 8011c08:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011c0a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011c0c:	69a0      	ldr	r0, [r4, #24]
 8011c0e:	f04f 0800 	mov.w	r8, #0
 8011c12:	f8c4 801c 	str.w	r8, [r4, #28]
 8011c16:	f8c5 8018 	str.w	r8, [r5, #24]
 8011c1a:	b128      	cbz	r0, 8011c28 <rcl_wait_set_fini+0xc4>
 8011c1c:	9101      	str	r1, [sp, #4]
 8011c1e:	47b8      	blx	r7
 8011c20:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011c22:	9901      	ldr	r1, [sp, #4]
 8011c24:	f8c4 8018 	str.w	r8, [r4, #24]
 8011c28:	6a28      	ldr	r0, [r5, #32]
 8011c2a:	b120      	cbz	r0, 8011c36 <rcl_wait_set_fini+0xd2>
 8011c2c:	47b8      	blx	r7
 8011c2e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011c30:	2300      	movs	r3, #0
 8011c32:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8011c36:	6a20      	ldr	r0, [r4, #32]
 8011c38:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011c3c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011c3e:	2700      	movs	r7, #0
 8011c40:	6267      	str	r7, [r4, #36]	; 0x24
 8011c42:	626f      	str	r7, [r5, #36]	; 0x24
 8011c44:	b120      	cbz	r0, 8011c50 <rcl_wait_set_fini+0xec>
 8011c46:	9101      	str	r1, [sp, #4]
 8011c48:	47c0      	blx	r8
 8011c4a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011c4c:	9901      	ldr	r1, [sp, #4]
 8011c4e:	6227      	str	r7, [r4, #32]
 8011c50:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8011c52:	b120      	cbz	r0, 8011c5e <rcl_wait_set_fini+0xfa>
 8011c54:	47c0      	blx	r8
 8011c56:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011c58:	2300      	movs	r3, #0
 8011c5a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8011c5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011c60:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011c64:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011c66:	2700      	movs	r7, #0
 8011c68:	62e7      	str	r7, [r4, #44]	; 0x2c
 8011c6a:	632f      	str	r7, [r5, #48]	; 0x30
 8011c6c:	b120      	cbz	r0, 8011c78 <rcl_wait_set_fini+0x114>
 8011c6e:	9101      	str	r1, [sp, #4]
 8011c70:	47c0      	blx	r8
 8011c72:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011c74:	9901      	ldr	r1, [sp, #4]
 8011c76:	62a7      	str	r7, [r4, #40]	; 0x28
 8011c78:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8011c7a:	b120      	cbz	r0, 8011c86 <rcl_wait_set_fini+0x122>
 8011c7c:	47c0      	blx	r8
 8011c7e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011c80:	2300      	movs	r3, #0
 8011c82:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8011c86:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8011c88:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	4798      	blx	r3
 8011c8e:	2300      	movs	r3, #0
 8011c90:	6323      	str	r3, [r4, #48]	; 0x30
 8011c92:	4630      	mov	r0, r6
 8011c94:	b002      	add	sp, #8
 8011c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9a:	260b      	movs	r6, #11
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	b002      	add	sp, #8
 8011ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ca4 <rcl_wait_set_add_subscription>:
 8011ca4:	b318      	cbz	r0, 8011cee <rcl_wait_set_add_subscription+0x4a>
 8011ca6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011ca8:	b570      	push	{r4, r5, r6, lr}
 8011caa:	4604      	mov	r4, r0
 8011cac:	b30b      	cbz	r3, 8011cf2 <rcl_wait_set_add_subscription+0x4e>
 8011cae:	b319      	cbz	r1, 8011cf8 <rcl_wait_set_add_subscription+0x54>
 8011cb0:	681d      	ldr	r5, [r3, #0]
 8011cb2:	6840      	ldr	r0, [r0, #4]
 8011cb4:	4285      	cmp	r5, r0
 8011cb6:	d217      	bcs.n	8011ce8 <rcl_wait_set_add_subscription+0x44>
 8011cb8:	6820      	ldr	r0, [r4, #0]
 8011cba:	1c6e      	adds	r6, r5, #1
 8011cbc:	601e      	str	r6, [r3, #0]
 8011cbe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011cc2:	b102      	cbz	r2, 8011cc6 <rcl_wait_set_add_subscription+0x22>
 8011cc4:	6015      	str	r5, [r2, #0]
 8011cc6:	4608      	mov	r0, r1
 8011cc8:	f7ff fb0a 	bl	80112e0 <rcl_subscription_get_rmw_handle>
 8011ccc:	b150      	cbz	r0, 8011ce4 <rcl_wait_set_add_subscription+0x40>
 8011cce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011cd0:	6842      	ldr	r2, [r0, #4]
 8011cd2:	689b      	ldr	r3, [r3, #8]
 8011cd4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011cd8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011cda:	6853      	ldr	r3, [r2, #4]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	2000      	movs	r0, #0
 8011ce0:	6053      	str	r3, [r2, #4]
 8011ce2:	bd70      	pop	{r4, r5, r6, pc}
 8011ce4:	2001      	movs	r0, #1
 8011ce6:	bd70      	pop	{r4, r5, r6, pc}
 8011ce8:	f240 3086 	movw	r0, #902	; 0x386
 8011cec:	bd70      	pop	{r4, r5, r6, pc}
 8011cee:	200b      	movs	r0, #11
 8011cf0:	4770      	bx	lr
 8011cf2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011cf6:	bd70      	pop	{r4, r5, r6, pc}
 8011cf8:	200b      	movs	r0, #11
 8011cfa:	bd70      	pop	{r4, r5, r6, pc}

08011cfc <rcl_wait_set_clear>:
 8011cfc:	2800      	cmp	r0, #0
 8011cfe:	d073      	beq.n	8011de8 <rcl_wait_set_clear+0xec>
 8011d00:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011d02:	b510      	push	{r4, lr}
 8011d04:	4604      	mov	r4, r0
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d070      	beq.n	8011dec <rcl_wait_set_clear+0xf0>
 8011d0a:	6800      	ldr	r0, [r0, #0]
 8011d0c:	b138      	cbz	r0, 8011d1e <rcl_wait_set_clear+0x22>
 8011d0e:	6862      	ldr	r2, [r4, #4]
 8011d10:	2100      	movs	r1, #0
 8011d12:	0092      	lsls	r2, r2, #2
 8011d14:	f004 fff8 	bl	8016d08 <memset>
 8011d18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	601a      	str	r2, [r3, #0]
 8011d1e:	68a0      	ldr	r0, [r4, #8]
 8011d20:	b138      	cbz	r0, 8011d32 <rcl_wait_set_clear+0x36>
 8011d22:	68e2      	ldr	r2, [r4, #12]
 8011d24:	2100      	movs	r1, #0
 8011d26:	0092      	lsls	r2, r2, #2
 8011d28:	f004 ffee 	bl	8016d08 <memset>
 8011d2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d2e:	2200      	movs	r2, #0
 8011d30:	60da      	str	r2, [r3, #12]
 8011d32:	69a0      	ldr	r0, [r4, #24]
 8011d34:	b138      	cbz	r0, 8011d46 <rcl_wait_set_clear+0x4a>
 8011d36:	69e2      	ldr	r2, [r4, #28]
 8011d38:	2100      	movs	r1, #0
 8011d3a:	0092      	lsls	r2, r2, #2
 8011d3c:	f004 ffe4 	bl	8016d08 <memset>
 8011d40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d42:	2200      	movs	r2, #0
 8011d44:	619a      	str	r2, [r3, #24]
 8011d46:	6a20      	ldr	r0, [r4, #32]
 8011d48:	b138      	cbz	r0, 8011d5a <rcl_wait_set_clear+0x5e>
 8011d4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011d4c:	2100      	movs	r1, #0
 8011d4e:	0092      	lsls	r2, r2, #2
 8011d50:	f004 ffda 	bl	8016d08 <memset>
 8011d54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d56:	2200      	movs	r2, #0
 8011d58:	625a      	str	r2, [r3, #36]	; 0x24
 8011d5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011d5c:	b138      	cbz	r0, 8011d6e <rcl_wait_set_clear+0x72>
 8011d5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011d60:	2100      	movs	r1, #0
 8011d62:	0092      	lsls	r2, r2, #2
 8011d64:	f004 ffd0 	bl	8016d08 <memset>
 8011d68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8011d6e:	6920      	ldr	r0, [r4, #16]
 8011d70:	b138      	cbz	r0, 8011d82 <rcl_wait_set_clear+0x86>
 8011d72:	6962      	ldr	r2, [r4, #20]
 8011d74:	2100      	movs	r1, #0
 8011d76:	0092      	lsls	r2, r2, #2
 8011d78:	f004 ffc6 	bl	8016d08 <memset>
 8011d7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d7e:	2200      	movs	r2, #0
 8011d80:	641a      	str	r2, [r3, #64]	; 0x40
 8011d82:	6898      	ldr	r0, [r3, #8]
 8011d84:	b138      	cbz	r0, 8011d96 <rcl_wait_set_clear+0x9a>
 8011d86:	685a      	ldr	r2, [r3, #4]
 8011d88:	2100      	movs	r1, #0
 8011d8a:	0092      	lsls	r2, r2, #2
 8011d8c:	f004 ffbc 	bl	8016d08 <memset>
 8011d90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d92:	2200      	movs	r2, #0
 8011d94:	605a      	str	r2, [r3, #4]
 8011d96:	6958      	ldr	r0, [r3, #20]
 8011d98:	b138      	cbz	r0, 8011daa <rcl_wait_set_clear+0xae>
 8011d9a:	691a      	ldr	r2, [r3, #16]
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	0092      	lsls	r2, r2, #2
 8011da0:	f004 ffb2 	bl	8016d08 <memset>
 8011da4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011da6:	2200      	movs	r2, #0
 8011da8:	611a      	str	r2, [r3, #16]
 8011daa:	6a18      	ldr	r0, [r3, #32]
 8011dac:	b138      	cbz	r0, 8011dbe <rcl_wait_set_clear+0xc2>
 8011dae:	69da      	ldr	r2, [r3, #28]
 8011db0:	2100      	movs	r1, #0
 8011db2:	0092      	lsls	r2, r2, #2
 8011db4:	f004 ffa8 	bl	8016d08 <memset>
 8011db8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011dba:	2200      	movs	r2, #0
 8011dbc:	61da      	str	r2, [r3, #28]
 8011dbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011dc0:	b138      	cbz	r0, 8011dd2 <rcl_wait_set_clear+0xd6>
 8011dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	0092      	lsls	r2, r2, #2
 8011dc8:	f004 ff9e 	bl	8016d08 <memset>
 8011dcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011dce:	2200      	movs	r2, #0
 8011dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8011dd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011dd4:	b138      	cbz	r0, 8011de6 <rcl_wait_set_clear+0xea>
 8011dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dd8:	2100      	movs	r1, #0
 8011dda:	0092      	lsls	r2, r2, #2
 8011ddc:	f004 ff94 	bl	8016d08 <memset>
 8011de0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011de2:	2000      	movs	r0, #0
 8011de4:	6358      	str	r0, [r3, #52]	; 0x34
 8011de6:	bd10      	pop	{r4, pc}
 8011de8:	200b      	movs	r0, #11
 8011dea:	4770      	bx	lr
 8011dec:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011df0:	bd10      	pop	{r4, pc}
 8011df2:	bf00      	nop

08011df4 <rcl_wait_set_resize>:
 8011df4:	2800      	cmp	r0, #0
 8011df6:	f000 8185 	beq.w	8012104 <rcl_wait_set_resize+0x310>
 8011dfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dfe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8011e00:	b083      	sub	sp, #12
 8011e02:	4605      	mov	r5, r0
 8011e04:	2c00      	cmp	r4, #0
 8011e06:	f000 817f 	beq.w	8012108 <rcl_wait_set_resize+0x314>
 8011e0a:	f04f 0900 	mov.w	r9, #0
 8011e0e:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011e12:	461f      	mov	r7, r3
 8011e14:	4688      	mov	r8, r1
 8011e16:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8011e1a:	4616      	mov	r6, r2
 8011e1c:	f8c0 9004 	str.w	r9, [r0, #4]
 8011e20:	f8c4 9000 	str.w	r9, [r4]
 8011e24:	2900      	cmp	r1, #0
 8011e26:	f000 80bd 	beq.w	8011fa4 <rcl_wait_set_resize+0x1b0>
 8011e2a:	008c      	lsls	r4, r1, #2
 8011e2c:	6800      	ldr	r0, [r0, #0]
 8011e2e:	9301      	str	r3, [sp, #4]
 8011e30:	4652      	mov	r2, sl
 8011e32:	4621      	mov	r1, r4
 8011e34:	4798      	blx	r3
 8011e36:	9b01      	ldr	r3, [sp, #4]
 8011e38:	6028      	str	r0, [r5, #0]
 8011e3a:	2800      	cmp	r0, #0
 8011e3c:	f000 80cb 	beq.w	8011fd6 <rcl_wait_set_resize+0x1e2>
 8011e40:	4622      	mov	r2, r4
 8011e42:	4649      	mov	r1, r9
 8011e44:	9301      	str	r3, [sp, #4]
 8011e46:	f004 ff5f 	bl	8016d08 <memset>
 8011e4a:	f8c5 8004 	str.w	r8, [r5, #4]
 8011e4e:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8011e52:	9b01      	ldr	r3, [sp, #4]
 8011e54:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8011e58:	f8c8 9004 	str.w	r9, [r8, #4]
 8011e5c:	4652      	mov	r2, sl
 8011e5e:	4621      	mov	r1, r4
 8011e60:	4798      	blx	r3
 8011e62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011e64:	f8c8 0008 	str.w	r0, [r8, #8]
 8011e68:	689b      	ldr	r3, [r3, #8]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f000 80ac 	beq.w	8011fc8 <rcl_wait_set_resize+0x1d4>
 8011e70:	4622      	mov	r2, r4
 8011e72:	4649      	mov	r1, r9
 8011e74:	4618      	mov	r0, r3
 8011e76:	f004 ff47 	bl	8016d08 <memset>
 8011e7a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011e7c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011e80:	f04f 0800 	mov.w	r8, #0
 8011e84:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8011e88:	f8c5 800c 	str.w	r8, [r5, #12]
 8011e8c:	f8c4 800c 	str.w	r8, [r4, #12]
 8011e90:	2e00      	cmp	r6, #0
 8011e92:	f040 80a4 	bne.w	8011fde <rcl_wait_set_resize+0x1ea>
 8011e96:	68a8      	ldr	r0, [r5, #8]
 8011e98:	b128      	cbz	r0, 8011ea6 <rcl_wait_set_resize+0xb2>
 8011e9a:	4649      	mov	r1, r9
 8011e9c:	4790      	blx	r2
 8011e9e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011ea0:	60ae      	str	r6, [r5, #8]
 8011ea2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011ea6:	f04f 0800 	mov.w	r8, #0
 8011eaa:	19f6      	adds	r6, r6, r7
 8011eac:	f8c4 8010 	str.w	r8, [r4, #16]
 8011eb0:	f040 80ac 	bne.w	801200c <rcl_wait_set_resize+0x218>
 8011eb4:	6960      	ldr	r0, [r4, #20]
 8011eb6:	b130      	cbz	r0, 8011ec6 <rcl_wait_set_resize+0xd2>
 8011eb8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011eba:	4649      	mov	r1, r9
 8011ebc:	4798      	blx	r3
 8011ebe:	6166      	str	r6, [r4, #20]
 8011ec0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011ec2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011ec6:	2600      	movs	r6, #0
 8011ec8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8011ecc:	616e      	str	r6, [r5, #20]
 8011ece:	6426      	str	r6, [r4, #64]	; 0x40
 8011ed0:	2f00      	cmp	r7, #0
 8011ed2:	f040 80ad 	bne.w	8012030 <rcl_wait_set_resize+0x23c>
 8011ed6:	6928      	ldr	r0, [r5, #16]
 8011ed8:	b138      	cbz	r0, 8011eea <rcl_wait_set_resize+0xf6>
 8011eda:	4649      	mov	r1, r9
 8011edc:	47d0      	blx	sl
 8011ede:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011ee0:	612f      	str	r7, [r5, #16]
 8011ee2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8011ee6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011eec:	2600      	movs	r6, #0
 8011eee:	61ee      	str	r6, [r5, #28]
 8011ef0:	61a6      	str	r6, [r4, #24]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	f040 80af 	bne.w	8012056 <rcl_wait_set_resize+0x262>
 8011ef8:	69a8      	ldr	r0, [r5, #24]
 8011efa:	b120      	cbz	r0, 8011f06 <rcl_wait_set_resize+0x112>
 8011efc:	4649      	mov	r1, r9
 8011efe:	47d0      	blx	sl
 8011f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f02:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011f04:	61ab      	str	r3, [r5, #24]
 8011f06:	6a20      	ldr	r0, [r4, #32]
 8011f08:	b128      	cbz	r0, 8011f16 <rcl_wait_set_resize+0x122>
 8011f0a:	4649      	mov	r1, r9
 8011f0c:	47d0      	blx	sl
 8011f0e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011f10:	2300      	movs	r3, #0
 8011f12:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f18:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8011f1a:	2600      	movs	r6, #0
 8011f1c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8011f20:	626e      	str	r6, [r5, #36]	; 0x24
 8011f22:	6266      	str	r6, [r4, #36]	; 0x24
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	f000 80b6 	beq.w	8012096 <rcl_wait_set_resize+0x2a2>
 8011f2a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011f2e:	6a28      	ldr	r0, [r5, #32]
 8011f30:	463a      	mov	r2, r7
 8011f32:	4651      	mov	r1, sl
 8011f34:	47c8      	blx	r9
 8011f36:	6228      	str	r0, [r5, #32]
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d04c      	beq.n	8011fd6 <rcl_wait_set_resize+0x1e2>
 8011f3c:	4652      	mov	r2, sl
 8011f3e:	4631      	mov	r1, r6
 8011f40:	f004 fee2 	bl	8016d08 <memset>
 8011f44:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f48:	626b      	str	r3, [r5, #36]	; 0x24
 8011f4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011f4c:	62a6      	str	r6, [r4, #40]	; 0x28
 8011f4e:	463a      	mov	r2, r7
 8011f50:	4651      	mov	r1, sl
 8011f52:	47c8      	blx	r9
 8011f54:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011f56:	62e0      	str	r0, [r4, #44]	; 0x2c
 8011f58:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8011f5a:	2c00      	cmp	r4, #0
 8011f5c:	f000 80f0 	beq.w	8012140 <rcl_wait_set_resize+0x34c>
 8011f60:	4620      	mov	r0, r4
 8011f62:	4652      	mov	r2, sl
 8011f64:	4631      	mov	r1, r6
 8011f66:	f004 fecf 	bl	8016d08 <memset>
 8011f6a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f6e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8011f70:	2600      	movs	r6, #0
 8011f72:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8011f76:	62ee      	str	r6, [r5, #44]	; 0x2c
 8011f78:	6326      	str	r6, [r4, #48]	; 0x30
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	f040 809d 	bne.w	80120ba <rcl_wait_set_resize+0x2c6>
 8011f80:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8011f82:	b120      	cbz	r0, 8011f8e <rcl_wait_set_resize+0x19a>
 8011f84:	4639      	mov	r1, r7
 8011f86:	47c0      	blx	r8
 8011f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f8a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011f8c:	62ab      	str	r3, [r5, #40]	; 0x28
 8011f8e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8011f90:	b310      	cbz	r0, 8011fd8 <rcl_wait_set_resize+0x1e4>
 8011f92:	4639      	mov	r1, r7
 8011f94:	47c0      	blx	r8
 8011f96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011f98:	2000      	movs	r0, #0
 8011f9a:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8011f9e:	b003      	add	sp, #12
 8011fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa4:	6800      	ldr	r0, [r0, #0]
 8011fa6:	b120      	cbz	r0, 8011fb2 <rcl_wait_set_resize+0x1be>
 8011fa8:	4651      	mov	r1, sl
 8011faa:	47d8      	blx	fp
 8011fac:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011fae:	f8c5 8000 	str.w	r8, [r5]
 8011fb2:	68a0      	ldr	r0, [r4, #8]
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	f43f af61 	beq.w	8011e7c <rcl_wait_set_resize+0x88>
 8011fba:	4651      	mov	r1, sl
 8011fbc:	47d8      	blx	fp
 8011fbe:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8011fc6:	e759      	b.n	8011e7c <rcl_wait_set_resize+0x88>
 8011fc8:	6828      	ldr	r0, [r5, #0]
 8011fca:	9301      	str	r3, [sp, #4]
 8011fcc:	4651      	mov	r1, sl
 8011fce:	47d8      	blx	fp
 8011fd0:	9b01      	ldr	r3, [sp, #4]
 8011fd2:	e9c5 3300 	strd	r3, r3, [r5]
 8011fd6:	200a      	movs	r0, #10
 8011fd8:	b003      	add	sp, #12
 8011fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fde:	00b4      	lsls	r4, r6, #2
 8011fe0:	68a8      	ldr	r0, [r5, #8]
 8011fe2:	464a      	mov	r2, r9
 8011fe4:	4621      	mov	r1, r4
 8011fe6:	4798      	blx	r3
 8011fe8:	60a8      	str	r0, [r5, #8]
 8011fea:	2800      	cmp	r0, #0
 8011fec:	d0f3      	beq.n	8011fd6 <rcl_wait_set_resize+0x1e2>
 8011fee:	4622      	mov	r2, r4
 8011ff0:	4641      	mov	r1, r8
 8011ff2:	f004 fe89 	bl	8016d08 <memset>
 8011ff6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011ff8:	60ee      	str	r6, [r5, #12]
 8011ffa:	f04f 0800 	mov.w	r8, #0
 8011ffe:	19f6      	adds	r6, r6, r7
 8012000:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8012004:	f8c4 8010 	str.w	r8, [r4, #16]
 8012008:	f43f af54 	beq.w	8011eb4 <rcl_wait_set_resize+0xc0>
 801200c:	00b6      	lsls	r6, r6, #2
 801200e:	464a      	mov	r2, r9
 8012010:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8012012:	6960      	ldr	r0, [r4, #20]
 8012014:	4631      	mov	r1, r6
 8012016:	4798      	blx	r3
 8012018:	4681      	mov	r9, r0
 801201a:	6160      	str	r0, [r4, #20]
 801201c:	2800      	cmp	r0, #0
 801201e:	d076      	beq.n	801210e <rcl_wait_set_resize+0x31a>
 8012020:	4632      	mov	r2, r6
 8012022:	4641      	mov	r1, r8
 8012024:	f004 fe70 	bl	8016d08 <memset>
 8012028:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801202a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801202e:	e74a      	b.n	8011ec6 <rcl_wait_set_resize+0xd2>
 8012030:	00bc      	lsls	r4, r7, #2
 8012032:	6928      	ldr	r0, [r5, #16]
 8012034:	464a      	mov	r2, r9
 8012036:	4621      	mov	r1, r4
 8012038:	47c0      	blx	r8
 801203a:	6128      	str	r0, [r5, #16]
 801203c:	2800      	cmp	r0, #0
 801203e:	d0ca      	beq.n	8011fd6 <rcl_wait_set_resize+0x1e2>
 8012040:	4622      	mov	r2, r4
 8012042:	4631      	mov	r1, r6
 8012044:	f004 fe60 	bl	8016d08 <memset>
 8012048:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801204a:	616f      	str	r7, [r5, #20]
 801204c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8012050:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8012054:	e749      	b.n	8011eea <rcl_wait_set_resize+0xf6>
 8012056:	009c      	lsls	r4, r3, #2
 8012058:	69a8      	ldr	r0, [r5, #24]
 801205a:	464a      	mov	r2, r9
 801205c:	4621      	mov	r1, r4
 801205e:	47c0      	blx	r8
 8012060:	61a8      	str	r0, [r5, #24]
 8012062:	2800      	cmp	r0, #0
 8012064:	d0b7      	beq.n	8011fd6 <rcl_wait_set_resize+0x1e2>
 8012066:	4622      	mov	r2, r4
 8012068:	4631      	mov	r1, r6
 801206a:	f004 fe4d 	bl	8016d08 <memset>
 801206e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8012070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012072:	61eb      	str	r3, [r5, #28]
 8012074:	6a38      	ldr	r0, [r7, #32]
 8012076:	61fe      	str	r6, [r7, #28]
 8012078:	464a      	mov	r2, r9
 801207a:	4621      	mov	r1, r4
 801207c:	47c0      	blx	r8
 801207e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012080:	6238      	str	r0, [r7, #32]
 8012082:	6a1f      	ldr	r7, [r3, #32]
 8012084:	2f00      	cmp	r7, #0
 8012086:	d054      	beq.n	8012132 <rcl_wait_set_resize+0x33e>
 8012088:	4622      	mov	r2, r4
 801208a:	4631      	mov	r1, r6
 801208c:	4638      	mov	r0, r7
 801208e:	f004 fe3b 	bl	8016d08 <memset>
 8012092:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012094:	e73f      	b.n	8011f16 <rcl_wait_set_resize+0x122>
 8012096:	6a28      	ldr	r0, [r5, #32]
 8012098:	b120      	cbz	r0, 80120a4 <rcl_wait_set_resize+0x2b0>
 801209a:	4639      	mov	r1, r7
 801209c:	47c0      	blx	r8
 801209e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120a0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80120a2:	622b      	str	r3, [r5, #32]
 80120a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80120a6:	2800      	cmp	r0, #0
 80120a8:	f43f af60 	beq.w	8011f6c <rcl_wait_set_resize+0x178>
 80120ac:	4639      	mov	r1, r7
 80120ae:	47c0      	blx	r8
 80120b0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80120b2:	2300      	movs	r3, #0
 80120b4:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80120b8:	e758      	b.n	8011f6c <rcl_wait_set_resize+0x178>
 80120ba:	009c      	lsls	r4, r3, #2
 80120bc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80120be:	463a      	mov	r2, r7
 80120c0:	4621      	mov	r1, r4
 80120c2:	47c8      	blx	r9
 80120c4:	62a8      	str	r0, [r5, #40]	; 0x28
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d085      	beq.n	8011fd6 <rcl_wait_set_resize+0x1e2>
 80120ca:	4622      	mov	r2, r4
 80120cc:	4631      	mov	r1, r6
 80120ce:	f004 fe1b 	bl	8016d08 <memset>
 80120d2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80120d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80120d8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80120da:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80120de:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 80120e2:	463a      	mov	r2, r7
 80120e4:	4621      	mov	r1, r4
 80120e6:	47c8      	blx	r9
 80120e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80120ea:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80120ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120f0:	b36b      	cbz	r3, 801214e <rcl_wait_set_resize+0x35a>
 80120f2:	4622      	mov	r2, r4
 80120f4:	4631      	mov	r1, r6
 80120f6:	4618      	mov	r0, r3
 80120f8:	f004 fe06 	bl	8016d08 <memset>
 80120fc:	4630      	mov	r0, r6
 80120fe:	b003      	add	sp, #12
 8012100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012104:	200b      	movs	r0, #11
 8012106:	4770      	bx	lr
 8012108:	f44f 7061 	mov.w	r0, #900	; 0x384
 801210c:	e764      	b.n	8011fd8 <rcl_wait_set_resize+0x1e4>
 801210e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012110:	68a8      	ldr	r0, [r5, #8]
 8012112:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012116:	4798      	blx	r3
 8012118:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801211a:	6928      	ldr	r0, [r5, #16]
 801211c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801211e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012120:	f8c5 900c 	str.w	r9, [r5, #12]
 8012124:	f8c5 9008 	str.w	r9, [r5, #8]
 8012128:	4790      	blx	r2
 801212a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801212e:	200a      	movs	r0, #10
 8012130:	e752      	b.n	8011fd8 <rcl_wait_set_resize+0x1e4>
 8012132:	69a8      	ldr	r0, [r5, #24]
 8012134:	4649      	mov	r1, r9
 8012136:	47d0      	blx	sl
 8012138:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801213c:	200a      	movs	r0, #10
 801213e:	e74b      	b.n	8011fd8 <rcl_wait_set_resize+0x1e4>
 8012140:	6a28      	ldr	r0, [r5, #32]
 8012142:	4639      	mov	r1, r7
 8012144:	47c0      	blx	r8
 8012146:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801214a:	200a      	movs	r0, #10
 801214c:	e744      	b.n	8011fd8 <rcl_wait_set_resize+0x1e4>
 801214e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8012150:	9301      	str	r3, [sp, #4]
 8012152:	4639      	mov	r1, r7
 8012154:	47c0      	blx	r8
 8012156:	9b01      	ldr	r3, [sp, #4]
 8012158:	200a      	movs	r0, #10
 801215a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801215e:	e73b      	b.n	8011fd8 <rcl_wait_set_resize+0x1e4>

08012160 <rcl_wait_set_init>:
 8012160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012164:	b084      	sub	sp, #16
 8012166:	4604      	mov	r4, r0
 8012168:	a810      	add	r0, sp, #64	; 0x40
 801216a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801216e:	460f      	mov	r7, r1
 8012170:	4690      	mov	r8, r2
 8012172:	4699      	mov	r9, r3
 8012174:	f7f9 f9d4 	bl	800b520 <rcutils_allocator_is_valid>
 8012178:	2800      	cmp	r0, #0
 801217a:	d06b      	beq.n	8012254 <rcl_wait_set_init+0xf4>
 801217c:	2c00      	cmp	r4, #0
 801217e:	d069      	beq.n	8012254 <rcl_wait_set_init+0xf4>
 8012180:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012182:	b125      	cbz	r5, 801218e <rcl_wait_set_init+0x2e>
 8012184:	2564      	movs	r5, #100	; 0x64
 8012186:	4628      	mov	r0, r5
 8012188:	b004      	add	sp, #16
 801218a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801218e:	f1ba 0f00 	cmp.w	sl, #0
 8012192:	d05f      	beq.n	8012254 <rcl_wait_set_init+0xf4>
 8012194:	4650      	mov	r0, sl
 8012196:	f7fe faa7 	bl	80106e8 <rcl_context_is_valid>
 801219a:	2800      	cmp	r0, #0
 801219c:	d067      	beq.n	801226e <rcl_wait_set_init+0x10e>
 801219e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80121a0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80121a2:	205c      	movs	r0, #92	; 0x5c
 80121a4:	4798      	blx	r3
 80121a6:	6320      	str	r0, [r4, #48]	; 0x30
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d062      	beq.n	8012272 <rcl_wait_set_init+0x112>
 80121ac:	4629      	mov	r1, r5
 80121ae:	225c      	movs	r2, #92	; 0x5c
 80121b0:	f004 fdaa 	bl	8016d08 <memset>
 80121b4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80121b8:	eb03 0e02 	add.w	lr, r3, r2
 80121bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121be:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80121c0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80121c4:	449e      	add	lr, r3
 80121c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80121ca:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80121ce:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80121d2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80121d6:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 80121da:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 80121de:	f106 0548 	add.w	r5, r6, #72	; 0x48
 80121e2:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 80121e6:	f8da a000 	ldr.w	sl, [sl]
 80121ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80121ec:	44c6      	add	lr, r8
 80121ee:	f8dc 3000 	ldr.w	r3, [ip]
 80121f2:	602b      	str	r3, [r5, #0]
 80121f4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80121f8:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 80121fc:	f002 f99c 	bl	8014538 <rmw_create_wait_set>
 8012200:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012202:	63f0      	str	r0, [r6, #60]	; 0x3c
 8012204:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012206:	b350      	cbz	r0, 801225e <rcl_wait_set_init+0xfe>
 8012208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801220a:	9302      	str	r3, [sp, #8]
 801220c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801220e:	9301      	str	r3, [sp, #4]
 8012210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012212:	9300      	str	r3, [sp, #0]
 8012214:	4642      	mov	r2, r8
 8012216:	464b      	mov	r3, r9
 8012218:	4639      	mov	r1, r7
 801221a:	4620      	mov	r0, r4
 801221c:	f7ff fdea 	bl	8011df4 <rcl_wait_set_resize>
 8012220:	4605      	mov	r5, r0
 8012222:	2800      	cmp	r0, #0
 8012224:	d0af      	beq.n	8012186 <rcl_wait_set_init+0x26>
 8012226:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012228:	bb2b      	cbnz	r3, 8012276 <rcl_wait_set_init+0x116>
 801222a:	2600      	movs	r6, #0
 801222c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012230:	9600      	str	r6, [sp, #0]
 8012232:	4633      	mov	r3, r6
 8012234:	4632      	mov	r2, r6
 8012236:	4631      	mov	r1, r6
 8012238:	4620      	mov	r0, r4
 801223a:	f7ff fddb 	bl	8011df4 <rcl_wait_set_resize>
 801223e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8012240:	2800      	cmp	r0, #0
 8012242:	d0a0      	beq.n	8012186 <rcl_wait_set_init+0x26>
 8012244:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012246:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8012248:	4798      	blx	r3
 801224a:	4628      	mov	r0, r5
 801224c:	6326      	str	r6, [r4, #48]	; 0x30
 801224e:	b004      	add	sp, #16
 8012250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012254:	250b      	movs	r5, #11
 8012256:	4628      	mov	r0, r5
 8012258:	b004      	add	sp, #16
 801225a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801225e:	2501      	movs	r5, #1
 8012260:	f002 f974 	bl	801454c <rmw_destroy_wait_set>
 8012264:	2800      	cmp	r0, #0
 8012266:	bf18      	it	ne
 8012268:	f44f 7561 	movne.w	r5, #900	; 0x384
 801226c:	e7dd      	b.n	801222a <rcl_wait_set_init+0xca>
 801226e:	2565      	movs	r5, #101	; 0x65
 8012270:	e789      	b.n	8012186 <rcl_wait_set_init+0x26>
 8012272:	250a      	movs	r5, #10
 8012274:	e787      	b.n	8012186 <rcl_wait_set_init+0x26>
 8012276:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012278:	e7f2      	b.n	8012260 <rcl_wait_set_init+0x100>
 801227a:	bf00      	nop

0801227c <rcl_wait_set_add_guard_condition>:
 801227c:	b318      	cbz	r0, 80122c6 <rcl_wait_set_add_guard_condition+0x4a>
 801227e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012280:	b570      	push	{r4, r5, r6, lr}
 8012282:	4604      	mov	r4, r0
 8012284:	b30b      	cbz	r3, 80122ca <rcl_wait_set_add_guard_condition+0x4e>
 8012286:	b319      	cbz	r1, 80122d0 <rcl_wait_set_add_guard_condition+0x54>
 8012288:	68dd      	ldr	r5, [r3, #12]
 801228a:	68c0      	ldr	r0, [r0, #12]
 801228c:	4285      	cmp	r5, r0
 801228e:	d217      	bcs.n	80122c0 <rcl_wait_set_add_guard_condition+0x44>
 8012290:	68a0      	ldr	r0, [r4, #8]
 8012292:	1c6e      	adds	r6, r5, #1
 8012294:	60de      	str	r6, [r3, #12]
 8012296:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801229a:	b102      	cbz	r2, 801229e <rcl_wait_set_add_guard_condition+0x22>
 801229c:	6015      	str	r5, [r2, #0]
 801229e:	4608      	mov	r0, r1
 80122a0:	f7fe fb90 	bl	80109c4 <rcl_guard_condition_get_rmw_handle>
 80122a4:	b150      	cbz	r0, 80122bc <rcl_wait_set_add_guard_condition+0x40>
 80122a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80122a8:	6842      	ldr	r2, [r0, #4]
 80122aa:	695b      	ldr	r3, [r3, #20]
 80122ac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80122b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80122b2:	6913      	ldr	r3, [r2, #16]
 80122b4:	3301      	adds	r3, #1
 80122b6:	2000      	movs	r0, #0
 80122b8:	6113      	str	r3, [r2, #16]
 80122ba:	bd70      	pop	{r4, r5, r6, pc}
 80122bc:	2001      	movs	r0, #1
 80122be:	bd70      	pop	{r4, r5, r6, pc}
 80122c0:	f240 3086 	movw	r0, #902	; 0x386
 80122c4:	bd70      	pop	{r4, r5, r6, pc}
 80122c6:	200b      	movs	r0, #11
 80122c8:	4770      	bx	lr
 80122ca:	f44f 7061 	mov.w	r0, #900	; 0x384
 80122ce:	bd70      	pop	{r4, r5, r6, pc}
 80122d0:	200b      	movs	r0, #11
 80122d2:	bd70      	pop	{r4, r5, r6, pc}

080122d4 <rcl_wait_set_add_timer>:
 80122d4:	b328      	cbz	r0, 8012322 <rcl_wait_set_add_timer+0x4e>
 80122d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80122d8:	b570      	push	{r4, r5, r6, lr}
 80122da:	4604      	mov	r4, r0
 80122dc:	b31b      	cbz	r3, 8012326 <rcl_wait_set_add_timer+0x52>
 80122de:	b329      	cbz	r1, 801232c <rcl_wait_set_add_timer+0x58>
 80122e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80122e2:	6965      	ldr	r5, [r4, #20]
 80122e4:	42a8      	cmp	r0, r5
 80122e6:	d219      	bcs.n	801231c <rcl_wait_set_add_timer+0x48>
 80122e8:	6925      	ldr	r5, [r4, #16]
 80122ea:	1c46      	adds	r6, r0, #1
 80122ec:	641e      	str	r6, [r3, #64]	; 0x40
 80122ee:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80122f2:	b102      	cbz	r2, 80122f6 <rcl_wait_set_add_timer+0x22>
 80122f4:	6010      	str	r0, [r2, #0]
 80122f6:	4608      	mov	r0, r1
 80122f8:	f7ff fba6 	bl	8011a48 <rcl_timer_get_guard_condition>
 80122fc:	b168      	cbz	r0, 801231a <rcl_wait_set_add_timer+0x46>
 80122fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012300:	68e3      	ldr	r3, [r4, #12]
 8012302:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8012304:	3b01      	subs	r3, #1
 8012306:	441d      	add	r5, r3
 8012308:	f7fe fb5c 	bl	80109c4 <rcl_guard_condition_get_rmw_handle>
 801230c:	b180      	cbz	r0, 8012330 <rcl_wait_set_add_timer+0x5c>
 801230e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012310:	6842      	ldr	r2, [r0, #4]
 8012312:	695b      	ldr	r3, [r3, #20]
 8012314:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012318:	2000      	movs	r0, #0
 801231a:	bd70      	pop	{r4, r5, r6, pc}
 801231c:	f240 3086 	movw	r0, #902	; 0x386
 8012320:	bd70      	pop	{r4, r5, r6, pc}
 8012322:	200b      	movs	r0, #11
 8012324:	4770      	bx	lr
 8012326:	f44f 7061 	mov.w	r0, #900	; 0x384
 801232a:	bd70      	pop	{r4, r5, r6, pc}
 801232c:	200b      	movs	r0, #11
 801232e:	bd70      	pop	{r4, r5, r6, pc}
 8012330:	2001      	movs	r0, #1
 8012332:	bd70      	pop	{r4, r5, r6, pc}

08012334 <rcl_wait_set_add_client>:
 8012334:	b318      	cbz	r0, 801237e <rcl_wait_set_add_client+0x4a>
 8012336:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012338:	b570      	push	{r4, r5, r6, lr}
 801233a:	4604      	mov	r4, r0
 801233c:	b30b      	cbz	r3, 8012382 <rcl_wait_set_add_client+0x4e>
 801233e:	b319      	cbz	r1, 8012388 <rcl_wait_set_add_client+0x54>
 8012340:	699d      	ldr	r5, [r3, #24]
 8012342:	69c0      	ldr	r0, [r0, #28]
 8012344:	4285      	cmp	r5, r0
 8012346:	d217      	bcs.n	8012378 <rcl_wait_set_add_client+0x44>
 8012348:	69a0      	ldr	r0, [r4, #24]
 801234a:	1c6e      	adds	r6, r5, #1
 801234c:	619e      	str	r6, [r3, #24]
 801234e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012352:	b102      	cbz	r2, 8012356 <rcl_wait_set_add_client+0x22>
 8012354:	6015      	str	r5, [r2, #0]
 8012356:	4608      	mov	r0, r1
 8012358:	f7fe f91a 	bl	8010590 <rcl_client_get_rmw_handle>
 801235c:	b150      	cbz	r0, 8012374 <rcl_wait_set_add_client+0x40>
 801235e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012360:	6842      	ldr	r2, [r0, #4]
 8012362:	6a1b      	ldr	r3, [r3, #32]
 8012364:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012368:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801236a:	69d3      	ldr	r3, [r2, #28]
 801236c:	3301      	adds	r3, #1
 801236e:	2000      	movs	r0, #0
 8012370:	61d3      	str	r3, [r2, #28]
 8012372:	bd70      	pop	{r4, r5, r6, pc}
 8012374:	2001      	movs	r0, #1
 8012376:	bd70      	pop	{r4, r5, r6, pc}
 8012378:	f240 3086 	movw	r0, #902	; 0x386
 801237c:	bd70      	pop	{r4, r5, r6, pc}
 801237e:	200b      	movs	r0, #11
 8012380:	4770      	bx	lr
 8012382:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012386:	bd70      	pop	{r4, r5, r6, pc}
 8012388:	200b      	movs	r0, #11
 801238a:	bd70      	pop	{r4, r5, r6, pc}

0801238c <rcl_wait_set_add_service>:
 801238c:	b318      	cbz	r0, 80123d6 <rcl_wait_set_add_service+0x4a>
 801238e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012390:	b570      	push	{r4, r5, r6, lr}
 8012392:	4604      	mov	r4, r0
 8012394:	b30b      	cbz	r3, 80123da <rcl_wait_set_add_service+0x4e>
 8012396:	b319      	cbz	r1, 80123e0 <rcl_wait_set_add_service+0x54>
 8012398:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801239a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801239c:	4285      	cmp	r5, r0
 801239e:	d217      	bcs.n	80123d0 <rcl_wait_set_add_service+0x44>
 80123a0:	6a20      	ldr	r0, [r4, #32]
 80123a2:	1c6e      	adds	r6, r5, #1
 80123a4:	625e      	str	r6, [r3, #36]	; 0x24
 80123a6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80123aa:	b102      	cbz	r2, 80123ae <rcl_wait_set_add_service+0x22>
 80123ac:	6015      	str	r5, [r2, #0]
 80123ae:	4608      	mov	r0, r1
 80123b0:	f7fe fed6 	bl	8011160 <rcl_service_get_rmw_handle>
 80123b4:	b150      	cbz	r0, 80123cc <rcl_wait_set_add_service+0x40>
 80123b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80123b8:	6842      	ldr	r2, [r0, #4]
 80123ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80123c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80123c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80123c4:	3301      	adds	r3, #1
 80123c6:	2000      	movs	r0, #0
 80123c8:	6293      	str	r3, [r2, #40]	; 0x28
 80123ca:	bd70      	pop	{r4, r5, r6, pc}
 80123cc:	2001      	movs	r0, #1
 80123ce:	bd70      	pop	{r4, r5, r6, pc}
 80123d0:	f240 3086 	movw	r0, #902	; 0x386
 80123d4:	bd70      	pop	{r4, r5, r6, pc}
 80123d6:	200b      	movs	r0, #11
 80123d8:	4770      	bx	lr
 80123da:	f44f 7061 	mov.w	r0, #900	; 0x384
 80123de:	bd70      	pop	{r4, r5, r6, pc}
 80123e0:	200b      	movs	r0, #11
 80123e2:	bd70      	pop	{r4, r5, r6, pc}
 80123e4:	0000      	movs	r0, r0
	...

080123e8 <rcl_wait>:
 80123e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ec:	ed2d 8b02 	vpush	{d8}
 80123f0:	b08d      	sub	sp, #52	; 0x34
 80123f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80123f6:	2800      	cmp	r0, #0
 80123f8:	f000 8143 	beq.w	8012682 <rcl_wait+0x29a>
 80123fc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80123fe:	4605      	mov	r5, r0
 8012400:	2e00      	cmp	r6, #0
 8012402:	f000 8112 	beq.w	801262a <rcl_wait+0x242>
 8012406:	6843      	ldr	r3, [r0, #4]
 8012408:	b983      	cbnz	r3, 801242c <rcl_wait+0x44>
 801240a:	68eb      	ldr	r3, [r5, #12]
 801240c:	b973      	cbnz	r3, 801242c <rcl_wait+0x44>
 801240e:	696b      	ldr	r3, [r5, #20]
 8012410:	b963      	cbnz	r3, 801242c <rcl_wait+0x44>
 8012412:	69eb      	ldr	r3, [r5, #28]
 8012414:	b953      	cbnz	r3, 801242c <rcl_wait+0x44>
 8012416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012418:	b943      	cbnz	r3, 801242c <rcl_wait+0x44>
 801241a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801241c:	b933      	cbnz	r3, 801242c <rcl_wait+0x44>
 801241e:	f240 3085 	movw	r0, #901	; 0x385
 8012422:	b00d      	add	sp, #52	; 0x34
 8012424:	ecbd 8b02 	vpop	{d8}
 8012428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801242c:	9b04      	ldr	r3, [sp, #16]
 801242e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8012430:	2b01      	cmp	r3, #1
 8012432:	9b05      	ldr	r3, [sp, #20]
 8012434:	f173 0300 	sbcs.w	r3, r3, #0
 8012438:	f2c0 80f0 	blt.w	801261c <rcl_wait+0x234>
 801243c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012440:	4643      	mov	r3, r8
 8012442:	2a00      	cmp	r2, #0
 8012444:	f000 8133 	beq.w	80126ae <rcl_wait+0x2c6>
 8012448:	2400      	movs	r4, #0
 801244a:	4613      	mov	r3, r2
 801244c:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 80126c0 <rcl_wait+0x2d8>
 8012450:	46a2      	mov	sl, r4
 8012452:	46a3      	mov	fp, r4
 8012454:	f240 3921 	movw	r9, #801	; 0x321
 8012458:	4632      	mov	r2, r6
 801245a:	e014      	b.n	8012486 <rcl_wait+0x9e>
 801245c:	2800      	cmp	r0, #0
 801245e:	d1e0      	bne.n	8012422 <rcl_wait+0x3a>
 8012460:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012464:	4542      	cmp	r2, r8
 8012466:	eb73 0107 	sbcs.w	r1, r3, r7
 801246a:	da03      	bge.n	8012474 <rcl_wait+0x8c>
 801246c:	4690      	mov	r8, r2
 801246e:	461f      	mov	r7, r3
 8012470:	f04f 0b01 	mov.w	fp, #1
 8012474:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8012476:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012478:	3401      	adds	r4, #1
 801247a:	f14a 0a00 	adc.w	sl, sl, #0
 801247e:	429c      	cmp	r4, r3
 8012480:	f17a 0100 	sbcs.w	r1, sl, #0
 8012484:	d228      	bcs.n	80124d8 <rcl_wait+0xf0>
 8012486:	6928      	ldr	r0, [r5, #16]
 8012488:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801248c:	a908      	add	r1, sp, #32
 801248e:	00a6      	lsls	r6, r4, #2
 8012490:	2800      	cmp	r0, #0
 8012492:	d0f1      	beq.n	8012478 <rcl_wait+0x90>
 8012494:	68eb      	ldr	r3, [r5, #12]
 8012496:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801249a:	4423      	add	r3, r4
 801249c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80124a0:	f1be 0f00 	cmp.w	lr, #0
 80124a4:	d006      	beq.n	80124b4 <rcl_wait+0xcc>
 80124a6:	6913      	ldr	r3, [r2, #16]
 80124a8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80124ac:	3301      	adds	r3, #1
 80124ae:	6113      	str	r3, [r2, #16]
 80124b0:	692b      	ldr	r3, [r5, #16]
 80124b2:	5998      	ldr	r0, [r3, r6]
 80124b4:	ed8d 8b08 	vstr	d8, [sp, #32]
 80124b8:	f7ff fa94 	bl	80119e4 <rcl_timer_get_time_until_next_call>
 80124bc:	4548      	cmp	r0, r9
 80124be:	d1cd      	bne.n	801245c <rcl_wait+0x74>
 80124c0:	692b      	ldr	r3, [r5, #16]
 80124c2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80124c4:	2100      	movs	r1, #0
 80124c6:	5199      	str	r1, [r3, r6]
 80124c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80124ca:	3401      	adds	r4, #1
 80124cc:	f14a 0a00 	adc.w	sl, sl, #0
 80124d0:	429c      	cmp	r4, r3
 80124d2:	f17a 0100 	sbcs.w	r1, sl, #0
 80124d6:	d3d6      	bcc.n	8012486 <rcl_wait+0x9e>
 80124d8:	4616      	mov	r6, r2
 80124da:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80124de:	4313      	orrs	r3, r2
 80124e0:	46d9      	mov	r9, fp
 80124e2:	f040 80a9 	bne.w	8012638 <rcl_wait+0x250>
 80124e6:	2300      	movs	r3, #0
 80124e8:	2200      	movs	r2, #0
 80124ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80124ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80124f2:	ab08      	add	r3, sp, #32
 80124f4:	9302      	str	r3, [sp, #8]
 80124f6:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80124f8:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80124fc:	e9cd 3200 	strd	r3, r2, [sp]
 8012500:	f106 0110 	add.w	r1, r6, #16
 8012504:	f106 031c 	add.w	r3, r6, #28
 8012508:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801250c:	1d30      	adds	r0, r6, #4
 801250e:	f001 fe9b 	bl	8014248 <rmw_wait>
 8012512:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012516:	4680      	mov	r8, r0
 8012518:	b1ca      	cbz	r2, 801254e <rcl_wait+0x166>
 801251a:	2400      	movs	r4, #0
 801251c:	4627      	mov	r7, r4
 801251e:	692a      	ldr	r2, [r5, #16]
 8012520:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8012524:	f10d 011f 	add.w	r1, sp, #31
 8012528:	00a6      	lsls	r6, r4, #2
 801252a:	b160      	cbz	r0, 8012546 <rcl_wait+0x15e>
 801252c:	f88d 701f 	strb.w	r7, [sp, #31]
 8012530:	f7ff fa1e 	bl	8011970 <rcl_timer_is_ready>
 8012534:	2800      	cmp	r0, #0
 8012536:	f47f af74 	bne.w	8012422 <rcl_wait+0x3a>
 801253a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801253e:	b90b      	cbnz	r3, 8012544 <rcl_wait+0x15c>
 8012540:	692a      	ldr	r2, [r5, #16]
 8012542:	5193      	str	r3, [r2, r6]
 8012544:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012548:	3401      	adds	r4, #1
 801254a:	42a2      	cmp	r2, r4
 801254c:	d8e7      	bhi.n	801251e <rcl_wait+0x136>
 801254e:	f038 0002 	bics.w	r0, r8, #2
 8012552:	f040 8090 	bne.w	8012676 <rcl_wait+0x28e>
 8012556:	686e      	ldr	r6, [r5, #4]
 8012558:	4602      	mov	r2, r0
 801255a:	b91e      	cbnz	r6, 8012564 <rcl_wait+0x17c>
 801255c:	e00d      	b.n	801257a <rcl_wait+0x192>
 801255e:	3201      	adds	r2, #1
 8012560:	42b2      	cmp	r2, r6
 8012562:	d00a      	beq.n	801257a <rcl_wait+0x192>
 8012564:	6899      	ldr	r1, [r3, #8]
 8012566:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801256a:	2900      	cmp	r1, #0
 801256c:	d1f7      	bne.n	801255e <rcl_wait+0x176>
 801256e:	682c      	ldr	r4, [r5, #0]
 8012570:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012574:	3201      	adds	r2, #1
 8012576:	42b2      	cmp	r2, r6
 8012578:	d1f4      	bne.n	8012564 <rcl_wait+0x17c>
 801257a:	68ee      	ldr	r6, [r5, #12]
 801257c:	2200      	movs	r2, #0
 801257e:	b91e      	cbnz	r6, 8012588 <rcl_wait+0x1a0>
 8012580:	e00d      	b.n	801259e <rcl_wait+0x1b6>
 8012582:	3201      	adds	r2, #1
 8012584:	42b2      	cmp	r2, r6
 8012586:	d00a      	beq.n	801259e <rcl_wait+0x1b6>
 8012588:	6959      	ldr	r1, [r3, #20]
 801258a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801258e:	2900      	cmp	r1, #0
 8012590:	d1f7      	bne.n	8012582 <rcl_wait+0x19a>
 8012592:	68ac      	ldr	r4, [r5, #8]
 8012594:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012598:	3201      	adds	r2, #1
 801259a:	42b2      	cmp	r2, r6
 801259c:	d1f4      	bne.n	8012588 <rcl_wait+0x1a0>
 801259e:	69ee      	ldr	r6, [r5, #28]
 80125a0:	2200      	movs	r2, #0
 80125a2:	b91e      	cbnz	r6, 80125ac <rcl_wait+0x1c4>
 80125a4:	e00d      	b.n	80125c2 <rcl_wait+0x1da>
 80125a6:	3201      	adds	r2, #1
 80125a8:	42b2      	cmp	r2, r6
 80125aa:	d00a      	beq.n	80125c2 <rcl_wait+0x1da>
 80125ac:	6a19      	ldr	r1, [r3, #32]
 80125ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80125b2:	2900      	cmp	r1, #0
 80125b4:	d1f7      	bne.n	80125a6 <rcl_wait+0x1be>
 80125b6:	69ac      	ldr	r4, [r5, #24]
 80125b8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80125bc:	3201      	adds	r2, #1
 80125be:	42b2      	cmp	r2, r6
 80125c0:	d1f4      	bne.n	80125ac <rcl_wait+0x1c4>
 80125c2:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80125c4:	2200      	movs	r2, #0
 80125c6:	b91e      	cbnz	r6, 80125d0 <rcl_wait+0x1e8>
 80125c8:	e00d      	b.n	80125e6 <rcl_wait+0x1fe>
 80125ca:	3201      	adds	r2, #1
 80125cc:	4296      	cmp	r6, r2
 80125ce:	d00a      	beq.n	80125e6 <rcl_wait+0x1fe>
 80125d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80125d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80125d6:	2900      	cmp	r1, #0
 80125d8:	d1f7      	bne.n	80125ca <rcl_wait+0x1e2>
 80125da:	6a2c      	ldr	r4, [r5, #32]
 80125dc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80125e0:	3201      	adds	r2, #1
 80125e2:	4296      	cmp	r6, r2
 80125e4:	d1f4      	bne.n	80125d0 <rcl_wait+0x1e8>
 80125e6:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 80125e8:	2200      	movs	r2, #0
 80125ea:	b91e      	cbnz	r6, 80125f4 <rcl_wait+0x20c>
 80125ec:	e00d      	b.n	801260a <rcl_wait+0x222>
 80125ee:	3201      	adds	r2, #1
 80125f0:	42b2      	cmp	r2, r6
 80125f2:	d00a      	beq.n	801260a <rcl_wait+0x222>
 80125f4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80125f6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80125fa:	2900      	cmp	r1, #0
 80125fc:	d1f7      	bne.n	80125ee <rcl_wait+0x206>
 80125fe:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8012600:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012604:	3201      	adds	r2, #1
 8012606:	42b2      	cmp	r2, r6
 8012608:	d1f4      	bne.n	80125f4 <rcl_wait+0x20c>
 801260a:	f1b8 0f02 	cmp.w	r8, #2
 801260e:	f47f af08 	bne.w	8012422 <rcl_wait+0x3a>
 8012612:	464b      	mov	r3, r9
 8012614:	2b00      	cmp	r3, #0
 8012616:	bf08      	it	eq
 8012618:	2002      	moveq	r0, #2
 801261a:	e702      	b.n	8012422 <rcl_wait+0x3a>
 801261c:	2a00      	cmp	r2, #0
 801261e:	d03a      	beq.n	8012696 <rcl_wait+0x2ae>
 8012620:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012624:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8012628:	e70e      	b.n	8012448 <rcl_wait+0x60>
 801262a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801262e:	b00d      	add	sp, #52	; 0x34
 8012630:	ecbd 8b02 	vpop	{d8}
 8012634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012638:	9b04      	ldr	r3, [sp, #16]
 801263a:	2b01      	cmp	r3, #1
 801263c:	9b05      	ldr	r3, [sp, #20]
 801263e:	f173 0300 	sbcs.w	r3, r3, #0
 8012642:	db24      	blt.n	801268e <rcl_wait+0x2a6>
 8012644:	2f00      	cmp	r7, #0
 8012646:	bfbc      	itt	lt
 8012648:	f04f 0800 	movlt.w	r8, #0
 801264c:	4647      	movlt	r7, r8
 801264e:	a31e      	add	r3, pc, #120	; (adr r3, 80126c8 <rcl_wait+0x2e0>)
 8012650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012654:	4640      	mov	r0, r8
 8012656:	4639      	mov	r1, r7
 8012658:	f7ed fe22 	bl	80002a0 <__aeabi_ldivmod>
 801265c:	a31a      	add	r3, pc, #104	; (adr r3, 80126c8 <rcl_wait+0x2e0>)
 801265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012662:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012666:	4640      	mov	r0, r8
 8012668:	4639      	mov	r1, r7
 801266a:	f7ed fe19 	bl	80002a0 <__aeabi_ldivmod>
 801266e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012672:	ab08      	add	r3, sp, #32
 8012674:	e73e      	b.n	80124f4 <rcl_wait+0x10c>
 8012676:	2001      	movs	r0, #1
 8012678:	b00d      	add	sp, #52	; 0x34
 801267a:	ecbd 8b02 	vpop	{d8}
 801267e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012682:	200b      	movs	r0, #11
 8012684:	b00d      	add	sp, #52	; 0x34
 8012686:	ecbd 8b02 	vpop	{d8}
 801268a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801268e:	465b      	mov	r3, fp
 8012690:	2b00      	cmp	r3, #0
 8012692:	d1d7      	bne.n	8012644 <rcl_wait+0x25c>
 8012694:	e72e      	b.n	80124f4 <rcl_wait+0x10c>
 8012696:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801269a:	430b      	orrs	r3, r1
 801269c:	bf08      	it	eq
 801269e:	4691      	moveq	r9, r2
 80126a0:	f43f af21 	beq.w	80124e6 <rcl_wait+0xfe>
 80126a4:	9b04      	ldr	r3, [sp, #16]
 80126a6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80126aa:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80126ae:	2b01      	cmp	r3, #1
 80126b0:	9b05      	ldr	r3, [sp, #20]
 80126b2:	f173 0300 	sbcs.w	r3, r3, #0
 80126b6:	f04f 0300 	mov.w	r3, #0
 80126ba:	4699      	mov	r9, r3
 80126bc:	dac2      	bge.n	8012644 <rcl_wait+0x25c>
 80126be:	e719      	b.n	80124f4 <rcl_wait+0x10c>
 80126c0:	ffffffff 	.word	0xffffffff
 80126c4:	7fffffff 	.word	0x7fffffff
 80126c8:	3b9aca00 	.word	0x3b9aca00
 80126cc:	00000000 	.word	0x00000000

080126d0 <rcl_action_take_goal_response>:
 80126d0:	2800      	cmp	r0, #0
 80126d2:	d039      	beq.n	8012748 <rcl_action_take_goal_response+0x78>
 80126d4:	b570      	push	{r4, r5, r6, lr}
 80126d6:	4604      	mov	r4, r0
 80126d8:	6800      	ldr	r0, [r0, #0]
 80126da:	b380      	cbz	r0, 801273e <rcl_action_take_goal_response+0x6e>
 80126dc:	460d      	mov	r5, r1
 80126de:	4616      	mov	r6, r2
 80126e0:	f7fd ffda 	bl	8010698 <rcl_client_is_valid>
 80126e4:	b330      	cbz	r0, 8012734 <rcl_action_take_goal_response+0x64>
 80126e6:	6820      	ldr	r0, [r4, #0]
 80126e8:	3004      	adds	r0, #4
 80126ea:	f7fd ffd5 	bl	8010698 <rcl_client_is_valid>
 80126ee:	b308      	cbz	r0, 8012734 <rcl_action_take_goal_response+0x64>
 80126f0:	6820      	ldr	r0, [r4, #0]
 80126f2:	3008      	adds	r0, #8
 80126f4:	f7fd ffd0 	bl	8010698 <rcl_client_is_valid>
 80126f8:	b1e0      	cbz	r0, 8012734 <rcl_action_take_goal_response+0x64>
 80126fa:	6820      	ldr	r0, [r4, #0]
 80126fc:	300c      	adds	r0, #12
 80126fe:	f7fe fdf5 	bl	80112ec <rcl_subscription_is_valid>
 8012702:	b1b8      	cbz	r0, 8012734 <rcl_action_take_goal_response+0x64>
 8012704:	6820      	ldr	r0, [r4, #0]
 8012706:	3010      	adds	r0, #16
 8012708:	f7fe fdf0 	bl	80112ec <rcl_subscription_is_valid>
 801270c:	b190      	cbz	r0, 8012734 <rcl_action_take_goal_response+0x64>
 801270e:	b1cd      	cbz	r5, 8012744 <rcl_action_take_goal_response+0x74>
 8012710:	b1c6      	cbz	r6, 8012744 <rcl_action_take_goal_response+0x74>
 8012712:	6820      	ldr	r0, [r4, #0]
 8012714:	4632      	mov	r2, r6
 8012716:	4629      	mov	r1, r5
 8012718:	f7fd ff76 	bl	8010608 <rcl_take_response>
 801271c:	b148      	cbz	r0, 8012732 <rcl_action_take_goal_response+0x62>
 801271e:	280a      	cmp	r0, #10
 8012720:	d007      	beq.n	8012732 <rcl_action_take_goal_response+0x62>
 8012722:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012726:	f640 0337 	movw	r3, #2103	; 0x837
 801272a:	4290      	cmp	r0, r2
 801272c:	bf0c      	ite	eq
 801272e:	4618      	moveq	r0, r3
 8012730:	2001      	movne	r0, #1
 8012732:	bd70      	pop	{r4, r5, r6, pc}
 8012734:	f7f8 ff30 	bl	800b598 <rcutils_reset_error>
 8012738:	f640 0036 	movw	r0, #2102	; 0x836
 801273c:	bd70      	pop	{r4, r5, r6, pc}
 801273e:	f640 0036 	movw	r0, #2102	; 0x836
 8012742:	bd70      	pop	{r4, r5, r6, pc}
 8012744:	200b      	movs	r0, #11
 8012746:	bd70      	pop	{r4, r5, r6, pc}
 8012748:	f640 0036 	movw	r0, #2102	; 0x836
 801274c:	4770      	bx	lr
 801274e:	bf00      	nop

08012750 <rcl_action_send_result_request>:
 8012750:	b390      	cbz	r0, 80127b8 <rcl_action_send_result_request+0x68>
 8012752:	b570      	push	{r4, r5, r6, lr}
 8012754:	4604      	mov	r4, r0
 8012756:	6800      	ldr	r0, [r0, #0]
 8012758:	b348      	cbz	r0, 80127ae <rcl_action_send_result_request+0x5e>
 801275a:	460d      	mov	r5, r1
 801275c:	4616      	mov	r6, r2
 801275e:	f7fd ff9b 	bl	8010698 <rcl_client_is_valid>
 8012762:	b1f8      	cbz	r0, 80127a4 <rcl_action_send_result_request+0x54>
 8012764:	6820      	ldr	r0, [r4, #0]
 8012766:	3004      	adds	r0, #4
 8012768:	f7fd ff96 	bl	8010698 <rcl_client_is_valid>
 801276c:	b1d0      	cbz	r0, 80127a4 <rcl_action_send_result_request+0x54>
 801276e:	6820      	ldr	r0, [r4, #0]
 8012770:	3008      	adds	r0, #8
 8012772:	f7fd ff91 	bl	8010698 <rcl_client_is_valid>
 8012776:	b1a8      	cbz	r0, 80127a4 <rcl_action_send_result_request+0x54>
 8012778:	6820      	ldr	r0, [r4, #0]
 801277a:	300c      	adds	r0, #12
 801277c:	f7fe fdb6 	bl	80112ec <rcl_subscription_is_valid>
 8012780:	b180      	cbz	r0, 80127a4 <rcl_action_send_result_request+0x54>
 8012782:	6820      	ldr	r0, [r4, #0]
 8012784:	3010      	adds	r0, #16
 8012786:	f7fe fdb1 	bl	80112ec <rcl_subscription_is_valid>
 801278a:	b158      	cbz	r0, 80127a4 <rcl_action_send_result_request+0x54>
 801278c:	b195      	cbz	r5, 80127b4 <rcl_action_send_result_request+0x64>
 801278e:	b18e      	cbz	r6, 80127b4 <rcl_action_send_result_request+0x64>
 8012790:	6820      	ldr	r0, [r4, #0]
 8012792:	4632      	mov	r2, r6
 8012794:	4629      	mov	r1, r5
 8012796:	3008      	adds	r0, #8
 8012798:	f7fd ff00 	bl	801059c <rcl_send_request>
 801279c:	3800      	subs	r0, #0
 801279e:	bf18      	it	ne
 80127a0:	2001      	movne	r0, #1
 80127a2:	bd70      	pop	{r4, r5, r6, pc}
 80127a4:	f7f8 fef8 	bl	800b598 <rcutils_reset_error>
 80127a8:	f640 0036 	movw	r0, #2102	; 0x836
 80127ac:	bd70      	pop	{r4, r5, r6, pc}
 80127ae:	f640 0036 	movw	r0, #2102	; 0x836
 80127b2:	bd70      	pop	{r4, r5, r6, pc}
 80127b4:	200b      	movs	r0, #11
 80127b6:	bd70      	pop	{r4, r5, r6, pc}
 80127b8:	f640 0036 	movw	r0, #2102	; 0x836
 80127bc:	4770      	bx	lr
 80127be:	bf00      	nop

080127c0 <rcl_action_take_result_response>:
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d03a      	beq.n	801283a <rcl_action_take_result_response+0x7a>
 80127c4:	b570      	push	{r4, r5, r6, lr}
 80127c6:	4604      	mov	r4, r0
 80127c8:	6800      	ldr	r0, [r0, #0]
 80127ca:	b388      	cbz	r0, 8012830 <rcl_action_take_result_response+0x70>
 80127cc:	460d      	mov	r5, r1
 80127ce:	4616      	mov	r6, r2
 80127d0:	f7fd ff62 	bl	8010698 <rcl_client_is_valid>
 80127d4:	b338      	cbz	r0, 8012826 <rcl_action_take_result_response+0x66>
 80127d6:	6820      	ldr	r0, [r4, #0]
 80127d8:	3004      	adds	r0, #4
 80127da:	f7fd ff5d 	bl	8010698 <rcl_client_is_valid>
 80127de:	b310      	cbz	r0, 8012826 <rcl_action_take_result_response+0x66>
 80127e0:	6820      	ldr	r0, [r4, #0]
 80127e2:	3008      	adds	r0, #8
 80127e4:	f7fd ff58 	bl	8010698 <rcl_client_is_valid>
 80127e8:	b1e8      	cbz	r0, 8012826 <rcl_action_take_result_response+0x66>
 80127ea:	6820      	ldr	r0, [r4, #0]
 80127ec:	300c      	adds	r0, #12
 80127ee:	f7fe fd7d 	bl	80112ec <rcl_subscription_is_valid>
 80127f2:	b1c0      	cbz	r0, 8012826 <rcl_action_take_result_response+0x66>
 80127f4:	6820      	ldr	r0, [r4, #0]
 80127f6:	3010      	adds	r0, #16
 80127f8:	f7fe fd78 	bl	80112ec <rcl_subscription_is_valid>
 80127fc:	b198      	cbz	r0, 8012826 <rcl_action_take_result_response+0x66>
 80127fe:	b1d5      	cbz	r5, 8012836 <rcl_action_take_result_response+0x76>
 8012800:	b1ce      	cbz	r6, 8012836 <rcl_action_take_result_response+0x76>
 8012802:	6820      	ldr	r0, [r4, #0]
 8012804:	4632      	mov	r2, r6
 8012806:	4629      	mov	r1, r5
 8012808:	3008      	adds	r0, #8
 801280a:	f7fd fefd 	bl	8010608 <rcl_take_response>
 801280e:	b148      	cbz	r0, 8012824 <rcl_action_take_result_response+0x64>
 8012810:	280a      	cmp	r0, #10
 8012812:	d007      	beq.n	8012824 <rcl_action_take_result_response+0x64>
 8012814:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012818:	f640 0337 	movw	r3, #2103	; 0x837
 801281c:	4290      	cmp	r0, r2
 801281e:	bf0c      	ite	eq
 8012820:	4618      	moveq	r0, r3
 8012822:	2001      	movne	r0, #1
 8012824:	bd70      	pop	{r4, r5, r6, pc}
 8012826:	f7f8 feb7 	bl	800b598 <rcutils_reset_error>
 801282a:	f640 0036 	movw	r0, #2102	; 0x836
 801282e:	bd70      	pop	{r4, r5, r6, pc}
 8012830:	f640 0036 	movw	r0, #2102	; 0x836
 8012834:	bd70      	pop	{r4, r5, r6, pc}
 8012836:	200b      	movs	r0, #11
 8012838:	bd70      	pop	{r4, r5, r6, pc}
 801283a:	f640 0036 	movw	r0, #2102	; 0x836
 801283e:	4770      	bx	lr

08012840 <rcl_action_take_cancel_response>:
 8012840:	2800      	cmp	r0, #0
 8012842:	d03a      	beq.n	80128ba <rcl_action_take_cancel_response+0x7a>
 8012844:	b570      	push	{r4, r5, r6, lr}
 8012846:	4604      	mov	r4, r0
 8012848:	6800      	ldr	r0, [r0, #0]
 801284a:	b388      	cbz	r0, 80128b0 <rcl_action_take_cancel_response+0x70>
 801284c:	460d      	mov	r5, r1
 801284e:	4616      	mov	r6, r2
 8012850:	f7fd ff22 	bl	8010698 <rcl_client_is_valid>
 8012854:	b338      	cbz	r0, 80128a6 <rcl_action_take_cancel_response+0x66>
 8012856:	6820      	ldr	r0, [r4, #0]
 8012858:	3004      	adds	r0, #4
 801285a:	f7fd ff1d 	bl	8010698 <rcl_client_is_valid>
 801285e:	b310      	cbz	r0, 80128a6 <rcl_action_take_cancel_response+0x66>
 8012860:	6820      	ldr	r0, [r4, #0]
 8012862:	3008      	adds	r0, #8
 8012864:	f7fd ff18 	bl	8010698 <rcl_client_is_valid>
 8012868:	b1e8      	cbz	r0, 80128a6 <rcl_action_take_cancel_response+0x66>
 801286a:	6820      	ldr	r0, [r4, #0]
 801286c:	300c      	adds	r0, #12
 801286e:	f7fe fd3d 	bl	80112ec <rcl_subscription_is_valid>
 8012872:	b1c0      	cbz	r0, 80128a6 <rcl_action_take_cancel_response+0x66>
 8012874:	6820      	ldr	r0, [r4, #0]
 8012876:	3010      	adds	r0, #16
 8012878:	f7fe fd38 	bl	80112ec <rcl_subscription_is_valid>
 801287c:	b198      	cbz	r0, 80128a6 <rcl_action_take_cancel_response+0x66>
 801287e:	b1d5      	cbz	r5, 80128b6 <rcl_action_take_cancel_response+0x76>
 8012880:	b1ce      	cbz	r6, 80128b6 <rcl_action_take_cancel_response+0x76>
 8012882:	6820      	ldr	r0, [r4, #0]
 8012884:	4632      	mov	r2, r6
 8012886:	4629      	mov	r1, r5
 8012888:	3004      	adds	r0, #4
 801288a:	f7fd febd 	bl	8010608 <rcl_take_response>
 801288e:	b148      	cbz	r0, 80128a4 <rcl_action_take_cancel_response+0x64>
 8012890:	280a      	cmp	r0, #10
 8012892:	d007      	beq.n	80128a4 <rcl_action_take_cancel_response+0x64>
 8012894:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012898:	f640 0337 	movw	r3, #2103	; 0x837
 801289c:	4290      	cmp	r0, r2
 801289e:	bf0c      	ite	eq
 80128a0:	4618      	moveq	r0, r3
 80128a2:	2001      	movne	r0, #1
 80128a4:	bd70      	pop	{r4, r5, r6, pc}
 80128a6:	f7f8 fe77 	bl	800b598 <rcutils_reset_error>
 80128aa:	f640 0036 	movw	r0, #2102	; 0x836
 80128ae:	bd70      	pop	{r4, r5, r6, pc}
 80128b0:	f640 0036 	movw	r0, #2102	; 0x836
 80128b4:	bd70      	pop	{r4, r5, r6, pc}
 80128b6:	200b      	movs	r0, #11
 80128b8:	bd70      	pop	{r4, r5, r6, pc}
 80128ba:	f640 0036 	movw	r0, #2102	; 0x836
 80128be:	4770      	bx	lr

080128c0 <rcl_action_take_feedback>:
 80128c0:	2800      	cmp	r0, #0
 80128c2:	d038      	beq.n	8012936 <rcl_action_take_feedback+0x76>
 80128c4:	b530      	push	{r4, r5, lr}
 80128c6:	4604      	mov	r4, r0
 80128c8:	6800      	ldr	r0, [r0, #0]
 80128ca:	b091      	sub	sp, #68	; 0x44
 80128cc:	b378      	cbz	r0, 801292e <rcl_action_take_feedback+0x6e>
 80128ce:	460d      	mov	r5, r1
 80128d0:	f7fd fee2 	bl	8010698 <rcl_client_is_valid>
 80128d4:	b328      	cbz	r0, 8012922 <rcl_action_take_feedback+0x62>
 80128d6:	6820      	ldr	r0, [r4, #0]
 80128d8:	3004      	adds	r0, #4
 80128da:	f7fd fedd 	bl	8010698 <rcl_client_is_valid>
 80128de:	b300      	cbz	r0, 8012922 <rcl_action_take_feedback+0x62>
 80128e0:	6820      	ldr	r0, [r4, #0]
 80128e2:	3008      	adds	r0, #8
 80128e4:	f7fd fed8 	bl	8010698 <rcl_client_is_valid>
 80128e8:	b1d8      	cbz	r0, 8012922 <rcl_action_take_feedback+0x62>
 80128ea:	6820      	ldr	r0, [r4, #0]
 80128ec:	300c      	adds	r0, #12
 80128ee:	f7fe fcfd 	bl	80112ec <rcl_subscription_is_valid>
 80128f2:	b1b0      	cbz	r0, 8012922 <rcl_action_take_feedback+0x62>
 80128f4:	6820      	ldr	r0, [r4, #0]
 80128f6:	3010      	adds	r0, #16
 80128f8:	f7fe fcf8 	bl	80112ec <rcl_subscription_is_valid>
 80128fc:	b188      	cbz	r0, 8012922 <rcl_action_take_feedback+0x62>
 80128fe:	b1ed      	cbz	r5, 801293c <rcl_action_take_feedback+0x7c>
 8012900:	6820      	ldr	r0, [r4, #0]
 8012902:	2300      	movs	r3, #0
 8012904:	466a      	mov	r2, sp
 8012906:	4629      	mov	r1, r5
 8012908:	300c      	adds	r0, #12
 801290a:	f7fe fc91 	bl	8011230 <rcl_take>
 801290e:	b160      	cbz	r0, 801292a <rcl_action_take_feedback+0x6a>
 8012910:	f240 1391 	movw	r3, #401	; 0x191
 8012914:	4298      	cmp	r0, r3
 8012916:	d014      	beq.n	8012942 <rcl_action_take_feedback+0x82>
 8012918:	280a      	cmp	r0, #10
 801291a:	bf18      	it	ne
 801291c:	2001      	movne	r0, #1
 801291e:	b011      	add	sp, #68	; 0x44
 8012920:	bd30      	pop	{r4, r5, pc}
 8012922:	f7f8 fe39 	bl	800b598 <rcutils_reset_error>
 8012926:	f640 0036 	movw	r0, #2102	; 0x836
 801292a:	b011      	add	sp, #68	; 0x44
 801292c:	bd30      	pop	{r4, r5, pc}
 801292e:	f640 0036 	movw	r0, #2102	; 0x836
 8012932:	b011      	add	sp, #68	; 0x44
 8012934:	bd30      	pop	{r4, r5, pc}
 8012936:	f640 0036 	movw	r0, #2102	; 0x836
 801293a:	4770      	bx	lr
 801293c:	200b      	movs	r0, #11
 801293e:	b011      	add	sp, #68	; 0x44
 8012940:	bd30      	pop	{r4, r5, pc}
 8012942:	f640 0037 	movw	r0, #2103	; 0x837
 8012946:	e7f0      	b.n	801292a <rcl_action_take_feedback+0x6a>

08012948 <rcl_action_wait_set_add_action_client>:
 8012948:	2800      	cmp	r0, #0
 801294a:	d048      	beq.n	80129de <rcl_action_wait_set_add_action_client+0x96>
 801294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294e:	460c      	mov	r4, r1
 8012950:	2900      	cmp	r1, #0
 8012952:	d03c      	beq.n	80129ce <rcl_action_wait_set_add_action_client+0x86>
 8012954:	4605      	mov	r5, r0
 8012956:	6808      	ldr	r0, [r1, #0]
 8012958:	2800      	cmp	r0, #0
 801295a:	d038      	beq.n	80129ce <rcl_action_wait_set_add_action_client+0x86>
 801295c:	4617      	mov	r7, r2
 801295e:	461e      	mov	r6, r3
 8012960:	f7fd fe9a 	bl	8010698 <rcl_client_is_valid>
 8012964:	b3b0      	cbz	r0, 80129d4 <rcl_action_wait_set_add_action_client+0x8c>
 8012966:	6820      	ldr	r0, [r4, #0]
 8012968:	3004      	adds	r0, #4
 801296a:	f7fd fe95 	bl	8010698 <rcl_client_is_valid>
 801296e:	b388      	cbz	r0, 80129d4 <rcl_action_wait_set_add_action_client+0x8c>
 8012970:	6820      	ldr	r0, [r4, #0]
 8012972:	3008      	adds	r0, #8
 8012974:	f7fd fe90 	bl	8010698 <rcl_client_is_valid>
 8012978:	b360      	cbz	r0, 80129d4 <rcl_action_wait_set_add_action_client+0x8c>
 801297a:	6820      	ldr	r0, [r4, #0]
 801297c:	300c      	adds	r0, #12
 801297e:	f7fe fcb5 	bl	80112ec <rcl_subscription_is_valid>
 8012982:	b338      	cbz	r0, 80129d4 <rcl_action_wait_set_add_action_client+0x8c>
 8012984:	6820      	ldr	r0, [r4, #0]
 8012986:	3010      	adds	r0, #16
 8012988:	f7fe fcb0 	bl	80112ec <rcl_subscription_is_valid>
 801298c:	b310      	cbz	r0, 80129d4 <rcl_action_wait_set_add_action_client+0x8c>
 801298e:	6821      	ldr	r1, [r4, #0]
 8012990:	4628      	mov	r0, r5
 8012992:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8012996:	f7ff fccd 	bl	8012334 <rcl_wait_set_add_client>
 801299a:	b9b8      	cbnz	r0, 80129cc <rcl_action_wait_set_add_action_client+0x84>
 801299c:	6821      	ldr	r1, [r4, #0]
 801299e:	4628      	mov	r0, r5
 80129a0:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 80129a4:	3104      	adds	r1, #4
 80129a6:	f7ff fcc5 	bl	8012334 <rcl_wait_set_add_client>
 80129aa:	b978      	cbnz	r0, 80129cc <rcl_action_wait_set_add_action_client+0x84>
 80129ac:	6821      	ldr	r1, [r4, #0]
 80129ae:	4628      	mov	r0, r5
 80129b0:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 80129b4:	3108      	adds	r1, #8
 80129b6:	f7ff fcbd 	bl	8012334 <rcl_wait_set_add_client>
 80129ba:	b938      	cbnz	r0, 80129cc <rcl_action_wait_set_add_action_client+0x84>
 80129bc:	6821      	ldr	r1, [r4, #0]
 80129be:	4628      	mov	r0, r5
 80129c0:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 80129c4:	310c      	adds	r1, #12
 80129c6:	f7ff f96d 	bl	8011ca4 <rcl_wait_set_add_subscription>
 80129ca:	b158      	cbz	r0, 80129e4 <rcl_action_wait_set_add_action_client+0x9c>
 80129cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129ce:	f640 0036 	movw	r0, #2102	; 0x836
 80129d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129d4:	f7f8 fde0 	bl	800b598 <rcutils_reset_error>
 80129d8:	f640 0036 	movw	r0, #2102	; 0x836
 80129dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129de:	f44f 7061 	mov.w	r0, #900	; 0x384
 80129e2:	4770      	bx	lr
 80129e4:	6821      	ldr	r1, [r4, #0]
 80129e6:	4628      	mov	r0, r5
 80129e8:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 80129ec:	3110      	adds	r1, #16
 80129ee:	f7ff f959 	bl	8011ca4 <rcl_wait_set_add_subscription>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d1ea      	bne.n	80129cc <rcl_action_wait_set_add_action_client+0x84>
 80129f6:	b11f      	cbz	r7, 8012a00 <rcl_action_wait_set_add_action_client+0xb8>
 80129f8:	6823      	ldr	r3, [r4, #0]
 80129fa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80129fe:	603b      	str	r3, [r7, #0]
 8012a00:	2e00      	cmp	r6, #0
 8012a02:	d0e3      	beq.n	80129cc <rcl_action_wait_set_add_action_client+0x84>
 8012a04:	6823      	ldr	r3, [r4, #0]
 8012a06:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8012a0a:	6033      	str	r3, [r6, #0]
 8012a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a0e:	bf00      	nop

08012a10 <rcl_action_client_wait_set_get_entities_ready>:
 8012a10:	2800      	cmp	r0, #0
 8012a12:	f000 808d 	beq.w	8012b30 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8012a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a1a:	460c      	mov	r4, r1
 8012a1c:	2900      	cmp	r1, #0
 8012a1e:	d077      	beq.n	8012b10 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012a20:	4605      	mov	r5, r0
 8012a22:	6808      	ldr	r0, [r1, #0]
 8012a24:	2800      	cmp	r0, #0
 8012a26:	d073      	beq.n	8012b10 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012a28:	4616      	mov	r6, r2
 8012a2a:	461f      	mov	r7, r3
 8012a2c:	f7fd fe34 	bl	8010698 <rcl_client_is_valid>
 8012a30:	2800      	cmp	r0, #0
 8012a32:	d071      	beq.n	8012b18 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012a34:	6820      	ldr	r0, [r4, #0]
 8012a36:	3004      	adds	r0, #4
 8012a38:	f7fd fe2e 	bl	8010698 <rcl_client_is_valid>
 8012a3c:	2800      	cmp	r0, #0
 8012a3e:	d06b      	beq.n	8012b18 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012a40:	6820      	ldr	r0, [r4, #0]
 8012a42:	3008      	adds	r0, #8
 8012a44:	f7fd fe28 	bl	8010698 <rcl_client_is_valid>
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	d065      	beq.n	8012b18 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012a4c:	6820      	ldr	r0, [r4, #0]
 8012a4e:	300c      	adds	r0, #12
 8012a50:	f7fe fc4c 	bl	80112ec <rcl_subscription_is_valid>
 8012a54:	2800      	cmp	r0, #0
 8012a56:	d05f      	beq.n	8012b18 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012a58:	6820      	ldr	r0, [r4, #0]
 8012a5a:	3010      	adds	r0, #16
 8012a5c:	f7fe fc46 	bl	80112ec <rcl_subscription_is_valid>
 8012a60:	2800      	cmp	r0, #0
 8012a62:	d059      	beq.n	8012b18 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012a64:	2e00      	cmp	r6, #0
 8012a66:	d060      	beq.n	8012b2a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012a68:	2f00      	cmp	r7, #0
 8012a6a:	d05e      	beq.n	8012b2a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012a6c:	9b06      	ldr	r3, [sp, #24]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d05b      	beq.n	8012b2a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012a72:	9b07      	ldr	r3, [sp, #28]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d058      	beq.n	8012b2a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012a78:	9b08      	ldr	r3, [sp, #32]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d055      	beq.n	8012b2a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012a7e:	6823      	ldr	r3, [r4, #0]
 8012a80:	686a      	ldr	r2, [r5, #4]
 8012a82:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 8012a86:	428a      	cmp	r2, r1
 8012a88:	d94c      	bls.n	8012b24 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012a8a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 8012a8e:	4282      	cmp	r2, r0
 8012a90:	d948      	bls.n	8012b24 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012a92:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 8012a96:	69ea      	ldr	r2, [r5, #28]
 8012a98:	42a2      	cmp	r2, r4
 8012a9a:	d943      	bls.n	8012b24 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012a9c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 8012aa0:	4562      	cmp	r2, ip
 8012aa2:	d93f      	bls.n	8012b24 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012aa4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 8012aa8:	4572      	cmp	r2, lr
 8012aaa:	d93b      	bls.n	8012b24 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012aac:	69aa      	ldr	r2, [r5, #24]
 8012aae:	682d      	ldr	r5, [r5, #0]
 8012ab0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8012ab4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8012ab8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8012abc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8012ac0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8012ac4:	f103 0c0c 	add.w	ip, r3, #12
 8012ac8:	eba5 050c 	sub.w	r5, r5, ip
 8012acc:	fab5 f585 	clz	r5, r5
 8012ad0:	096d      	lsrs	r5, r5, #5
 8012ad2:	7035      	strb	r5, [r6, #0]
 8012ad4:	f103 0510 	add.w	r5, r3, #16
 8012ad8:	1b64      	subs	r4, r4, r5
 8012ada:	fab4 f484 	clz	r4, r4
 8012ade:	0964      	lsrs	r4, r4, #5
 8012ae0:	703c      	strb	r4, [r7, #0]
 8012ae2:	eba3 0008 	sub.w	r0, r3, r8
 8012ae6:	1d1c      	adds	r4, r3, #4
 8012ae8:	3308      	adds	r3, #8
 8012aea:	1ad3      	subs	r3, r2, r3
 8012aec:	fab0 f080 	clz	r0, r0
 8012af0:	9a06      	ldr	r2, [sp, #24]
 8012af2:	0940      	lsrs	r0, r0, #5
 8012af4:	1b09      	subs	r1, r1, r4
 8012af6:	7010      	strb	r0, [r2, #0]
 8012af8:	fab1 f181 	clz	r1, r1
 8012afc:	9a07      	ldr	r2, [sp, #28]
 8012afe:	0949      	lsrs	r1, r1, #5
 8012b00:	7011      	strb	r1, [r2, #0]
 8012b02:	fab3 f383 	clz	r3, r3
 8012b06:	9a08      	ldr	r2, [sp, #32]
 8012b08:	095b      	lsrs	r3, r3, #5
 8012b0a:	2000      	movs	r0, #0
 8012b0c:	7013      	strb	r3, [r2, #0]
 8012b0e:	e001      	b.n	8012b14 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012b10:	f640 0036 	movw	r0, #2102	; 0x836
 8012b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b18:	f7f8 fd3e 	bl	800b598 <rcutils_reset_error>
 8012b1c:	f640 0036 	movw	r0, #2102	; 0x836
 8012b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b24:	2001      	movs	r0, #1
 8012b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b2a:	200b      	movs	r0, #11
 8012b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b30:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012b34:	4770      	bx	lr
 8012b36:	bf00      	nop

08012b38 <rcl_action_take_goal_request>:
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	d039      	beq.n	8012bb0 <rcl_action_take_goal_request+0x78>
 8012b3c:	b570      	push	{r4, r5, r6, lr}
 8012b3e:	4604      	mov	r4, r0
 8012b40:	6800      	ldr	r0, [r0, #0]
 8012b42:	b380      	cbz	r0, 8012ba6 <rcl_action_take_goal_request+0x6e>
 8012b44:	460d      	mov	r5, r1
 8012b46:	4616      	mov	r6, r2
 8012b48:	f7fe fb68 	bl	801121c <rcl_service_is_valid>
 8012b4c:	b330      	cbz	r0, 8012b9c <rcl_action_take_goal_request+0x64>
 8012b4e:	6820      	ldr	r0, [r4, #0]
 8012b50:	3004      	adds	r0, #4
 8012b52:	f7fe fb63 	bl	801121c <rcl_service_is_valid>
 8012b56:	b308      	cbz	r0, 8012b9c <rcl_action_take_goal_request+0x64>
 8012b58:	6820      	ldr	r0, [r4, #0]
 8012b5a:	3008      	adds	r0, #8
 8012b5c:	f7fe fb5e 	bl	801121c <rcl_service_is_valid>
 8012b60:	b1e0      	cbz	r0, 8012b9c <rcl_action_take_goal_request+0x64>
 8012b62:	6820      	ldr	r0, [r4, #0]
 8012b64:	300c      	adds	r0, #12
 8012b66:	f7f7 fd71 	bl	800a64c <rcl_publisher_is_valid>
 8012b6a:	b1b8      	cbz	r0, 8012b9c <rcl_action_take_goal_request+0x64>
 8012b6c:	6820      	ldr	r0, [r4, #0]
 8012b6e:	3010      	adds	r0, #16
 8012b70:	f7f7 fd6c 	bl	800a64c <rcl_publisher_is_valid>
 8012b74:	b190      	cbz	r0, 8012b9c <rcl_action_take_goal_request+0x64>
 8012b76:	b1cd      	cbz	r5, 8012bac <rcl_action_take_goal_request+0x74>
 8012b78:	b1c6      	cbz	r6, 8012bac <rcl_action_take_goal_request+0x74>
 8012b7a:	6820      	ldr	r0, [r4, #0]
 8012b7c:	4632      	mov	r2, r6
 8012b7e:	4629      	mov	r1, r5
 8012b80:	f7fe faf4 	bl	801116c <rcl_take_request>
 8012b84:	b148      	cbz	r0, 8012b9a <rcl_action_take_goal_request+0x62>
 8012b86:	280a      	cmp	r0, #10
 8012b88:	d007      	beq.n	8012b9a <rcl_action_take_goal_request+0x62>
 8012b8a:	f240 2259 	movw	r2, #601	; 0x259
 8012b8e:	f640 0399 	movw	r3, #2201	; 0x899
 8012b92:	4290      	cmp	r0, r2
 8012b94:	bf0c      	ite	eq
 8012b96:	4618      	moveq	r0, r3
 8012b98:	2001      	movne	r0, #1
 8012b9a:	bd70      	pop	{r4, r5, r6, pc}
 8012b9c:	f7f8 fcfc 	bl	800b598 <rcutils_reset_error>
 8012ba0:	f640 0098 	movw	r0, #2200	; 0x898
 8012ba4:	bd70      	pop	{r4, r5, r6, pc}
 8012ba6:	f640 0098 	movw	r0, #2200	; 0x898
 8012baa:	bd70      	pop	{r4, r5, r6, pc}
 8012bac:	200b      	movs	r0, #11
 8012bae:	bd70      	pop	{r4, r5, r6, pc}
 8012bb0:	f640 0098 	movw	r0, #2200	; 0x898
 8012bb4:	4770      	bx	lr
 8012bb6:	bf00      	nop

08012bb8 <rcl_action_send_goal_response>:
 8012bb8:	b388      	cbz	r0, 8012c1e <rcl_action_send_goal_response+0x66>
 8012bba:	b570      	push	{r4, r5, r6, lr}
 8012bbc:	4604      	mov	r4, r0
 8012bbe:	6800      	ldr	r0, [r0, #0]
 8012bc0:	b340      	cbz	r0, 8012c14 <rcl_action_send_goal_response+0x5c>
 8012bc2:	460d      	mov	r5, r1
 8012bc4:	4616      	mov	r6, r2
 8012bc6:	f7fe fb29 	bl	801121c <rcl_service_is_valid>
 8012bca:	b1f0      	cbz	r0, 8012c0a <rcl_action_send_goal_response+0x52>
 8012bcc:	6820      	ldr	r0, [r4, #0]
 8012bce:	3004      	adds	r0, #4
 8012bd0:	f7fe fb24 	bl	801121c <rcl_service_is_valid>
 8012bd4:	b1c8      	cbz	r0, 8012c0a <rcl_action_send_goal_response+0x52>
 8012bd6:	6820      	ldr	r0, [r4, #0]
 8012bd8:	3008      	adds	r0, #8
 8012bda:	f7fe fb1f 	bl	801121c <rcl_service_is_valid>
 8012bde:	b1a0      	cbz	r0, 8012c0a <rcl_action_send_goal_response+0x52>
 8012be0:	6820      	ldr	r0, [r4, #0]
 8012be2:	300c      	adds	r0, #12
 8012be4:	f7f7 fd32 	bl	800a64c <rcl_publisher_is_valid>
 8012be8:	b178      	cbz	r0, 8012c0a <rcl_action_send_goal_response+0x52>
 8012bea:	6820      	ldr	r0, [r4, #0]
 8012bec:	3010      	adds	r0, #16
 8012bee:	f7f7 fd2d 	bl	800a64c <rcl_publisher_is_valid>
 8012bf2:	b150      	cbz	r0, 8012c0a <rcl_action_send_goal_response+0x52>
 8012bf4:	b18d      	cbz	r5, 8012c1a <rcl_action_send_goal_response+0x62>
 8012bf6:	b186      	cbz	r6, 8012c1a <rcl_action_send_goal_response+0x62>
 8012bf8:	6820      	ldr	r0, [r4, #0]
 8012bfa:	4632      	mov	r2, r6
 8012bfc:	4629      	mov	r1, r5
 8012bfe:	f7fe faf5 	bl	80111ec <rcl_send_response>
 8012c02:	3800      	subs	r0, #0
 8012c04:	bf18      	it	ne
 8012c06:	2001      	movne	r0, #1
 8012c08:	bd70      	pop	{r4, r5, r6, pc}
 8012c0a:	f7f8 fcc5 	bl	800b598 <rcutils_reset_error>
 8012c0e:	f640 0098 	movw	r0, #2200	; 0x898
 8012c12:	bd70      	pop	{r4, r5, r6, pc}
 8012c14:	f640 0098 	movw	r0, #2200	; 0x898
 8012c18:	bd70      	pop	{r4, r5, r6, pc}
 8012c1a:	200b      	movs	r0, #11
 8012c1c:	bd70      	pop	{r4, r5, r6, pc}
 8012c1e:	f640 0098 	movw	r0, #2200	; 0x898
 8012c22:	4770      	bx	lr

08012c24 <rcl_action_take_result_request>:
 8012c24:	2800      	cmp	r0, #0
 8012c26:	d03a      	beq.n	8012c9e <rcl_action_take_result_request+0x7a>
 8012c28:	b570      	push	{r4, r5, r6, lr}
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	6800      	ldr	r0, [r0, #0]
 8012c2e:	b388      	cbz	r0, 8012c94 <rcl_action_take_result_request+0x70>
 8012c30:	460d      	mov	r5, r1
 8012c32:	4616      	mov	r6, r2
 8012c34:	f7fe faf2 	bl	801121c <rcl_service_is_valid>
 8012c38:	b338      	cbz	r0, 8012c8a <rcl_action_take_result_request+0x66>
 8012c3a:	6820      	ldr	r0, [r4, #0]
 8012c3c:	3004      	adds	r0, #4
 8012c3e:	f7fe faed 	bl	801121c <rcl_service_is_valid>
 8012c42:	b310      	cbz	r0, 8012c8a <rcl_action_take_result_request+0x66>
 8012c44:	6820      	ldr	r0, [r4, #0]
 8012c46:	3008      	adds	r0, #8
 8012c48:	f7fe fae8 	bl	801121c <rcl_service_is_valid>
 8012c4c:	b1e8      	cbz	r0, 8012c8a <rcl_action_take_result_request+0x66>
 8012c4e:	6820      	ldr	r0, [r4, #0]
 8012c50:	300c      	adds	r0, #12
 8012c52:	f7f7 fcfb 	bl	800a64c <rcl_publisher_is_valid>
 8012c56:	b1c0      	cbz	r0, 8012c8a <rcl_action_take_result_request+0x66>
 8012c58:	6820      	ldr	r0, [r4, #0]
 8012c5a:	3010      	adds	r0, #16
 8012c5c:	f7f7 fcf6 	bl	800a64c <rcl_publisher_is_valid>
 8012c60:	b198      	cbz	r0, 8012c8a <rcl_action_take_result_request+0x66>
 8012c62:	b1d5      	cbz	r5, 8012c9a <rcl_action_take_result_request+0x76>
 8012c64:	b1ce      	cbz	r6, 8012c9a <rcl_action_take_result_request+0x76>
 8012c66:	6820      	ldr	r0, [r4, #0]
 8012c68:	4632      	mov	r2, r6
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	3008      	adds	r0, #8
 8012c6e:	f7fe fa7d 	bl	801116c <rcl_take_request>
 8012c72:	b148      	cbz	r0, 8012c88 <rcl_action_take_result_request+0x64>
 8012c74:	280a      	cmp	r0, #10
 8012c76:	d007      	beq.n	8012c88 <rcl_action_take_result_request+0x64>
 8012c78:	f240 2259 	movw	r2, #601	; 0x259
 8012c7c:	f640 0399 	movw	r3, #2201	; 0x899
 8012c80:	4290      	cmp	r0, r2
 8012c82:	bf0c      	ite	eq
 8012c84:	4618      	moveq	r0, r3
 8012c86:	2001      	movne	r0, #1
 8012c88:	bd70      	pop	{r4, r5, r6, pc}
 8012c8a:	f7f8 fc85 	bl	800b598 <rcutils_reset_error>
 8012c8e:	f640 0098 	movw	r0, #2200	; 0x898
 8012c92:	bd70      	pop	{r4, r5, r6, pc}
 8012c94:	f640 0098 	movw	r0, #2200	; 0x898
 8012c98:	bd70      	pop	{r4, r5, r6, pc}
 8012c9a:	200b      	movs	r0, #11
 8012c9c:	bd70      	pop	{r4, r5, r6, pc}
 8012c9e:	f640 0098 	movw	r0, #2200	; 0x898
 8012ca2:	4770      	bx	lr

08012ca4 <rcl_action_take_cancel_request>:
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d03a      	beq.n	8012d1e <rcl_action_take_cancel_request+0x7a>
 8012ca8:	b570      	push	{r4, r5, r6, lr}
 8012caa:	4604      	mov	r4, r0
 8012cac:	6800      	ldr	r0, [r0, #0]
 8012cae:	b388      	cbz	r0, 8012d14 <rcl_action_take_cancel_request+0x70>
 8012cb0:	460d      	mov	r5, r1
 8012cb2:	4616      	mov	r6, r2
 8012cb4:	f7fe fab2 	bl	801121c <rcl_service_is_valid>
 8012cb8:	b338      	cbz	r0, 8012d0a <rcl_action_take_cancel_request+0x66>
 8012cba:	6820      	ldr	r0, [r4, #0]
 8012cbc:	3004      	adds	r0, #4
 8012cbe:	f7fe faad 	bl	801121c <rcl_service_is_valid>
 8012cc2:	b310      	cbz	r0, 8012d0a <rcl_action_take_cancel_request+0x66>
 8012cc4:	6820      	ldr	r0, [r4, #0]
 8012cc6:	3008      	adds	r0, #8
 8012cc8:	f7fe faa8 	bl	801121c <rcl_service_is_valid>
 8012ccc:	b1e8      	cbz	r0, 8012d0a <rcl_action_take_cancel_request+0x66>
 8012cce:	6820      	ldr	r0, [r4, #0]
 8012cd0:	300c      	adds	r0, #12
 8012cd2:	f7f7 fcbb 	bl	800a64c <rcl_publisher_is_valid>
 8012cd6:	b1c0      	cbz	r0, 8012d0a <rcl_action_take_cancel_request+0x66>
 8012cd8:	6820      	ldr	r0, [r4, #0]
 8012cda:	3010      	adds	r0, #16
 8012cdc:	f7f7 fcb6 	bl	800a64c <rcl_publisher_is_valid>
 8012ce0:	b198      	cbz	r0, 8012d0a <rcl_action_take_cancel_request+0x66>
 8012ce2:	b1d5      	cbz	r5, 8012d1a <rcl_action_take_cancel_request+0x76>
 8012ce4:	b1ce      	cbz	r6, 8012d1a <rcl_action_take_cancel_request+0x76>
 8012ce6:	6820      	ldr	r0, [r4, #0]
 8012ce8:	4632      	mov	r2, r6
 8012cea:	4629      	mov	r1, r5
 8012cec:	3004      	adds	r0, #4
 8012cee:	f7fe fa3d 	bl	801116c <rcl_take_request>
 8012cf2:	b148      	cbz	r0, 8012d08 <rcl_action_take_cancel_request+0x64>
 8012cf4:	280a      	cmp	r0, #10
 8012cf6:	d007      	beq.n	8012d08 <rcl_action_take_cancel_request+0x64>
 8012cf8:	f240 2259 	movw	r2, #601	; 0x259
 8012cfc:	f640 0399 	movw	r3, #2201	; 0x899
 8012d00:	4290      	cmp	r0, r2
 8012d02:	bf0c      	ite	eq
 8012d04:	4618      	moveq	r0, r3
 8012d06:	2001      	movne	r0, #1
 8012d08:	bd70      	pop	{r4, r5, r6, pc}
 8012d0a:	f7f8 fc45 	bl	800b598 <rcutils_reset_error>
 8012d0e:	f640 0098 	movw	r0, #2200	; 0x898
 8012d12:	bd70      	pop	{r4, r5, r6, pc}
 8012d14:	f640 0098 	movw	r0, #2200	; 0x898
 8012d18:	bd70      	pop	{r4, r5, r6, pc}
 8012d1a:	200b      	movs	r0, #11
 8012d1c:	bd70      	pop	{r4, r5, r6, pc}
 8012d1e:	f640 0098 	movw	r0, #2200	; 0x898
 8012d22:	4770      	bx	lr

08012d24 <rcl_action_send_cancel_response>:
 8012d24:	b390      	cbz	r0, 8012d8c <rcl_action_send_cancel_response+0x68>
 8012d26:	b570      	push	{r4, r5, r6, lr}
 8012d28:	4604      	mov	r4, r0
 8012d2a:	6800      	ldr	r0, [r0, #0]
 8012d2c:	b348      	cbz	r0, 8012d82 <rcl_action_send_cancel_response+0x5e>
 8012d2e:	460d      	mov	r5, r1
 8012d30:	4616      	mov	r6, r2
 8012d32:	f7fe fa73 	bl	801121c <rcl_service_is_valid>
 8012d36:	b1f8      	cbz	r0, 8012d78 <rcl_action_send_cancel_response+0x54>
 8012d38:	6820      	ldr	r0, [r4, #0]
 8012d3a:	3004      	adds	r0, #4
 8012d3c:	f7fe fa6e 	bl	801121c <rcl_service_is_valid>
 8012d40:	b1d0      	cbz	r0, 8012d78 <rcl_action_send_cancel_response+0x54>
 8012d42:	6820      	ldr	r0, [r4, #0]
 8012d44:	3008      	adds	r0, #8
 8012d46:	f7fe fa69 	bl	801121c <rcl_service_is_valid>
 8012d4a:	b1a8      	cbz	r0, 8012d78 <rcl_action_send_cancel_response+0x54>
 8012d4c:	6820      	ldr	r0, [r4, #0]
 8012d4e:	300c      	adds	r0, #12
 8012d50:	f7f7 fc7c 	bl	800a64c <rcl_publisher_is_valid>
 8012d54:	b180      	cbz	r0, 8012d78 <rcl_action_send_cancel_response+0x54>
 8012d56:	6820      	ldr	r0, [r4, #0]
 8012d58:	3010      	adds	r0, #16
 8012d5a:	f7f7 fc77 	bl	800a64c <rcl_publisher_is_valid>
 8012d5e:	b158      	cbz	r0, 8012d78 <rcl_action_send_cancel_response+0x54>
 8012d60:	b195      	cbz	r5, 8012d88 <rcl_action_send_cancel_response+0x64>
 8012d62:	b18e      	cbz	r6, 8012d88 <rcl_action_send_cancel_response+0x64>
 8012d64:	6820      	ldr	r0, [r4, #0]
 8012d66:	4632      	mov	r2, r6
 8012d68:	4629      	mov	r1, r5
 8012d6a:	3004      	adds	r0, #4
 8012d6c:	f7fe fa3e 	bl	80111ec <rcl_send_response>
 8012d70:	3800      	subs	r0, #0
 8012d72:	bf18      	it	ne
 8012d74:	2001      	movne	r0, #1
 8012d76:	bd70      	pop	{r4, r5, r6, pc}
 8012d78:	f7f8 fc0e 	bl	800b598 <rcutils_reset_error>
 8012d7c:	f640 0098 	movw	r0, #2200	; 0x898
 8012d80:	bd70      	pop	{r4, r5, r6, pc}
 8012d82:	f640 0098 	movw	r0, #2200	; 0x898
 8012d86:	bd70      	pop	{r4, r5, r6, pc}
 8012d88:	200b      	movs	r0, #11
 8012d8a:	bd70      	pop	{r4, r5, r6, pc}
 8012d8c:	f640 0098 	movw	r0, #2200	; 0x898
 8012d90:	4770      	bx	lr
 8012d92:	bf00      	nop

08012d94 <rcl_action_wait_set_add_action_server>:
 8012d94:	2800      	cmp	r0, #0
 8012d96:	d04d      	beq.n	8012e34 <rcl_action_wait_set_add_action_server+0xa0>
 8012d98:	b570      	push	{r4, r5, r6, lr}
 8012d9a:	460c      	mov	r4, r1
 8012d9c:	b159      	cbz	r1, 8012db6 <rcl_action_wait_set_add_action_server+0x22>
 8012d9e:	4605      	mov	r5, r0
 8012da0:	6808      	ldr	r0, [r1, #0]
 8012da2:	b140      	cbz	r0, 8012db6 <rcl_action_wait_set_add_action_server+0x22>
 8012da4:	4616      	mov	r6, r2
 8012da6:	f7fe fa39 	bl	801121c <rcl_service_is_valid>
 8012daa:	b120      	cbz	r0, 8012db6 <rcl_action_wait_set_add_action_server+0x22>
 8012dac:	6820      	ldr	r0, [r4, #0]
 8012dae:	3004      	adds	r0, #4
 8012db0:	f7fe fa34 	bl	801121c <rcl_service_is_valid>
 8012db4:	b910      	cbnz	r0, 8012dbc <rcl_action_wait_set_add_action_server+0x28>
 8012db6:	f640 0098 	movw	r0, #2200	; 0x898
 8012dba:	bd70      	pop	{r4, r5, r6, pc}
 8012dbc:	6820      	ldr	r0, [r4, #0]
 8012dbe:	3008      	adds	r0, #8
 8012dc0:	f7fe fa2c 	bl	801121c <rcl_service_is_valid>
 8012dc4:	2800      	cmp	r0, #0
 8012dc6:	d0f6      	beq.n	8012db6 <rcl_action_wait_set_add_action_server+0x22>
 8012dc8:	6820      	ldr	r0, [r4, #0]
 8012dca:	300c      	adds	r0, #12
 8012dcc:	f7f7 fc56 	bl	800a67c <rcl_publisher_is_valid_except_context>
 8012dd0:	2800      	cmp	r0, #0
 8012dd2:	d0f0      	beq.n	8012db6 <rcl_action_wait_set_add_action_server+0x22>
 8012dd4:	6820      	ldr	r0, [r4, #0]
 8012dd6:	3010      	adds	r0, #16
 8012dd8:	f7f7 fc50 	bl	800a67c <rcl_publisher_is_valid_except_context>
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	d0ea      	beq.n	8012db6 <rcl_action_wait_set_add_action_server+0x22>
 8012de0:	6821      	ldr	r1, [r4, #0]
 8012de2:	4628      	mov	r0, r5
 8012de4:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8012de8:	f7ff fad0 	bl	801238c <rcl_wait_set_add_service>
 8012dec:	2800      	cmp	r0, #0
 8012dee:	d1e4      	bne.n	8012dba <rcl_action_wait_set_add_action_server+0x26>
 8012df0:	6821      	ldr	r1, [r4, #0]
 8012df2:	4628      	mov	r0, r5
 8012df4:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8012df8:	3104      	adds	r1, #4
 8012dfa:	f7ff fac7 	bl	801238c <rcl_wait_set_add_service>
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	d1db      	bne.n	8012dba <rcl_action_wait_set_add_action_server+0x26>
 8012e02:	6821      	ldr	r1, [r4, #0]
 8012e04:	4628      	mov	r0, r5
 8012e06:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8012e0a:	3108      	adds	r1, #8
 8012e0c:	f7ff fabe 	bl	801238c <rcl_wait_set_add_service>
 8012e10:	2800      	cmp	r0, #0
 8012e12:	d1d2      	bne.n	8012dba <rcl_action_wait_set_add_action_server+0x26>
 8012e14:	6821      	ldr	r1, [r4, #0]
 8012e16:	4628      	mov	r0, r5
 8012e18:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8012e1c:	3114      	adds	r1, #20
 8012e1e:	f7ff fa59 	bl	80122d4 <rcl_wait_set_add_timer>
 8012e22:	2800      	cmp	r0, #0
 8012e24:	d1c9      	bne.n	8012dba <rcl_action_wait_set_add_action_server+0x26>
 8012e26:	2e00      	cmp	r6, #0
 8012e28:	d0c7      	beq.n	8012dba <rcl_action_wait_set_add_action_server+0x26>
 8012e2a:	6823      	ldr	r3, [r4, #0]
 8012e2c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8012e30:	6033      	str	r3, [r6, #0]
 8012e32:	bd70      	pop	{r4, r5, r6, pc}
 8012e34:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012e38:	4770      	bx	lr
 8012e3a:	bf00      	nop

08012e3c <rcl_action_server_wait_set_get_entities_ready>:
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	d05a      	beq.n	8012ef6 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8012e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e42:	460c      	mov	r4, r1
 8012e44:	b161      	cbz	r1, 8012e60 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012e46:	4605      	mov	r5, r0
 8012e48:	6808      	ldr	r0, [r1, #0]
 8012e4a:	b148      	cbz	r0, 8012e60 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012e4c:	4616      	mov	r6, r2
 8012e4e:	461f      	mov	r7, r3
 8012e50:	f7fe f9e4 	bl	801121c <rcl_service_is_valid>
 8012e54:	b120      	cbz	r0, 8012e60 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012e56:	6820      	ldr	r0, [r4, #0]
 8012e58:	3004      	adds	r0, #4
 8012e5a:	f7fe f9df 	bl	801121c <rcl_service_is_valid>
 8012e5e:	b910      	cbnz	r0, 8012e66 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8012e60:	f640 0098 	movw	r0, #2200	; 0x898
 8012e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e66:	6820      	ldr	r0, [r4, #0]
 8012e68:	3008      	adds	r0, #8
 8012e6a:	f7fe f9d7 	bl	801121c <rcl_service_is_valid>
 8012e6e:	2800      	cmp	r0, #0
 8012e70:	d0f6      	beq.n	8012e60 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012e72:	6820      	ldr	r0, [r4, #0]
 8012e74:	300c      	adds	r0, #12
 8012e76:	f7f7 fc01 	bl	800a67c <rcl_publisher_is_valid_except_context>
 8012e7a:	2800      	cmp	r0, #0
 8012e7c:	d0f0      	beq.n	8012e60 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012e7e:	6820      	ldr	r0, [r4, #0]
 8012e80:	3010      	adds	r0, #16
 8012e82:	f7f7 fbfb 	bl	800a67c <rcl_publisher_is_valid_except_context>
 8012e86:	2800      	cmp	r0, #0
 8012e88:	d0ea      	beq.n	8012e60 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012e8a:	b3be      	cbz	r6, 8012efc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012e8c:	b3b7      	cbz	r7, 8012efc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012e8e:	9b06      	ldr	r3, [sp, #24]
 8012e90:	b3a3      	cbz	r3, 8012efc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012e92:	9b07      	ldr	r3, [sp, #28]
 8012e94:	b393      	cbz	r3, 8012efc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012e96:	6821      	ldr	r1, [r4, #0]
 8012e98:	692a      	ldr	r2, [r5, #16]
 8012e9a:	6a2c      	ldr	r4, [r5, #32]
 8012e9c:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 8012ea0:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8012ea4:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012ea8:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 8012eac:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 8012eb0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8012eb4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012eb8:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8012ebc:	1a64      	subs	r4, r4, r1
 8012ebe:	fab4 f484 	clz	r4, r4
 8012ec2:	0964      	lsrs	r4, r4, #5
 8012ec4:	7034      	strb	r4, [r6, #0]
 8012ec6:	1d0c      	adds	r4, r1, #4
 8012ec8:	1b1b      	subs	r3, r3, r4
 8012eca:	fab3 f383 	clz	r3, r3
 8012ece:	095b      	lsrs	r3, r3, #5
 8012ed0:	f101 0408 	add.w	r4, r1, #8
 8012ed4:	703b      	strb	r3, [r7, #0]
 8012ed6:	f101 0314 	add.w	r3, r1, #20
 8012eda:	1b01      	subs	r1, r0, r4
 8012edc:	1ad3      	subs	r3, r2, r3
 8012ede:	fab1 f181 	clz	r1, r1
 8012ee2:	9a06      	ldr	r2, [sp, #24]
 8012ee4:	0949      	lsrs	r1, r1, #5
 8012ee6:	7011      	strb	r1, [r2, #0]
 8012ee8:	fab3 f383 	clz	r3, r3
 8012eec:	9a07      	ldr	r2, [sp, #28]
 8012eee:	095b      	lsrs	r3, r3, #5
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	7013      	strb	r3, [r2, #0]
 8012ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ef6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012efa:	4770      	bx	lr
 8012efc:	200b      	movs	r0, #11
 8012efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012f00 <_execute_event_handler>:
 8012f00:	2002      	movs	r0, #2
 8012f02:	4770      	bx	lr

08012f04 <_cancel_goal_event_handler>:
 8012f04:	2003      	movs	r0, #3
 8012f06:	4770      	bx	lr

08012f08 <_succeed_event_handler>:
 8012f08:	2004      	movs	r0, #4
 8012f0a:	4770      	bx	lr

08012f0c <_abort_event_handler>:
 8012f0c:	2006      	movs	r0, #6
 8012f0e:	4770      	bx	lr

08012f10 <_canceled_event_handler>:
 8012f10:	2005      	movs	r0, #5
 8012f12:	4770      	bx	lr

08012f14 <rcl_action_transition_goal_state>:
 8012f14:	b2c2      	uxtb	r2, r0
 8012f16:	2a06      	cmp	r2, #6
 8012f18:	d80c      	bhi.n	8012f34 <rcl_action_transition_goal_state+0x20>
 8012f1a:	2904      	cmp	r1, #4
 8012f1c:	d80a      	bhi.n	8012f34 <rcl_action_transition_goal_state+0x20>
 8012f1e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012f22:	b410      	push	{r4}
 8012f24:	1853      	adds	r3, r2, r1
 8012f26:	4c06      	ldr	r4, [pc, #24]	; (8012f40 <rcl_action_transition_goal_state+0x2c>)
 8012f28:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012f2c:	b123      	cbz	r3, 8012f38 <rcl_action_transition_goal_state+0x24>
 8012f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f32:	4718      	bx	r3
 8012f34:	2000      	movs	r0, #0
 8012f36:	4770      	bx	lr
 8012f38:	2000      	movs	r0, #0
 8012f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f3e:	4770      	bx	lr
 8012f40:	08018540 	.word	0x08018540

08012f44 <rcl_action_get_zero_initialized_cancel_response>:
 8012f44:	b510      	push	{r4, lr}
 8012f46:	4c07      	ldr	r4, [pc, #28]	; (8012f64 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8012f48:	4686      	mov	lr, r0
 8012f4a:	4684      	mov	ip, r0
 8012f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f58:	6823      	ldr	r3, [r4, #0]
 8012f5a:	f8cc 3000 	str.w	r3, [ip]
 8012f5e:	4670      	mov	r0, lr
 8012f60:	bd10      	pop	{r4, pc}
 8012f62:	bf00      	nop
 8012f64:	080185cc 	.word	0x080185cc

08012f68 <rclc_action_send_result_request>:
 8012f68:	b1d0      	cbz	r0, 8012fa0 <rclc_action_send_result_request+0x38>
 8012f6a:	b500      	push	{lr}
 8012f6c:	4684      	mov	ip, r0
 8012f6e:	b087      	sub	sp, #28
 8012f70:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012f74:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8012f78:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012f7c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8012f80:	f10d 0e08 	add.w	lr, sp, #8
 8012f84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012f88:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012f8c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8012f90:	a902      	add	r1, sp, #8
 8012f92:	3010      	adds	r0, #16
 8012f94:	f7ff fbdc 	bl	8012750 <rcl_action_send_result_request>
 8012f98:	b920      	cbnz	r0, 8012fa4 <rclc_action_send_result_request+0x3c>
 8012f9a:	b007      	add	sp, #28
 8012f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012fa0:	200b      	movs	r0, #11
 8012fa2:	4770      	bx	lr
 8012fa4:	9001      	str	r0, [sp, #4]
 8012fa6:	f7f8 faf7 	bl	800b598 <rcutils_reset_error>
 8012faa:	9801      	ldr	r0, [sp, #4]
 8012fac:	b007      	add	sp, #28
 8012fae:	f85d fb04 	ldr.w	pc, [sp], #4
 8012fb2:	bf00      	nop

08012fb4 <rclc_action_take_goal_handle>:
 8012fb4:	b160      	cbz	r0, 8012fd0 <rclc_action_take_goal_handle+0x1c>
 8012fb6:	6883      	ldr	r3, [r0, #8]
 8012fb8:	b143      	cbz	r3, 8012fcc <rclc_action_take_goal_handle+0x18>
 8012fba:	6819      	ldr	r1, [r3, #0]
 8012fbc:	6081      	str	r1, [r0, #8]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	721a      	strb	r2, [r3, #8]
 8012fc2:	68c1      	ldr	r1, [r0, #12]
 8012fc4:	6019      	str	r1, [r3, #0]
 8012fc6:	621a      	str	r2, [r3, #32]
 8012fc8:	849a      	strh	r2, [r3, #36]	; 0x24
 8012fca:	60c3      	str	r3, [r0, #12]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	4770      	bx	lr
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	e7fb      	b.n	8012fcc <rclc_action_take_goal_handle+0x18>

08012fd4 <rclc_action_remove_used_goal_handle>:
 8012fd4:	b180      	cbz	r0, 8012ff8 <rclc_action_remove_used_goal_handle+0x24>
 8012fd6:	b179      	cbz	r1, 8012ff8 <rclc_action_remove_used_goal_handle+0x24>
 8012fd8:	68c3      	ldr	r3, [r0, #12]
 8012fda:	4299      	cmp	r1, r3
 8012fdc:	d00d      	beq.n	8012ffa <rclc_action_remove_used_goal_handle+0x26>
 8012fde:	b12b      	cbz	r3, 8012fec <rclc_action_remove_used_goal_handle+0x18>
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	4291      	cmp	r1, r2
 8012fe4:	d003      	beq.n	8012fee <rclc_action_remove_used_goal_handle+0x1a>
 8012fe6:	4613      	mov	r3, r2
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d1f9      	bne.n	8012fe0 <rclc_action_remove_used_goal_handle+0xc>
 8012fec:	4770      	bx	lr
 8012fee:	680a      	ldr	r2, [r1, #0]
 8012ff0:	601a      	str	r2, [r3, #0]
 8012ff2:	6883      	ldr	r3, [r0, #8]
 8012ff4:	600b      	str	r3, [r1, #0]
 8012ff6:	6081      	str	r1, [r0, #8]
 8012ff8:	4770      	bx	lr
 8012ffa:	680b      	ldr	r3, [r1, #0]
 8012ffc:	60c3      	str	r3, [r0, #12]
 8012ffe:	e7f8      	b.n	8012ff2 <rclc_action_remove_used_goal_handle+0x1e>

08013000 <rclc_action_find_goal_handle_by_uuid>:
 8013000:	b538      	push	{r3, r4, r5, lr}
 8013002:	b180      	cbz	r0, 8013026 <rclc_action_find_goal_handle_by_uuid+0x26>
 8013004:	460d      	mov	r5, r1
 8013006:	b181      	cbz	r1, 801302a <rclc_action_find_goal_handle_by_uuid+0x2a>
 8013008:	68c4      	ldr	r4, [r0, #12]
 801300a:	b914      	cbnz	r4, 8013012 <rclc_action_find_goal_handle_by_uuid+0x12>
 801300c:	e009      	b.n	8013022 <rclc_action_find_goal_handle_by_uuid+0x22>
 801300e:	6824      	ldr	r4, [r4, #0]
 8013010:	b13c      	cbz	r4, 8013022 <rclc_action_find_goal_handle_by_uuid+0x22>
 8013012:	f104 0009 	add.w	r0, r4, #9
 8013016:	2210      	movs	r2, #16
 8013018:	4629      	mov	r1, r5
 801301a:	f003 fe4b 	bl	8016cb4 <memcmp>
 801301e:	2800      	cmp	r0, #0
 8013020:	d1f5      	bne.n	801300e <rclc_action_find_goal_handle_by_uuid+0xe>
 8013022:	4620      	mov	r0, r4
 8013024:	bd38      	pop	{r3, r4, r5, pc}
 8013026:	4604      	mov	r4, r0
 8013028:	e7fb      	b.n	8013022 <rclc_action_find_goal_handle_by_uuid+0x22>
 801302a:	460c      	mov	r4, r1
 801302c:	e7f9      	b.n	8013022 <rclc_action_find_goal_handle_by_uuid+0x22>
 801302e:	bf00      	nop

08013030 <rclc_action_find_first_handle_by_status>:
 8013030:	b140      	cbz	r0, 8013044 <rclc_action_find_first_handle_by_status+0x14>
 8013032:	68c0      	ldr	r0, [r0, #12]
 8013034:	b910      	cbnz	r0, 801303c <rclc_action_find_first_handle_by_status+0xc>
 8013036:	e005      	b.n	8013044 <rclc_action_find_first_handle_by_status+0x14>
 8013038:	6800      	ldr	r0, [r0, #0]
 801303a:	b118      	cbz	r0, 8013044 <rclc_action_find_first_handle_by_status+0x14>
 801303c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013040:	428b      	cmp	r3, r1
 8013042:	d1f9      	bne.n	8013038 <rclc_action_find_first_handle_by_status+0x8>
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop

08013048 <rclc_action_find_first_terminated_handle>:
 8013048:	b140      	cbz	r0, 801305c <rclc_action_find_first_terminated_handle+0x14>
 801304a:	68c0      	ldr	r0, [r0, #12]
 801304c:	b910      	cbnz	r0, 8013054 <rclc_action_find_first_terminated_handle+0xc>
 801304e:	e005      	b.n	801305c <rclc_action_find_first_terminated_handle+0x14>
 8013050:	6800      	ldr	r0, [r0, #0]
 8013052:	b118      	cbz	r0, 801305c <rclc_action_find_first_terminated_handle+0x14>
 8013054:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013058:	2b03      	cmp	r3, #3
 801305a:	ddf9      	ble.n	8013050 <rclc_action_find_first_terminated_handle+0x8>
 801305c:	4770      	bx	lr
 801305e:	bf00      	nop

08013060 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8013060:	b170      	cbz	r0, 8013080 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013062:	68c0      	ldr	r0, [r0, #12]
 8013064:	b160      	cbz	r0, 8013080 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013066:	b410      	push	{r4}
 8013068:	e001      	b.n	801306e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801306a:	6800      	ldr	r0, [r0, #0]
 801306c:	b128      	cbz	r0, 801307a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801306e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8013072:	4299      	cmp	r1, r3
 8013074:	bf08      	it	eq
 8013076:	4294      	cmpeq	r4, r2
 8013078:	d1f7      	bne.n	801306a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801307a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801307e:	4770      	bx	lr
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop

08013084 <rclc_action_find_handle_by_result_request_sequence_number>:
 8013084:	b170      	cbz	r0, 80130a4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013086:	68c0      	ldr	r0, [r0, #12]
 8013088:	b160      	cbz	r0, 80130a4 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801308a:	b410      	push	{r4}
 801308c:	e001      	b.n	8013092 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801308e:	6800      	ldr	r0, [r0, #0]
 8013090:	b128      	cbz	r0, 801309e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8013092:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8013096:	4299      	cmp	r1, r3
 8013098:	bf08      	it	eq
 801309a:	4294      	cmpeq	r4, r2
 801309c:	d1f7      	bne.n	801308e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801309e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130a2:	4770      	bx	lr
 80130a4:	4770      	bx	lr
 80130a6:	bf00      	nop

080130a8 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80130a8:	b170      	cbz	r0, 80130c8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80130aa:	68c0      	ldr	r0, [r0, #12]
 80130ac:	b160      	cbz	r0, 80130c8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80130ae:	b410      	push	{r4}
 80130b0:	e001      	b.n	80130b6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80130b2:	6800      	ldr	r0, [r0, #0]
 80130b4:	b128      	cbz	r0, 80130c2 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80130b6:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 80130ba:	4299      	cmp	r1, r3
 80130bc:	bf08      	it	eq
 80130be:	4294      	cmpeq	r4, r2
 80130c0:	d1f7      	bne.n	80130b2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80130c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130c6:	4770      	bx	lr
 80130c8:	4770      	bx	lr
 80130ca:	bf00      	nop

080130cc <rclc_action_find_first_handle_with_goal_response>:
 80130cc:	b140      	cbz	r0, 80130e0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80130ce:	68c0      	ldr	r0, [r0, #12]
 80130d0:	b910      	cbnz	r0, 80130d8 <rclc_action_find_first_handle_with_goal_response+0xc>
 80130d2:	e005      	b.n	80130e0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80130d4:	6800      	ldr	r0, [r0, #0]
 80130d6:	b118      	cbz	r0, 80130e0 <rclc_action_find_first_handle_with_goal_response+0x14>
 80130d8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d0f9      	beq.n	80130d4 <rclc_action_find_first_handle_with_goal_response+0x8>
 80130e0:	4770      	bx	lr
 80130e2:	bf00      	nop

080130e4 <rclc_action_find_first_handle_with_result_response>:
 80130e4:	b140      	cbz	r0, 80130f8 <rclc_action_find_first_handle_with_result_response+0x14>
 80130e6:	68c0      	ldr	r0, [r0, #12]
 80130e8:	b910      	cbnz	r0, 80130f0 <rclc_action_find_first_handle_with_result_response+0xc>
 80130ea:	e005      	b.n	80130f8 <rclc_action_find_first_handle_with_result_response+0x14>
 80130ec:	6800      	ldr	r0, [r0, #0]
 80130ee:	b118      	cbz	r0, 80130f8 <rclc_action_find_first_handle_with_result_response+0x14>
 80130f0:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d0f9      	beq.n	80130ec <rclc_action_find_first_handle_with_result_response+0x8>
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop

080130fc <rclc_action_server_response_goal_request>:
 80130fc:	b198      	cbz	r0, 8013126 <rclc_action_server_response_goal_request+0x2a>
 80130fe:	b510      	push	{r4, lr}
 8013100:	6844      	ldr	r4, [r0, #4]
 8013102:	b086      	sub	sp, #24
 8013104:	2200      	movs	r2, #0
 8013106:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801310a:	460b      	mov	r3, r1
 801310c:	9205      	str	r2, [sp, #20]
 801310e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8013112:	aa03      	add	r2, sp, #12
 8013114:	f104 0010 	add.w	r0, r4, #16
 8013118:	f88d 300c 	strb.w	r3, [sp, #12]
 801311c:	f7ff fd4c 	bl	8012bb8 <rcl_action_send_goal_response>
 8013120:	b918      	cbnz	r0, 801312a <rclc_action_server_response_goal_request+0x2e>
 8013122:	b006      	add	sp, #24
 8013124:	bd10      	pop	{r4, pc}
 8013126:	200b      	movs	r0, #11
 8013128:	4770      	bx	lr
 801312a:	9001      	str	r0, [sp, #4]
 801312c:	f7f8 fa34 	bl	800b598 <rcutils_reset_error>
 8013130:	9801      	ldr	r0, [sp, #4]
 8013132:	b006      	add	sp, #24
 8013134:	bd10      	pop	{r4, pc}
 8013136:	bf00      	nop

08013138 <rclc_action_server_goal_cancel_accept>:
 8013138:	b310      	cbz	r0, 8013180 <rclc_action_server_goal_cancel_accept+0x48>
 801313a:	b510      	push	{r4, lr}
 801313c:	b090      	sub	sp, #64	; 0x40
 801313e:	4604      	mov	r4, r0
 8013140:	a806      	add	r0, sp, #24
 8013142:	f7ff feff 	bl	8012f44 <rcl_action_get_zero_initialized_cancel_response>
 8013146:	2300      	movs	r3, #0
 8013148:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801314c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013150:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8013154:	f88d 3018 	strb.w	r3, [sp, #24]
 8013158:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801315c:	f8cd d01c 	str.w	sp, [sp, #28]
 8013160:	46ec      	mov	ip, sp
 8013162:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013166:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8013188 <rclc_action_server_goal_cancel_accept+0x50>
 801316a:	6860      	ldr	r0, [r4, #4]
 801316c:	aa06      	add	r2, sp, #24
 801316e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8013172:	3010      	adds	r0, #16
 8013174:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013178:	f7ff fdd4 	bl	8012d24 <rcl_action_send_cancel_response>
 801317c:	b010      	add	sp, #64	; 0x40
 801317e:	bd10      	pop	{r4, pc}
 8013180:	200b      	movs	r0, #11
 8013182:	4770      	bx	lr
 8013184:	f3af 8000 	nop.w
 8013188:	00000001 	.word	0x00000001
 801318c:	00000001 	.word	0x00000001

08013190 <rclc_action_server_goal_cancel_reject>:
 8013190:	b082      	sub	sp, #8
 8013192:	b530      	push	{r4, r5, lr}
 8013194:	b08b      	sub	sp, #44	; 0x2c
 8013196:	ac0e      	add	r4, sp, #56	; 0x38
 8013198:	e884 000c 	stmia.w	r4, {r2, r3}
 801319c:	b188      	cbz	r0, 80131c2 <rclc_action_server_goal_cancel_reject+0x32>
 801319e:	4604      	mov	r4, r0
 80131a0:	a801      	add	r0, sp, #4
 80131a2:	460d      	mov	r5, r1
 80131a4:	f7ff fece 	bl	8012f44 <rcl_action_get_zero_initialized_cancel_response>
 80131a8:	aa01      	add	r2, sp, #4
 80131aa:	a90e      	add	r1, sp, #56	; 0x38
 80131ac:	f104 0010 	add.w	r0, r4, #16
 80131b0:	f88d 5004 	strb.w	r5, [sp, #4]
 80131b4:	f7ff fdb6 	bl	8012d24 <rcl_action_send_cancel_response>
 80131b8:	b00b      	add	sp, #44	; 0x2c
 80131ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131be:	b002      	add	sp, #8
 80131c0:	4770      	bx	lr
 80131c2:	200b      	movs	r0, #11
 80131c4:	b00b      	add	sp, #44	; 0x2c
 80131c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131ca:	b002      	add	sp, #8
 80131cc:	4770      	bx	lr
 80131ce:	bf00      	nop

080131d0 <__atomic_load_8>:
 80131d0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80131d4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80131d8:	4a15      	ldr	r2, [pc, #84]	; (8013230 <__atomic_load_8+0x60>)
 80131da:	4b16      	ldr	r3, [pc, #88]	; (8013234 <__atomic_load_8+0x64>)
 80131dc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80131e0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80131e4:	fb02 f101 	mul.w	r1, r2, r1
 80131e8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80131ec:	fba3 2301 	umull	r2, r3, r3, r1
 80131f0:	091b      	lsrs	r3, r3, #4
 80131f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80131f6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80131fa:	b4d0      	push	{r4, r6, r7}
 80131fc:	4c0e      	ldr	r4, [pc, #56]	; (8013238 <__atomic_load_8+0x68>)
 80131fe:	1ac9      	subs	r1, r1, r3
 8013200:	1862      	adds	r2, r4, r1
 8013202:	f04f 0c01 	mov.w	ip, #1
 8013206:	e8d2 3f4f 	ldrexb	r3, [r2]
 801320a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801320e:	2e00      	cmp	r6, #0
 8013210:	d1f9      	bne.n	8013206 <__atomic_load_8+0x36>
 8013212:	f3bf 8f5b 	dmb	ish
 8013216:	b2db      	uxtb	r3, r3
 8013218:	2b00      	cmp	r3, #0
 801321a:	d1f4      	bne.n	8013206 <__atomic_load_8+0x36>
 801321c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013220:	f3bf 8f5b 	dmb	ish
 8013224:	5463      	strb	r3, [r4, r1]
 8013226:	4630      	mov	r0, r6
 8013228:	4639      	mov	r1, r7
 801322a:	bcd0      	pop	{r4, r6, r7}
 801322c:	4770      	bx	lr
 801322e:	bf00      	nop
 8013230:	27d4eb2d 	.word	0x27d4eb2d
 8013234:	b21642c9 	.word	0xb21642c9
 8013238:	2000de04 	.word	0x2000de04

0801323c <__atomic_store_8>:
 801323c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013240:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8013244:	b570      	push	{r4, r5, r6, lr}
 8013246:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801324a:	4c14      	ldr	r4, [pc, #80]	; (801329c <__atomic_store_8+0x60>)
 801324c:	4d14      	ldr	r5, [pc, #80]	; (80132a0 <__atomic_store_8+0x64>)
 801324e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013252:	fb04 f101 	mul.w	r1, r4, r1
 8013256:	4c13      	ldr	r4, [pc, #76]	; (80132a4 <__atomic_store_8+0x68>)
 8013258:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801325c:	fba4 4e01 	umull	r4, lr, r4, r1
 8013260:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8013264:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8013268:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801326c:	eba1 0e0e 	sub.w	lr, r1, lr
 8013270:	eb05 0c0e 	add.w	ip, r5, lr
 8013274:	f04f 0401 	mov.w	r4, #1
 8013278:	e8dc 1f4f 	ldrexb	r1, [ip]
 801327c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8013280:	2e00      	cmp	r6, #0
 8013282:	d1f9      	bne.n	8013278 <__atomic_store_8+0x3c>
 8013284:	f3bf 8f5b 	dmb	ish
 8013288:	b2c9      	uxtb	r1, r1
 801328a:	2900      	cmp	r1, #0
 801328c:	d1f4      	bne.n	8013278 <__atomic_store_8+0x3c>
 801328e:	e9c0 2300 	strd	r2, r3, [r0]
 8013292:	f3bf 8f5b 	dmb	ish
 8013296:	f805 100e 	strb.w	r1, [r5, lr]
 801329a:	bd70      	pop	{r4, r5, r6, pc}
 801329c:	27d4eb2d 	.word	0x27d4eb2d
 80132a0:	2000de04 	.word	0x2000de04
 80132a4:	b21642c9 	.word	0xb21642c9

080132a8 <__atomic_exchange_8>:
 80132a8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80132ac:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 80132b0:	4916      	ldr	r1, [pc, #88]	; (801330c <__atomic_exchange_8+0x64>)
 80132b2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80132b6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80132ba:	fb01 fc0c 	mul.w	ip, r1, ip
 80132be:	4914      	ldr	r1, [pc, #80]	; (8013310 <__atomic_exchange_8+0x68>)
 80132c0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80132c4:	b570      	push	{r4, r5, r6, lr}
 80132c6:	4605      	mov	r5, r0
 80132c8:	fba1 010c 	umull	r0, r1, r1, ip
 80132cc:	0909      	lsrs	r1, r1, #4
 80132ce:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80132d2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80132d6:	4e0f      	ldr	r6, [pc, #60]	; (8013314 <__atomic_exchange_8+0x6c>)
 80132d8:	ebac 0c01 	sub.w	ip, ip, r1
 80132dc:	eb06 010c 	add.w	r1, r6, ip
 80132e0:	f04f 0e01 	mov.w	lr, #1
 80132e4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80132e8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80132ec:	2800      	cmp	r0, #0
 80132ee:	d1f9      	bne.n	80132e4 <__atomic_exchange_8+0x3c>
 80132f0:	f3bf 8f5b 	dmb	ish
 80132f4:	b2e4      	uxtb	r4, r4
 80132f6:	2c00      	cmp	r4, #0
 80132f8:	d1f4      	bne.n	80132e4 <__atomic_exchange_8+0x3c>
 80132fa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80132fe:	e9c5 2300 	strd	r2, r3, [r5]
 8013302:	f3bf 8f5b 	dmb	ish
 8013306:	f806 400c 	strb.w	r4, [r6, ip]
 801330a:	bd70      	pop	{r4, r5, r6, pc}
 801330c:	27d4eb2d 	.word	0x27d4eb2d
 8013310:	b21642c9 	.word	0xb21642c9
 8013314:	2000de04 	.word	0x2000de04

08013318 <rcutils_is_directory>:
 8013318:	2000      	movs	r0, #0
 801331a:	4770      	bx	lr

0801331c <rcutils_join_path>:
 801331c:	b082      	sub	sp, #8
 801331e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013322:	2000      	movs	r0, #0
 8013324:	b002      	add	sp, #8
 8013326:	4770      	bx	lr

08013328 <rcutils_to_native_path>:
 8013328:	b084      	sub	sp, #16
 801332a:	a801      	add	r0, sp, #4
 801332c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013330:	b004      	add	sp, #16
 8013332:	2000      	movs	r0, #0
 8013334:	4770      	bx	lr
 8013336:	bf00      	nop

08013338 <rcutils_get_zero_initialized_string_map>:
 8013338:	4b01      	ldr	r3, [pc, #4]	; (8013340 <rcutils_get_zero_initialized_string_map+0x8>)
 801333a:	2000      	movs	r0, #0
 801333c:	6018      	str	r0, [r3, #0]
 801333e:	4770      	bx	lr
 8013340:	2000de1c 	.word	0x2000de1c

08013344 <rcutils_string_map_reserve>:
 8013344:	2800      	cmp	r0, #0
 8013346:	d05f      	beq.n	8013408 <rcutils_string_map_reserve+0xc4>
 8013348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801334c:	460c      	mov	r4, r1
 801334e:	6801      	ldr	r1, [r0, #0]
 8013350:	b082      	sub	sp, #8
 8013352:	4605      	mov	r5, r0
 8013354:	b129      	cbz	r1, 8013362 <rcutils_string_map_reserve+0x1e>
 8013356:	68cb      	ldr	r3, [r1, #12]
 8013358:	42a3      	cmp	r3, r4
 801335a:	d906      	bls.n	801336a <rcutils_string_map_reserve+0x26>
 801335c:	461c      	mov	r4, r3
 801335e:	2900      	cmp	r1, #0
 8013360:	d1f9      	bne.n	8013356 <rcutils_string_map_reserve+0x12>
 8013362:	201f      	movs	r0, #31
 8013364:	b002      	add	sp, #8
 8013366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801336a:	688b      	ldr	r3, [r1, #8]
 801336c:	42a3      	cmp	r3, r4
 801336e:	d047      	beq.n	8013400 <rcutils_string_map_reserve+0xbc>
 8013370:	6a0e      	ldr	r6, [r1, #32]
 8013372:	2c00      	cmp	r4, #0
 8013374:	d034      	beq.n	80133e0 <rcutils_string_map_reserve+0x9c>
 8013376:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801337a:	d243      	bcs.n	8013404 <rcutils_string_map_reserve+0xc0>
 801337c:	00a7      	lsls	r7, r4, #2
 801337e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8013382:	6808      	ldr	r0, [r1, #0]
 8013384:	4632      	mov	r2, r6
 8013386:	4639      	mov	r1, r7
 8013388:	47c0      	blx	r8
 801338a:	2800      	cmp	r0, #0
 801338c:	d03a      	beq.n	8013404 <rcutils_string_map_reserve+0xc0>
 801338e:	682b      	ldr	r3, [r5, #0]
 8013390:	4632      	mov	r2, r6
 8013392:	6018      	str	r0, [r3, #0]
 8013394:	4639      	mov	r1, r7
 8013396:	6858      	ldr	r0, [r3, #4]
 8013398:	47c0      	blx	r8
 801339a:	2800      	cmp	r0, #0
 801339c:	d032      	beq.n	8013404 <rcutils_string_map_reserve+0xc0>
 801339e:	682d      	ldr	r5, [r5, #0]
 80133a0:	68ab      	ldr	r3, [r5, #8]
 80133a2:	6068      	str	r0, [r5, #4]
 80133a4:	42a3      	cmp	r3, r4
 80133a6:	d226      	bcs.n	80133f6 <rcutils_string_map_reserve+0xb2>
 80133a8:	682a      	ldr	r2, [r5, #0]
 80133aa:	eb00 0c07 	add.w	ip, r0, r7
 80133ae:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80133b2:	45e6      	cmp	lr, ip
 80133b4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80133b8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80133bc:	d203      	bcs.n	80133c6 <rcutils_string_map_reserve+0x82>
 80133be:	eb02 0c07 	add.w	ip, r2, r7
 80133c2:	4566      	cmp	r6, ip
 80133c4:	d322      	bcc.n	801340c <rcutils_string_map_reserve+0xc8>
 80133c6:	1ae3      	subs	r3, r4, r3
 80133c8:	009a      	lsls	r2, r3, #2
 80133ca:	4670      	mov	r0, lr
 80133cc:	2100      	movs	r1, #0
 80133ce:	9201      	str	r2, [sp, #4]
 80133d0:	f003 fc9a 	bl	8016d08 <memset>
 80133d4:	9a01      	ldr	r2, [sp, #4]
 80133d6:	2100      	movs	r1, #0
 80133d8:	4630      	mov	r0, r6
 80133da:	f003 fc95 	bl	8016d08 <memset>
 80133de:	e00a      	b.n	80133f6 <rcutils_string_map_reserve+0xb2>
 80133e0:	694f      	ldr	r7, [r1, #20]
 80133e2:	6808      	ldr	r0, [r1, #0]
 80133e4:	4631      	mov	r1, r6
 80133e6:	47b8      	blx	r7
 80133e8:	682b      	ldr	r3, [r5, #0]
 80133ea:	4631      	mov	r1, r6
 80133ec:	6858      	ldr	r0, [r3, #4]
 80133ee:	601c      	str	r4, [r3, #0]
 80133f0:	47b8      	blx	r7
 80133f2:	682d      	ldr	r5, [r5, #0]
 80133f4:	606c      	str	r4, [r5, #4]
 80133f6:	2000      	movs	r0, #0
 80133f8:	60ac      	str	r4, [r5, #8]
 80133fa:	b002      	add	sp, #8
 80133fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013400:	2000      	movs	r0, #0
 8013402:	e7af      	b.n	8013364 <rcutils_string_map_reserve+0x20>
 8013404:	200a      	movs	r0, #10
 8013406:	e7ad      	b.n	8013364 <rcutils_string_map_reserve+0x20>
 8013408:	200b      	movs	r0, #11
 801340a:	4770      	bx	lr
 801340c:	1f0b      	subs	r3, r1, #4
 801340e:	4418      	add	r0, r3
 8013410:	4413      	add	r3, r2
 8013412:	3a04      	subs	r2, #4
 8013414:	4417      	add	r7, r2
 8013416:	2200      	movs	r2, #0
 8013418:	f843 2f04 	str.w	r2, [r3, #4]!
 801341c:	42bb      	cmp	r3, r7
 801341e:	f840 2f04 	str.w	r2, [r0, #4]!
 8013422:	d1f9      	bne.n	8013418 <rcutils_string_map_reserve+0xd4>
 8013424:	e7e7      	b.n	80133f6 <rcutils_string_map_reserve+0xb2>
 8013426:	bf00      	nop

08013428 <rcutils_string_map_init>:
 8013428:	b082      	sub	sp, #8
 801342a:	b570      	push	{r4, r5, r6, lr}
 801342c:	ac04      	add	r4, sp, #16
 801342e:	e884 000c 	stmia.w	r4, {r2, r3}
 8013432:	b380      	cbz	r0, 8013496 <rcutils_string_map_init+0x6e>
 8013434:	6806      	ldr	r6, [r0, #0]
 8013436:	4604      	mov	r4, r0
 8013438:	b12e      	cbz	r6, 8013446 <rcutils_string_map_init+0x1e>
 801343a:	251e      	movs	r5, #30
 801343c:	4628      	mov	r0, r5
 801343e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013442:	b002      	add	sp, #8
 8013444:	4770      	bx	lr
 8013446:	a804      	add	r0, sp, #16
 8013448:	460d      	mov	r5, r1
 801344a:	f7f8 f869 	bl	800b520 <rcutils_allocator_is_valid>
 801344e:	b310      	cbz	r0, 8013496 <rcutils_string_map_init+0x6e>
 8013450:	9b04      	ldr	r3, [sp, #16]
 8013452:	9908      	ldr	r1, [sp, #32]
 8013454:	2024      	movs	r0, #36	; 0x24
 8013456:	4798      	blx	r3
 8013458:	6020      	str	r0, [r4, #0]
 801345a:	b310      	cbz	r0, 80134a2 <rcutils_string_map_init+0x7a>
 801345c:	f10d 0e10 	add.w	lr, sp, #16
 8013460:	e9c0 6600 	strd	r6, r6, [r0]
 8013464:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8013468:	f100 0c10 	add.w	ip, r0, #16
 801346c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013470:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013474:	f8de 3000 	ldr.w	r3, [lr]
 8013478:	f8cc 3000 	str.w	r3, [ip]
 801347c:	4629      	mov	r1, r5
 801347e:	4620      	mov	r0, r4
 8013480:	f7ff ff60 	bl	8013344 <rcutils_string_map_reserve>
 8013484:	4605      	mov	r5, r0
 8013486:	2800      	cmp	r0, #0
 8013488:	d0d8      	beq.n	801343c <rcutils_string_map_init+0x14>
 801348a:	9b05      	ldr	r3, [sp, #20]
 801348c:	9908      	ldr	r1, [sp, #32]
 801348e:	6820      	ldr	r0, [r4, #0]
 8013490:	4798      	blx	r3
 8013492:	6026      	str	r6, [r4, #0]
 8013494:	e7d2      	b.n	801343c <rcutils_string_map_init+0x14>
 8013496:	250b      	movs	r5, #11
 8013498:	4628      	mov	r0, r5
 801349a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801349e:	b002      	add	sp, #8
 80134a0:	4770      	bx	lr
 80134a2:	250a      	movs	r5, #10
 80134a4:	e7ca      	b.n	801343c <rcutils_string_map_init+0x14>
 80134a6:	bf00      	nop

080134a8 <rcutils_string_map_fini>:
 80134a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134ac:	b082      	sub	sp, #8
 80134ae:	2800      	cmp	r0, #0
 80134b0:	d03a      	beq.n	8013528 <rcutils_string_map_fini+0x80>
 80134b2:	6804      	ldr	r4, [r0, #0]
 80134b4:	4606      	mov	r6, r0
 80134b6:	2c00      	cmp	r4, #0
 80134b8:	d032      	beq.n	8013520 <rcutils_string_map_fini+0x78>
 80134ba:	68a3      	ldr	r3, [r4, #8]
 80134bc:	b32b      	cbz	r3, 801350a <rcutils_string_map_fini+0x62>
 80134be:	2500      	movs	r5, #0
 80134c0:	6822      	ldr	r2, [r4, #0]
 80134c2:	462f      	mov	r7, r5
 80134c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80134c8:	b1e0      	cbz	r0, 8013504 <rcutils_string_map_fini+0x5c>
 80134ca:	6a21      	ldr	r1, [r4, #32]
 80134cc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80134d0:	9101      	str	r1, [sp, #4]
 80134d2:	47c0      	blx	r8
 80134d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80134d8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80134dc:	9901      	ldr	r1, [sp, #4]
 80134de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80134e2:	47c0      	blx	r8
 80134e4:	68e3      	ldr	r3, [r4, #12]
 80134e6:	6862      	ldr	r2, [r4, #4]
 80134e8:	3b01      	subs	r3, #1
 80134ea:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80134ee:	60e3      	str	r3, [r4, #12]
 80134f0:	6834      	ldr	r4, [r6, #0]
 80134f2:	68a3      	ldr	r3, [r4, #8]
 80134f4:	3501      	adds	r5, #1
 80134f6:	429d      	cmp	r5, r3
 80134f8:	d207      	bcs.n	801350a <rcutils_string_map_fini+0x62>
 80134fa:	6822      	ldr	r2, [r4, #0]
 80134fc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013500:	2800      	cmp	r0, #0
 8013502:	d1e2      	bne.n	80134ca <rcutils_string_map_fini+0x22>
 8013504:	3501      	adds	r5, #1
 8013506:	429d      	cmp	r5, r3
 8013508:	d3dc      	bcc.n	80134c4 <rcutils_string_map_fini+0x1c>
 801350a:	2100      	movs	r1, #0
 801350c:	4630      	mov	r0, r6
 801350e:	f7ff ff19 	bl	8013344 <rcutils_string_map_reserve>
 8013512:	4604      	mov	r4, r0
 8013514:	b920      	cbnz	r0, 8013520 <rcutils_string_map_fini+0x78>
 8013516:	6830      	ldr	r0, [r6, #0]
 8013518:	6943      	ldr	r3, [r0, #20]
 801351a:	6a01      	ldr	r1, [r0, #32]
 801351c:	4798      	blx	r3
 801351e:	6034      	str	r4, [r6, #0]
 8013520:	4620      	mov	r0, r4
 8013522:	b002      	add	sp, #8
 8013524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013528:	240b      	movs	r4, #11
 801352a:	4620      	mov	r0, r4
 801352c:	b002      	add	sp, #8
 801352e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013532:	bf00      	nop

08013534 <rcutils_string_map_getn>:
 8013534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013538:	b300      	cbz	r0, 801357c <rcutils_string_map_getn+0x48>
 801353a:	6807      	ldr	r7, [r0, #0]
 801353c:	b1ff      	cbz	r7, 801357e <rcutils_string_map_getn+0x4a>
 801353e:	4688      	mov	r8, r1
 8013540:	b1e1      	cbz	r1, 801357c <rcutils_string_map_getn+0x48>
 8013542:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8013546:	683e      	ldr	r6, [r7, #0]
 8013548:	f1ba 0f00 	cmp.w	sl, #0
 801354c:	d016      	beq.n	801357c <rcutils_string_map_getn+0x48>
 801354e:	4691      	mov	r9, r2
 8013550:	3e04      	subs	r6, #4
 8013552:	2400      	movs	r4, #0
 8013554:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8013558:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801355c:	4628      	mov	r0, r5
 801355e:	3401      	adds	r4, #1
 8013560:	b155      	cbz	r5, 8013578 <rcutils_string_map_getn+0x44>
 8013562:	f7ec fe3f 	bl	80001e4 <strlen>
 8013566:	4548      	cmp	r0, r9
 8013568:	4602      	mov	r2, r0
 801356a:	4629      	mov	r1, r5
 801356c:	bf38      	it	cc
 801356e:	464a      	movcc	r2, r9
 8013570:	4640      	mov	r0, r8
 8013572:	f003 fbde 	bl	8016d32 <strncmp>
 8013576:	b128      	cbz	r0, 8013584 <rcutils_string_map_getn+0x50>
 8013578:	45a2      	cmp	sl, r4
 801357a:	d1eb      	bne.n	8013554 <rcutils_string_map_getn+0x20>
 801357c:	2700      	movs	r7, #0
 801357e:	4638      	mov	r0, r7
 8013580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f853 700b 	ldr.w	r7, [r3, fp]
 801358a:	4638      	mov	r0, r7
 801358c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013590 <rmw_get_zero_initialized_context>:
 8013590:	b510      	push	{r4, lr}
 8013592:	4604      	mov	r4, r0
 8013594:	3010      	adds	r0, #16
 8013596:	f000 f80b 	bl	80135b0 <rmw_get_zero_initialized_init_options>
 801359a:	2300      	movs	r3, #0
 801359c:	2000      	movs	r0, #0
 801359e:	2100      	movs	r1, #0
 80135a0:	e9c4 0100 	strd	r0, r1, [r4]
 80135a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80135a8:	60a3      	str	r3, [r4, #8]
 80135aa:	4620      	mov	r0, r4
 80135ac:	bd10      	pop	{r4, pc}
 80135ae:	bf00      	nop

080135b0 <rmw_get_zero_initialized_init_options>:
 80135b0:	b510      	push	{r4, lr}
 80135b2:	2238      	movs	r2, #56	; 0x38
 80135b4:	4604      	mov	r4, r0
 80135b6:	2100      	movs	r1, #0
 80135b8:	f003 fba6 	bl	8016d08 <memset>
 80135bc:	f104 0010 	add.w	r0, r4, #16
 80135c0:	f000 f806 	bl	80135d0 <rmw_get_default_security_options>
 80135c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135c8:	60e3      	str	r3, [r4, #12]
 80135ca:	4620      	mov	r0, r4
 80135cc:	bd10      	pop	{r4, pc}
 80135ce:	bf00      	nop

080135d0 <rmw_get_default_security_options>:
 80135d0:	2200      	movs	r2, #0
 80135d2:	7002      	strb	r2, [r0, #0]
 80135d4:	6042      	str	r2, [r0, #4]
 80135d6:	4770      	bx	lr

080135d8 <rmw_time_equal>:
 80135d8:	b4f0      	push	{r4, r5, r6, r7}
 80135da:	b084      	sub	sp, #16
 80135dc:	ac04      	add	r4, sp, #16
 80135de:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80135e2:	4603      	mov	r3, r0
 80135e4:	4924      	ldr	r1, [pc, #144]	; (8013678 <rmw_time_equal+0xa0>)
 80135e6:	9e03      	ldr	r6, [sp, #12]
 80135e8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80135ec:	2202      	movs	r2, #2
 80135ee:	4299      	cmp	r1, r3
 80135f0:	41aa      	sbcs	r2, r5
 80135f2:	d330      	bcc.n	8013656 <rmw_time_equal+0x7e>
 80135f4:	4c21      	ldr	r4, [pc, #132]	; (801367c <rmw_time_equal+0xa4>)
 80135f6:	fba3 3204 	umull	r3, r2, r3, r4
 80135fa:	fb04 2205 	mla	r2, r4, r5, r2
 80135fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013602:	43dd      	mvns	r5, r3
 8013604:	1a8c      	subs	r4, r1, r2
 8013606:	4285      	cmp	r5, r0
 8013608:	41b4      	sbcs	r4, r6
 801360a:	d332      	bcc.n	8013672 <rmw_time_equal+0x9a>
 801360c:	eb10 0c03 	adds.w	ip, r0, r3
 8013610:	eb42 0106 	adc.w	r1, r2, r6
 8013614:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8013618:	4817      	ldr	r0, [pc, #92]	; (8013678 <rmw_time_equal+0xa0>)
 801361a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801361c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801361e:	2202      	movs	r2, #2
 8013620:	4298      	cmp	r0, r3
 8013622:	41b2      	sbcs	r2, r6
 8013624:	d31c      	bcc.n	8013660 <rmw_time_equal+0x88>
 8013626:	4c15      	ldr	r4, [pc, #84]	; (801367c <rmw_time_equal+0xa4>)
 8013628:	fba3 3204 	umull	r3, r2, r3, r4
 801362c:	fb04 2206 	mla	r2, r4, r6, r2
 8013630:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013634:	43de      	mvns	r6, r3
 8013636:	1a84      	subs	r4, r0, r2
 8013638:	42ae      	cmp	r6, r5
 801363a:	41bc      	sbcs	r4, r7
 801363c:	d315      	bcc.n	801366a <rmw_time_equal+0x92>
 801363e:	195b      	adds	r3, r3, r5
 8013640:	eb42 0207 	adc.w	r2, r2, r7
 8013644:	428a      	cmp	r2, r1
 8013646:	bf08      	it	eq
 8013648:	4563      	cmpeq	r3, ip
 801364a:	bf0c      	ite	eq
 801364c:	2001      	moveq	r0, #1
 801364e:	2000      	movne	r0, #0
 8013650:	b004      	add	sp, #16
 8013652:	bcf0      	pop	{r4, r5, r6, r7}
 8013654:	4770      	bx	lr
 8013656:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801365a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801365e:	e7d9      	b.n	8013614 <rmw_time_equal+0x3c>
 8013660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013664:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8013668:	e7ec      	b.n	8013644 <rmw_time_equal+0x6c>
 801366a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801366e:	4602      	mov	r2, r0
 8013670:	e7e8      	b.n	8013644 <rmw_time_equal+0x6c>
 8013672:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013676:	e7cd      	b.n	8013614 <rmw_time_equal+0x3c>
 8013678:	25c17d04 	.word	0x25c17d04
 801367c:	3b9aca00 	.word	0x3b9aca00

08013680 <rmw_time_total_nsec>:
 8013680:	b470      	push	{r4, r5, r6}
 8013682:	b085      	sub	sp, #20
 8013684:	ac04      	add	r4, sp, #16
 8013686:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801368a:	4603      	mov	r3, r0
 801368c:	4912      	ldr	r1, [pc, #72]	; (80136d8 <rmw_time_total_nsec+0x58>)
 801368e:	9e03      	ldr	r6, [sp, #12]
 8013690:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013694:	2202      	movs	r2, #2
 8013696:	4299      	cmp	r1, r3
 8013698:	41aa      	sbcs	r2, r5
 801369a:	d311      	bcc.n	80136c0 <rmw_time_total_nsec+0x40>
 801369c:	4c0f      	ldr	r4, [pc, #60]	; (80136dc <rmw_time_total_nsec+0x5c>)
 801369e:	fba3 3204 	umull	r3, r2, r3, r4
 80136a2:	fb04 2205 	mla	r2, r4, r5, r2
 80136a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80136aa:	43dd      	mvns	r5, r3
 80136ac:	1a8c      	subs	r4, r1, r2
 80136ae:	4285      	cmp	r5, r0
 80136b0:	41b4      	sbcs	r4, r6
 80136b2:	d30c      	bcc.n	80136ce <rmw_time_total_nsec+0x4e>
 80136b4:	1818      	adds	r0, r3, r0
 80136b6:	eb42 0106 	adc.w	r1, r2, r6
 80136ba:	b005      	add	sp, #20
 80136bc:	bc70      	pop	{r4, r5, r6}
 80136be:	4770      	bx	lr
 80136c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80136c8:	b005      	add	sp, #20
 80136ca:	bc70      	pop	{r4, r5, r6}
 80136cc:	4770      	bx	lr
 80136ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136d2:	b005      	add	sp, #20
 80136d4:	bc70      	pop	{r4, r5, r6}
 80136d6:	4770      	bx	lr
 80136d8:	25c17d04 	.word	0x25c17d04
 80136dc:	3b9aca00 	.word	0x3b9aca00

080136e0 <rmw_get_zero_initialized_message_info>:
 80136e0:	b510      	push	{r4, lr}
 80136e2:	2240      	movs	r2, #64	; 0x40
 80136e4:	4604      	mov	r4, r0
 80136e6:	2100      	movs	r1, #0
 80136e8:	f003 fb0e 	bl	8016d08 <memset>
 80136ec:	4620      	mov	r0, r4
 80136ee:	bd10      	pop	{r4, pc}

080136f0 <rmw_validate_full_topic_name>:
 80136f0:	2800      	cmp	r0, #0
 80136f2:	d057      	beq.n	80137a4 <rmw_validate_full_topic_name+0xb4>
 80136f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136f8:	460d      	mov	r5, r1
 80136fa:	2900      	cmp	r1, #0
 80136fc:	d054      	beq.n	80137a8 <rmw_validate_full_topic_name+0xb8>
 80136fe:	4616      	mov	r6, r2
 8013700:	4604      	mov	r4, r0
 8013702:	f7ec fd6f 	bl	80001e4 <strlen>
 8013706:	b148      	cbz	r0, 801371c <rmw_validate_full_topic_name+0x2c>
 8013708:	7823      	ldrb	r3, [r4, #0]
 801370a:	2b2f      	cmp	r3, #47	; 0x2f
 801370c:	d00d      	beq.n	801372a <rmw_validate_full_topic_name+0x3a>
 801370e:	2302      	movs	r3, #2
 8013710:	602b      	str	r3, [r5, #0]
 8013712:	b13e      	cbz	r6, 8013724 <rmw_validate_full_topic_name+0x34>
 8013714:	2000      	movs	r0, #0
 8013716:	6030      	str	r0, [r6, #0]
 8013718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801371c:	2301      	movs	r3, #1
 801371e:	602b      	str	r3, [r5, #0]
 8013720:	2e00      	cmp	r6, #0
 8013722:	d1f7      	bne.n	8013714 <rmw_validate_full_topic_name+0x24>
 8013724:	2000      	movs	r0, #0
 8013726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801372a:	1e43      	subs	r3, r0, #1
 801372c:	5ce2      	ldrb	r2, [r4, r3]
 801372e:	2a2f      	cmp	r2, #47	; 0x2f
 8013730:	d03c      	beq.n	80137ac <rmw_validate_full_topic_name+0xbc>
 8013732:	1e63      	subs	r3, r4, #1
 8013734:	eb03 0800 	add.w	r8, r3, r0
 8013738:	f1c4 0e01 	rsb	lr, r4, #1
 801373c:	eb0e 0703 	add.w	r7, lr, r3
 8013740:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013744:	f021 0220 	bic.w	r2, r1, #32
 8013748:	3a41      	subs	r2, #65	; 0x41
 801374a:	2a19      	cmp	r2, #25
 801374c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8013750:	d90b      	bls.n	801376a <rmw_validate_full_topic_name+0x7a>
 8013752:	295f      	cmp	r1, #95	; 0x5f
 8013754:	d009      	beq.n	801376a <rmw_validate_full_topic_name+0x7a>
 8013756:	f1bc 0f0a 	cmp.w	ip, #10
 801375a:	d906      	bls.n	801376a <rmw_validate_full_topic_name+0x7a>
 801375c:	2304      	movs	r3, #4
 801375e:	602b      	str	r3, [r5, #0]
 8013760:	2e00      	cmp	r6, #0
 8013762:	d0df      	beq.n	8013724 <rmw_validate_full_topic_name+0x34>
 8013764:	6037      	str	r7, [r6, #0]
 8013766:	2000      	movs	r0, #0
 8013768:	e7d6      	b.n	8013718 <rmw_validate_full_topic_name+0x28>
 801376a:	4543      	cmp	r3, r8
 801376c:	d1e6      	bne.n	801373c <rmw_validate_full_topic_name+0x4c>
 801376e:	4f1a      	ldr	r7, [pc, #104]	; (80137d8 <rmw_validate_full_topic_name+0xe8>)
 8013770:	2301      	movs	r3, #1
 8013772:	e004      	b.n	801377e <rmw_validate_full_topic_name+0x8e>
 8013774:	4298      	cmp	r0, r3
 8013776:	f104 0401 	add.w	r4, r4, #1
 801377a:	d91c      	bls.n	80137b6 <rmw_validate_full_topic_name+0xc6>
 801377c:	4613      	mov	r3, r2
 801377e:	4298      	cmp	r0, r3
 8013780:	f103 0201 	add.w	r2, r3, #1
 8013784:	d0f6      	beq.n	8013774 <rmw_validate_full_topic_name+0x84>
 8013786:	7821      	ldrb	r1, [r4, #0]
 8013788:	292f      	cmp	r1, #47	; 0x2f
 801378a:	d1f3      	bne.n	8013774 <rmw_validate_full_topic_name+0x84>
 801378c:	7861      	ldrb	r1, [r4, #1]
 801378e:	292f      	cmp	r1, #47	; 0x2f
 8013790:	d01c      	beq.n	80137cc <rmw_validate_full_topic_name+0xdc>
 8013792:	5dc9      	ldrb	r1, [r1, r7]
 8013794:	0749      	lsls	r1, r1, #29
 8013796:	d5ed      	bpl.n	8013774 <rmw_validate_full_topic_name+0x84>
 8013798:	2206      	movs	r2, #6
 801379a:	602a      	str	r2, [r5, #0]
 801379c:	2e00      	cmp	r6, #0
 801379e:	d0c1      	beq.n	8013724 <rmw_validate_full_topic_name+0x34>
 80137a0:	6033      	str	r3, [r6, #0]
 80137a2:	e7bf      	b.n	8013724 <rmw_validate_full_topic_name+0x34>
 80137a4:	200b      	movs	r0, #11
 80137a6:	4770      	bx	lr
 80137a8:	200b      	movs	r0, #11
 80137aa:	e7b5      	b.n	8013718 <rmw_validate_full_topic_name+0x28>
 80137ac:	2203      	movs	r2, #3
 80137ae:	602a      	str	r2, [r5, #0]
 80137b0:	2e00      	cmp	r6, #0
 80137b2:	d1f5      	bne.n	80137a0 <rmw_validate_full_topic_name+0xb0>
 80137b4:	e7b6      	b.n	8013724 <rmw_validate_full_topic_name+0x34>
 80137b6:	28f7      	cmp	r0, #247	; 0xf7
 80137b8:	d802      	bhi.n	80137c0 <rmw_validate_full_topic_name+0xd0>
 80137ba:	2000      	movs	r0, #0
 80137bc:	6028      	str	r0, [r5, #0]
 80137be:	e7ab      	b.n	8013718 <rmw_validate_full_topic_name+0x28>
 80137c0:	2307      	movs	r3, #7
 80137c2:	602b      	str	r3, [r5, #0]
 80137c4:	2e00      	cmp	r6, #0
 80137c6:	d0ad      	beq.n	8013724 <rmw_validate_full_topic_name+0x34>
 80137c8:	23f6      	movs	r3, #246	; 0xf6
 80137ca:	e7e9      	b.n	80137a0 <rmw_validate_full_topic_name+0xb0>
 80137cc:	2205      	movs	r2, #5
 80137ce:	602a      	str	r2, [r5, #0]
 80137d0:	2e00      	cmp	r6, #0
 80137d2:	d1e5      	bne.n	80137a0 <rmw_validate_full_topic_name+0xb0>
 80137d4:	e7a6      	b.n	8013724 <rmw_validate_full_topic_name+0x34>
 80137d6:	bf00      	nop
 80137d8:	080188c8 	.word	0x080188c8

080137dc <get_memory>:
 80137dc:	4603      	mov	r3, r0
 80137de:	6840      	ldr	r0, [r0, #4]
 80137e0:	b158      	cbz	r0, 80137fa <get_memory+0x1e>
 80137e2:	6842      	ldr	r2, [r0, #4]
 80137e4:	605a      	str	r2, [r3, #4]
 80137e6:	b10a      	cbz	r2, 80137ec <get_memory+0x10>
 80137e8:	2100      	movs	r1, #0
 80137ea:	6011      	str	r1, [r2, #0]
 80137ec:	681a      	ldr	r2, [r3, #0]
 80137ee:	6042      	str	r2, [r0, #4]
 80137f0:	b102      	cbz	r2, 80137f4 <get_memory+0x18>
 80137f2:	6010      	str	r0, [r2, #0]
 80137f4:	2200      	movs	r2, #0
 80137f6:	6002      	str	r2, [r0, #0]
 80137f8:	6018      	str	r0, [r3, #0]
 80137fa:	4770      	bx	lr

080137fc <put_memory>:
 80137fc:	680b      	ldr	r3, [r1, #0]
 80137fe:	b10b      	cbz	r3, 8013804 <put_memory+0x8>
 8013800:	684a      	ldr	r2, [r1, #4]
 8013802:	605a      	str	r2, [r3, #4]
 8013804:	684a      	ldr	r2, [r1, #4]
 8013806:	b102      	cbz	r2, 801380a <put_memory+0xe>
 8013808:	6013      	str	r3, [r2, #0]
 801380a:	6803      	ldr	r3, [r0, #0]
 801380c:	428b      	cmp	r3, r1
 801380e:	6843      	ldr	r3, [r0, #4]
 8013810:	bf08      	it	eq
 8013812:	6002      	streq	r2, [r0, #0]
 8013814:	604b      	str	r3, [r1, #4]
 8013816:	b103      	cbz	r3, 801381a <put_memory+0x1e>
 8013818:	6019      	str	r1, [r3, #0]
 801381a:	2300      	movs	r3, #0
 801381c:	600b      	str	r3, [r1, #0]
 801381e:	6041      	str	r1, [r0, #4]
 8013820:	4770      	bx	lr
 8013822:	bf00      	nop

08013824 <rmw_destroy_client>:
 8013824:	b570      	push	{r4, r5, r6, lr}
 8013826:	b128      	cbz	r0, 8013834 <rmw_destroy_client+0x10>
 8013828:	4604      	mov	r4, r0
 801382a:	6800      	ldr	r0, [r0, #0]
 801382c:	460d      	mov	r5, r1
 801382e:	f7f9 f80d 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 8013832:	b910      	cbnz	r0, 801383a <rmw_destroy_client+0x16>
 8013834:	2401      	movs	r4, #1
 8013836:	4620      	mov	r0, r4
 8013838:	bd70      	pop	{r4, r5, r6, pc}
 801383a:	6863      	ldr	r3, [r4, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d0f9      	beq.n	8013834 <rmw_destroy_client+0x10>
 8013840:	2d00      	cmp	r5, #0
 8013842:	d0f7      	beq.n	8013834 <rmw_destroy_client+0x10>
 8013844:	6828      	ldr	r0, [r5, #0]
 8013846:	f7f9 f801 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 801384a:	2800      	cmp	r0, #0
 801384c:	d0f2      	beq.n	8013834 <rmw_destroy_client+0x10>
 801384e:	686e      	ldr	r6, [r5, #4]
 8013850:	2e00      	cmp	r6, #0
 8013852:	d0ef      	beq.n	8013834 <rmw_destroy_client+0x10>
 8013854:	6864      	ldr	r4, [r4, #4]
 8013856:	6932      	ldr	r2, [r6, #16]
 8013858:	6920      	ldr	r0, [r4, #16]
 801385a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801385e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013862:	6819      	ldr	r1, [r3, #0]
 8013864:	f7fa fa38 	bl	800dcd8 <uxr_buffer_cancel_data>
 8013868:	4602      	mov	r2, r0
 801386a:	6920      	ldr	r0, [r4, #16]
 801386c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013870:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013874:	f7f8 ff6a 	bl	800c74c <run_xrce_session>
 8013878:	6920      	ldr	r0, [r4, #16]
 801387a:	6932      	ldr	r2, [r6, #16]
 801387c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013880:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013884:	6819      	ldr	r1, [r3, #0]
 8013886:	f7fa f89d 	bl	800d9c4 <uxr_buffer_delete_entity>
 801388a:	4602      	mov	r2, r0
 801388c:	6920      	ldr	r0, [r4, #16]
 801388e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013892:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013896:	f7f8 ff59 	bl	800c74c <run_xrce_session>
 801389a:	2800      	cmp	r0, #0
 801389c:	4628      	mov	r0, r5
 801389e:	bf14      	ite	ne
 80138a0:	2400      	movne	r4, #0
 80138a2:	2402      	moveq	r4, #2
 80138a4:	f7f8 fe3c 	bl	800c520 <rmw_uxrce_fini_client_memory>
 80138a8:	e7c5      	b.n	8013836 <rmw_destroy_client+0x12>
 80138aa:	bf00      	nop

080138ac <rmw_get_implementation_identifier>:
 80138ac:	4b01      	ldr	r3, [pc, #4]	; (80138b4 <rmw_get_implementation_identifier+0x8>)
 80138ae:	6818      	ldr	r0, [r3, #0]
 80138b0:	4770      	bx	lr
 80138b2:	bf00      	nop
 80138b4:	08018608 	.word	0x08018608

080138b8 <rmw_create_guard_condition>:
 80138b8:	b538      	push	{r3, r4, r5, lr}
 80138ba:	4605      	mov	r5, r0
 80138bc:	4807      	ldr	r0, [pc, #28]	; (80138dc <rmw_create_guard_condition+0x24>)
 80138be:	f7ff ff8d 	bl	80137dc <get_memory>
 80138c2:	b148      	cbz	r0, 80138d8 <rmw_create_guard_condition+0x20>
 80138c4:	6884      	ldr	r4, [r0, #8]
 80138c6:	2300      	movs	r3, #0
 80138c8:	7423      	strb	r3, [r4, #16]
 80138ca:	61e5      	str	r5, [r4, #28]
 80138cc:	f7ff ffee 	bl	80138ac <rmw_get_implementation_identifier>
 80138d0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80138d4:	f104 0014 	add.w	r0, r4, #20
 80138d8:	bd38      	pop	{r3, r4, r5, pc}
 80138da:	bf00      	nop
 80138dc:	2000dd4c 	.word	0x2000dd4c

080138e0 <rmw_destroy_guard_condition>:
 80138e0:	b508      	push	{r3, lr}
 80138e2:	4b08      	ldr	r3, [pc, #32]	; (8013904 <rmw_destroy_guard_condition+0x24>)
 80138e4:	6819      	ldr	r1, [r3, #0]
 80138e6:	b911      	cbnz	r1, 80138ee <rmw_destroy_guard_condition+0xe>
 80138e8:	e00a      	b.n	8013900 <rmw_destroy_guard_condition+0x20>
 80138ea:	6849      	ldr	r1, [r1, #4]
 80138ec:	b141      	cbz	r1, 8013900 <rmw_destroy_guard_condition+0x20>
 80138ee:	688b      	ldr	r3, [r1, #8]
 80138f0:	3314      	adds	r3, #20
 80138f2:	4298      	cmp	r0, r3
 80138f4:	d1f9      	bne.n	80138ea <rmw_destroy_guard_condition+0xa>
 80138f6:	4803      	ldr	r0, [pc, #12]	; (8013904 <rmw_destroy_guard_condition+0x24>)
 80138f8:	f7ff ff80 	bl	80137fc <put_memory>
 80138fc:	2000      	movs	r0, #0
 80138fe:	bd08      	pop	{r3, pc}
 8013900:	2001      	movs	r0, #1
 8013902:	bd08      	pop	{r3, pc}
 8013904:	2000dd4c 	.word	0x2000dd4c

08013908 <rmw_init_options_init>:
 8013908:	b084      	sub	sp, #16
 801390a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801390c:	b083      	sub	sp, #12
 801390e:	ad09      	add	r5, sp, #36	; 0x24
 8013910:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013914:	b130      	cbz	r0, 8013924 <rmw_init_options_init+0x1c>
 8013916:	4604      	mov	r4, r0
 8013918:	4628      	mov	r0, r5
 801391a:	f7f7 fe01 	bl	800b520 <rcutils_allocator_is_valid>
 801391e:	b108      	cbz	r0, 8013924 <rmw_init_options_init+0x1c>
 8013920:	68a6      	ldr	r6, [r4, #8]
 8013922:	b12e      	cbz	r6, 8013930 <rmw_init_options_init+0x28>
 8013924:	200b      	movs	r0, #11
 8013926:	b003      	add	sp, #12
 8013928:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801392c:	b004      	add	sp, #16
 801392e:	4770      	bx	lr
 8013930:	2200      	movs	r2, #0
 8013932:	2300      	movs	r3, #0
 8013934:	e9c4 2300 	strd	r2, r3, [r4]
 8013938:	4b22      	ldr	r3, [pc, #136]	; (80139c4 <rmw_init_options_init+0xbc>)
 801393a:	f8df e098 	ldr.w	lr, [pc, #152]	; 80139d4 <rmw_init_options_init+0xcc>
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	60a3      	str	r3, [r4, #8]
 8013942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013944:	f104 0c20 	add.w	ip, r4, #32
 8013948:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801394c:	466f      	mov	r7, sp
 801394e:	682b      	ldr	r3, [r5, #0]
 8013950:	f8cc 3000 	str.w	r3, [ip]
 8013954:	4638      	mov	r0, r7
 8013956:	f8c4 e01c 	str.w	lr, [r4, #28]
 801395a:	60e6      	str	r6, [r4, #12]
 801395c:	f7ff fe38 	bl	80135d0 <rmw_get_default_security_options>
 8013960:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013964:	f104 0310 	add.w	r3, r4, #16
 8013968:	e883 0003 	stmia.w	r3, {r0, r1}
 801396c:	2203      	movs	r2, #3
 801396e:	4816      	ldr	r0, [pc, #88]	; (80139c8 <rmw_init_options_init+0xc0>)
 8013970:	4916      	ldr	r1, [pc, #88]	; (80139cc <rmw_init_options_init+0xc4>)
 8013972:	7626      	strb	r6, [r4, #24]
 8013974:	f7f8 fd14 	bl	800c3a0 <rmw_uxrce_init_init_options_impl_memory>
 8013978:	4813      	ldr	r0, [pc, #76]	; (80139c8 <rmw_init_options_init+0xc0>)
 801397a:	f7ff ff2f 	bl	80137dc <get_memory>
 801397e:	b1f0      	cbz	r0, 80139be <rmw_init_options_init+0xb6>
 8013980:	4a13      	ldr	r2, [pc, #76]	; (80139d0 <rmw_init_options_init+0xc8>)
 8013982:	6883      	ldr	r3, [r0, #8]
 8013984:	6851      	ldr	r1, [r2, #4]
 8013986:	7810      	ldrb	r0, [r2, #0]
 8013988:	6363      	str	r3, [r4, #52]	; 0x34
 801398a:	7418      	strb	r0, [r3, #16]
 801398c:	6159      	str	r1, [r3, #20]
 801398e:	68d1      	ldr	r1, [r2, #12]
 8013990:	61d9      	str	r1, [r3, #28]
 8013992:	6911      	ldr	r1, [r2, #16]
 8013994:	6219      	str	r1, [r3, #32]
 8013996:	6951      	ldr	r1, [r2, #20]
 8013998:	6892      	ldr	r2, [r2, #8]
 801399a:	619a      	str	r2, [r3, #24]
 801399c:	6259      	str	r1, [r3, #36]	; 0x24
 801399e:	f7fb fcbb 	bl	800f318 <uxr_nanos>
 80139a2:	f002 fef5 	bl	8016790 <srand>
 80139a6:	f002 ff21 	bl	80167ec <rand>
 80139aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80139ac:	6298      	str	r0, [r3, #40]	; 0x28
 80139ae:	2800      	cmp	r0, #0
 80139b0:	d0f9      	beq.n	80139a6 <rmw_init_options_init+0x9e>
 80139b2:	2000      	movs	r0, #0
 80139b4:	b003      	add	sp, #12
 80139b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80139ba:	b004      	add	sp, #16
 80139bc:	4770      	bx	lr
 80139be:	2001      	movs	r0, #1
 80139c0:	e7b1      	b.n	8013926 <rmw_init_options_init+0x1e>
 80139c2:	bf00      	nop
 80139c4:	08018608 	.word	0x08018608
 80139c8:	2000dd5c 	.word	0x2000dd5c
 80139cc:	200095f8 	.word	0x200095f8
 80139d0:	20009444 	.word	0x20009444
 80139d4:	08017db8 	.word	0x08017db8

080139d8 <rmw_init_options_copy>:
 80139d8:	b570      	push	{r4, r5, r6, lr}
 80139da:	b158      	cbz	r0, 80139f4 <rmw_init_options_copy+0x1c>
 80139dc:	460d      	mov	r5, r1
 80139de:	b149      	cbz	r1, 80139f4 <rmw_init_options_copy+0x1c>
 80139e0:	4604      	mov	r4, r0
 80139e2:	6880      	ldr	r0, [r0, #8]
 80139e4:	b120      	cbz	r0, 80139f0 <rmw_init_options_copy+0x18>
 80139e6:	4b1e      	ldr	r3, [pc, #120]	; (8013a60 <rmw_init_options_copy+0x88>)
 80139e8:	6819      	ldr	r1, [r3, #0]
 80139ea:	f7ec fbf1 	bl	80001d0 <strcmp>
 80139ee:	bb90      	cbnz	r0, 8013a56 <rmw_init_options_copy+0x7e>
 80139f0:	68ab      	ldr	r3, [r5, #8]
 80139f2:	b113      	cbz	r3, 80139fa <rmw_init_options_copy+0x22>
 80139f4:	250b      	movs	r5, #11
 80139f6:	4628      	mov	r0, r5
 80139f8:	bd70      	pop	{r4, r5, r6, pc}
 80139fa:	4623      	mov	r3, r4
 80139fc:	462a      	mov	r2, r5
 80139fe:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8013a02:	f8d3 c000 	ldr.w	ip, [r3]
 8013a06:	6858      	ldr	r0, [r3, #4]
 8013a08:	6899      	ldr	r1, [r3, #8]
 8013a0a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8013a0e:	f8c2 e00c 	str.w	lr, [r2, #12]
 8013a12:	3310      	adds	r3, #16
 8013a14:	42b3      	cmp	r3, r6
 8013a16:	f8c2 c000 	str.w	ip, [r2]
 8013a1a:	6050      	str	r0, [r2, #4]
 8013a1c:	6091      	str	r1, [r2, #8]
 8013a1e:	f102 0210 	add.w	r2, r2, #16
 8013a22:	d1ee      	bne.n	8013a02 <rmw_init_options_copy+0x2a>
 8013a24:	6819      	ldr	r1, [r3, #0]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	480e      	ldr	r0, [pc, #56]	; (8013a64 <rmw_init_options_copy+0x8c>)
 8013a2a:	6053      	str	r3, [r2, #4]
 8013a2c:	6011      	str	r1, [r2, #0]
 8013a2e:	f7ff fed5 	bl	80137dc <get_memory>
 8013a32:	b198      	cbz	r0, 8013a5c <rmw_init_options_copy+0x84>
 8013a34:	6883      	ldr	r3, [r0, #8]
 8013a36:	636b      	str	r3, [r5, #52]	; 0x34
 8013a38:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013a3a:	f102 0c10 	add.w	ip, r2, #16
 8013a3e:	f103 0410 	add.w	r4, r3, #16
 8013a42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a48:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8013a4c:	2500      	movs	r5, #0
 8013a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013a52:	4628      	mov	r0, r5
 8013a54:	bd70      	pop	{r4, r5, r6, pc}
 8013a56:	250c      	movs	r5, #12
 8013a58:	4628      	mov	r0, r5
 8013a5a:	bd70      	pop	{r4, r5, r6, pc}
 8013a5c:	2501      	movs	r5, #1
 8013a5e:	e7ca      	b.n	80139f6 <rmw_init_options_copy+0x1e>
 8013a60:	08018608 	.word	0x08018608
 8013a64:	2000dd5c 	.word	0x2000dd5c

08013a68 <rmw_init_options_fini>:
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d03d      	beq.n	8013ae8 <rmw_init_options_fini+0x80>
 8013a6c:	b510      	push	{r4, lr}
 8013a6e:	4604      	mov	r4, r0
 8013a70:	b08e      	sub	sp, #56	; 0x38
 8013a72:	3020      	adds	r0, #32
 8013a74:	f7f7 fd54 	bl	800b520 <rcutils_allocator_is_valid>
 8013a78:	b360      	cbz	r0, 8013ad4 <rmw_init_options_fini+0x6c>
 8013a7a:	68a0      	ldr	r0, [r4, #8]
 8013a7c:	b120      	cbz	r0, 8013a88 <rmw_init_options_fini+0x20>
 8013a7e:	4b1c      	ldr	r3, [pc, #112]	; (8013af0 <rmw_init_options_fini+0x88>)
 8013a80:	6819      	ldr	r1, [r3, #0]
 8013a82:	f7ec fba5 	bl	80001d0 <strcmp>
 8013a86:	bb68      	cbnz	r0, 8013ae4 <rmw_init_options_fini+0x7c>
 8013a88:	4b1a      	ldr	r3, [pc, #104]	; (8013af4 <rmw_init_options_fini+0x8c>)
 8013a8a:	6819      	ldr	r1, [r3, #0]
 8013a8c:	b331      	cbz	r1, 8013adc <rmw_init_options_fini+0x74>
 8013a8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013a90:	e001      	b.n	8013a96 <rmw_init_options_fini+0x2e>
 8013a92:	6849      	ldr	r1, [r1, #4]
 8013a94:	b311      	cbz	r1, 8013adc <rmw_init_options_fini+0x74>
 8013a96:	688b      	ldr	r3, [r1, #8]
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d1fa      	bne.n	8013a92 <rmw_init_options_fini+0x2a>
 8013a9c:	4815      	ldr	r0, [pc, #84]	; (8013af4 <rmw_init_options_fini+0x8c>)
 8013a9e:	f7ff fead 	bl	80137fc <put_memory>
 8013aa2:	4668      	mov	r0, sp
 8013aa4:	f7ff fd84 	bl	80135b0 <rmw_get_zero_initialized_init_options>
 8013aa8:	46ee      	mov	lr, sp
 8013aaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013aae:	46a4      	mov	ip, r4
 8013ab0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ab4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ab8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013abc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ac0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ac4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013ac8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013acc:	2300      	movs	r3, #0
 8013ace:	4618      	mov	r0, r3
 8013ad0:	b00e      	add	sp, #56	; 0x38
 8013ad2:	bd10      	pop	{r4, pc}
 8013ad4:	230b      	movs	r3, #11
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	b00e      	add	sp, #56	; 0x38
 8013ada:	bd10      	pop	{r4, pc}
 8013adc:	2301      	movs	r3, #1
 8013ade:	4618      	mov	r0, r3
 8013ae0:	b00e      	add	sp, #56	; 0x38
 8013ae2:	bd10      	pop	{r4, pc}
 8013ae4:	230c      	movs	r3, #12
 8013ae6:	e7f2      	b.n	8013ace <rmw_init_options_fini+0x66>
 8013ae8:	230b      	movs	r3, #11
 8013aea:	4618      	mov	r0, r3
 8013aec:	4770      	bx	lr
 8013aee:	bf00      	nop
 8013af0:	08018608 	.word	0x08018608
 8013af4:	2000dd5c 	.word	0x2000dd5c

08013af8 <rmw_init>:
 8013af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013afc:	b083      	sub	sp, #12
 8013afe:	2800      	cmp	r0, #0
 8013b00:	f000 80d3 	beq.w	8013caa <rmw_init+0x1b2>
 8013b04:	460e      	mov	r6, r1
 8013b06:	2900      	cmp	r1, #0
 8013b08:	f000 80cf 	beq.w	8013caa <rmw_init+0x1b2>
 8013b0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013b0e:	4605      	mov	r5, r0
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	f000 80ca 	beq.w	8013caa <rmw_init+0x1b2>
 8013b16:	4b78      	ldr	r3, [pc, #480]	; (8013cf8 <rmw_init+0x200>)
 8013b18:	6880      	ldr	r0, [r0, #8]
 8013b1a:	681f      	ldr	r7, [r3, #0]
 8013b1c:	b128      	cbz	r0, 8013b2a <rmw_init+0x32>
 8013b1e:	4639      	mov	r1, r7
 8013b20:	f7ec fb56 	bl	80001d0 <strcmp>
 8013b24:	2800      	cmp	r0, #0
 8013b26:	f040 80ca 	bne.w	8013cbe <rmw_init+0x1c6>
 8013b2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b2e:	4c73      	ldr	r4, [pc, #460]	; (8013cfc <rmw_init+0x204>)
 8013b30:	4973      	ldr	r1, [pc, #460]	; (8013d00 <rmw_init+0x208>)
 8013b32:	4874      	ldr	r0, [pc, #464]	; (8013d04 <rmw_init+0x20c>)
 8013b34:	60b7      	str	r7, [r6, #8]
 8013b36:	e9c6 2300 	strd	r2, r3, [r6]
 8013b3a:	68eb      	ldr	r3, [r5, #12]
 8013b3c:	64b3      	str	r3, [r6, #72]	; 0x48
 8013b3e:	2201      	movs	r2, #1
 8013b40:	f7f8 fbce 	bl	800c2e0 <rmw_uxrce_init_session_memory>
 8013b44:	4620      	mov	r0, r4
 8013b46:	4970      	ldr	r1, [pc, #448]	; (8013d08 <rmw_init+0x210>)
 8013b48:	2204      	movs	r2, #4
 8013b4a:	f7f8 fc09 	bl	800c360 <rmw_uxrce_init_static_input_buffer_memory>
 8013b4e:	f04f 0800 	mov.w	r8, #0
 8013b52:	486c      	ldr	r0, [pc, #432]	; (8013d04 <rmw_init+0x20c>)
 8013b54:	f884 800d 	strb.w	r8, [r4, #13]
 8013b58:	f7ff fe40 	bl	80137dc <get_memory>
 8013b5c:	2800      	cmp	r0, #0
 8013b5e:	f000 80a9 	beq.w	8013cb4 <rmw_init+0x1bc>
 8013b62:	6884      	ldr	r4, [r0, #8]
 8013b64:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8013b66:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8013b68:	f890 c010 	ldrb.w	ip, [r0, #16]
 8013b6c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013b70:	9101      	str	r1, [sp, #4]
 8013b72:	6a00      	ldr	r0, [r0, #32]
 8013b74:	9000      	str	r0, [sp, #0]
 8013b76:	f104 0910 	add.w	r9, r4, #16
 8013b7a:	4661      	mov	r1, ip
 8013b7c:	4648      	mov	r0, r9
 8013b7e:	f000 ff53 	bl	8014a28 <uxr_set_custom_transport_callbacks>
 8013b82:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8013b86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013b8a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8013b8e:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8013b92:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8013b96:	495d      	ldr	r1, [pc, #372]	; (8013d0c <rmw_init+0x214>)
 8013b98:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8013b9c:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8013ba0:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8013ba4:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8013ba8:	4859      	ldr	r0, [pc, #356]	; (8013d10 <rmw_init+0x218>)
 8013baa:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8013bae:	2201      	movs	r2, #1
 8013bb0:	64f4      	str	r4, [r6, #76]	; 0x4c
 8013bb2:	f7f8 fb75 	bl	800c2a0 <rmw_uxrce_init_node_memory>
 8013bb6:	4957      	ldr	r1, [pc, #348]	; (8013d14 <rmw_init+0x21c>)
 8013bb8:	4857      	ldr	r0, [pc, #348]	; (8013d18 <rmw_init+0x220>)
 8013bba:	2205      	movs	r2, #5
 8013bbc:	f7f8 fb50 	bl	800c260 <rmw_uxrce_init_subscription_memory>
 8013bc0:	4956      	ldr	r1, [pc, #344]	; (8013d1c <rmw_init+0x224>)
 8013bc2:	4857      	ldr	r0, [pc, #348]	; (8013d20 <rmw_init+0x228>)
 8013bc4:	220a      	movs	r2, #10
 8013bc6:	f7f8 fb2b 	bl	800c220 <rmw_uxrce_init_publisher_memory>
 8013bca:	4956      	ldr	r1, [pc, #344]	; (8013d24 <rmw_init+0x22c>)
 8013bcc:	4856      	ldr	r0, [pc, #344]	; (8013d28 <rmw_init+0x230>)
 8013bce:	2201      	movs	r2, #1
 8013bd0:	f7f8 fae6 	bl	800c1a0 <rmw_uxrce_init_service_memory>
 8013bd4:	4955      	ldr	r1, [pc, #340]	; (8013d2c <rmw_init+0x234>)
 8013bd6:	4856      	ldr	r0, [pc, #344]	; (8013d30 <rmw_init+0x238>)
 8013bd8:	2201      	movs	r2, #1
 8013bda:	f7f8 fb01 	bl	800c1e0 <rmw_uxrce_init_client_memory>
 8013bde:	4955      	ldr	r1, [pc, #340]	; (8013d34 <rmw_init+0x23c>)
 8013be0:	4855      	ldr	r0, [pc, #340]	; (8013d38 <rmw_init+0x240>)
 8013be2:	220f      	movs	r2, #15
 8013be4:	f7f8 fb9c 	bl	800c320 <rmw_uxrce_init_topic_memory>
 8013be8:	4954      	ldr	r1, [pc, #336]	; (8013d3c <rmw_init+0x244>)
 8013bea:	4855      	ldr	r0, [pc, #340]	; (8013d40 <rmw_init+0x248>)
 8013bec:	2203      	movs	r2, #3
 8013bee:	f7f8 fbd7 	bl	800c3a0 <rmw_uxrce_init_init_options_impl_memory>
 8013bf2:	4954      	ldr	r1, [pc, #336]	; (8013d44 <rmw_init+0x24c>)
 8013bf4:	4854      	ldr	r0, [pc, #336]	; (8013d48 <rmw_init+0x250>)
 8013bf6:	2204      	movs	r2, #4
 8013bf8:	f7f8 fbf2 	bl	800c3e0 <rmw_uxrce_init_wait_set_memory>
 8013bfc:	4953      	ldr	r1, [pc, #332]	; (8013d4c <rmw_init+0x254>)
 8013bfe:	4854      	ldr	r0, [pc, #336]	; (8013d50 <rmw_init+0x258>)
 8013c00:	2204      	movs	r2, #4
 8013c02:	f7f8 fc0d 	bl	800c420 <rmw_uxrce_init_guard_condition_memory>
 8013c06:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8013c08:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8013c0a:	4642      	mov	r2, r8
 8013c0c:	f000 fb04 	bl	8014218 <rmw_uxrce_transport_init>
 8013c10:	4607      	mov	r7, r0
 8013c12:	2800      	cmp	r0, #0
 8013c14:	d158      	bne.n	8013cc8 <rmw_init+0x1d0>
 8013c16:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013c18:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8013c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013c1e:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8013c22:	4628      	mov	r0, r5
 8013c24:	f7fa f9dc 	bl	800dfe0 <uxr_init_session>
 8013c28:	494a      	ldr	r1, [pc, #296]	; (8013d54 <rmw_init+0x25c>)
 8013c2a:	4622      	mov	r2, r4
 8013c2c:	4628      	mov	r0, r5
 8013c2e:	f7fa f9fb 	bl	800e028 <uxr_set_topic_callback>
 8013c32:	4949      	ldr	r1, [pc, #292]	; (8013d58 <rmw_init+0x260>)
 8013c34:	463a      	mov	r2, r7
 8013c36:	4628      	mov	r0, r5
 8013c38:	f7fa f9f2 	bl	800e020 <uxr_set_status_callback>
 8013c3c:	4947      	ldr	r1, [pc, #284]	; (8013d5c <rmw_init+0x264>)
 8013c3e:	463a      	mov	r2, r7
 8013c40:	4628      	mov	r0, r5
 8013c42:	f7fa f9f5 	bl	800e030 <uxr_set_request_callback>
 8013c46:	4946      	ldr	r1, [pc, #280]	; (8013d60 <rmw_init+0x268>)
 8013c48:	463a      	mov	r2, r7
 8013c4a:	4628      	mov	r0, r5
 8013c4c:	f7fa f9f4 	bl	800e038 <uxr_set_reply_callback>
 8013c50:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013c54:	2304      	movs	r3, #4
 8013c56:	0092      	lsls	r2, r2, #2
 8013c58:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8013c5c:	4628      	mov	r0, r5
 8013c5e:	f7fa fa29 	bl	800e0b4 <uxr_create_input_reliable_stream>
 8013c62:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013c66:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8013c6a:	0092      	lsls	r2, r2, #2
 8013c6c:	2304      	movs	r3, #4
 8013c6e:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8013c72:	4628      	mov	r0, r5
 8013c74:	f7fa f9f6 	bl	800e064 <uxr_create_output_reliable_stream>
 8013c78:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8013c7c:	4628      	mov	r0, r5
 8013c7e:	f7fa fa13 	bl	800e0a8 <uxr_create_input_best_effort_stream>
 8013c82:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8013c86:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8013c8a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013c8e:	3114      	adds	r1, #20
 8013c90:	4628      	mov	r0, r5
 8013c92:	f7fa f9d5 	bl	800e040 <uxr_create_output_best_effort_stream>
 8013c96:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8013c9a:	4628      	mov	r0, r5
 8013c9c:	f7fa ff60 	bl	800eb60 <uxr_create_session>
 8013ca0:	b1f8      	cbz	r0, 8013ce2 <rmw_init+0x1ea>
 8013ca2:	4638      	mov	r0, r7
 8013ca4:	b003      	add	sp, #12
 8013ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013caa:	270b      	movs	r7, #11
 8013cac:	4638      	mov	r0, r7
 8013cae:	b003      	add	sp, #12
 8013cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cb4:	2701      	movs	r7, #1
 8013cb6:	4638      	mov	r0, r7
 8013cb8:	b003      	add	sp, #12
 8013cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cbe:	270c      	movs	r7, #12
 8013cc0:	4638      	mov	r0, r7
 8013cc2:	b003      	add	sp, #12
 8013cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cc8:	4648      	mov	r0, r9
 8013cca:	f000 feef 	bl	8014aac <uxr_close_custom_transport>
 8013cce:	480d      	ldr	r0, [pc, #52]	; (8013d04 <rmw_init+0x20c>)
 8013cd0:	4621      	mov	r1, r4
 8013cd2:	f7ff fd93 	bl	80137fc <put_memory>
 8013cd6:	4638      	mov	r0, r7
 8013cd8:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8013cdc:	b003      	add	sp, #12
 8013cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ce2:	4648      	mov	r0, r9
 8013ce4:	f000 fee2 	bl	8014aac <uxr_close_custom_transport>
 8013ce8:	4806      	ldr	r0, [pc, #24]	; (8013d04 <rmw_init+0x20c>)
 8013cea:	4621      	mov	r1, r4
 8013cec:	f7ff fd86 	bl	80137fc <put_memory>
 8013cf0:	64f7      	str	r7, [r6, #76]	; 0x4c
 8013cf2:	2701      	movs	r7, #1
 8013cf4:	e7d5      	b.n	8013ca2 <rmw_init+0x1aa>
 8013cf6:	bf00      	nop
 8013cf8:	08018608 	.word	0x08018608
 8013cfc:	2000ddac 	.word	0x2000ddac
 8013d00:	2000a058 	.word	0x2000a058
 8013d04:	2000dd9c 	.word	0x2000dd9c
 8013d08:	2000b600 	.word	0x2000b600
 8013d0c:	2000967c 	.word	0x2000967c
 8013d10:	2000dd6c 	.word	0x2000dd6c
 8013d14:	2000d700 	.word	0x2000d700
 8013d18:	2000ddbc 	.word	0x2000ddbc
 8013d1c:	20009720 	.word	0x20009720
 8013d20:	2000dd7c 	.word	0x2000dd7c
 8013d24:	20009f90 	.word	0x20009f90
 8013d28:	2000dd8c 	.word	0x2000dd8c
 8013d2c:	200094b0 	.word	0x200094b0
 8013d30:	2000949c 	.word	0x2000949c
 8013d34:	2000db38 	.word	0x2000db38
 8013d38:	2000ddcc 	.word	0x2000ddcc
 8013d3c:	200095f8 	.word	0x200095f8
 8013d40:	2000dd5c 	.word	0x2000dd5c
 8013d44:	2000dcdc 	.word	0x2000dcdc
 8013d48:	2000dddc 	.word	0x2000dddc
 8013d4c:	20009578 	.word	0x20009578
 8013d50:	2000dd4c 	.word	0x2000dd4c
 8013d54:	08016385 	.word	0x08016385
 8013d58:	0801637d 	.word	0x0801637d
 8013d5c:	0801641d 	.word	0x0801641d
 8013d60:	080164b9 	.word	0x080164b9

08013d64 <rmw_context_fini>:
 8013d64:	4b17      	ldr	r3, [pc, #92]	; (8013dc4 <rmw_context_fini+0x60>)
 8013d66:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8013d68:	b570      	push	{r4, r5, r6, lr}
 8013d6a:	681c      	ldr	r4, [r3, #0]
 8013d6c:	4605      	mov	r5, r0
 8013d6e:	b334      	cbz	r4, 8013dbe <rmw_context_fini+0x5a>
 8013d70:	2600      	movs	r6, #0
 8013d72:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8013d76:	6902      	ldr	r2, [r0, #16]
 8013d78:	428a      	cmp	r2, r1
 8013d7a:	d018      	beq.n	8013dae <rmw_context_fini+0x4a>
 8013d7c:	2c00      	cmp	r4, #0
 8013d7e:	d1f8      	bne.n	8013d72 <rmw_context_fini+0xe>
 8013d80:	b189      	cbz	r1, 8013da6 <rmw_context_fini+0x42>
 8013d82:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8013d86:	789b      	ldrb	r3, [r3, #2]
 8013d88:	2b01      	cmp	r3, #1
 8013d8a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8013d8e:	bf14      	ite	ne
 8013d90:	210a      	movne	r1, #10
 8013d92:	2100      	moveq	r1, #0
 8013d94:	f7fa febc 	bl	800eb10 <uxr_delete_session_retries>
 8013d98:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8013d9a:	f7f8 fb61 	bl	800c460 <rmw_uxrce_fini_session_memory>
 8013d9e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8013da0:	3010      	adds	r0, #16
 8013da2:	f000 fe83 	bl	8014aac <uxr_close_custom_transport>
 8013da6:	2300      	movs	r3, #0
 8013da8:	64eb      	str	r3, [r5, #76]	; 0x4c
 8013daa:	4630      	mov	r0, r6
 8013dac:	bd70      	pop	{r4, r5, r6, pc}
 8013dae:	3018      	adds	r0, #24
 8013db0:	f7f7 ff2c 	bl	800bc0c <rmw_destroy_node>
 8013db4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8013db6:	4606      	mov	r6, r0
 8013db8:	2c00      	cmp	r4, #0
 8013dba:	d1da      	bne.n	8013d72 <rmw_context_fini+0xe>
 8013dbc:	e7e0      	b.n	8013d80 <rmw_context_fini+0x1c>
 8013dbe:	4626      	mov	r6, r4
 8013dc0:	e7de      	b.n	8013d80 <rmw_context_fini+0x1c>
 8013dc2:	bf00      	nop
 8013dc4:	2000dd6c 	.word	0x2000dd6c

08013dc8 <create_topic>:
 8013dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dcc:	4605      	mov	r5, r0
 8013dce:	b084      	sub	sp, #16
 8013dd0:	4822      	ldr	r0, [pc, #136]	; (8013e5c <create_topic+0x94>)
 8013dd2:	460f      	mov	r7, r1
 8013dd4:	4616      	mov	r6, r2
 8013dd6:	f7ff fd01 	bl	80137dc <get_memory>
 8013dda:	4604      	mov	r4, r0
 8013ddc:	2800      	cmp	r0, #0
 8013dde:	d039      	beq.n	8013e54 <create_topic+0x8c>
 8013de0:	692b      	ldr	r3, [r5, #16]
 8013de2:	6884      	ldr	r4, [r0, #8]
 8013de4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8013e64 <create_topic+0x9c>
 8013de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013dec:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013df0:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8013df4:	1c42      	adds	r2, r0, #1
 8013df6:	2102      	movs	r1, #2
 8013df8:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8013dfc:	f7f9 ff3c 	bl	800dc78 <uxr_object_id>
 8013e00:	223c      	movs	r2, #60	; 0x3c
 8013e02:	6120      	str	r0, [r4, #16]
 8013e04:	4641      	mov	r1, r8
 8013e06:	4638      	mov	r0, r7
 8013e08:	f7f8 fd06 	bl	800c818 <generate_topic_name>
 8013e0c:	b1f0      	cbz	r0, 8013e4c <create_topic+0x84>
 8013e0e:	4f14      	ldr	r7, [pc, #80]	; (8013e60 <create_topic+0x98>)
 8013e10:	4630      	mov	r0, r6
 8013e12:	2264      	movs	r2, #100	; 0x64
 8013e14:	4639      	mov	r1, r7
 8013e16:	f7f8 fccf 	bl	800c7b8 <generate_type_name>
 8013e1a:	b1b8      	cbz	r0, 8013e4c <create_topic+0x84>
 8013e1c:	6928      	ldr	r0, [r5, #16]
 8013e1e:	2306      	movs	r3, #6
 8013e20:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8013e24:	f8cd 8000 	str.w	r8, [sp]
 8013e28:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013e2c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013e30:	6811      	ldr	r1, [r2, #0]
 8013e32:	696b      	ldr	r3, [r5, #20]
 8013e34:	6922      	ldr	r2, [r4, #16]
 8013e36:	f7f9 fe43 	bl	800dac0 <uxr_buffer_create_topic_bin>
 8013e3a:	4602      	mov	r2, r0
 8013e3c:	6928      	ldr	r0, [r5, #16]
 8013e3e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013e42:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013e46:	f7f8 fc81 	bl	800c74c <run_xrce_session>
 8013e4a:	b918      	cbnz	r0, 8013e54 <create_topic+0x8c>
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	f7f8 fb7d 	bl	800c54c <rmw_uxrce_fini_topic_memory>
 8013e52:	2400      	movs	r4, #0
 8013e54:	4620      	mov	r0, r4
 8013e56:	b004      	add	sp, #16
 8013e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e5c:	2000ddcc 	.word	0x2000ddcc
 8013e60:	2000de5c 	.word	0x2000de5c
 8013e64:	2000de20 	.word	0x2000de20

08013e68 <destroy_topic>:
 8013e68:	b538      	push	{r3, r4, r5, lr}
 8013e6a:	6985      	ldr	r5, [r0, #24]
 8013e6c:	b1d5      	cbz	r5, 8013ea4 <destroy_topic+0x3c>
 8013e6e:	4604      	mov	r4, r0
 8013e70:	6928      	ldr	r0, [r5, #16]
 8013e72:	6922      	ldr	r2, [r4, #16]
 8013e74:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013e78:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013e7c:	6819      	ldr	r1, [r3, #0]
 8013e7e:	f7f9 fda1 	bl	800d9c4 <uxr_buffer_delete_entity>
 8013e82:	4602      	mov	r2, r0
 8013e84:	6928      	ldr	r0, [r5, #16]
 8013e86:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013e8a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013e8e:	f7f8 fc5d 	bl	800c74c <run_xrce_session>
 8013e92:	2800      	cmp	r0, #0
 8013e94:	4620      	mov	r0, r4
 8013e96:	bf14      	ite	ne
 8013e98:	2400      	movne	r4, #0
 8013e9a:	2402      	moveq	r4, #2
 8013e9c:	f7f8 fb56 	bl	800c54c <rmw_uxrce_fini_topic_memory>
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	bd38      	pop	{r3, r4, r5, pc}
 8013ea4:	2401      	movs	r4, #1
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	bd38      	pop	{r3, r4, r5, pc}
 8013eaa:	bf00      	nop

08013eac <rmw_send_request>:
 8013eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013eb0:	4604      	mov	r4, r0
 8013eb2:	6800      	ldr	r0, [r0, #0]
 8013eb4:	b08b      	sub	sp, #44	; 0x2c
 8013eb6:	460e      	mov	r6, r1
 8013eb8:	4615      	mov	r5, r2
 8013eba:	b128      	cbz	r0, 8013ec8 <rmw_send_request+0x1c>
 8013ebc:	4b21      	ldr	r3, [pc, #132]	; (8013f44 <rmw_send_request+0x98>)
 8013ebe:	6819      	ldr	r1, [r3, #0]
 8013ec0:	f7ec f986 	bl	80001d0 <strcmp>
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	d139      	bne.n	8013f3c <rmw_send_request+0x90>
 8013ec8:	6864      	ldr	r4, [r4, #4]
 8013eca:	6963      	ldr	r3, [r4, #20]
 8013ecc:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8013ed0:	689b      	ldr	r3, [r3, #8]
 8013ed2:	4798      	blx	r3
 8013ed4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013ed8:	4630      	mov	r0, r6
 8013eda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013ede:	4798      	blx	r3
 8013ee0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013ee4:	9000      	str	r0, [sp, #0]
 8013ee6:	6922      	ldr	r2, [r4, #16]
 8013ee8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8013eea:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8013eee:	ab02      	add	r3, sp, #8
 8013ef0:	f7fb fab2 	bl	800f458 <uxr_prepare_output_stream>
 8013ef4:	2700      	movs	r7, #0
 8013ef6:	6028      	str	r0, [r5, #0]
 8013ef8:	606f      	str	r7, [r5, #4]
 8013efa:	b198      	cbz	r0, 8013f24 <rmw_send_request+0x78>
 8013efc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013f00:	a902      	add	r1, sp, #8
 8013f02:	4630      	mov	r0, r6
 8013f04:	4798      	blx	r3
 8013f06:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8013f0a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	d00c      	beq.n	8013f2c <rmw_send_request+0x80>
 8013f12:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8013f14:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013f18:	f7fa fcb2 	bl	800e880 <uxr_run_session_until_confirm_delivery>
 8013f1c:	4638      	mov	r0, r7
 8013f1e:	b00b      	add	sp, #44	; 0x2c
 8013f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f24:	2001      	movs	r0, #1
 8013f26:	b00b      	add	sp, #44	; 0x2c
 8013f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f2c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013f30:	f7fa f8e6 	bl	800e100 <uxr_flash_output_streams>
 8013f34:	4638      	mov	r0, r7
 8013f36:	b00b      	add	sp, #44	; 0x2c
 8013f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f3c:	200c      	movs	r0, #12
 8013f3e:	b00b      	add	sp, #44	; 0x2c
 8013f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f44:	08018608 	.word	0x08018608

08013f48 <rmw_take_request>:
 8013f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f4c:	4605      	mov	r5, r0
 8013f4e:	6800      	ldr	r0, [r0, #0]
 8013f50:	b089      	sub	sp, #36	; 0x24
 8013f52:	460c      	mov	r4, r1
 8013f54:	4690      	mov	r8, r2
 8013f56:	461e      	mov	r6, r3
 8013f58:	b128      	cbz	r0, 8013f66 <rmw_take_request+0x1e>
 8013f5a:	4b28      	ldr	r3, [pc, #160]	; (8013ffc <rmw_take_request+0xb4>)
 8013f5c:	6819      	ldr	r1, [r3, #0]
 8013f5e:	f7ec f937 	bl	80001d0 <strcmp>
 8013f62:	2800      	cmp	r0, #0
 8013f64:	d146      	bne.n	8013ff4 <rmw_take_request+0xac>
 8013f66:	b10e      	cbz	r6, 8013f6c <rmw_take_request+0x24>
 8013f68:	2300      	movs	r3, #0
 8013f6a:	7033      	strb	r3, [r6, #0]
 8013f6c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013f70:	f7f8 fb6e 	bl	800c650 <rmw_uxrce_clean_expired_static_input_buffer>
 8013f74:	4648      	mov	r0, r9
 8013f76:	f7f8 fb45 	bl	800c604 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f7a:	4607      	mov	r7, r0
 8013f7c:	b3b0      	cbz	r0, 8013fec <rmw_take_request+0xa4>
 8013f7e:	6885      	ldr	r5, [r0, #8]
 8013f80:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 8013f84:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 8013f88:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013f8c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8013f90:	7423      	strb	r3, [r4, #16]
 8013f92:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 8013f96:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8013f9a:	74e2      	strb	r2, [r4, #19]
 8013f9c:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013fa0:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8013fa4:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8013fa8:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8013fac:	61e1      	str	r1, [r4, #28]
 8013fae:	6162      	str	r2, [r4, #20]
 8013fb0:	61a3      	str	r3, [r4, #24]
 8013fb2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013fb6:	689b      	ldr	r3, [r3, #8]
 8013fb8:	4798      	blx	r3
 8013fba:	6844      	ldr	r4, [r0, #4]
 8013fbc:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8013fc0:	f105 0110 	add.w	r1, r5, #16
 8013fc4:	4668      	mov	r0, sp
 8013fc6:	f7f9 fc8d 	bl	800d8e4 <ucdr_init_buffer>
 8013fca:	68e3      	ldr	r3, [r4, #12]
 8013fcc:	4641      	mov	r1, r8
 8013fce:	4668      	mov	r0, sp
 8013fd0:	4798      	blx	r3
 8013fd2:	4639      	mov	r1, r7
 8013fd4:	4604      	mov	r4, r0
 8013fd6:	480a      	ldr	r0, [pc, #40]	; (8014000 <rmw_take_request+0xb8>)
 8013fd8:	f7ff fc10 	bl	80137fc <put_memory>
 8013fdc:	b106      	cbz	r6, 8013fe0 <rmw_take_request+0x98>
 8013fde:	7034      	strb	r4, [r6, #0]
 8013fe0:	f084 0001 	eor.w	r0, r4, #1
 8013fe4:	b2c0      	uxtb	r0, r0
 8013fe6:	b009      	add	sp, #36	; 0x24
 8013fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fec:	2001      	movs	r0, #1
 8013fee:	b009      	add	sp, #36	; 0x24
 8013ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ff4:	200c      	movs	r0, #12
 8013ff6:	b009      	add	sp, #36	; 0x24
 8013ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ffc:	08018608 	.word	0x08018608
 8014000:	2000ddac 	.word	0x2000ddac

08014004 <rmw_send_response>:
 8014004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014006:	4605      	mov	r5, r0
 8014008:	6800      	ldr	r0, [r0, #0]
 801400a:	b091      	sub	sp, #68	; 0x44
 801400c:	460c      	mov	r4, r1
 801400e:	4616      	mov	r6, r2
 8014010:	b128      	cbz	r0, 801401e <rmw_send_response+0x1a>
 8014012:	4b29      	ldr	r3, [pc, #164]	; (80140b8 <rmw_send_response+0xb4>)
 8014014:	6819      	ldr	r1, [r3, #0]
 8014016:	f7ec f8db 	bl	80001d0 <strcmp>
 801401a:	2800      	cmp	r0, #0
 801401c:	d141      	bne.n	80140a2 <rmw_send_response+0x9e>
 801401e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8014022:	9306      	str	r3, [sp, #24]
 8014024:	4623      	mov	r3, r4
 8014026:	9207      	str	r2, [sp, #28]
 8014028:	f813 2b01 	ldrb.w	r2, [r3], #1
 801402c:	686d      	ldr	r5, [r5, #4]
 801402e:	789b      	ldrb	r3, [r3, #2]
 8014030:	68a1      	ldr	r1, [r4, #8]
 8014032:	f88d 2017 	strb.w	r2, [sp, #23]
 8014036:	f88d 3016 	strb.w	r3, [sp, #22]
 801403a:	68e2      	ldr	r2, [r4, #12]
 801403c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014040:	6860      	ldr	r0, [r4, #4]
 8014042:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014046:	ab02      	add	r3, sp, #8
 8014048:	c307      	stmia	r3!, {r0, r1, r2}
 801404a:	696b      	ldr	r3, [r5, #20]
 801404c:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801404e:	68db      	ldr	r3, [r3, #12]
 8014050:	4798      	blx	r3
 8014052:	6844      	ldr	r4, [r0, #4]
 8014054:	4630      	mov	r0, r6
 8014056:	6923      	ldr	r3, [r4, #16]
 8014058:	4798      	blx	r3
 801405a:	f100 0318 	add.w	r3, r0, #24
 801405e:	6938      	ldr	r0, [r7, #16]
 8014060:	9300      	str	r3, [sp, #0]
 8014062:	692a      	ldr	r2, [r5, #16]
 8014064:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8014066:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801406a:	ab08      	add	r3, sp, #32
 801406c:	f7fb f9f4 	bl	800f458 <uxr_prepare_output_stream>
 8014070:	b910      	cbnz	r0, 8014078 <rmw_send_response+0x74>
 8014072:	2001      	movs	r0, #1
 8014074:	b011      	add	sp, #68	; 0x44
 8014076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014078:	a902      	add	r1, sp, #8
 801407a:	a808      	add	r0, sp, #32
 801407c:	f7fc fa38 	bl	80104f0 <uxr_serialize_SampleIdentity>
 8014080:	68a3      	ldr	r3, [r4, #8]
 8014082:	a908      	add	r1, sp, #32
 8014084:	4630      	mov	r0, r6
 8014086:	4798      	blx	r3
 8014088:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 801408c:	6938      	ldr	r0, [r7, #16]
 801408e:	2b01      	cmp	r3, #1
 8014090:	d00a      	beq.n	80140a8 <rmw_send_response+0xa4>
 8014092:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8014094:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014098:	f7fa fbf2 	bl	800e880 <uxr_run_session_until_confirm_delivery>
 801409c:	2000      	movs	r0, #0
 801409e:	b011      	add	sp, #68	; 0x44
 80140a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140a2:	200c      	movs	r0, #12
 80140a4:	b011      	add	sp, #68	; 0x44
 80140a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80140ac:	f7fa f828 	bl	800e100 <uxr_flash_output_streams>
 80140b0:	2000      	movs	r0, #0
 80140b2:	b011      	add	sp, #68	; 0x44
 80140b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140b6:	bf00      	nop
 80140b8:	08018608 	.word	0x08018608

080140bc <rmw_take_response>:
 80140bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c0:	4604      	mov	r4, r0
 80140c2:	6800      	ldr	r0, [r0, #0]
 80140c4:	b088      	sub	sp, #32
 80140c6:	4688      	mov	r8, r1
 80140c8:	4617      	mov	r7, r2
 80140ca:	461d      	mov	r5, r3
 80140cc:	b120      	cbz	r0, 80140d8 <rmw_take_response+0x1c>
 80140ce:	4b1e      	ldr	r3, [pc, #120]	; (8014148 <rmw_take_response+0x8c>)
 80140d0:	6819      	ldr	r1, [r3, #0]
 80140d2:	f7ec f87d 	bl	80001d0 <strcmp>
 80140d6:	bb78      	cbnz	r0, 8014138 <rmw_take_response+0x7c>
 80140d8:	b10d      	cbz	r5, 80140de <rmw_take_response+0x22>
 80140da:	2300      	movs	r3, #0
 80140dc:	702b      	strb	r3, [r5, #0]
 80140de:	6864      	ldr	r4, [r4, #4]
 80140e0:	f7f8 fab6 	bl	800c650 <rmw_uxrce_clean_expired_static_input_buffer>
 80140e4:	4620      	mov	r0, r4
 80140e6:	f7f8 fa8d 	bl	800c604 <rmw_uxrce_find_static_input_buffer_by_owner>
 80140ea:	4606      	mov	r6, r0
 80140ec:	b340      	cbz	r0, 8014140 <rmw_take_response+0x84>
 80140ee:	6963      	ldr	r3, [r4, #20]
 80140f0:	6884      	ldr	r4, [r0, #8]
 80140f2:	68db      	ldr	r3, [r3, #12]
 80140f4:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 80140f8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80140fc:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014100:	4798      	blx	r3
 8014102:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014106:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801410a:	f104 0110 	add.w	r1, r4, #16
 801410e:	4668      	mov	r0, sp
 8014110:	f7f9 fbe8 	bl	800d8e4 <ucdr_init_buffer>
 8014114:	4639      	mov	r1, r7
 8014116:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801411a:	4668      	mov	r0, sp
 801411c:	4798      	blx	r3
 801411e:	4631      	mov	r1, r6
 8014120:	4604      	mov	r4, r0
 8014122:	480a      	ldr	r0, [pc, #40]	; (801414c <rmw_take_response+0x90>)
 8014124:	f7ff fb6a 	bl	80137fc <put_memory>
 8014128:	b105      	cbz	r5, 801412c <rmw_take_response+0x70>
 801412a:	702c      	strb	r4, [r5, #0]
 801412c:	f084 0001 	eor.w	r0, r4, #1
 8014130:	b2c0      	uxtb	r0, r0
 8014132:	b008      	add	sp, #32
 8014134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014138:	200c      	movs	r0, #12
 801413a:	b008      	add	sp, #32
 801413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014140:	2001      	movs	r0, #1
 8014142:	b008      	add	sp, #32
 8014144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014148:	08018608 	.word	0x08018608
 801414c:	2000ddac 	.word	0x2000ddac

08014150 <rmw_take_with_info>:
 8014150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014152:	4604      	mov	r4, r0
 8014154:	6800      	ldr	r0, [r0, #0]
 8014156:	b089      	sub	sp, #36	; 0x24
 8014158:	460f      	mov	r7, r1
 801415a:	4615      	mov	r5, r2
 801415c:	b128      	cbz	r0, 801416a <rmw_take_with_info+0x1a>
 801415e:	4b24      	ldr	r3, [pc, #144]	; (80141f0 <rmw_take_with_info+0xa0>)
 8014160:	6819      	ldr	r1, [r3, #0]
 8014162:	f7ec f835 	bl	80001d0 <strcmp>
 8014166:	2800      	cmp	r0, #0
 8014168:	d13e      	bne.n	80141e8 <rmw_take_with_info+0x98>
 801416a:	b305      	cbz	r5, 80141ae <rmw_take_with_info+0x5e>
 801416c:	6864      	ldr	r4, [r4, #4]
 801416e:	2300      	movs	r3, #0
 8014170:	702b      	strb	r3, [r5, #0]
 8014172:	f7f8 fa6d 	bl	800c650 <rmw_uxrce_clean_expired_static_input_buffer>
 8014176:	4620      	mov	r0, r4
 8014178:	f7f8 fa44 	bl	800c604 <rmw_uxrce_find_static_input_buffer_by_owner>
 801417c:	4606      	mov	r6, r0
 801417e:	b1f0      	cbz	r0, 80141be <rmw_take_with_info+0x6e>
 8014180:	6881      	ldr	r1, [r0, #8]
 8014182:	4668      	mov	r0, sp
 8014184:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8014188:	3110      	adds	r1, #16
 801418a:	f7f9 fbab 	bl	800d8e4 <ucdr_init_buffer>
 801418e:	69a3      	ldr	r3, [r4, #24]
 8014190:	4639      	mov	r1, r7
 8014192:	68db      	ldr	r3, [r3, #12]
 8014194:	4668      	mov	r0, sp
 8014196:	4798      	blx	r3
 8014198:	4631      	mov	r1, r6
 801419a:	4604      	mov	r4, r0
 801419c:	4815      	ldr	r0, [pc, #84]	; (80141f4 <rmw_take_with_info+0xa4>)
 801419e:	f7ff fb2d 	bl	80137fc <put_memory>
 80141a2:	702c      	strb	r4, [r5, #0]
 80141a4:	f084 0001 	eor.w	r0, r4, #1
 80141a8:	b2c0      	uxtb	r0, r0
 80141aa:	b009      	add	sp, #36	; 0x24
 80141ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141ae:	6864      	ldr	r4, [r4, #4]
 80141b0:	f7f8 fa4e 	bl	800c650 <rmw_uxrce_clean_expired_static_input_buffer>
 80141b4:	4620      	mov	r0, r4
 80141b6:	f7f8 fa25 	bl	800c604 <rmw_uxrce_find_static_input_buffer_by_owner>
 80141ba:	4605      	mov	r5, r0
 80141bc:	b910      	cbnz	r0, 80141c4 <rmw_take_with_info+0x74>
 80141be:	2001      	movs	r0, #1
 80141c0:	b009      	add	sp, #36	; 0x24
 80141c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141c4:	68a9      	ldr	r1, [r5, #8]
 80141c6:	4668      	mov	r0, sp
 80141c8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80141cc:	3110      	adds	r1, #16
 80141ce:	f7f9 fb89 	bl	800d8e4 <ucdr_init_buffer>
 80141d2:	69a3      	ldr	r3, [r4, #24]
 80141d4:	4639      	mov	r1, r7
 80141d6:	68db      	ldr	r3, [r3, #12]
 80141d8:	4668      	mov	r0, sp
 80141da:	4798      	blx	r3
 80141dc:	4629      	mov	r1, r5
 80141de:	4604      	mov	r4, r0
 80141e0:	4804      	ldr	r0, [pc, #16]	; (80141f4 <rmw_take_with_info+0xa4>)
 80141e2:	f7ff fb0b 	bl	80137fc <put_memory>
 80141e6:	e7dd      	b.n	80141a4 <rmw_take_with_info+0x54>
 80141e8:	200c      	movs	r0, #12
 80141ea:	b009      	add	sp, #36	; 0x24
 80141ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141ee:	bf00      	nop
 80141f0:	08018608 	.word	0x08018608
 80141f4:	2000ddac 	.word	0x2000ddac

080141f8 <rmw_trigger_guard_condition>:
 80141f8:	b160      	cbz	r0, 8014214 <rmw_trigger_guard_condition+0x1c>
 80141fa:	b510      	push	{r4, lr}
 80141fc:	4604      	mov	r4, r0
 80141fe:	6800      	ldr	r0, [r0, #0]
 8014200:	f7f8 fb24 	bl	800c84c <is_uxrce_rmw_identifier_valid>
 8014204:	b908      	cbnz	r0, 801420a <rmw_trigger_guard_condition+0x12>
 8014206:	2001      	movs	r0, #1
 8014208:	bd10      	pop	{r4, pc}
 801420a:	6863      	ldr	r3, [r4, #4]
 801420c:	2201      	movs	r2, #1
 801420e:	741a      	strb	r2, [r3, #16]
 8014210:	2000      	movs	r0, #0
 8014212:	bd10      	pop	{r4, pc}
 8014214:	2001      	movs	r0, #1
 8014216:	4770      	bx	lr

08014218 <rmw_uxrce_transport_init>:
 8014218:	b508      	push	{r3, lr}
 801421a:	b108      	cbz	r0, 8014220 <rmw_uxrce_transport_init+0x8>
 801421c:	f100 0210 	add.w	r2, r0, #16
 8014220:	b139      	cbz	r1, 8014232 <rmw_uxrce_transport_init+0x1a>
 8014222:	6949      	ldr	r1, [r1, #20]
 8014224:	4610      	mov	r0, r2
 8014226:	f000 fc0d 	bl	8014a44 <uxr_init_custom_transport>
 801422a:	f080 0001 	eor.w	r0, r0, #1
 801422e:	b2c0      	uxtb	r0, r0
 8014230:	bd08      	pop	{r3, pc}
 8014232:	4b04      	ldr	r3, [pc, #16]	; (8014244 <rmw_uxrce_transport_init+0x2c>)
 8014234:	4610      	mov	r0, r2
 8014236:	6859      	ldr	r1, [r3, #4]
 8014238:	f000 fc04 	bl	8014a44 <uxr_init_custom_transport>
 801423c:	f080 0001 	eor.w	r0, r0, #1
 8014240:	b2c0      	uxtb	r0, r0
 8014242:	bd08      	pop	{r3, pc}
 8014244:	20009444 	.word	0x20009444

08014248 <rmw_wait>:
 8014248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801424c:	b089      	sub	sp, #36	; 0x24
 801424e:	4605      	mov	r5, r0
 8014250:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014252:	460e      	mov	r6, r1
 8014254:	4698      	mov	r8, r3
 8014256:	4691      	mov	r9, r2
 8014258:	2a00      	cmp	r2, #0
 801425a:	f000 810a 	beq.w	8014472 <rmw_wait+0x22a>
 801425e:	b16c      	cbz	r4, 801427c <rmw_wait+0x34>
 8014260:	4bae      	ldr	r3, [pc, #696]	; (801451c <rmw_wait+0x2d4>)
 8014262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014264:	af04      	add	r7, sp, #16
 8014266:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801426a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801426e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014272:	f7ff f9b1 	bl	80135d8 <rmw_time_equal>
 8014276:	2800      	cmp	r0, #0
 8014278:	f000 8127 	beq.w	80144ca <rmw_wait+0x282>
 801427c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014280:	f7f8 f9e6 	bl	800c650 <rmw_uxrce_clean_expired_static_input_buffer>
 8014284:	4ba6      	ldr	r3, [pc, #664]	; (8014520 <rmw_wait+0x2d8>)
 8014286:	681c      	ldr	r4, [r3, #0]
 8014288:	b14c      	cbz	r4, 801429e <rmw_wait+0x56>
 801428a:	4623      	mov	r3, r4
 801428c:	2100      	movs	r1, #0
 801428e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014292:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014296:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801429a:	2b00      	cmp	r3, #0
 801429c:	d1f7      	bne.n	801428e <rmw_wait+0x46>
 801429e:	f1b9 0f00 	cmp.w	r9, #0
 80142a2:	d011      	beq.n	80142c8 <rmw_wait+0x80>
 80142a4:	f8d9 1000 	ldr.w	r1, [r9]
 80142a8:	b171      	cbz	r1, 80142c8 <rmw_wait+0x80>
 80142aa:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80142ae:	2300      	movs	r3, #0
 80142b0:	2001      	movs	r0, #1
 80142b2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80142b6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80142b8:	6912      	ldr	r2, [r2, #16]
 80142ba:	3301      	adds	r3, #1
 80142bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80142c0:	4299      	cmp	r1, r3
 80142c2:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80142c6:	d1f4      	bne.n	80142b2 <rmw_wait+0x6a>
 80142c8:	f1b8 0f00 	cmp.w	r8, #0
 80142cc:	d011      	beq.n	80142f2 <rmw_wait+0xaa>
 80142ce:	f8d8 1000 	ldr.w	r1, [r8]
 80142d2:	b171      	cbz	r1, 80142f2 <rmw_wait+0xaa>
 80142d4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80142d8:	2300      	movs	r3, #0
 80142da:	2001      	movs	r0, #1
 80142dc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80142e0:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80142e2:	6912      	ldr	r2, [r2, #16]
 80142e4:	3301      	adds	r3, #1
 80142e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80142ea:	4299      	cmp	r1, r3
 80142ec:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80142f0:	d1f4      	bne.n	80142dc <rmw_wait+0x94>
 80142f2:	b185      	cbz	r5, 8014316 <rmw_wait+0xce>
 80142f4:	6829      	ldr	r1, [r5, #0]
 80142f6:	b171      	cbz	r1, 8014316 <rmw_wait+0xce>
 80142f8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80142fc:	2300      	movs	r3, #0
 80142fe:	2001      	movs	r0, #1
 8014300:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014304:	6a12      	ldr	r2, [r2, #32]
 8014306:	6912      	ldr	r2, [r2, #16]
 8014308:	3301      	adds	r3, #1
 801430a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801430e:	4299      	cmp	r1, r3
 8014310:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8014314:	d1f4      	bne.n	8014300 <rmw_wait+0xb8>
 8014316:	b34c      	cbz	r4, 801436c <rmw_wait+0x124>
 8014318:	4622      	mov	r2, r4
 801431a:	2300      	movs	r3, #0
 801431c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8014320:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8014324:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8014328:	440b      	add	r3, r1
 801432a:	b2db      	uxtb	r3, r3
 801432c:	2a00      	cmp	r2, #0
 801432e:	d1f5      	bne.n	801431c <rmw_wait+0xd4>
 8014330:	2b00      	cmp	r3, #0
 8014332:	f000 8084 	beq.w	801443e <rmw_wait+0x1f6>
 8014336:	1c7a      	adds	r2, r7, #1
 8014338:	d00d      	beq.n	8014356 <rmw_wait+0x10e>
 801433a:	ee07 7a90 	vmov	s15, r7
 801433e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014342:	ee07 3a90 	vmov	s15, r3
 8014346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801434a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801434e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014352:	ee17 7a90 	vmov	r7, s15
 8014356:	68a0      	ldr	r0, [r4, #8]
 8014358:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801435c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8014360:	2b00      	cmp	r3, #0
 8014362:	f040 8090 	bne.w	8014486 <rmw_wait+0x23e>
 8014366:	6864      	ldr	r4, [r4, #4]
 8014368:	2c00      	cmp	r4, #0
 801436a:	d1f4      	bne.n	8014356 <rmw_wait+0x10e>
 801436c:	f1b9 0f00 	cmp.w	r9, #0
 8014370:	f000 80bc 	beq.w	80144ec <rmw_wait+0x2a4>
 8014374:	f8d9 7000 	ldr.w	r7, [r9]
 8014378:	2f00      	cmp	r7, #0
 801437a:	f000 808e 	beq.w	801449a <rmw_wait+0x252>
 801437e:	2400      	movs	r4, #0
 8014380:	4627      	mov	r7, r4
 8014382:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014386:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801438a:	f7f8 f93b 	bl	800c604 <rmw_uxrce_find_static_input_buffer_by_owner>
 801438e:	2800      	cmp	r0, #0
 8014390:	d05f      	beq.n	8014452 <rmw_wait+0x20a>
 8014392:	f8d9 3000 	ldr.w	r3, [r9]
 8014396:	3401      	adds	r4, #1
 8014398:	42a3      	cmp	r3, r4
 801439a:	f04f 0701 	mov.w	r7, #1
 801439e:	d8f0      	bhi.n	8014382 <rmw_wait+0x13a>
 80143a0:	f1b8 0f00 	cmp.w	r8, #0
 80143a4:	d012      	beq.n	80143cc <rmw_wait+0x184>
 80143a6:	f8d8 3000 	ldr.w	r3, [r8]
 80143aa:	b17b      	cbz	r3, 80143cc <rmw_wait+0x184>
 80143ac:	2400      	movs	r4, #0
 80143ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80143b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80143b6:	f7f8 f925 	bl	800c604 <rmw_uxrce_find_static_input_buffer_by_owner>
 80143ba:	2800      	cmp	r0, #0
 80143bc:	d051      	beq.n	8014462 <rmw_wait+0x21a>
 80143be:	f8d8 3000 	ldr.w	r3, [r8]
 80143c2:	3401      	adds	r4, #1
 80143c4:	42a3      	cmp	r3, r4
 80143c6:	f04f 0701 	mov.w	r7, #1
 80143ca:	d8f0      	bhi.n	80143ae <rmw_wait+0x166>
 80143cc:	b1dd      	cbz	r5, 8014406 <rmw_wait+0x1be>
 80143ce:	682b      	ldr	r3, [r5, #0]
 80143d0:	b1cb      	cbz	r3, 8014406 <rmw_wait+0x1be>
 80143d2:	2400      	movs	r4, #0
 80143d4:	686b      	ldr	r3, [r5, #4]
 80143d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80143da:	f7f8 f913 	bl	800c604 <rmw_uxrce_find_static_input_buffer_by_owner>
 80143de:	b158      	cbz	r0, 80143f8 <rmw_wait+0x1b0>
 80143e0:	682b      	ldr	r3, [r5, #0]
 80143e2:	3401      	adds	r4, #1
 80143e4:	42a3      	cmp	r3, r4
 80143e6:	d969      	bls.n	80144bc <rmw_wait+0x274>
 80143e8:	686b      	ldr	r3, [r5, #4]
 80143ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80143ee:	2701      	movs	r7, #1
 80143f0:	f7f8 f908 	bl	800c604 <rmw_uxrce_find_static_input_buffer_by_owner>
 80143f4:	2800      	cmp	r0, #0
 80143f6:	d1f3      	bne.n	80143e0 <rmw_wait+0x198>
 80143f8:	e9d5 3200 	ldrd	r3, r2, [r5]
 80143fc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8014400:	3401      	adds	r4, #1
 8014402:	42a3      	cmp	r3, r4
 8014404:	d8e6      	bhi.n	80143d4 <rmw_wait+0x18c>
 8014406:	b1a6      	cbz	r6, 8014432 <rmw_wait+0x1ea>
 8014408:	6834      	ldr	r4, [r6, #0]
 801440a:	b194      	cbz	r4, 8014432 <rmw_wait+0x1ea>
 801440c:	2300      	movs	r3, #0
 801440e:	461d      	mov	r5, r3
 8014410:	e004      	b.n	801441c <rmw_wait+0x1d4>
 8014412:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8014416:	3301      	adds	r3, #1
 8014418:	42a3      	cmp	r3, r4
 801441a:	d00a      	beq.n	8014432 <rmw_wait+0x1ea>
 801441c:	6870      	ldr	r0, [r6, #4]
 801441e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8014422:	7c0a      	ldrb	r2, [r1, #16]
 8014424:	2a00      	cmp	r2, #0
 8014426:	d0f4      	beq.n	8014412 <rmw_wait+0x1ca>
 8014428:	3301      	adds	r3, #1
 801442a:	42a3      	cmp	r3, r4
 801442c:	740d      	strb	r5, [r1, #16]
 801442e:	4617      	mov	r7, r2
 8014430:	d1f4      	bne.n	801441c <rmw_wait+0x1d4>
 8014432:	2f00      	cmp	r7, #0
 8014434:	d03e      	beq.n	80144b4 <rmw_wait+0x26c>
 8014436:	2000      	movs	r0, #0
 8014438:	b009      	add	sp, #36	; 0x24
 801443a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801443e:	68a0      	ldr	r0, [r4, #8]
 8014440:	2100      	movs	r1, #0
 8014442:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014446:	f7fa f9e1 	bl	800e80c <uxr_run_session_timeout>
 801444a:	6864      	ldr	r4, [r4, #4]
 801444c:	2c00      	cmp	r4, #0
 801444e:	d1f6      	bne.n	801443e <rmw_wait+0x1f6>
 8014450:	e78c      	b.n	801436c <rmw_wait+0x124>
 8014452:	e9d9 3200 	ldrd	r3, r2, [r9]
 8014456:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801445a:	3401      	adds	r4, #1
 801445c:	42a3      	cmp	r3, r4
 801445e:	d890      	bhi.n	8014382 <rmw_wait+0x13a>
 8014460:	e79e      	b.n	80143a0 <rmw_wait+0x158>
 8014462:	e9d8 3200 	ldrd	r3, r2, [r8]
 8014466:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801446a:	3401      	adds	r4, #1
 801446c:	429c      	cmp	r4, r3
 801446e:	d39e      	bcc.n	80143ae <rmw_wait+0x166>
 8014470:	e7ac      	b.n	80143cc <rmw_wait+0x184>
 8014472:	2b00      	cmp	r3, #0
 8014474:	f47f aef3 	bne.w	801425e <rmw_wait+0x16>
 8014478:	2800      	cmp	r0, #0
 801447a:	f47f aef0 	bne.w	801425e <rmw_wait+0x16>
 801447e:	2900      	cmp	r1, #0
 8014480:	f47f aeed 	bne.w	801425e <rmw_wait+0x16>
 8014484:	e7d7      	b.n	8014436 <rmw_wait+0x1ee>
 8014486:	4639      	mov	r1, r7
 8014488:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801448c:	f7fa f9d8 	bl	800e840 <uxr_run_session_until_data>
 8014490:	6864      	ldr	r4, [r4, #4]
 8014492:	2c00      	cmp	r4, #0
 8014494:	f47f af5f 	bne.w	8014356 <rmw_wait+0x10e>
 8014498:	e768      	b.n	801436c <rmw_wait+0x124>
 801449a:	f1b8 0f00 	cmp.w	r8, #0
 801449e:	d032      	beq.n	8014506 <rmw_wait+0x2be>
 80144a0:	f8d8 3000 	ldr.w	r3, [r8]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d181      	bne.n	80143ac <rmw_wait+0x164>
 80144a8:	461f      	mov	r7, r3
 80144aa:	2d00      	cmp	r5, #0
 80144ac:	d18f      	bne.n	80143ce <rmw_wait+0x186>
 80144ae:	462f      	mov	r7, r5
 80144b0:	2e00      	cmp	r6, #0
 80144b2:	d1a9      	bne.n	8014408 <rmw_wait+0x1c0>
 80144b4:	2002      	movs	r0, #2
 80144b6:	b009      	add	sp, #36	; 0x24
 80144b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144bc:	2e00      	cmp	r6, #0
 80144be:	d0ba      	beq.n	8014436 <rmw_wait+0x1ee>
 80144c0:	6834      	ldr	r4, [r6, #0]
 80144c2:	2701      	movs	r7, #1
 80144c4:	2c00      	cmp	r4, #0
 80144c6:	d1a1      	bne.n	801440c <rmw_wait+0x1c4>
 80144c8:	e7b5      	b.n	8014436 <rmw_wait+0x1ee>
 80144ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80144ce:	f7ff f8d7 	bl	8013680 <rmw_time_total_nsec>
 80144d2:	2300      	movs	r3, #0
 80144d4:	4a13      	ldr	r2, [pc, #76]	; (8014524 <rmw_wait+0x2dc>)
 80144d6:	f7eb ff33 	bl	8000340 <__aeabi_uldivmod>
 80144da:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80144de:	f171 0300 	sbcs.w	r3, r1, #0
 80144e2:	4607      	mov	r7, r0
 80144e4:	bfa8      	it	ge
 80144e6:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 80144ea:	e6c9      	b.n	8014280 <rmw_wait+0x38>
 80144ec:	f1b8 0f00 	cmp.w	r8, #0
 80144f0:	d009      	beq.n	8014506 <rmw_wait+0x2be>
 80144f2:	f8d8 3000 	ldr.w	r3, [r8]
 80144f6:	464f      	mov	r7, r9
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	f47f af57 	bne.w	80143ac <rmw_wait+0x164>
 80144fe:	2d00      	cmp	r5, #0
 8014500:	f47f af65 	bne.w	80143ce <rmw_wait+0x186>
 8014504:	e7d3      	b.n	80144ae <rmw_wait+0x266>
 8014506:	b17d      	cbz	r5, 8014528 <rmw_wait+0x2e0>
 8014508:	682b      	ldr	r3, [r5, #0]
 801450a:	4647      	mov	r7, r8
 801450c:	2b00      	cmp	r3, #0
 801450e:	f47f af60 	bne.w	80143d2 <rmw_wait+0x18a>
 8014512:	2e00      	cmp	r6, #0
 8014514:	f47f af78 	bne.w	8014408 <rmw_wait+0x1c0>
 8014518:	e7cc      	b.n	80144b4 <rmw_wait+0x26c>
 801451a:	bf00      	nop
 801451c:	08017d60 	.word	0x08017d60
 8014520:	2000dd9c 	.word	0x2000dd9c
 8014524:	000f4240 	.word	0x000f4240
 8014528:	2e00      	cmp	r6, #0
 801452a:	d0c3      	beq.n	80144b4 <rmw_wait+0x26c>
 801452c:	6834      	ldr	r4, [r6, #0]
 801452e:	462f      	mov	r7, r5
 8014530:	2c00      	cmp	r4, #0
 8014532:	f47f af6b 	bne.w	801440c <rmw_wait+0x1c4>
 8014536:	e7bd      	b.n	80144b4 <rmw_wait+0x26c>

08014538 <rmw_create_wait_set>:
 8014538:	b508      	push	{r3, lr}
 801453a:	4803      	ldr	r0, [pc, #12]	; (8014548 <rmw_create_wait_set+0x10>)
 801453c:	f7ff f94e 	bl	80137dc <get_memory>
 8014540:	b108      	cbz	r0, 8014546 <rmw_create_wait_set+0xe>
 8014542:	6880      	ldr	r0, [r0, #8]
 8014544:	3010      	adds	r0, #16
 8014546:	bd08      	pop	{r3, pc}
 8014548:	2000dddc 	.word	0x2000dddc

0801454c <rmw_destroy_wait_set>:
 801454c:	b508      	push	{r3, lr}
 801454e:	4b08      	ldr	r3, [pc, #32]	; (8014570 <rmw_destroy_wait_set+0x24>)
 8014550:	6819      	ldr	r1, [r3, #0]
 8014552:	b911      	cbnz	r1, 801455a <rmw_destroy_wait_set+0xe>
 8014554:	e00a      	b.n	801456c <rmw_destroy_wait_set+0x20>
 8014556:	6849      	ldr	r1, [r1, #4]
 8014558:	b141      	cbz	r1, 801456c <rmw_destroy_wait_set+0x20>
 801455a:	688b      	ldr	r3, [r1, #8]
 801455c:	3310      	adds	r3, #16
 801455e:	4298      	cmp	r0, r3
 8014560:	d1f9      	bne.n	8014556 <rmw_destroy_wait_set+0xa>
 8014562:	4803      	ldr	r0, [pc, #12]	; (8014570 <rmw_destroy_wait_set+0x24>)
 8014564:	f7ff f94a 	bl	80137fc <put_memory>
 8014568:	2000      	movs	r0, #0
 801456a:	bd08      	pop	{r3, pc}
 801456c:	2001      	movs	r0, #1
 801456e:	bd08      	pop	{r3, pc}
 8014570:	2000dddc 	.word	0x2000dddc

08014574 <rmw_uros_epoch_nanos>:
 8014574:	4b05      	ldr	r3, [pc, #20]	; (801458c <rmw_uros_epoch_nanos+0x18>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	b123      	cbz	r3, 8014584 <rmw_uros_epoch_nanos+0x10>
 801457a:	6898      	ldr	r0, [r3, #8]
 801457c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014580:	f7f9 bdb4 	b.w	800e0ec <uxr_epoch_nanos>
 8014584:	2000      	movs	r0, #0
 8014586:	2100      	movs	r1, #0
 8014588:	4770      	bx	lr
 801458a:	bf00      	nop
 801458c:	2000dd9c 	.word	0x2000dd9c

08014590 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8014590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014594:	6805      	ldr	r5, [r0, #0]
 8014596:	4604      	mov	r4, r0
 8014598:	4628      	mov	r0, r5
 801459a:	460e      	mov	r6, r1
 801459c:	f7eb fe18 	bl	80001d0 <strcmp>
 80145a0:	b1c8      	cbz	r0, 80145d6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80145a2:	4b11      	ldr	r3, [pc, #68]	; (80145e8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	429d      	cmp	r5, r3
 80145a8:	d112      	bne.n	80145d0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80145aa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80145ae:	f8d8 4000 	ldr.w	r4, [r8]
 80145b2:	b16c      	cbz	r4, 80145d0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80145b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80145b8:	2700      	movs	r7, #0
 80145ba:	3d04      	subs	r5, #4
 80145bc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80145c0:	4631      	mov	r1, r6
 80145c2:	f7eb fe05 	bl	80001d0 <strcmp>
 80145c6:	00bb      	lsls	r3, r7, #2
 80145c8:	b140      	cbz	r0, 80145dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80145ca:	3701      	adds	r7, #1
 80145cc:	42bc      	cmp	r4, r7
 80145ce:	d1f5      	bne.n	80145bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80145d0:	2000      	movs	r0, #0
 80145d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145d6:	4620      	mov	r0, r4
 80145d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80145e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145e4:	58d3      	ldr	r3, [r2, r3]
 80145e6:	4718      	bx	r3
 80145e8:	200000ac 	.word	0x200000ac

080145ec <std_msgs__msg__Int32__init>:
 80145ec:	3800      	subs	r0, #0
 80145ee:	bf18      	it	ne
 80145f0:	2001      	movne	r0, #1
 80145f2:	4770      	bx	lr

080145f4 <std_msgs__msg__Int32__fini>:
 80145f4:	4770      	bx	lr
 80145f6:	bf00      	nop

080145f8 <ucdr_serialize_endian_array_char>:
 80145f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145fc:	4619      	mov	r1, r3
 80145fe:	461f      	mov	r7, r3
 8014600:	4605      	mov	r5, r0
 8014602:	4690      	mov	r8, r2
 8014604:	f7f9 f91a 	bl	800d83c <ucdr_check_buffer_available_for>
 8014608:	b9e0      	cbnz	r0, 8014644 <ucdr_serialize_endian_array_char+0x4c>
 801460a:	463e      	mov	r6, r7
 801460c:	e009      	b.n	8014622 <ucdr_serialize_endian_array_char+0x2a>
 801460e:	68a8      	ldr	r0, [r5, #8]
 8014610:	f002 fc42 	bl	8016e98 <memcpy>
 8014614:	68ab      	ldr	r3, [r5, #8]
 8014616:	6928      	ldr	r0, [r5, #16]
 8014618:	4423      	add	r3, r4
 801461a:	4420      	add	r0, r4
 801461c:	1b36      	subs	r6, r6, r4
 801461e:	60ab      	str	r3, [r5, #8]
 8014620:	6128      	str	r0, [r5, #16]
 8014622:	4631      	mov	r1, r6
 8014624:	2201      	movs	r2, #1
 8014626:	4628      	mov	r0, r5
 8014628:	f7f9 f990 	bl	800d94c <ucdr_check_final_buffer_behavior_array>
 801462c:	1bb9      	subs	r1, r7, r6
 801462e:	4441      	add	r1, r8
 8014630:	4604      	mov	r4, r0
 8014632:	4602      	mov	r2, r0
 8014634:	2800      	cmp	r0, #0
 8014636:	d1ea      	bne.n	801460e <ucdr_serialize_endian_array_char+0x16>
 8014638:	2301      	movs	r3, #1
 801463a:	7da8      	ldrb	r0, [r5, #22]
 801463c:	756b      	strb	r3, [r5, #21]
 801463e:	4058      	eors	r0, r3
 8014640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014644:	463a      	mov	r2, r7
 8014646:	68a8      	ldr	r0, [r5, #8]
 8014648:	4641      	mov	r1, r8
 801464a:	f002 fc25 	bl	8016e98 <memcpy>
 801464e:	68aa      	ldr	r2, [r5, #8]
 8014650:	692b      	ldr	r3, [r5, #16]
 8014652:	443a      	add	r2, r7
 8014654:	443b      	add	r3, r7
 8014656:	60aa      	str	r2, [r5, #8]
 8014658:	612b      	str	r3, [r5, #16]
 801465a:	e7ed      	b.n	8014638 <ucdr_serialize_endian_array_char+0x40>

0801465c <ucdr_deserialize_endian_array_char>:
 801465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014660:	4619      	mov	r1, r3
 8014662:	461f      	mov	r7, r3
 8014664:	4605      	mov	r5, r0
 8014666:	4690      	mov	r8, r2
 8014668:	f7f9 f8e8 	bl	800d83c <ucdr_check_buffer_available_for>
 801466c:	b9e0      	cbnz	r0, 80146a8 <ucdr_deserialize_endian_array_char+0x4c>
 801466e:	463e      	mov	r6, r7
 8014670:	e009      	b.n	8014686 <ucdr_deserialize_endian_array_char+0x2a>
 8014672:	68a9      	ldr	r1, [r5, #8]
 8014674:	f002 fc10 	bl	8016e98 <memcpy>
 8014678:	68ab      	ldr	r3, [r5, #8]
 801467a:	6928      	ldr	r0, [r5, #16]
 801467c:	4423      	add	r3, r4
 801467e:	4420      	add	r0, r4
 8014680:	1b36      	subs	r6, r6, r4
 8014682:	60ab      	str	r3, [r5, #8]
 8014684:	6128      	str	r0, [r5, #16]
 8014686:	2201      	movs	r2, #1
 8014688:	4631      	mov	r1, r6
 801468a:	4628      	mov	r0, r5
 801468c:	f7f9 f95e 	bl	800d94c <ucdr_check_final_buffer_behavior_array>
 8014690:	4604      	mov	r4, r0
 8014692:	1bb8      	subs	r0, r7, r6
 8014694:	4440      	add	r0, r8
 8014696:	4622      	mov	r2, r4
 8014698:	2c00      	cmp	r4, #0
 801469a:	d1ea      	bne.n	8014672 <ucdr_deserialize_endian_array_char+0x16>
 801469c:	2301      	movs	r3, #1
 801469e:	7da8      	ldrb	r0, [r5, #22]
 80146a0:	756b      	strb	r3, [r5, #21]
 80146a2:	4058      	eors	r0, r3
 80146a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146a8:	463a      	mov	r2, r7
 80146aa:	68a9      	ldr	r1, [r5, #8]
 80146ac:	4640      	mov	r0, r8
 80146ae:	f002 fbf3 	bl	8016e98 <memcpy>
 80146b2:	68aa      	ldr	r2, [r5, #8]
 80146b4:	692b      	ldr	r3, [r5, #16]
 80146b6:	443a      	add	r2, r7
 80146b8:	443b      	add	r3, r7
 80146ba:	60aa      	str	r2, [r5, #8]
 80146bc:	612b      	str	r3, [r5, #16]
 80146be:	e7ed      	b.n	801469c <ucdr_deserialize_endian_array_char+0x40>

080146c0 <ucdr_serialize_array_uint8_t>:
 80146c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c4:	4688      	mov	r8, r1
 80146c6:	4611      	mov	r1, r2
 80146c8:	4617      	mov	r7, r2
 80146ca:	4605      	mov	r5, r0
 80146cc:	f7f9 f8b6 	bl	800d83c <ucdr_check_buffer_available_for>
 80146d0:	b9e0      	cbnz	r0, 801470c <ucdr_serialize_array_uint8_t+0x4c>
 80146d2:	463e      	mov	r6, r7
 80146d4:	e009      	b.n	80146ea <ucdr_serialize_array_uint8_t+0x2a>
 80146d6:	68a8      	ldr	r0, [r5, #8]
 80146d8:	f002 fbde 	bl	8016e98 <memcpy>
 80146dc:	68aa      	ldr	r2, [r5, #8]
 80146de:	692b      	ldr	r3, [r5, #16]
 80146e0:	4422      	add	r2, r4
 80146e2:	4423      	add	r3, r4
 80146e4:	1b36      	subs	r6, r6, r4
 80146e6:	60aa      	str	r2, [r5, #8]
 80146e8:	612b      	str	r3, [r5, #16]
 80146ea:	4631      	mov	r1, r6
 80146ec:	2201      	movs	r2, #1
 80146ee:	4628      	mov	r0, r5
 80146f0:	f7f9 f92c 	bl	800d94c <ucdr_check_final_buffer_behavior_array>
 80146f4:	1bb9      	subs	r1, r7, r6
 80146f6:	4441      	add	r1, r8
 80146f8:	4604      	mov	r4, r0
 80146fa:	4602      	mov	r2, r0
 80146fc:	2800      	cmp	r0, #0
 80146fe:	d1ea      	bne.n	80146d6 <ucdr_serialize_array_uint8_t+0x16>
 8014700:	2301      	movs	r3, #1
 8014702:	7da8      	ldrb	r0, [r5, #22]
 8014704:	756b      	strb	r3, [r5, #21]
 8014706:	4058      	eors	r0, r3
 8014708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801470c:	463a      	mov	r2, r7
 801470e:	68a8      	ldr	r0, [r5, #8]
 8014710:	4641      	mov	r1, r8
 8014712:	f002 fbc1 	bl	8016e98 <memcpy>
 8014716:	68aa      	ldr	r2, [r5, #8]
 8014718:	692b      	ldr	r3, [r5, #16]
 801471a:	443a      	add	r2, r7
 801471c:	443b      	add	r3, r7
 801471e:	60aa      	str	r2, [r5, #8]
 8014720:	612b      	str	r3, [r5, #16]
 8014722:	e7ed      	b.n	8014700 <ucdr_serialize_array_uint8_t+0x40>

08014724 <ucdr_serialize_endian_array_uint8_t>:
 8014724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014728:	4619      	mov	r1, r3
 801472a:	461f      	mov	r7, r3
 801472c:	4605      	mov	r5, r0
 801472e:	4690      	mov	r8, r2
 8014730:	f7f9 f884 	bl	800d83c <ucdr_check_buffer_available_for>
 8014734:	b9e0      	cbnz	r0, 8014770 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014736:	463e      	mov	r6, r7
 8014738:	e009      	b.n	801474e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801473a:	68a8      	ldr	r0, [r5, #8]
 801473c:	f002 fbac 	bl	8016e98 <memcpy>
 8014740:	68ab      	ldr	r3, [r5, #8]
 8014742:	6928      	ldr	r0, [r5, #16]
 8014744:	4423      	add	r3, r4
 8014746:	4420      	add	r0, r4
 8014748:	1b36      	subs	r6, r6, r4
 801474a:	60ab      	str	r3, [r5, #8]
 801474c:	6128      	str	r0, [r5, #16]
 801474e:	4631      	mov	r1, r6
 8014750:	2201      	movs	r2, #1
 8014752:	4628      	mov	r0, r5
 8014754:	f7f9 f8fa 	bl	800d94c <ucdr_check_final_buffer_behavior_array>
 8014758:	1bb9      	subs	r1, r7, r6
 801475a:	4441      	add	r1, r8
 801475c:	4604      	mov	r4, r0
 801475e:	4602      	mov	r2, r0
 8014760:	2800      	cmp	r0, #0
 8014762:	d1ea      	bne.n	801473a <ucdr_serialize_endian_array_uint8_t+0x16>
 8014764:	2301      	movs	r3, #1
 8014766:	7da8      	ldrb	r0, [r5, #22]
 8014768:	756b      	strb	r3, [r5, #21]
 801476a:	4058      	eors	r0, r3
 801476c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014770:	463a      	mov	r2, r7
 8014772:	68a8      	ldr	r0, [r5, #8]
 8014774:	4641      	mov	r1, r8
 8014776:	f002 fb8f 	bl	8016e98 <memcpy>
 801477a:	68aa      	ldr	r2, [r5, #8]
 801477c:	692b      	ldr	r3, [r5, #16]
 801477e:	443a      	add	r2, r7
 8014780:	443b      	add	r3, r7
 8014782:	60aa      	str	r2, [r5, #8]
 8014784:	612b      	str	r3, [r5, #16]
 8014786:	e7ed      	b.n	8014764 <ucdr_serialize_endian_array_uint8_t+0x40>

08014788 <ucdr_deserialize_array_uint8_t>:
 8014788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801478c:	4688      	mov	r8, r1
 801478e:	4611      	mov	r1, r2
 8014790:	4617      	mov	r7, r2
 8014792:	4605      	mov	r5, r0
 8014794:	f7f9 f852 	bl	800d83c <ucdr_check_buffer_available_for>
 8014798:	b9e0      	cbnz	r0, 80147d4 <ucdr_deserialize_array_uint8_t+0x4c>
 801479a:	463e      	mov	r6, r7
 801479c:	e009      	b.n	80147b2 <ucdr_deserialize_array_uint8_t+0x2a>
 801479e:	68a9      	ldr	r1, [r5, #8]
 80147a0:	f002 fb7a 	bl	8016e98 <memcpy>
 80147a4:	68aa      	ldr	r2, [r5, #8]
 80147a6:	692b      	ldr	r3, [r5, #16]
 80147a8:	4422      	add	r2, r4
 80147aa:	4423      	add	r3, r4
 80147ac:	1b36      	subs	r6, r6, r4
 80147ae:	60aa      	str	r2, [r5, #8]
 80147b0:	612b      	str	r3, [r5, #16]
 80147b2:	2201      	movs	r2, #1
 80147b4:	4631      	mov	r1, r6
 80147b6:	4628      	mov	r0, r5
 80147b8:	f7f9 f8c8 	bl	800d94c <ucdr_check_final_buffer_behavior_array>
 80147bc:	4604      	mov	r4, r0
 80147be:	1bb8      	subs	r0, r7, r6
 80147c0:	4440      	add	r0, r8
 80147c2:	4622      	mov	r2, r4
 80147c4:	2c00      	cmp	r4, #0
 80147c6:	d1ea      	bne.n	801479e <ucdr_deserialize_array_uint8_t+0x16>
 80147c8:	2301      	movs	r3, #1
 80147ca:	7da8      	ldrb	r0, [r5, #22]
 80147cc:	756b      	strb	r3, [r5, #21]
 80147ce:	4058      	eors	r0, r3
 80147d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147d4:	463a      	mov	r2, r7
 80147d6:	68a9      	ldr	r1, [r5, #8]
 80147d8:	4640      	mov	r0, r8
 80147da:	f002 fb5d 	bl	8016e98 <memcpy>
 80147de:	68aa      	ldr	r2, [r5, #8]
 80147e0:	692b      	ldr	r3, [r5, #16]
 80147e2:	443a      	add	r2, r7
 80147e4:	443b      	add	r3, r7
 80147e6:	60aa      	str	r2, [r5, #8]
 80147e8:	612b      	str	r3, [r5, #16]
 80147ea:	e7ed      	b.n	80147c8 <ucdr_deserialize_array_uint8_t+0x40>

080147ec <ucdr_deserialize_endian_array_uint8_t>:
 80147ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f0:	4619      	mov	r1, r3
 80147f2:	461f      	mov	r7, r3
 80147f4:	4605      	mov	r5, r0
 80147f6:	4690      	mov	r8, r2
 80147f8:	f7f9 f820 	bl	800d83c <ucdr_check_buffer_available_for>
 80147fc:	b9e0      	cbnz	r0, 8014838 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80147fe:	463e      	mov	r6, r7
 8014800:	e009      	b.n	8014816 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014802:	68a9      	ldr	r1, [r5, #8]
 8014804:	f002 fb48 	bl	8016e98 <memcpy>
 8014808:	68ab      	ldr	r3, [r5, #8]
 801480a:	6928      	ldr	r0, [r5, #16]
 801480c:	4423      	add	r3, r4
 801480e:	4420      	add	r0, r4
 8014810:	1b36      	subs	r6, r6, r4
 8014812:	60ab      	str	r3, [r5, #8]
 8014814:	6128      	str	r0, [r5, #16]
 8014816:	2201      	movs	r2, #1
 8014818:	4631      	mov	r1, r6
 801481a:	4628      	mov	r0, r5
 801481c:	f7f9 f896 	bl	800d94c <ucdr_check_final_buffer_behavior_array>
 8014820:	4604      	mov	r4, r0
 8014822:	1bb8      	subs	r0, r7, r6
 8014824:	4440      	add	r0, r8
 8014826:	4622      	mov	r2, r4
 8014828:	2c00      	cmp	r4, #0
 801482a:	d1ea      	bne.n	8014802 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801482c:	2301      	movs	r3, #1
 801482e:	7da8      	ldrb	r0, [r5, #22]
 8014830:	756b      	strb	r3, [r5, #21]
 8014832:	4058      	eors	r0, r3
 8014834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014838:	463a      	mov	r2, r7
 801483a:	68a9      	ldr	r1, [r5, #8]
 801483c:	4640      	mov	r0, r8
 801483e:	f002 fb2b 	bl	8016e98 <memcpy>
 8014842:	68aa      	ldr	r2, [r5, #8]
 8014844:	692b      	ldr	r3, [r5, #16]
 8014846:	443a      	add	r2, r7
 8014848:	443b      	add	r3, r7
 801484a:	60aa      	str	r2, [r5, #8]
 801484c:	612b      	str	r3, [r5, #16]
 801484e:	e7ed      	b.n	801482c <ucdr_deserialize_endian_array_uint8_t+0x40>

08014850 <ucdr_serialize_sequence_char>:
 8014850:	b570      	push	{r4, r5, r6, lr}
 8014852:	4615      	mov	r5, r2
 8014854:	460e      	mov	r6, r1
 8014856:	7d01      	ldrb	r1, [r0, #20]
 8014858:	4604      	mov	r4, r0
 801485a:	f7f8 fb45 	bl	800cee8 <ucdr_serialize_endian_uint32_t>
 801485e:	b90d      	cbnz	r5, 8014864 <ucdr_serialize_sequence_char+0x14>
 8014860:	2001      	movs	r0, #1
 8014862:	bd70      	pop	{r4, r5, r6, pc}
 8014864:	7d21      	ldrb	r1, [r4, #20]
 8014866:	462b      	mov	r3, r5
 8014868:	4632      	mov	r2, r6
 801486a:	4620      	mov	r0, r4
 801486c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014870:	f7ff bec2 	b.w	80145f8 <ucdr_serialize_endian_array_char>

08014874 <ucdr_deserialize_sequence_char>:
 8014874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014878:	461d      	mov	r5, r3
 801487a:	4616      	mov	r6, r2
 801487c:	460f      	mov	r7, r1
 801487e:	461a      	mov	r2, r3
 8014880:	7d01      	ldrb	r1, [r0, #20]
 8014882:	4604      	mov	r4, r0
 8014884:	f7f8 fc58 	bl	800d138 <ucdr_deserialize_endian_uint32_t>
 8014888:	682b      	ldr	r3, [r5, #0]
 801488a:	429e      	cmp	r6, r3
 801488c:	bf3c      	itt	cc
 801488e:	2201      	movcc	r2, #1
 8014890:	75a2      	strbcc	r2, [r4, #22]
 8014892:	b913      	cbnz	r3, 801489a <ucdr_deserialize_sequence_char+0x26>
 8014894:	2001      	movs	r0, #1
 8014896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801489a:	7d21      	ldrb	r1, [r4, #20]
 801489c:	463a      	mov	r2, r7
 801489e:	4620      	mov	r0, r4
 80148a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148a4:	f7ff beda 	b.w	801465c <ucdr_deserialize_endian_array_char>

080148a8 <ucdr_serialize_sequence_uint8_t>:
 80148a8:	b570      	push	{r4, r5, r6, lr}
 80148aa:	4615      	mov	r5, r2
 80148ac:	460e      	mov	r6, r1
 80148ae:	7d01      	ldrb	r1, [r0, #20]
 80148b0:	4604      	mov	r4, r0
 80148b2:	f7f8 fb19 	bl	800cee8 <ucdr_serialize_endian_uint32_t>
 80148b6:	b90d      	cbnz	r5, 80148bc <ucdr_serialize_sequence_uint8_t+0x14>
 80148b8:	2001      	movs	r0, #1
 80148ba:	bd70      	pop	{r4, r5, r6, pc}
 80148bc:	7d21      	ldrb	r1, [r4, #20]
 80148be:	462b      	mov	r3, r5
 80148c0:	4632      	mov	r2, r6
 80148c2:	4620      	mov	r0, r4
 80148c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148c8:	f7ff bf2c 	b.w	8014724 <ucdr_serialize_endian_array_uint8_t>

080148cc <ucdr_deserialize_sequence_uint8_t>:
 80148cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148d0:	461d      	mov	r5, r3
 80148d2:	4616      	mov	r6, r2
 80148d4:	460f      	mov	r7, r1
 80148d6:	461a      	mov	r2, r3
 80148d8:	7d01      	ldrb	r1, [r0, #20]
 80148da:	4604      	mov	r4, r0
 80148dc:	f7f8 fc2c 	bl	800d138 <ucdr_deserialize_endian_uint32_t>
 80148e0:	682b      	ldr	r3, [r5, #0]
 80148e2:	429e      	cmp	r6, r3
 80148e4:	bf3c      	itt	cc
 80148e6:	2201      	movcc	r2, #1
 80148e8:	75a2      	strbcc	r2, [r4, #22]
 80148ea:	b913      	cbnz	r3, 80148f2 <ucdr_deserialize_sequence_uint8_t+0x26>
 80148ec:	2001      	movs	r0, #1
 80148ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148f2:	7d21      	ldrb	r1, [r4, #20]
 80148f4:	463a      	mov	r2, r7
 80148f6:	4620      	mov	r0, r4
 80148f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148fc:	f7ff bf76 	b.w	80147ec <ucdr_deserialize_endian_array_uint8_t>

08014900 <ucdr_serialize_string>:
 8014900:	b510      	push	{r4, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	4604      	mov	r4, r0
 8014906:	4608      	mov	r0, r1
 8014908:	9101      	str	r1, [sp, #4]
 801490a:	f7eb fc6b 	bl	80001e4 <strlen>
 801490e:	9901      	ldr	r1, [sp, #4]
 8014910:	1c42      	adds	r2, r0, #1
 8014912:	4620      	mov	r0, r4
 8014914:	b002      	add	sp, #8
 8014916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801491a:	f7ff bf99 	b.w	8014850 <ucdr_serialize_sequence_char>
 801491e:	bf00      	nop

08014920 <ucdr_deserialize_string>:
 8014920:	b500      	push	{lr}
 8014922:	b083      	sub	sp, #12
 8014924:	ab01      	add	r3, sp, #4
 8014926:	f7ff ffa5 	bl	8014874 <ucdr_deserialize_sequence_char>
 801492a:	b003      	add	sp, #12
 801492c:	f85d fb04 	ldr.w	pc, [sp], #4

08014930 <get_custom_error>:
 8014930:	4b01      	ldr	r3, [pc, #4]	; (8014938 <get_custom_error+0x8>)
 8014932:	7818      	ldrb	r0, [r3, #0]
 8014934:	4770      	bx	lr
 8014936:	bf00      	nop
 8014938:	2000dec0 	.word	0x2000dec0

0801493c <recv_custom_msg>:
 801493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014940:	4693      	mov	fp, r2
 8014942:	b089      	sub	sp, #36	; 0x24
 8014944:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8014948:	9305      	str	r3, [sp, #20]
 801494a:	468a      	mov	sl, r1
 801494c:	2100      	movs	r1, #0
 801494e:	4604      	mov	r4, r0
 8014950:	f88d 101e 	strb.w	r1, [sp, #30]
 8014954:	b322      	cbz	r2, 80149a0 <recv_custom_msg+0x64>
 8014956:	f200 2902 	addw	r9, r0, #514	; 0x202
 801495a:	f10d 081f 	add.w	r8, sp, #31
 801495e:	af05      	add	r7, sp, #20
 8014960:	f10d 061e 	add.w	r6, sp, #30
 8014964:	f44f 7500 	mov.w	r5, #512	; 0x200
 8014968:	e002      	b.n	8014970 <recv_custom_msg+0x34>
 801496a:	9b05      	ldr	r3, [sp, #20]
 801496c:	2b00      	cmp	r3, #0
 801496e:	dd0f      	ble.n	8014990 <recv_custom_msg+0x54>
 8014970:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8014974:	4623      	mov	r3, r4
 8014976:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801497a:	e9cd 5600 	strd	r5, r6, [sp]
 801497e:	4622      	mov	r2, r4
 8014980:	4648      	mov	r0, r9
 8014982:	f000 fffd 	bl	8015980 <uxr_read_framed_msg>
 8014986:	2800      	cmp	r0, #0
 8014988:	d0ef      	beq.n	801496a <recv_custom_msg+0x2e>
 801498a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801498e:	b1b3      	cbz	r3, 80149be <recv_custom_msg+0x82>
 8014990:	4b0f      	ldr	r3, [pc, #60]	; (80149d0 <recv_custom_msg+0x94>)
 8014992:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014996:	701a      	strb	r2, [r3, #0]
 8014998:	2000      	movs	r0, #0
 801499a:	b009      	add	sp, #36	; 0x24
 801499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149a0:	f10d 021f 	add.w	r2, sp, #31
 80149a4:	9200      	str	r2, [sp, #0]
 80149a6:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80149aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80149ae:	4601      	mov	r1, r0
 80149b0:	47a8      	blx	r5
 80149b2:	2800      	cmp	r0, #0
 80149b4:	d0ec      	beq.n	8014990 <recv_custom_msg+0x54>
 80149b6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d1e8      	bne.n	8014990 <recv_custom_msg+0x54>
 80149be:	f8cb 0000 	str.w	r0, [fp]
 80149c2:	2001      	movs	r0, #1
 80149c4:	f8ca 4000 	str.w	r4, [sl]
 80149c8:	b009      	add	sp, #36	; 0x24
 80149ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ce:	bf00      	nop
 80149d0:	2000dec0 	.word	0x2000dec0

080149d4 <send_custom_msg>:
 80149d4:	b530      	push	{r4, r5, lr}
 80149d6:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 80149da:	b087      	sub	sp, #28
 80149dc:	4615      	mov	r5, r2
 80149de:	b974      	cbnz	r4, 80149fe <send_custom_msg+0x2a>
 80149e0:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80149e4:	f10d 0317 	add.w	r3, sp, #23
 80149e8:	47a0      	blx	r4
 80149ea:	b108      	cbz	r0, 80149f0 <send_custom_msg+0x1c>
 80149ec:	42a8      	cmp	r0, r5
 80149ee:	d015      	beq.n	8014a1c <send_custom_msg+0x48>
 80149f0:	4b0c      	ldr	r3, [pc, #48]	; (8014a24 <send_custom_msg+0x50>)
 80149f2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80149f6:	701a      	strb	r2, [r3, #0]
 80149f8:	2000      	movs	r0, #0
 80149fa:	b007      	add	sp, #28
 80149fc:	bd30      	pop	{r4, r5, pc}
 80149fe:	460b      	mov	r3, r1
 8014a00:	2200      	movs	r2, #0
 8014a02:	f10d 0117 	add.w	r1, sp, #23
 8014a06:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014a0a:	4602      	mov	r2, r0
 8014a0c:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8014a10:	9500      	str	r5, [sp, #0]
 8014a12:	f200 2002 	addw	r0, r0, #514	; 0x202
 8014a16:	f000 fdbb 	bl	8015590 <uxr_write_framed_msg>
 8014a1a:	e7e6      	b.n	80149ea <send_custom_msg+0x16>
 8014a1c:	2001      	movs	r0, #1
 8014a1e:	b007      	add	sp, #28
 8014a20:	bd30      	pop	{r4, r5, pc}
 8014a22:	bf00      	nop
 8014a24:	2000dec0 	.word	0x2000dec0

08014a28 <uxr_set_custom_transport_callbacks>:
 8014a28:	b410      	push	{r4}
 8014a2a:	9c01      	ldr	r4, [sp, #4]
 8014a2c:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8014a30:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8014a34:	9b02      	ldr	r3, [sp, #8]
 8014a36:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8014a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a3e:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8014a42:	4770      	bx	lr

08014a44 <uxr_init_custom_transport>:
 8014a44:	b538      	push	{r3, r4, r5, lr}
 8014a46:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8014a4a:	b303      	cbz	r3, 8014a8e <uxr_init_custom_transport+0x4a>
 8014a4c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8014a50:	4604      	mov	r4, r0
 8014a52:	b1e2      	cbz	r2, 8014a8e <uxr_init_custom_transport+0x4a>
 8014a54:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8014a58:	b1ca      	cbz	r2, 8014a8e <uxr_init_custom_transport+0x4a>
 8014a5a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8014a5e:	b1b2      	cbz	r2, 8014a8e <uxr_init_custom_transport+0x4a>
 8014a60:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8014a64:	4798      	blx	r3
 8014a66:	4605      	mov	r5, r0
 8014a68:	b188      	cbz	r0, 8014a8e <uxr_init_custom_transport+0x4a>
 8014a6a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8014a6e:	b98b      	cbnz	r3, 8014a94 <uxr_init_custom_transport+0x50>
 8014a70:	490b      	ldr	r1, [pc, #44]	; (8014aa0 <uxr_init_custom_transport+0x5c>)
 8014a72:	4b0c      	ldr	r3, [pc, #48]	; (8014aa4 <uxr_init_custom_transport+0x60>)
 8014a74:	4a0c      	ldr	r2, [pc, #48]	; (8014aa8 <uxr_init_custom_transport+0x64>)
 8014a76:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8014a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a7e:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8014a82:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8014a86:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8014a8a:	4628      	mov	r0, r5
 8014a8c:	bd38      	pop	{r3, r4, r5, pc}
 8014a8e:	2500      	movs	r5, #0
 8014a90:	4628      	mov	r0, r5
 8014a92:	bd38      	pop	{r3, r4, r5, pc}
 8014a94:	2100      	movs	r1, #0
 8014a96:	f204 2002 	addw	r0, r4, #514	; 0x202
 8014a9a:	f000 fd73 	bl	8015584 <uxr_init_framing_io>
 8014a9e:	e7e7      	b.n	8014a70 <uxr_init_custom_transport+0x2c>
 8014aa0:	080149d5 	.word	0x080149d5
 8014aa4:	0801493d 	.word	0x0801493d
 8014aa8:	08014931 	.word	0x08014931

08014aac <uxr_close_custom_transport>:
 8014aac:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8014ab0:	4718      	bx	r3
 8014ab2:	bf00      	nop

08014ab4 <uxr_init_input_best_effort_stream>:
 8014ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ab8:	8003      	strh	r3, [r0, #0]
 8014aba:	4770      	bx	lr

08014abc <uxr_reset_input_best_effort_stream>:
 8014abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ac0:	8003      	strh	r3, [r0, #0]
 8014ac2:	4770      	bx	lr

08014ac4 <uxr_receive_best_effort_message>:
 8014ac4:	b538      	push	{r3, r4, r5, lr}
 8014ac6:	4604      	mov	r4, r0
 8014ac8:	8800      	ldrh	r0, [r0, #0]
 8014aca:	460d      	mov	r5, r1
 8014acc:	f000 fd42 	bl	8015554 <uxr_seq_num_cmp>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014ad8:	bfb8      	it	lt
 8014ada:	8025      	strhlt	r5, [r4, #0]
 8014adc:	bd38      	pop	{r3, r4, r5, pc}
 8014ade:	bf00      	nop

08014ae0 <on_full_input_buffer>:
 8014ae0:	b570      	push	{r4, r5, r6, lr}
 8014ae2:	4605      	mov	r5, r0
 8014ae4:	460c      	mov	r4, r1
 8014ae6:	682b      	ldr	r3, [r5, #0]
 8014ae8:	6809      	ldr	r1, [r1, #0]
 8014aea:	8920      	ldrh	r0, [r4, #8]
 8014aec:	6862      	ldr	r2, [r4, #4]
 8014aee:	fbb2 f2f0 	udiv	r2, r2, r0
 8014af2:	eba3 0c01 	sub.w	ip, r3, r1
 8014af6:	fbbc fcf2 	udiv	ip, ip, r2
 8014afa:	f10c 0c01 	add.w	ip, ip, #1
 8014afe:	fa1f f38c 	uxth.w	r3, ip
 8014b02:	fbb3 f6f0 	udiv	r6, r3, r0
 8014b06:	fb00 3316 	mls	r3, r0, r6, r3
 8014b0a:	b29b      	uxth	r3, r3
 8014b0c:	fb02 f303 	mul.w	r3, r2, r3
 8014b10:	1d18      	adds	r0, r3, #4
 8014b12:	4408      	add	r0, r1
 8014b14:	7d26      	ldrb	r6, [r4, #20]
 8014b16:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014b1a:	b116      	cbz	r6, 8014b22 <on_full_input_buffer+0x42>
 8014b1c:	2600      	movs	r6, #0
 8014b1e:	f840 6c04 	str.w	r6, [r0, #-4]
 8014b22:	2a03      	cmp	r2, #3
 8014b24:	d801      	bhi.n	8014b2a <on_full_input_buffer+0x4a>
 8014b26:	2001      	movs	r0, #1
 8014b28:	bd70      	pop	{r4, r5, r6, pc}
 8014b2a:	3308      	adds	r3, #8
 8014b2c:	4419      	add	r1, r3
 8014b2e:	4628      	mov	r0, r5
 8014b30:	692b      	ldr	r3, [r5, #16]
 8014b32:	3a04      	subs	r2, #4
 8014b34:	f7f8 fece 	bl	800d8d4 <ucdr_init_buffer_origin>
 8014b38:	4628      	mov	r0, r5
 8014b3a:	4903      	ldr	r1, [pc, #12]	; (8014b48 <on_full_input_buffer+0x68>)
 8014b3c:	4622      	mov	r2, r4
 8014b3e:	f7f8 fea5 	bl	800d88c <ucdr_set_on_full_buffer_callback>
 8014b42:	2000      	movs	r0, #0
 8014b44:	bd70      	pop	{r4, r5, r6, pc}
 8014b46:	bf00      	nop
 8014b48:	08014ae1 	.word	0x08014ae1

08014b4c <uxr_init_input_reliable_stream>:
 8014b4c:	b500      	push	{lr}
 8014b4e:	e9c0 1200 	strd	r1, r2, [r0]
 8014b52:	f04f 0e00 	mov.w	lr, #0
 8014b56:	9a01      	ldr	r2, [sp, #4]
 8014b58:	8103      	strh	r3, [r0, #8]
 8014b5a:	6102      	str	r2, [r0, #16]
 8014b5c:	f880 e014 	strb.w	lr, [r0, #20]
 8014b60:	b1d3      	cbz	r3, 8014b98 <uxr_init_input_reliable_stream+0x4c>
 8014b62:	f8c1 e000 	str.w	lr, [r1]
 8014b66:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014b6a:	f1bc 0f01 	cmp.w	ip, #1
 8014b6e:	d913      	bls.n	8014b98 <uxr_init_input_reliable_stream+0x4c>
 8014b70:	2301      	movs	r3, #1
 8014b72:	fbb3 f1fc 	udiv	r1, r3, ip
 8014b76:	fb0c 3111 	mls	r1, ip, r1, r3
 8014b7a:	b289      	uxth	r1, r1
 8014b7c:	6842      	ldr	r2, [r0, #4]
 8014b7e:	fbb2 f2fc 	udiv	r2, r2, ip
 8014b82:	fb01 f202 	mul.w	r2, r1, r2
 8014b86:	6801      	ldr	r1, [r0, #0]
 8014b88:	f841 e002 	str.w	lr, [r1, r2]
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	459c      	cmp	ip, r3
 8014b96:	d8ec      	bhi.n	8014b72 <uxr_init_input_reliable_stream+0x26>
 8014b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b9c:	60c3      	str	r3, [r0, #12]
 8014b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014ba2:	bf00      	nop

08014ba4 <uxr_reset_input_reliable_stream>:
 8014ba4:	8901      	ldrh	r1, [r0, #8]
 8014ba6:	b1e9      	cbz	r1, 8014be4 <uxr_reset_input_reliable_stream+0x40>
 8014ba8:	f04f 0c00 	mov.w	ip, #0
 8014bac:	b500      	push	{lr}
 8014bae:	4663      	mov	r3, ip
 8014bb0:	46e6      	mov	lr, ip
 8014bb2:	fbb3 f2f1 	udiv	r2, r3, r1
 8014bb6:	fb01 3312 	mls	r3, r1, r2, r3
 8014bba:	b29b      	uxth	r3, r3
 8014bbc:	6842      	ldr	r2, [r0, #4]
 8014bbe:	fbb2 f2f1 	udiv	r2, r2, r1
 8014bc2:	fb02 f303 	mul.w	r3, r2, r3
 8014bc6:	6802      	ldr	r2, [r0, #0]
 8014bc8:	f842 e003 	str.w	lr, [r2, r3]
 8014bcc:	f10c 0c01 	add.w	ip, ip, #1
 8014bd0:	8901      	ldrh	r1, [r0, #8]
 8014bd2:	fa1f f38c 	uxth.w	r3, ip
 8014bd6:	4299      	cmp	r1, r3
 8014bd8:	d8eb      	bhi.n	8014bb2 <uxr_reset_input_reliable_stream+0xe>
 8014bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bde:	60c3      	str	r3, [r0, #12]
 8014be0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014be8:	60c3      	str	r3, [r0, #12]
 8014bea:	4770      	bx	lr

08014bec <uxr_receive_reliable_message>:
 8014bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	460d      	mov	r5, r1
 8014bf4:	8901      	ldrh	r1, [r0, #8]
 8014bf6:	8980      	ldrh	r0, [r0, #12]
 8014bf8:	4690      	mov	r8, r2
 8014bfa:	461f      	mov	r7, r3
 8014bfc:	f000 fca2 	bl	8015544 <uxr_seq_num_add>
 8014c00:	4629      	mov	r1, r5
 8014c02:	4606      	mov	r6, r0
 8014c04:	89a0      	ldrh	r0, [r4, #12]
 8014c06:	f000 fca5 	bl	8015554 <uxr_seq_num_cmp>
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	db0a      	blt.n	8014c24 <uxr_receive_reliable_message+0x38>
 8014c0e:	2600      	movs	r6, #0
 8014c10:	89e0      	ldrh	r0, [r4, #14]
 8014c12:	4629      	mov	r1, r5
 8014c14:	f000 fc9e 	bl	8015554 <uxr_seq_num_cmp>
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	da00      	bge.n	8014c1e <uxr_receive_reliable_message+0x32>
 8014c1c:	81e5      	strh	r5, [r4, #14]
 8014c1e:	4630      	mov	r0, r6
 8014c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c24:	4630      	mov	r0, r6
 8014c26:	4629      	mov	r1, r5
 8014c28:	f000 fc94 	bl	8015554 <uxr_seq_num_cmp>
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	dbee      	blt.n	8014c0e <uxr_receive_reliable_message+0x22>
 8014c30:	6923      	ldr	r3, [r4, #16]
 8014c32:	4640      	mov	r0, r8
 8014c34:	4798      	blx	r3
 8014c36:	2101      	movs	r1, #1
 8014c38:	4681      	mov	r9, r0
 8014c3a:	89a0      	ldrh	r0, [r4, #12]
 8014c3c:	f000 fc82 	bl	8015544 <uxr_seq_num_add>
 8014c40:	f1b9 0f00 	cmp.w	r9, #0
 8014c44:	d101      	bne.n	8014c4a <uxr_receive_reliable_message+0x5e>
 8014c46:	4285      	cmp	r5, r0
 8014c48:	d047      	beq.n	8014cda <uxr_receive_reliable_message+0xee>
 8014c4a:	8922      	ldrh	r2, [r4, #8]
 8014c4c:	fbb5 f0f2 	udiv	r0, r5, r2
 8014c50:	fb02 5010 	mls	r0, r2, r0, r5
 8014c54:	b280      	uxth	r0, r0
 8014c56:	6863      	ldr	r3, [r4, #4]
 8014c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c5c:	fb00 f303 	mul.w	r3, r0, r3
 8014c60:	6820      	ldr	r0, [r4, #0]
 8014c62:	3304      	adds	r3, #4
 8014c64:	4418      	add	r0, r3
 8014c66:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d1cf      	bne.n	8014c0e <uxr_receive_reliable_message+0x22>
 8014c6e:	4641      	mov	r1, r8
 8014c70:	463a      	mov	r2, r7
 8014c72:	f002 f911 	bl	8016e98 <memcpy>
 8014c76:	8921      	ldrh	r1, [r4, #8]
 8014c78:	fbb5 f2f1 	udiv	r2, r5, r1
 8014c7c:	fb01 5212 	mls	r2, r1, r2, r5
 8014c80:	b292      	uxth	r2, r2
 8014c82:	6863      	ldr	r3, [r4, #4]
 8014c84:	fbb3 f3f1 	udiv	r3, r3, r1
 8014c88:	fb02 f303 	mul.w	r3, r2, r3
 8014c8c:	6822      	ldr	r2, [r4, #0]
 8014c8e:	50d7      	str	r7, [r2, r3]
 8014c90:	9a08      	ldr	r2, [sp, #32]
 8014c92:	2301      	movs	r3, #1
 8014c94:	7013      	strb	r3, [r2, #0]
 8014c96:	f1b9 0f00 	cmp.w	r9, #0
 8014c9a:	d0b8      	beq.n	8014c0e <uxr_receive_reliable_message+0x22>
 8014c9c:	89a6      	ldrh	r6, [r4, #12]
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	f000 fc4f 	bl	8015544 <uxr_seq_num_add>
 8014ca6:	8922      	ldrh	r2, [r4, #8]
 8014ca8:	6863      	ldr	r3, [r4, #4]
 8014caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8014cae:	4606      	mov	r6, r0
 8014cb0:	fbb0 f0f2 	udiv	r0, r0, r2
 8014cb4:	fb02 6010 	mls	r0, r2, r0, r6
 8014cb8:	b280      	uxth	r0, r0
 8014cba:	fb00 f303 	mul.w	r3, r0, r3
 8014cbe:	6820      	ldr	r0, [r4, #0]
 8014cc0:	3304      	adds	r3, #4
 8014cc2:	4418      	add	r0, r3
 8014cc4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d0a0      	beq.n	8014c0e <uxr_receive_reliable_message+0x22>
 8014ccc:	6923      	ldr	r3, [r4, #16]
 8014cce:	4798      	blx	r3
 8014cd0:	2802      	cmp	r0, #2
 8014cd2:	d008      	beq.n	8014ce6 <uxr_receive_reliable_message+0xfa>
 8014cd4:	2801      	cmp	r0, #1
 8014cd6:	d0e2      	beq.n	8014c9e <uxr_receive_reliable_message+0xb2>
 8014cd8:	e799      	b.n	8014c0e <uxr_receive_reliable_message+0x22>
 8014cda:	9b08      	ldr	r3, [sp, #32]
 8014cdc:	81a5      	strh	r5, [r4, #12]
 8014cde:	2601      	movs	r6, #1
 8014ce0:	f883 9000 	strb.w	r9, [r3]
 8014ce4:	e794      	b.n	8014c10 <uxr_receive_reliable_message+0x24>
 8014ce6:	2601      	movs	r6, #1
 8014ce8:	e792      	b.n	8014c10 <uxr_receive_reliable_message+0x24>
 8014cea:	bf00      	nop

08014cec <uxr_next_input_reliable_buffer_available>:
 8014cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cf0:	4604      	mov	r4, r0
 8014cf2:	460f      	mov	r7, r1
 8014cf4:	8980      	ldrh	r0, [r0, #12]
 8014cf6:	2101      	movs	r1, #1
 8014cf8:	4690      	mov	r8, r2
 8014cfa:	f000 fc23 	bl	8015544 <uxr_seq_num_add>
 8014cfe:	8922      	ldrh	r2, [r4, #8]
 8014d00:	fbb0 f6f2 	udiv	r6, r0, r2
 8014d04:	fb02 0616 	mls	r6, r2, r6, r0
 8014d08:	b2b6      	uxth	r6, r6
 8014d0a:	6863      	ldr	r3, [r4, #4]
 8014d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014d10:	fb06 f303 	mul.w	r3, r6, r3
 8014d14:	6826      	ldr	r6, [r4, #0]
 8014d16:	3304      	adds	r3, #4
 8014d18:	441e      	add	r6, r3
 8014d1a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8014d1e:	f1b9 0f00 	cmp.w	r9, #0
 8014d22:	d023      	beq.n	8014d6c <uxr_next_input_reliable_buffer_available+0x80>
 8014d24:	6923      	ldr	r3, [r4, #16]
 8014d26:	4605      	mov	r5, r0
 8014d28:	4630      	mov	r0, r6
 8014d2a:	4798      	blx	r3
 8014d2c:	4682      	mov	sl, r0
 8014d2e:	b300      	cbz	r0, 8014d72 <uxr_next_input_reliable_buffer_available+0x86>
 8014d30:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8014d34:	2101      	movs	r1, #1
 8014d36:	4650      	mov	r0, sl
 8014d38:	f000 fc04 	bl	8015544 <uxr_seq_num_add>
 8014d3c:	8921      	ldrh	r1, [r4, #8]
 8014d3e:	fbb0 f2f1 	udiv	r2, r0, r1
 8014d42:	4682      	mov	sl, r0
 8014d44:	fb01 0212 	mls	r2, r1, r2, r0
 8014d48:	e9d4 0300 	ldrd	r0, r3, [r4]
 8014d4c:	b292      	uxth	r2, r2
 8014d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014d52:	fb02 f303 	mul.w	r3, r2, r3
 8014d56:	3304      	adds	r3, #4
 8014d58:	4418      	add	r0, r3
 8014d5a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014d5e:	b12b      	cbz	r3, 8014d6c <uxr_next_input_reliable_buffer_available+0x80>
 8014d60:	6923      	ldr	r3, [r4, #16]
 8014d62:	4798      	blx	r3
 8014d64:	2802      	cmp	r0, #2
 8014d66:	d01b      	beq.n	8014da0 <uxr_next_input_reliable_buffer_available+0xb4>
 8014d68:	2801      	cmp	r0, #1
 8014d6a:	d0e3      	beq.n	8014d34 <uxr_next_input_reliable_buffer_available+0x48>
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d72:	464a      	mov	r2, r9
 8014d74:	4631      	mov	r1, r6
 8014d76:	4638      	mov	r0, r7
 8014d78:	f7f8 fdb4 	bl	800d8e4 <ucdr_init_buffer>
 8014d7c:	8921      	ldrh	r1, [r4, #8]
 8014d7e:	fbb5 f2f1 	udiv	r2, r5, r1
 8014d82:	fb01 5212 	mls	r2, r1, r2, r5
 8014d86:	b292      	uxth	r2, r2
 8014d88:	6863      	ldr	r3, [r4, #4]
 8014d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8014d8e:	fb02 f303 	mul.w	r3, r2, r3
 8014d92:	6822      	ldr	r2, [r4, #0]
 8014d94:	f842 a003 	str.w	sl, [r2, r3]
 8014d98:	2001      	movs	r0, #1
 8014d9a:	81a5      	strh	r5, [r4, #12]
 8014d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014da0:	8920      	ldrh	r0, [r4, #8]
 8014da2:	fbb5 f3f0 	udiv	r3, r5, r0
 8014da6:	fb00 5513 	mls	r5, r0, r3, r5
 8014daa:	b2ad      	uxth	r5, r5
 8014dac:	6863      	ldr	r3, [r4, #4]
 8014dae:	fbb3 f3f0 	udiv	r3, r3, r0
 8014db2:	fb03 f505 	mul.w	r5, r3, r5
 8014db6:	6823      	ldr	r3, [r4, #0]
 8014db8:	2000      	movs	r0, #0
 8014dba:	5158      	str	r0, [r3, r5]
 8014dbc:	eb06 0108 	add.w	r1, r6, r8
 8014dc0:	eba9 0208 	sub.w	r2, r9, r8
 8014dc4:	4638      	mov	r0, r7
 8014dc6:	f7f8 fd8d 	bl	800d8e4 <ucdr_init_buffer>
 8014dca:	4638      	mov	r0, r7
 8014dcc:	4903      	ldr	r1, [pc, #12]	; (8014ddc <uxr_next_input_reliable_buffer_available+0xf0>)
 8014dce:	4622      	mov	r2, r4
 8014dd0:	f7f8 fd5c 	bl	800d88c <ucdr_set_on_full_buffer_callback>
 8014dd4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014dd8:	2001      	movs	r0, #1
 8014dda:	e7c8      	b.n	8014d6e <uxr_next_input_reliable_buffer_available+0x82>
 8014ddc:	08014ae1 	.word	0x08014ae1

08014de0 <uxr_process_heartbeat>:
 8014de0:	b538      	push	{r3, r4, r5, lr}
 8014de2:	4611      	mov	r1, r2
 8014de4:	4604      	mov	r4, r0
 8014de6:	89c0      	ldrh	r0, [r0, #14]
 8014de8:	4615      	mov	r5, r2
 8014dea:	f000 fbb3 	bl	8015554 <uxr_seq_num_cmp>
 8014dee:	2800      	cmp	r0, #0
 8014df0:	bfb8      	it	lt
 8014df2:	81e5      	strhlt	r5, [r4, #14]
 8014df4:	bd38      	pop	{r3, r4, r5, pc}
 8014df6:	bf00      	nop

08014df8 <uxr_compute_acknack>:
 8014df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dfc:	8903      	ldrh	r3, [r0, #8]
 8014dfe:	8985      	ldrh	r5, [r0, #12]
 8014e00:	4604      	mov	r4, r0
 8014e02:	460e      	mov	r6, r1
 8014e04:	b1d3      	cbz	r3, 8014e3c <uxr_compute_acknack+0x44>
 8014e06:	4628      	mov	r0, r5
 8014e08:	2701      	movs	r7, #1
 8014e0a:	e003      	b.n	8014e14 <uxr_compute_acknack+0x1c>
 8014e0c:	4567      	cmp	r7, ip
 8014e0e:	d215      	bcs.n	8014e3c <uxr_compute_acknack+0x44>
 8014e10:	89a0      	ldrh	r0, [r4, #12]
 8014e12:	3701      	adds	r7, #1
 8014e14:	b2b9      	uxth	r1, r7
 8014e16:	f000 fb95 	bl	8015544 <uxr_seq_num_add>
 8014e1a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014e1e:	fbb0 f3fc 	udiv	r3, r0, ip
 8014e22:	fb0c 0313 	mls	r3, ip, r3, r0
 8014e26:	b29a      	uxth	r2, r3
 8014e28:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014e2c:	fbb3 f3fc 	udiv	r3, r3, ip
 8014e30:	fb02 f303 	mul.w	r3, r2, r3
 8014e34:	58cb      	ldr	r3, [r1, r3]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d1e8      	bne.n	8014e0c <uxr_compute_acknack+0x14>
 8014e3a:	4605      	mov	r5, r0
 8014e3c:	8035      	strh	r5, [r6, #0]
 8014e3e:	2101      	movs	r1, #1
 8014e40:	4628      	mov	r0, r5
 8014e42:	89e7      	ldrh	r7, [r4, #14]
 8014e44:	f000 fb82 	bl	801554c <uxr_seq_num_sub>
 8014e48:	4601      	mov	r1, r0
 8014e4a:	4638      	mov	r0, r7
 8014e4c:	f000 fb7e 	bl	801554c <uxr_seq_num_sub>
 8014e50:	4605      	mov	r5, r0
 8014e52:	b318      	cbz	r0, 8014e9c <uxr_compute_acknack+0xa4>
 8014e54:	f04f 0900 	mov.w	r9, #0
 8014e58:	464f      	mov	r7, r9
 8014e5a:	f04f 0801 	mov.w	r8, #1
 8014e5e:	fa1f f189 	uxth.w	r1, r9
 8014e62:	8830      	ldrh	r0, [r6, #0]
 8014e64:	f000 fb6e 	bl	8015544 <uxr_seq_num_add>
 8014e68:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014e6c:	fbb0 f3fc 	udiv	r3, r0, ip
 8014e70:	e9d4 1200 	ldrd	r1, r2, [r4]
 8014e74:	fb03 001c 	mls	r0, r3, ip, r0
 8014e78:	b283      	uxth	r3, r0
 8014e7a:	fbb2 f2fc 	udiv	r2, r2, ip
 8014e7e:	fb02 f303 	mul.w	r3, r2, r3
 8014e82:	fa08 f209 	lsl.w	r2, r8, r9
 8014e86:	58cb      	ldr	r3, [r1, r3]
 8014e88:	f109 0901 	add.w	r9, r9, #1
 8014e8c:	b90b      	cbnz	r3, 8014e92 <uxr_compute_acknack+0x9a>
 8014e8e:	4317      	orrs	r7, r2
 8014e90:	b2bf      	uxth	r7, r7
 8014e92:	454d      	cmp	r5, r9
 8014e94:	d1e3      	bne.n	8014e5e <uxr_compute_acknack+0x66>
 8014e96:	4638      	mov	r0, r7
 8014e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e9c:	4607      	mov	r7, r0
 8014e9e:	4638      	mov	r0, r7
 8014ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014ea4 <uxr_init_output_best_effort_stream>:
 8014ea4:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8014ea8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8014eac:	6001      	str	r1, [r0, #0]
 8014eae:	7303      	strb	r3, [r0, #12]
 8014eb0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014eb4:	4770      	bx	lr
 8014eb6:	bf00      	nop

08014eb8 <uxr_reset_output_best_effort_stream>:
 8014eb8:	7b02      	ldrb	r2, [r0, #12]
 8014eba:	6042      	str	r2, [r0, #4]
 8014ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ec0:	81c3      	strh	r3, [r0, #14]
 8014ec2:	4770      	bx	lr

08014ec4 <uxr_prepare_best_effort_buffer_to_write>:
 8014ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ec6:	4604      	mov	r4, r0
 8014ec8:	b083      	sub	sp, #12
 8014eca:	6840      	ldr	r0, [r0, #4]
 8014ecc:	460d      	mov	r5, r1
 8014ece:	4616      	mov	r6, r2
 8014ed0:	f7fa fa02 	bl	800f2d8 <uxr_submessage_padding>
 8014ed4:	6863      	ldr	r3, [r4, #4]
 8014ed6:	4418      	add	r0, r3
 8014ed8:	68a3      	ldr	r3, [r4, #8]
 8014eda:	1942      	adds	r2, r0, r5
 8014edc:	4293      	cmp	r3, r2
 8014ede:	bf2c      	ite	cs
 8014ee0:	2701      	movcs	r7, #1
 8014ee2:	2700      	movcc	r7, #0
 8014ee4:	d202      	bcs.n	8014eec <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014ee6:	4638      	mov	r0, r7
 8014ee8:	b003      	add	sp, #12
 8014eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014eec:	9000      	str	r0, [sp, #0]
 8014eee:	6821      	ldr	r1, [r4, #0]
 8014ef0:	4630      	mov	r0, r6
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	f7f8 fce4 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 8014ef8:	6861      	ldr	r1, [r4, #4]
 8014efa:	4638      	mov	r0, r7
 8014efc:	4429      	add	r1, r5
 8014efe:	6061      	str	r1, [r4, #4]
 8014f00:	b003      	add	sp, #12
 8014f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f04 <uxr_prepare_best_effort_buffer_to_send>:
 8014f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f08:	4604      	mov	r4, r0
 8014f0a:	461d      	mov	r5, r3
 8014f0c:	6840      	ldr	r0, [r0, #4]
 8014f0e:	7b23      	ldrb	r3, [r4, #12]
 8014f10:	4298      	cmp	r0, r3
 8014f12:	bf8c      	ite	hi
 8014f14:	2601      	movhi	r6, #1
 8014f16:	2600      	movls	r6, #0
 8014f18:	d802      	bhi.n	8014f20 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014f1a:	4630      	mov	r0, r6
 8014f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f20:	4688      	mov	r8, r1
 8014f22:	89e0      	ldrh	r0, [r4, #14]
 8014f24:	2101      	movs	r1, #1
 8014f26:	4617      	mov	r7, r2
 8014f28:	f000 fb0c 	bl	8015544 <uxr_seq_num_add>
 8014f2c:	6823      	ldr	r3, [r4, #0]
 8014f2e:	81e0      	strh	r0, [r4, #14]
 8014f30:	8028      	strh	r0, [r5, #0]
 8014f32:	f8c8 3000 	str.w	r3, [r8]
 8014f36:	6863      	ldr	r3, [r4, #4]
 8014f38:	603b      	str	r3, [r7, #0]
 8014f3a:	7b23      	ldrb	r3, [r4, #12]
 8014f3c:	6063      	str	r3, [r4, #4]
 8014f3e:	4630      	mov	r0, r6
 8014f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f44 <on_full_output_buffer>:
 8014f44:	b538      	push	{r3, r4, r5, lr}
 8014f46:	6802      	ldr	r2, [r0, #0]
 8014f48:	460c      	mov	r4, r1
 8014f4a:	6809      	ldr	r1, [r1, #0]
 8014f4c:	8923      	ldrh	r3, [r4, #8]
 8014f4e:	eba2 0c01 	sub.w	ip, r2, r1
 8014f52:	6862      	ldr	r2, [r4, #4]
 8014f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8014f58:	fbbc fcf2 	udiv	ip, ip, r2
 8014f5c:	f10c 0c01 	add.w	ip, ip, #1
 8014f60:	fa1f fc8c 	uxth.w	ip, ip
 8014f64:	fbbc fef3 	udiv	lr, ip, r3
 8014f68:	fb03 c31e 	mls	r3, r3, lr, ip
 8014f6c:	b29b      	uxth	r3, r3
 8014f6e:	fb02 f303 	mul.w	r3, r2, r3
 8014f72:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8014f76:	58ca      	ldr	r2, [r1, r3]
 8014f78:	4463      	add	r3, ip
 8014f7a:	eba2 020c 	sub.w	r2, r2, ip
 8014f7e:	3308      	adds	r3, #8
 8014f80:	4605      	mov	r5, r0
 8014f82:	4419      	add	r1, r3
 8014f84:	3a04      	subs	r2, #4
 8014f86:	6903      	ldr	r3, [r0, #16]
 8014f88:	f7f8 fca4 	bl	800d8d4 <ucdr_init_buffer_origin>
 8014f8c:	4628      	mov	r0, r5
 8014f8e:	4903      	ldr	r1, [pc, #12]	; (8014f9c <on_full_output_buffer+0x58>)
 8014f90:	4622      	mov	r2, r4
 8014f92:	f7f8 fc7b 	bl	800d88c <ucdr_set_on_full_buffer_callback>
 8014f96:	2000      	movs	r0, #0
 8014f98:	bd38      	pop	{r3, r4, r5, pc}
 8014f9a:	bf00      	nop
 8014f9c:	08014f45 	.word	0x08014f45

08014fa0 <uxr_init_output_reliable_stream>:
 8014fa0:	b410      	push	{r4}
 8014fa2:	f89d c004 	ldrb.w	ip, [sp, #4]
 8014fa6:	8103      	strh	r3, [r0, #8]
 8014fa8:	e9c0 1200 	strd	r1, r2, [r0]
 8014fac:	f880 c00c 	strb.w	ip, [r0, #12]
 8014fb0:	b1d3      	cbz	r3, 8014fe8 <uxr_init_output_reliable_stream+0x48>
 8014fb2:	f8c1 c000 	str.w	ip, [r1]
 8014fb6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014fba:	f1bc 0f01 	cmp.w	ip, #1
 8014fbe:	d913      	bls.n	8014fe8 <uxr_init_output_reliable_stream+0x48>
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	fbb3 f1fc 	udiv	r1, r3, ip
 8014fc6:	fb0c 3111 	mls	r1, ip, r1, r3
 8014fca:	b289      	uxth	r1, r1
 8014fcc:	6842      	ldr	r2, [r0, #4]
 8014fce:	6804      	ldr	r4, [r0, #0]
 8014fd0:	fbb2 f2fc 	udiv	r2, r2, ip
 8014fd4:	fb01 f202 	mul.w	r2, r1, r2
 8014fd8:	7b01      	ldrb	r1, [r0, #12]
 8014fda:	50a1      	str	r1, [r4, r2]
 8014fdc:	3301      	adds	r3, #1
 8014fde:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014fe2:	b29b      	uxth	r3, r3
 8014fe4:	459c      	cmp	ip, r3
 8014fe6:	d8ec      	bhi.n	8014fc2 <uxr_init_output_reliable_stream+0x22>
 8014fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014fec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014ff0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014ff4:	4905      	ldr	r1, [pc, #20]	; (801500c <uxr_init_output_reliable_stream+0x6c>)
 8014ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ffa:	f8c0 100e 	str.w	r1, [r0, #14]
 8014ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015002:	2300      	movs	r3, #0
 8015004:	8242      	strh	r2, [r0, #18]
 8015006:	8403      	strh	r3, [r0, #32]
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	ffff0000 	.word	0xffff0000

08015010 <uxr_reset_output_reliable_stream>:
 8015010:	8901      	ldrh	r1, [r0, #8]
 8015012:	b1b1      	cbz	r1, 8015042 <uxr_reset_output_reliable_stream+0x32>
 8015014:	f04f 0c00 	mov.w	ip, #0
 8015018:	4663      	mov	r3, ip
 801501a:	fbb3 f2f1 	udiv	r2, r3, r1
 801501e:	fb01 3312 	mls	r3, r1, r2, r3
 8015022:	b29b      	uxth	r3, r3
 8015024:	6842      	ldr	r2, [r0, #4]
 8015026:	fbb2 f2f1 	udiv	r2, r2, r1
 801502a:	6801      	ldr	r1, [r0, #0]
 801502c:	fb02 f303 	mul.w	r3, r2, r3
 8015030:	7b02      	ldrb	r2, [r0, #12]
 8015032:	50ca      	str	r2, [r1, r3]
 8015034:	f10c 0c01 	add.w	ip, ip, #1
 8015038:	8901      	ldrh	r1, [r0, #8]
 801503a:	fa1f f38c 	uxth.w	r3, ip
 801503e:	4299      	cmp	r1, r3
 8015040:	d8eb      	bhi.n	801501a <uxr_reset_output_reliable_stream+0xa>
 8015042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015046:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801504a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801504e:	4904      	ldr	r1, [pc, #16]	; (8015060 <uxr_reset_output_reliable_stream+0x50>)
 8015050:	f8c0 100e 	str.w	r1, [r0, #14]
 8015054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015058:	2300      	movs	r3, #0
 801505a:	8242      	strh	r2, [r0, #18]
 801505c:	8403      	strh	r3, [r0, #32]
 801505e:	4770      	bx	lr
 8015060:	ffff0000 	.word	0xffff0000

08015064 <uxr_prepare_reliable_buffer_to_write>:
 8015064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015068:	4604      	mov	r4, r0
 801506a:	b091      	sub	sp, #68	; 0x44
 801506c:	8900      	ldrh	r0, [r0, #8]
 801506e:	89e6      	ldrh	r6, [r4, #14]
 8015070:	6823      	ldr	r3, [r4, #0]
 8015072:	9204      	str	r2, [sp, #16]
 8015074:	fbb6 f2f0 	udiv	r2, r6, r0
 8015078:	fb00 6212 	mls	r2, r0, r2, r6
 801507c:	b292      	uxth	r2, r2
 801507e:	6865      	ldr	r5, [r4, #4]
 8015080:	fbb5 f5f0 	udiv	r5, r5, r0
 8015084:	fb05 3202 	mla	r2, r5, r2, r3
 8015088:	3204      	adds	r2, #4
 801508a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801508e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015092:	9203      	str	r2, [sp, #12]
 8015094:	468b      	mov	fp, r1
 8015096:	1f2f      	subs	r7, r5, #4
 8015098:	2800      	cmp	r0, #0
 801509a:	f000 814c 	beq.w	8015336 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801509e:	f04f 0c00 	mov.w	ip, #0
 80150a2:	46e2      	mov	sl, ip
 80150a4:	4661      	mov	r1, ip
 80150a6:	fbb1 f2f0 	udiv	r2, r1, r0
 80150aa:	fb00 1212 	mls	r2, r0, r2, r1
 80150ae:	b292      	uxth	r2, r2
 80150b0:	fb05 f202 	mul.w	r2, r5, r2
 80150b4:	f10c 0c01 	add.w	ip, ip, #1
 80150b8:	589a      	ldr	r2, [r3, r2]
 80150ba:	454a      	cmp	r2, r9
 80150bc:	bf08      	it	eq
 80150be:	f10a 0a01 	addeq.w	sl, sl, #1
 80150c2:	fa1f f18c 	uxth.w	r1, ip
 80150c6:	bf08      	it	eq
 80150c8:	fa1f fa8a 	uxtheq.w	sl, sl
 80150cc:	4281      	cmp	r1, r0
 80150ce:	d3ea      	bcc.n	80150a6 <uxr_prepare_reliable_buffer_to_write+0x42>
 80150d0:	4640      	mov	r0, r8
 80150d2:	2104      	movs	r1, #4
 80150d4:	f8cd a014 	str.w	sl, [sp, #20]
 80150d8:	f7f8 fc08 	bl	800d8ec <ucdr_alignment>
 80150dc:	4480      	add	r8, r0
 80150de:	eb08 020b 	add.w	r2, r8, fp
 80150e2:	42ba      	cmp	r2, r7
 80150e4:	f240 80cd 	bls.w	8015282 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80150e8:	7b22      	ldrb	r2, [r4, #12]
 80150ea:	445a      	add	r2, fp
 80150ec:	42ba      	cmp	r2, r7
 80150ee:	f240 80b5 	bls.w	801525c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80150f2:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 80150f6:	33fc      	adds	r3, #252	; 0xfc
 80150f8:	b2ba      	uxth	r2, r7
 80150fa:	4413      	add	r3, r2
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	fb0a f903 	mul.w	r9, sl, r3
 8015102:	45d9      	cmp	r9, fp
 8015104:	9305      	str	r3, [sp, #20]
 8015106:	9306      	str	r3, [sp, #24]
 8015108:	f0c0 80b7 	bcc.w	801527a <uxr_prepare_reliable_buffer_to_write+0x216>
 801510c:	f108 0304 	add.w	r3, r8, #4
 8015110:	42bb      	cmp	r3, r7
 8015112:	f080 80db 	bcs.w	80152cc <uxr_prepare_reliable_buffer_to_write+0x268>
 8015116:	f1a2 0904 	sub.w	r9, r2, #4
 801511a:	eba9 0908 	sub.w	r9, r9, r8
 801511e:	9b05      	ldr	r3, [sp, #20]
 8015120:	fa1f f989 	uxth.w	r9, r9
 8015124:	ebab 0b09 	sub.w	fp, fp, r9
 8015128:	fbbb f2f3 	udiv	r2, fp, r3
 801512c:	fb03 b312 	mls	r3, r3, r2, fp
 8015130:	2b00      	cmp	r3, #0
 8015132:	f000 80c8 	beq.w	80152c6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8015136:	3201      	adds	r2, #1
 8015138:	b292      	uxth	r2, r2
 801513a:	9306      	str	r3, [sp, #24]
 801513c:	4552      	cmp	r2, sl
 801513e:	f200 809c 	bhi.w	801527a <uxr_prepare_reliable_buffer_to_write+0x216>
 8015142:	f10d 0b20 	add.w	fp, sp, #32
 8015146:	2a00      	cmp	r2, #0
 8015148:	d042      	beq.n	80151d0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801514a:	f8cd 801c 	str.w	r8, [sp, #28]
 801514e:	f04f 0a00 	mov.w	sl, #0
 8015152:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015156:	9505      	str	r5, [sp, #20]
 8015158:	f10d 0b20 	add.w	fp, sp, #32
 801515c:	4615      	mov	r5, r2
 801515e:	e000      	b.n	8015162 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8015160:	46c1      	mov	r9, r8
 8015162:	8920      	ldrh	r0, [r4, #8]
 8015164:	fbb6 f2f0 	udiv	r2, r6, r0
 8015168:	fb00 6112 	mls	r1, r0, r2, r6
 801516c:	b28a      	uxth	r2, r1
 801516e:	6863      	ldr	r3, [r4, #4]
 8015170:	fbb3 f1f0 	udiv	r1, r3, r0
 8015174:	6823      	ldr	r3, [r4, #0]
 8015176:	fb02 f101 	mul.w	r1, r2, r1
 801517a:	3104      	adds	r1, #4
 801517c:	4419      	add	r1, r3
 801517e:	4658      	mov	r0, fp
 8015180:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015184:	9200      	str	r2, [sp, #0]
 8015186:	2300      	movs	r3, #0
 8015188:	463a      	mov	r2, r7
 801518a:	f7f8 fb99 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 801518e:	464a      	mov	r2, r9
 8015190:	2300      	movs	r3, #0
 8015192:	210d      	movs	r1, #13
 8015194:	4658      	mov	r0, fp
 8015196:	f7fa f85f 	bl	800f258 <uxr_buffer_submessage_header>
 801519a:	8921      	ldrh	r1, [r4, #8]
 801519c:	fbb6 f2f1 	udiv	r2, r6, r1
 80151a0:	fb01 6212 	mls	r2, r1, r2, r6
 80151a4:	b292      	uxth	r2, r2
 80151a6:	6863      	ldr	r3, [r4, #4]
 80151a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80151ac:	fb02 f303 	mul.w	r3, r2, r3
 80151b0:	6822      	ldr	r2, [r4, #0]
 80151b2:	4630      	mov	r0, r6
 80151b4:	50d7      	str	r7, [r2, r3]
 80151b6:	2101      	movs	r1, #1
 80151b8:	f000 f9c4 	bl	8015544 <uxr_seq_num_add>
 80151bc:	f10a 0a01 	add.w	sl, sl, #1
 80151c0:	fa1f f38a 	uxth.w	r3, sl
 80151c4:	429d      	cmp	r5, r3
 80151c6:	4606      	mov	r6, r0
 80151c8:	d8ca      	bhi.n	8015160 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80151ca:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80151ce:	9d05      	ldr	r5, [sp, #20]
 80151d0:	8920      	ldrh	r0, [r4, #8]
 80151d2:	fbb6 f3f0 	udiv	r3, r6, r0
 80151d6:	fb00 6313 	mls	r3, r0, r3, r6
 80151da:	b299      	uxth	r1, r3
 80151dc:	6863      	ldr	r3, [r4, #4]
 80151de:	fbb3 f3f0 	udiv	r3, r3, r0
 80151e2:	fb01 f303 	mul.w	r3, r1, r3
 80151e6:	6821      	ldr	r1, [r4, #0]
 80151e8:	3304      	adds	r3, #4
 80151ea:	4419      	add	r1, r3
 80151ec:	463a      	mov	r2, r7
 80151ee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80151f2:	9000      	str	r0, [sp, #0]
 80151f4:	2300      	movs	r3, #0
 80151f6:	4658      	mov	r0, fp
 80151f8:	f7f8 fb62 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 80151fc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8015200:	4658      	mov	r0, fp
 8015202:	fa1f f289 	uxth.w	r2, r9
 8015206:	2302      	movs	r3, #2
 8015208:	210d      	movs	r1, #13
 801520a:	f7fa f825 	bl	800f258 <uxr_buffer_submessage_header>
 801520e:	9b03      	ldr	r3, [sp, #12]
 8015210:	8927      	ldrh	r7, [r4, #8]
 8015212:	7b20      	ldrb	r0, [r4, #12]
 8015214:	f108 0104 	add.w	r1, r8, #4
 8015218:	440b      	add	r3, r1
 801521a:	4619      	mov	r1, r3
 801521c:	fbb6 f3f7 	udiv	r3, r6, r7
 8015220:	fb07 6313 	mls	r3, r7, r3, r6
 8015224:	f1a5 0208 	sub.w	r2, r5, #8
 8015228:	b29d      	uxth	r5, r3
 801522a:	3004      	adds	r0, #4
 801522c:	6863      	ldr	r3, [r4, #4]
 801522e:	fbb3 f3f7 	udiv	r3, r3, r7
 8015232:	fb05 f303 	mul.w	r3, r5, r3
 8015236:	6825      	ldr	r5, [r4, #0]
 8015238:	4448      	add	r0, r9
 801523a:	50e8      	str	r0, [r5, r3]
 801523c:	9d04      	ldr	r5, [sp, #16]
 801523e:	eba2 0208 	sub.w	r2, r2, r8
 8015242:	4628      	mov	r0, r5
 8015244:	f7f8 fb4e 	bl	800d8e4 <ucdr_init_buffer>
 8015248:	4628      	mov	r0, r5
 801524a:	493c      	ldr	r1, [pc, #240]	; (801533c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801524c:	4622      	mov	r2, r4
 801524e:	f7f8 fb1d 	bl	800d88c <ucdr_set_on_full_buffer_callback>
 8015252:	2001      	movs	r0, #1
 8015254:	81e6      	strh	r6, [r4, #14]
 8015256:	b011      	add	sp, #68	; 0x44
 8015258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801525c:	2101      	movs	r1, #1
 801525e:	89e0      	ldrh	r0, [r4, #14]
 8015260:	f000 f970 	bl	8015544 <uxr_seq_num_add>
 8015264:	8921      	ldrh	r1, [r4, #8]
 8015266:	4605      	mov	r5, r0
 8015268:	8a60      	ldrh	r0, [r4, #18]
 801526a:	f000 f96b 	bl	8015544 <uxr_seq_num_add>
 801526e:	4601      	mov	r1, r0
 8015270:	4628      	mov	r0, r5
 8015272:	f000 f96f 	bl	8015554 <uxr_seq_num_cmp>
 8015276:	2800      	cmp	r0, #0
 8015278:	dd42      	ble.n	8015300 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801527a:	2000      	movs	r0, #0
 801527c:	b011      	add	sp, #68	; 0x44
 801527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015282:	8921      	ldrh	r1, [r4, #8]
 8015284:	8a60      	ldrh	r0, [r4, #18]
 8015286:	9205      	str	r2, [sp, #20]
 8015288:	f000 f95c 	bl	8015544 <uxr_seq_num_add>
 801528c:	4601      	mov	r1, r0
 801528e:	4630      	mov	r0, r6
 8015290:	f000 f960 	bl	8015554 <uxr_seq_num_cmp>
 8015294:	2800      	cmp	r0, #0
 8015296:	9a05      	ldr	r2, [sp, #20]
 8015298:	dcef      	bgt.n	801527a <uxr_prepare_reliable_buffer_to_write+0x216>
 801529a:	8927      	ldrh	r7, [r4, #8]
 801529c:	fbb6 f3f7 	udiv	r3, r6, r7
 80152a0:	fb07 6313 	mls	r3, r7, r3, r6
 80152a4:	b29d      	uxth	r5, r3
 80152a6:	6863      	ldr	r3, [r4, #4]
 80152a8:	6824      	ldr	r4, [r4, #0]
 80152aa:	fbb3 f3f7 	udiv	r3, r3, r7
 80152ae:	fb05 f303 	mul.w	r3, r5, r3
 80152b2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80152b6:	50e2      	str	r2, [r4, r3]
 80152b8:	2300      	movs	r3, #0
 80152ba:	f8cd 8000 	str.w	r8, [sp]
 80152be:	f7f8 faff 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 80152c2:	2001      	movs	r0, #1
 80152c4:	e7da      	b.n	801527c <uxr_prepare_reliable_buffer_to_write+0x218>
 80152c6:	b293      	uxth	r3, r2
 80152c8:	461a      	mov	r2, r3
 80152ca:	e737      	b.n	801513c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80152cc:	4630      	mov	r0, r6
 80152ce:	2101      	movs	r1, #1
 80152d0:	9207      	str	r2, [sp, #28]
 80152d2:	f000 f937 	bl	8015544 <uxr_seq_num_add>
 80152d6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80152da:	fbb0 f1fc 	udiv	r1, r0, ip
 80152de:	fb0c 0111 	mls	r1, ip, r1, r0
 80152e2:	4606      	mov	r6, r0
 80152e4:	b288      	uxth	r0, r1
 80152e6:	6863      	ldr	r3, [r4, #4]
 80152e8:	fbb3 f1fc 	udiv	r1, r3, ip
 80152ec:	6823      	ldr	r3, [r4, #0]
 80152ee:	9a07      	ldr	r2, [sp, #28]
 80152f0:	fb00 f101 	mul.w	r1, r0, r1
 80152f4:	3104      	adds	r1, #4
 80152f6:	440b      	add	r3, r1
 80152f8:	9303      	str	r3, [sp, #12]
 80152fa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80152fe:	e70a      	b.n	8015116 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8015300:	8921      	ldrh	r1, [r4, #8]
 8015302:	fbb5 f3f1 	udiv	r3, r5, r1
 8015306:	fb01 5313 	mls	r3, r1, r3, r5
 801530a:	b29a      	uxth	r2, r3
 801530c:	6863      	ldr	r3, [r4, #4]
 801530e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015312:	6821      	ldr	r1, [r4, #0]
 8015314:	9804      	ldr	r0, [sp, #16]
 8015316:	fb02 f303 	mul.w	r3, r2, r3
 801531a:	3304      	adds	r3, #4
 801531c:	7b22      	ldrb	r2, [r4, #12]
 801531e:	4419      	add	r1, r3
 8015320:	445a      	add	r2, fp
 8015322:	f841 2c04 	str.w	r2, [r1, #-4]
 8015326:	7b23      	ldrb	r3, [r4, #12]
 8015328:	9300      	str	r3, [sp, #0]
 801532a:	2300      	movs	r3, #0
 801532c:	f7f8 fac8 	bl	800d8c0 <ucdr_init_buffer_origin_offset>
 8015330:	81e5      	strh	r5, [r4, #14]
 8015332:	2001      	movs	r0, #1
 8015334:	e7a2      	b.n	801527c <uxr_prepare_reliable_buffer_to_write+0x218>
 8015336:	4682      	mov	sl, r0
 8015338:	e6ca      	b.n	80150d0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801533a:	bf00      	nop
 801533c:	08014f45 	.word	0x08014f45

08015340 <uxr_prepare_next_reliable_buffer_to_send>:
 8015340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015342:	4604      	mov	r4, r0
 8015344:	460f      	mov	r7, r1
 8015346:	8a00      	ldrh	r0, [r0, #16]
 8015348:	2101      	movs	r1, #1
 801534a:	4616      	mov	r6, r2
 801534c:	461d      	mov	r5, r3
 801534e:	f000 f8f9 	bl	8015544 <uxr_seq_num_add>
 8015352:	8028      	strh	r0, [r5, #0]
 8015354:	8922      	ldrh	r2, [r4, #8]
 8015356:	fbb0 f3f2 	udiv	r3, r0, r2
 801535a:	fb02 0c13 	mls	ip, r2, r3, r0
 801535e:	fa1f fc8c 	uxth.w	ip, ip
 8015362:	6863      	ldr	r3, [r4, #4]
 8015364:	fbb3 f3f2 	udiv	r3, r3, r2
 8015368:	fb0c fc03 	mul.w	ip, ip, r3
 801536c:	6823      	ldr	r3, [r4, #0]
 801536e:	89e1      	ldrh	r1, [r4, #14]
 8015370:	f10c 0c04 	add.w	ip, ip, #4
 8015374:	4463      	add	r3, ip
 8015376:	603b      	str	r3, [r7, #0]
 8015378:	6823      	ldr	r3, [r4, #0]
 801537a:	449c      	add	ip, r3
 801537c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015380:	6033      	str	r3, [r6, #0]
 8015382:	f000 f8e7 	bl	8015554 <uxr_seq_num_cmp>
 8015386:	2800      	cmp	r0, #0
 8015388:	dd01      	ble.n	801538e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801538a:	2000      	movs	r0, #0
 801538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801538e:	7b23      	ldrb	r3, [r4, #12]
 8015390:	6832      	ldr	r2, [r6, #0]
 8015392:	429a      	cmp	r2, r3
 8015394:	d9f9      	bls.n	801538a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015396:	8a61      	ldrh	r1, [r4, #18]
 8015398:	8a20      	ldrh	r0, [r4, #16]
 801539a:	f000 f8d7 	bl	801554c <uxr_seq_num_sub>
 801539e:	8923      	ldrh	r3, [r4, #8]
 80153a0:	4283      	cmp	r3, r0
 80153a2:	d0f2      	beq.n	801538a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80153a4:	8828      	ldrh	r0, [r5, #0]
 80153a6:	89e3      	ldrh	r3, [r4, #14]
 80153a8:	8220      	strh	r0, [r4, #16]
 80153aa:	4298      	cmp	r0, r3
 80153ac:	d001      	beq.n	80153b2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80153ae:	2001      	movs	r0, #1
 80153b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153b2:	2101      	movs	r1, #1
 80153b4:	f000 f8c6 	bl	8015544 <uxr_seq_num_add>
 80153b8:	81e0      	strh	r0, [r4, #14]
 80153ba:	2001      	movs	r0, #1
 80153bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153be:	bf00      	nop

080153c0 <uxr_update_output_stream_heartbeat_timestamp>:
 80153c0:	b570      	push	{r4, r5, r6, lr}
 80153c2:	8a01      	ldrh	r1, [r0, #16]
 80153c4:	4604      	mov	r4, r0
 80153c6:	8a40      	ldrh	r0, [r0, #18]
 80153c8:	4615      	mov	r5, r2
 80153ca:	461e      	mov	r6, r3
 80153cc:	f000 f8c2 	bl	8015554 <uxr_seq_num_cmp>
 80153d0:	2800      	cmp	r0, #0
 80153d2:	db07      	blt.n	80153e4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80153d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80153d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80153dc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80153e0:	2000      	movs	r0, #0
 80153e2:	bd70      	pop	{r4, r5, r6, pc}
 80153e4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80153e8:	b940      	cbnz	r0, 80153fc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80153ea:	2301      	movs	r3, #1
 80153ec:	f884 3020 	strb.w	r3, [r4, #32]
 80153f0:	3564      	adds	r5, #100	; 0x64
 80153f2:	f146 0600 	adc.w	r6, r6, #0
 80153f6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80153fa:	bd70      	pop	{r4, r5, r6, pc}
 80153fc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015400:	4295      	cmp	r5, r2
 8015402:	eb76 0303 	sbcs.w	r3, r6, r3
 8015406:	bfa5      	ittet	ge
 8015408:	3001      	addge	r0, #1
 801540a:	f884 0020 	strbge.w	r0, [r4, #32]
 801540e:	2000      	movlt	r0, #0
 8015410:	2001      	movge	r0, #1
 8015412:	e7ed      	b.n	80153f0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015414 <uxr_begin_output_nack_buffer_it>:
 8015414:	8a40      	ldrh	r0, [r0, #18]
 8015416:	4770      	bx	lr

08015418 <uxr_next_reliable_nack_buffer_to_send>:
 8015418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801541c:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8015420:	b082      	sub	sp, #8
 8015422:	f1b8 0f00 	cmp.w	r8, #0
 8015426:	d011      	beq.n	801544c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015428:	4604      	mov	r4, r0
 801542a:	8818      	ldrh	r0, [r3, #0]
 801542c:	460e      	mov	r6, r1
 801542e:	4617      	mov	r7, r2
 8015430:	461d      	mov	r5, r3
 8015432:	2101      	movs	r1, #1
 8015434:	f000 f886 	bl	8015544 <uxr_seq_num_add>
 8015438:	8028      	strh	r0, [r5, #0]
 801543a:	8a21      	ldrh	r1, [r4, #16]
 801543c:	f000 f88a 	bl	8015554 <uxr_seq_num_cmp>
 8015440:	2800      	cmp	r0, #0
 8015442:	dd07      	ble.n	8015454 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015444:	f04f 0800 	mov.w	r8, #0
 8015448:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 801544c:	4640      	mov	r0, r8
 801544e:	b002      	add	sp, #8
 8015450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015454:	8921      	ldrh	r1, [r4, #8]
 8015456:	8828      	ldrh	r0, [r5, #0]
 8015458:	6823      	ldr	r3, [r4, #0]
 801545a:	fbb0 f2f1 	udiv	r2, r0, r1
 801545e:	fb01 0c12 	mls	ip, r1, r2, r0
 8015462:	fa1f f28c 	uxth.w	r2, ip
 8015466:	9301      	str	r3, [sp, #4]
 8015468:	6863      	ldr	r3, [r4, #4]
 801546a:	fbb3 fcf1 	udiv	ip, r3, r1
 801546e:	9b01      	ldr	r3, [sp, #4]
 8015470:	fb02 fc0c 	mul.w	ip, r2, ip
 8015474:	f10c 0c04 	add.w	ip, ip, #4
 8015478:	4463      	add	r3, ip
 801547a:	6033      	str	r3, [r6, #0]
 801547c:	6823      	ldr	r3, [r4, #0]
 801547e:	4463      	add	r3, ip
 8015480:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015484:	603b      	str	r3, [r7, #0]
 8015486:	7b22      	ldrb	r2, [r4, #12]
 8015488:	429a      	cmp	r2, r3
 801548a:	d0d2      	beq.n	8015432 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801548c:	4640      	mov	r0, r8
 801548e:	b002      	add	sp, #8
 8015490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015494 <uxr_process_acknack>:
 8015494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015496:	4604      	mov	r4, r0
 8015498:	460e      	mov	r6, r1
 801549a:	4610      	mov	r0, r2
 801549c:	2101      	movs	r1, #1
 801549e:	f000 f855 	bl	801554c <uxr_seq_num_sub>
 80154a2:	8a61      	ldrh	r1, [r4, #18]
 80154a4:	f000 f852 	bl	801554c <uxr_seq_num_sub>
 80154a8:	b1c0      	cbz	r0, 80154dc <uxr_process_acknack+0x48>
 80154aa:	4605      	mov	r5, r0
 80154ac:	2700      	movs	r7, #0
 80154ae:	2101      	movs	r1, #1
 80154b0:	8a60      	ldrh	r0, [r4, #18]
 80154b2:	f000 f847 	bl	8015544 <uxr_seq_num_add>
 80154b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80154ba:	fbb0 f1fc 	udiv	r1, r0, ip
 80154be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80154c2:	fb0c 0111 	mls	r1, ip, r1, r0
 80154c6:	b289      	uxth	r1, r1
 80154c8:	3701      	adds	r7, #1
 80154ca:	fbb3 f3fc 	udiv	r3, r3, ip
 80154ce:	fb01 f303 	mul.w	r3, r1, r3
 80154d2:	42bd      	cmp	r5, r7
 80154d4:	7b21      	ldrb	r1, [r4, #12]
 80154d6:	8260      	strh	r0, [r4, #18]
 80154d8:	50d1      	str	r1, [r2, r3]
 80154da:	d1e8      	bne.n	80154ae <uxr_process_acknack+0x1a>
 80154dc:	3e00      	subs	r6, #0
 80154de:	f04f 0300 	mov.w	r3, #0
 80154e2:	bf18      	it	ne
 80154e4:	2601      	movne	r6, #1
 80154e6:	f884 3020 	strb.w	r3, [r4, #32]
 80154ea:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80154ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080154f0 <uxr_is_output_up_to_date>:
 80154f0:	8a01      	ldrh	r1, [r0, #16]
 80154f2:	8a40      	ldrh	r0, [r0, #18]
 80154f4:	b508      	push	{r3, lr}
 80154f6:	f000 f82d 	bl	8015554 <uxr_seq_num_cmp>
 80154fa:	fab0 f080 	clz	r0, r0
 80154fe:	0940      	lsrs	r0, r0, #5
 8015500:	bd08      	pop	{r3, pc}
 8015502:	bf00      	nop

08015504 <get_available_free_slots>:
 8015504:	8902      	ldrh	r2, [r0, #8]
 8015506:	b1da      	cbz	r2, 8015540 <get_available_free_slots+0x3c>
 8015508:	b530      	push	{r4, r5, lr}
 801550a:	2100      	movs	r1, #0
 801550c:	6843      	ldr	r3, [r0, #4]
 801550e:	6805      	ldr	r5, [r0, #0]
 8015510:	7b04      	ldrb	r4, [r0, #12]
 8015512:	fbb3 fef2 	udiv	lr, r3, r2
 8015516:	4608      	mov	r0, r1
 8015518:	460b      	mov	r3, r1
 801551a:	fbb3 fcf2 	udiv	ip, r3, r2
 801551e:	fb02 331c 	mls	r3, r2, ip, r3
 8015522:	b29b      	uxth	r3, r3
 8015524:	fb0e f303 	mul.w	r3, lr, r3
 8015528:	3101      	adds	r1, #1
 801552a:	f855 c003 	ldr.w	ip, [r5, r3]
 801552e:	4564      	cmp	r4, ip
 8015530:	bf08      	it	eq
 8015532:	3001      	addeq	r0, #1
 8015534:	b28b      	uxth	r3, r1
 8015536:	bf08      	it	eq
 8015538:	b280      	uxtheq	r0, r0
 801553a:	4293      	cmp	r3, r2
 801553c:	d3ed      	bcc.n	801551a <get_available_free_slots+0x16>
 801553e:	bd30      	pop	{r4, r5, pc}
 8015540:	4610      	mov	r0, r2
 8015542:	4770      	bx	lr

08015544 <uxr_seq_num_add>:
 8015544:	4408      	add	r0, r1
 8015546:	b280      	uxth	r0, r0
 8015548:	4770      	bx	lr
 801554a:	bf00      	nop

0801554c <uxr_seq_num_sub>:
 801554c:	1a40      	subs	r0, r0, r1
 801554e:	b280      	uxth	r0, r0
 8015550:	4770      	bx	lr
 8015552:	bf00      	nop

08015554 <uxr_seq_num_cmp>:
 8015554:	4288      	cmp	r0, r1
 8015556:	d011      	beq.n	801557c <uxr_seq_num_cmp+0x28>
 8015558:	d309      	bcc.n	801556e <uxr_seq_num_cmp+0x1a>
 801555a:	4288      	cmp	r0, r1
 801555c:	d910      	bls.n	8015580 <uxr_seq_num_cmp+0x2c>
 801555e:	1a40      	subs	r0, r0, r1
 8015560:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8015564:	bfd4      	ite	le
 8015566:	2001      	movle	r0, #1
 8015568:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801556c:	4770      	bx	lr
 801556e:	1a0b      	subs	r3, r1, r0
 8015570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015574:	daf1      	bge.n	801555a <uxr_seq_num_cmp+0x6>
 8015576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801557a:	4770      	bx	lr
 801557c:	2000      	movs	r0, #0
 801557e:	4770      	bx	lr
 8015580:	2001      	movs	r0, #1
 8015582:	4770      	bx	lr

08015584 <uxr_init_framing_io>:
 8015584:	2300      	movs	r3, #0
 8015586:	7041      	strb	r1, [r0, #1]
 8015588:	7003      	strb	r3, [r0, #0]
 801558a:	8583      	strh	r3, [r0, #44]	; 0x2c
 801558c:	4770      	bx	lr
 801558e:	bf00      	nop

08015590 <uxr_write_framed_msg>:
 8015590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015594:	4617      	mov	r7, r2
 8015596:	7842      	ldrb	r2, [r0, #1]
 8015598:	b083      	sub	sp, #12
 801559a:	460e      	mov	r6, r1
 801559c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80155a0:	469a      	mov	sl, r3
 80155a2:	2901      	cmp	r1, #1
 80155a4:	f04f 037e 	mov.w	r3, #126	; 0x7e
 80155a8:	4604      	mov	r4, r0
 80155aa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80155ae:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80155b2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80155b6:	f240 8137 	bls.w	8015828 <uxr_write_framed_msg+0x298>
 80155ba:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80155be:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80155c2:	2901      	cmp	r1, #1
 80155c4:	f04f 0202 	mov.w	r2, #2
 80155c8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80155cc:	f240 808f 	bls.w	80156ee <uxr_write_framed_msg+0x15e>
 80155d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155d2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80155d6:	b2dd      	uxtb	r5, r3
 80155d8:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80155dc:	2203      	movs	r2, #3
 80155de:	2901      	cmp	r1, #1
 80155e0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80155e4:	f240 809a 	bls.w	801571c <uxr_write_framed_msg+0x18c>
 80155e8:	18a1      	adds	r1, r4, r2
 80155ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155ec:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 80155f0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80155f4:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80155f8:	3201      	adds	r2, #1
 80155fa:	2801      	cmp	r0, #1
 80155fc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015600:	f240 80a0 	bls.w	8015744 <uxr_write_framed_msg+0x1b4>
 8015604:	18a0      	adds	r0, r4, r2
 8015606:	3201      	adds	r2, #1
 8015608:	b2d2      	uxtb	r2, r2
 801560a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801560e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015612:	2b00      	cmp	r3, #0
 8015614:	f000 80a9 	beq.w	801576a <uxr_write_framed_msg+0x1da>
 8015618:	f04f 0900 	mov.w	r9, #0
 801561c:	46c8      	mov	r8, r9
 801561e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8015622:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8015626:	2901      	cmp	r1, #1
 8015628:	f240 80c3 	bls.w	80157b2 <uxr_write_framed_msg+0x222>
 801562c:	2a29      	cmp	r2, #41	; 0x29
 801562e:	f200 809f 	bhi.w	8015770 <uxr_write_framed_msg+0x1e0>
 8015632:	18a1      	adds	r1, r4, r2
 8015634:	3201      	adds	r2, #1
 8015636:	b2d2      	uxtb	r2, r2
 8015638:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 801563c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015640:	ea89 0303 	eor.w	r3, r9, r3
 8015644:	498c      	ldr	r1, [pc, #560]	; (8015878 <uxr_write_framed_msg+0x2e8>)
 8015646:	b2db      	uxtb	r3, r3
 8015648:	f108 0801 	add.w	r8, r8, #1
 801564c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015650:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8015654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015656:	4543      	cmp	r3, r8
 8015658:	d8e1      	bhi.n	801561e <uxr_write_framed_msg+0x8e>
 801565a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801565e:	fa5f f889 	uxtb.w	r8, r9
 8015662:	9301      	str	r3, [sp, #4]
 8015664:	f04f 0900 	mov.w	r9, #0
 8015668:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 801566c:	fa5f f18a 	uxtb.w	r1, sl
 8015670:	2901      	cmp	r1, #1
 8015672:	d921      	bls.n	80156b8 <uxr_write_framed_msg+0x128>
 8015674:	2a29      	cmp	r2, #41	; 0x29
 8015676:	f240 80af 	bls.w	80157d8 <uxr_write_framed_msg+0x248>
 801567a:	2500      	movs	r5, #0
 801567c:	e000      	b.n	8015680 <uxr_write_framed_msg+0xf0>
 801567e:	b160      	cbz	r0, 801569a <uxr_write_framed_msg+0x10a>
 8015680:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015684:	1b52      	subs	r2, r2, r5
 8015686:	465b      	mov	r3, fp
 8015688:	4421      	add	r1, r4
 801568a:	4638      	mov	r0, r7
 801568c:	47b0      	blx	r6
 801568e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015692:	4405      	add	r5, r0
 8015694:	4295      	cmp	r5, r2
 8015696:	d3f2      	bcc.n	801567e <uxr_write_framed_msg+0xee>
 8015698:	d003      	beq.n	80156a2 <uxr_write_framed_msg+0x112>
 801569a:	2000      	movs	r0, #0
 801569c:	b003      	add	sp, #12
 801569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a2:	fa5f f18a 	uxtb.w	r1, sl
 80156a6:	f04f 0300 	mov.w	r3, #0
 80156aa:	2901      	cmp	r1, #1
 80156ac:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80156b0:	f04f 0200 	mov.w	r2, #0
 80156b4:	f200 8090 	bhi.w	80157d8 <uxr_write_framed_msg+0x248>
 80156b8:	1c51      	adds	r1, r2, #1
 80156ba:	b2c9      	uxtb	r1, r1
 80156bc:	2929      	cmp	r1, #41	; 0x29
 80156be:	d8dc      	bhi.n	801567a <uxr_write_framed_msg+0xea>
 80156c0:	18a5      	adds	r5, r4, r2
 80156c2:	4421      	add	r1, r4
 80156c4:	3202      	adds	r2, #2
 80156c6:	f088 0820 	eor.w	r8, r8, #32
 80156ca:	4648      	mov	r0, r9
 80156cc:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80156d0:	b2d2      	uxtb	r2, r2
 80156d2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 80156d6:	f04f 0901 	mov.w	r9, #1
 80156da:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80156de:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80156e2:	2800      	cmp	r0, #0
 80156e4:	f040 8085 	bne.w	80157f2 <uxr_write_framed_msg+0x262>
 80156e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80156ec:	e7bc      	b.n	8015668 <uxr_write_framed_msg+0xd8>
 80156ee:	4611      	mov	r1, r2
 80156f0:	f04f 0c03 	mov.w	ip, #3
 80156f4:	2204      	movs	r2, #4
 80156f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156f8:	4421      	add	r1, r4
 80156fa:	b2dd      	uxtb	r5, r3
 80156fc:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8015700:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8015704:	44a4      	add	ip, r4
 8015706:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 801570a:	f080 0020 	eor.w	r0, r0, #32
 801570e:	2901      	cmp	r1, #1
 8015710:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8015714:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015718:	f63f af66 	bhi.w	80155e8 <uxr_write_framed_msg+0x58>
 801571c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801571e:	18a0      	adds	r0, r4, r2
 8015720:	f085 0520 	eor.w	r5, r5, #32
 8015724:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015728:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801572c:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8015730:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8015734:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8015738:	3202      	adds	r2, #2
 801573a:	2801      	cmp	r0, #1
 801573c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015740:	f63f af60 	bhi.w	8015604 <uxr_write_framed_msg+0x74>
 8015744:	1c50      	adds	r0, r2, #1
 8015746:	18a5      	adds	r5, r4, r2
 8015748:	fa54 f080 	uxtab	r0, r4, r0
 801574c:	3202      	adds	r2, #2
 801574e:	f081 0120 	eor.w	r1, r1, #32
 8015752:	b2d2      	uxtb	r2, r2
 8015754:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015758:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 801575c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015760:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015764:	2b00      	cmp	r3, #0
 8015766:	f47f af57 	bne.w	8015618 <uxr_write_framed_msg+0x88>
 801576a:	9301      	str	r3, [sp, #4]
 801576c:	4698      	mov	r8, r3
 801576e:	e779      	b.n	8015664 <uxr_write_framed_msg+0xd4>
 8015770:	2500      	movs	r5, #0
 8015772:	e001      	b.n	8015778 <uxr_write_framed_msg+0x1e8>
 8015774:	2800      	cmp	r0, #0
 8015776:	d090      	beq.n	801569a <uxr_write_framed_msg+0x10a>
 8015778:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801577c:	1b52      	subs	r2, r2, r5
 801577e:	465b      	mov	r3, fp
 8015780:	4421      	add	r1, r4
 8015782:	4638      	mov	r0, r7
 8015784:	47b0      	blx	r6
 8015786:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801578a:	4405      	add	r5, r0
 801578c:	4295      	cmp	r5, r2
 801578e:	d3f1      	bcc.n	8015774 <uxr_write_framed_msg+0x1e4>
 8015790:	d183      	bne.n	801569a <uxr_write_framed_msg+0x10a>
 8015792:	f04f 0300 	mov.w	r3, #0
 8015796:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801579a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801579c:	4543      	cmp	r3, r8
 801579e:	d964      	bls.n	801586a <uxr_write_framed_msg+0x2da>
 80157a0:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80157a4:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80157a8:	2901      	cmp	r1, #1
 80157aa:	f04f 0200 	mov.w	r2, #0
 80157ae:	f63f af3d 	bhi.w	801562c <uxr_write_framed_msg+0x9c>
 80157b2:	1c51      	adds	r1, r2, #1
 80157b4:	b2c9      	uxtb	r1, r1
 80157b6:	2929      	cmp	r1, #41	; 0x29
 80157b8:	d8da      	bhi.n	8015770 <uxr_write_framed_msg+0x1e0>
 80157ba:	18a0      	adds	r0, r4, r2
 80157bc:	4421      	add	r1, r4
 80157be:	f04f 057d 	mov.w	r5, #125	; 0x7d
 80157c2:	3202      	adds	r2, #2
 80157c4:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80157c8:	b2d2      	uxtb	r2, r2
 80157ca:	f083 0020 	eor.w	r0, r3, #32
 80157ce:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80157d2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80157d6:	e733      	b.n	8015640 <uxr_write_framed_msg+0xb0>
 80157d8:	18a1      	adds	r1, r4, r2
 80157da:	3201      	adds	r2, #1
 80157dc:	4648      	mov	r0, r9
 80157de:	b2d2      	uxtb	r2, r2
 80157e0:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80157e4:	f04f 0901 	mov.w	r9, #1
 80157e8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80157ec:	2800      	cmp	r0, #0
 80157ee:	f43f af7b 	beq.w	80156e8 <uxr_write_framed_msg+0x158>
 80157f2:	2500      	movs	r5, #0
 80157f4:	e002      	b.n	80157fc <uxr_write_framed_msg+0x26c>
 80157f6:	2800      	cmp	r0, #0
 80157f8:	f43f af4f 	beq.w	801569a <uxr_write_framed_msg+0x10a>
 80157fc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015800:	1b52      	subs	r2, r2, r5
 8015802:	465b      	mov	r3, fp
 8015804:	4421      	add	r1, r4
 8015806:	4638      	mov	r0, r7
 8015808:	47b0      	blx	r6
 801580a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801580e:	4405      	add	r5, r0
 8015810:	4295      	cmp	r5, r2
 8015812:	d3f0      	bcc.n	80157f6 <uxr_write_framed_msg+0x266>
 8015814:	f47f af41 	bne.w	801569a <uxr_write_framed_msg+0x10a>
 8015818:	2300      	movs	r3, #0
 801581a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801581e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015820:	b298      	uxth	r0, r3
 8015822:	b003      	add	sp, #12
 8015824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015828:	217d      	movs	r1, #125	; 0x7d
 801582a:	f082 0220 	eor.w	r2, r2, #32
 801582e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8015832:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8015836:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801583a:	2901      	cmp	r1, #1
 801583c:	f04f 0203 	mov.w	r2, #3
 8015840:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015844:	d804      	bhi.n	8015850 <uxr_write_framed_msg+0x2c0>
 8015846:	4611      	mov	r1, r2
 8015848:	f04f 0c04 	mov.w	ip, #4
 801584c:	2205      	movs	r2, #5
 801584e:	e752      	b.n	80156f6 <uxr_write_framed_msg+0x166>
 8015850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015852:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8015856:	b2dd      	uxtb	r5, r3
 8015858:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 801585c:	2204      	movs	r2, #4
 801585e:	2901      	cmp	r1, #1
 8015860:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015864:	f63f aec0 	bhi.w	80155e8 <uxr_write_framed_msg+0x58>
 8015868:	e758      	b.n	801571c <uxr_write_framed_msg+0x18c>
 801586a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801586e:	fa5f f889 	uxtb.w	r8, r9
 8015872:	9301      	str	r3, [sp, #4]
 8015874:	2200      	movs	r2, #0
 8015876:	e6f5      	b.n	8015664 <uxr_write_framed_msg+0xd4>
 8015878:	08018624 	.word	0x08018624

0801587c <uxr_framing_read_transport>:
 801587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015880:	4604      	mov	r4, r0
 8015882:	b083      	sub	sp, #12
 8015884:	461f      	mov	r7, r3
 8015886:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801588a:	4689      	mov	r9, r1
 801588c:	4692      	mov	sl, r2
 801588e:	f7f9 fd29 	bl	800f2e4 <uxr_millis>
 8015892:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015896:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801589a:	42b3      	cmp	r3, r6
 801589c:	4680      	mov	r8, r0
 801589e:	d061      	beq.n	8015964 <uxr_framing_read_transport+0xe8>
 80158a0:	d81c      	bhi.n	80158dc <uxr_framing_read_transport+0x60>
 80158a2:	1e75      	subs	r5, r6, #1
 80158a4:	1aed      	subs	r5, r5, r3
 80158a6:	b2ed      	uxtb	r5, r5
 80158a8:	2600      	movs	r6, #0
 80158aa:	455d      	cmp	r5, fp
 80158ac:	d81f      	bhi.n	80158ee <uxr_framing_read_transport+0x72>
 80158ae:	19ab      	adds	r3, r5, r6
 80158b0:	455b      	cmp	r3, fp
 80158b2:	bf84      	itt	hi
 80158b4:	ebab 0605 	subhi.w	r6, fp, r5
 80158b8:	b2f6      	uxtbhi	r6, r6
 80158ba:	b9ed      	cbnz	r5, 80158f8 <uxr_framing_read_transport+0x7c>
 80158bc:	f04f 0b00 	mov.w	fp, #0
 80158c0:	f7f9 fd10 	bl	800f2e4 <uxr_millis>
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	eba0 0808 	sub.w	r8, r0, r8
 80158ca:	eba3 0308 	sub.w	r3, r3, r8
 80158ce:	4658      	mov	r0, fp
 80158d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80158d4:	603b      	str	r3, [r7, #0]
 80158d6:	b003      	add	sp, #12
 80158d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158dc:	2e00      	cmp	r6, #0
 80158de:	d049      	beq.n	8015974 <uxr_framing_read_transport+0xf8>
 80158e0:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 80158e4:	b2ed      	uxtb	r5, r5
 80158e6:	3e01      	subs	r6, #1
 80158e8:	455d      	cmp	r5, fp
 80158ea:	b2f6      	uxtb	r6, r6
 80158ec:	d9df      	bls.n	80158ae <uxr_framing_read_transport+0x32>
 80158ee:	fa5f f58b 	uxtb.w	r5, fp
 80158f2:	2600      	movs	r6, #0
 80158f4:	2d00      	cmp	r5, #0
 80158f6:	d0e1      	beq.n	80158bc <uxr_framing_read_transport+0x40>
 80158f8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80158fc:	3102      	adds	r1, #2
 80158fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015900:	9300      	str	r3, [sp, #0]
 8015902:	683b      	ldr	r3, [r7, #0]
 8015904:	4421      	add	r1, r4
 8015906:	462a      	mov	r2, r5
 8015908:	4650      	mov	r0, sl
 801590a:	47c8      	blx	r9
 801590c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015910:	4a1a      	ldr	r2, [pc, #104]	; (801597c <uxr_framing_read_transport+0x100>)
 8015912:	4403      	add	r3, r0
 8015914:	0859      	lsrs	r1, r3, #1
 8015916:	fba2 2101 	umull	r2, r1, r2, r1
 801591a:	0889      	lsrs	r1, r1, #2
 801591c:	222a      	movs	r2, #42	; 0x2a
 801591e:	fb02 3111 	mls	r1, r2, r1, r3
 8015922:	4683      	mov	fp, r0
 8015924:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8015928:	2800      	cmp	r0, #0
 801592a:	d0c7      	beq.n	80158bc <uxr_framing_read_transport+0x40>
 801592c:	42a8      	cmp	r0, r5
 801592e:	d1c7      	bne.n	80158c0 <uxr_framing_read_transport+0x44>
 8015930:	2e00      	cmp	r6, #0
 8015932:	d0c5      	beq.n	80158c0 <uxr_framing_read_transport+0x44>
 8015934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015936:	9300      	str	r3, [sp, #0]
 8015938:	3102      	adds	r1, #2
 801593a:	4632      	mov	r2, r6
 801593c:	4421      	add	r1, r4
 801593e:	2300      	movs	r3, #0
 8015940:	4650      	mov	r0, sl
 8015942:	47c8      	blx	r9
 8015944:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015948:	4a0c      	ldr	r2, [pc, #48]	; (801597c <uxr_framing_read_transport+0x100>)
 801594a:	180b      	adds	r3, r1, r0
 801594c:	0859      	lsrs	r1, r3, #1
 801594e:	fba2 1201 	umull	r1, r2, r2, r1
 8015952:	0892      	lsrs	r2, r2, #2
 8015954:	212a      	movs	r1, #42	; 0x2a
 8015956:	fb01 3312 	mls	r3, r1, r2, r3
 801595a:	eb00 0b05 	add.w	fp, r0, r5
 801595e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015962:	e7ad      	b.n	80158c0 <uxr_framing_read_transport+0x44>
 8015964:	2600      	movs	r6, #0
 8015966:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 801596a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 801596c:	d9bf      	bls.n	80158ee <uxr_framing_read_transport+0x72>
 801596e:	2102      	movs	r1, #2
 8015970:	2529      	movs	r5, #41	; 0x29
 8015972:	e7c4      	b.n	80158fe <uxr_framing_read_transport+0x82>
 8015974:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8015978:	b2ed      	uxtb	r5, r5
 801597a:	e796      	b.n	80158aa <uxr_framing_read_transport+0x2e>
 801597c:	30c30c31 	.word	0x30c30c31

08015980 <uxr_read_framed_msg>:
 8015980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015984:	461e      	mov	r6, r3
 8015986:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801598a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801598e:	429d      	cmp	r5, r3
 8015990:	b083      	sub	sp, #12
 8015992:	4604      	mov	r4, r0
 8015994:	4688      	mov	r8, r1
 8015996:	4691      	mov	r9, r2
 8015998:	f000 8188 	beq.w	8015cac <uxr_read_framed_msg+0x32c>
 801599c:	7823      	ldrb	r3, [r4, #0]
 801599e:	4dc1      	ldr	r5, [pc, #772]	; (8015ca4 <uxr_read_framed_msg+0x324>)
 80159a0:	4fc1      	ldr	r7, [pc, #772]	; (8015ca8 <uxr_read_framed_msg+0x328>)
 80159a2:	2b07      	cmp	r3, #7
 80159a4:	d8fd      	bhi.n	80159a2 <uxr_read_framed_msg+0x22>
 80159a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80159aa:	0115      	.short	0x0115
 80159ac:	00d600f6 	.word	0x00d600f6
 80159b0:	009000b9 	.word	0x009000b9
 80159b4:	0030004d 	.word	0x0030004d
 80159b8:	0008      	.short	0x0008
 80159ba:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80159be:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80159c2:	4299      	cmp	r1, r3
 80159c4:	f000 814a 	beq.w	8015c5c <uxr_read_framed_msg+0x2dc>
 80159c8:	18e2      	adds	r2, r4, r3
 80159ca:	7892      	ldrb	r2, [r2, #2]
 80159cc:	2a7d      	cmp	r2, #125	; 0x7d
 80159ce:	f000 8199 	beq.w	8015d04 <uxr_read_framed_msg+0x384>
 80159d2:	3301      	adds	r3, #1
 80159d4:	0858      	lsrs	r0, r3, #1
 80159d6:	fba5 1000 	umull	r1, r0, r5, r0
 80159da:	0880      	lsrs	r0, r0, #2
 80159dc:	212a      	movs	r1, #42	; 0x2a
 80159de:	fb01 3310 	mls	r3, r1, r0, r3
 80159e2:	2a7e      	cmp	r2, #126	; 0x7e
 80159e4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80159e8:	f000 8252 	beq.w	8015e90 <uxr_read_framed_msg+0x510>
 80159ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80159ee:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80159f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	2200      	movs	r2, #0
 80159f8:	4299      	cmp	r1, r3
 80159fa:	86a3      	strh	r3, [r4, #52]	; 0x34
 80159fc:	7022      	strb	r2, [r4, #0]
 80159fe:	f000 8179 	beq.w	8015cf4 <uxr_read_framed_msg+0x374>
 8015a02:	2000      	movs	r0, #0
 8015a04:	b003      	add	sp, #12
 8015a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a0a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015a0e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015a12:	4299      	cmp	r1, r3
 8015a14:	f000 8131 	beq.w	8015c7a <uxr_read_framed_msg+0x2fa>
 8015a18:	18e2      	adds	r2, r4, r3
 8015a1a:	7890      	ldrb	r0, [r2, #2]
 8015a1c:	287d      	cmp	r0, #125	; 0x7d
 8015a1e:	f000 8190 	beq.w	8015d42 <uxr_read_framed_msg+0x3c2>
 8015a22:	3301      	adds	r3, #1
 8015a24:	085a      	lsrs	r2, r3, #1
 8015a26:	fba5 1202 	umull	r1, r2, r5, r2
 8015a2a:	0892      	lsrs	r2, r2, #2
 8015a2c:	212a      	movs	r1, #42	; 0x2a
 8015a2e:	fb01 3312 	mls	r3, r1, r2, r3
 8015a32:	287e      	cmp	r0, #126	; 0x7e
 8015a34:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015a38:	f000 821a 	beq.w	8015e70 <uxr_read_framed_msg+0x4f0>
 8015a3c:	2307      	movs	r3, #7
 8015a3e:	86a0      	strh	r0, [r4, #52]	; 0x34
 8015a40:	7023      	strb	r3, [r4, #0]
 8015a42:	e7ae      	b.n	80159a2 <uxr_read_framed_msg+0x22>
 8015a44:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015a46:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015a4a:	459e      	cmp	lr, r3
 8015a4c:	d938      	bls.n	8015ac0 <uxr_read_framed_msg+0x140>
 8015a4e:	ee07 8a90 	vmov	s15, r8
 8015a52:	212a      	movs	r1, #42	; 0x2a
 8015a54:	e020      	b.n	8015a98 <uxr_read_framed_msg+0x118>
 8015a56:	f89b c002 	ldrb.w	ip, [fp, #2]
 8015a5a:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8015a5e:	f000 80d4 	beq.w	8015c0a <uxr_read_framed_msg+0x28a>
 8015a62:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015a66:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015a6a:	f000 8219 	beq.w	8015ea0 <uxr_read_framed_msg+0x520>
 8015a6e:	f806 c003 	strb.w	ip, [r6, r3]
 8015a72:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8015a76:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015a78:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015a7c:	ea8a 000c 	eor.w	r0, sl, ip
 8015a80:	b2c0      	uxtb	r0, r0
 8015a82:	3301      	adds	r3, #1
 8015a84:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8015a8e:	4573      	cmp	r3, lr
 8015a90:	8663      	strh	r3, [r4, #50]	; 0x32
 8015a92:	86e2      	strh	r2, [r4, #54]	; 0x36
 8015a94:	f080 8120 	bcs.w	8015cd8 <uxr_read_framed_msg+0x358>
 8015a98:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8015a9c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015aa0:	f100 0c01 	add.w	ip, r0, #1
 8015aa4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015aa8:	fba5 8202 	umull	r8, r2, r5, r2
 8015aac:	0892      	lsrs	r2, r2, #2
 8015aae:	4582      	cmp	sl, r0
 8015ab0:	eb04 0b00 	add.w	fp, r4, r0
 8015ab4:	fb01 c212 	mls	r2, r1, r2, ip
 8015ab8:	d1cd      	bne.n	8015a56 <uxr_read_framed_msg+0xd6>
 8015aba:	ee17 8a90 	vmov	r8, s15
 8015abe:	459e      	cmp	lr, r3
 8015ac0:	f040 8111 	bne.w	8015ce6 <uxr_read_framed_msg+0x366>
 8015ac4:	2306      	movs	r3, #6
 8015ac6:	7023      	strb	r3, [r4, #0]
 8015ac8:	e76b      	b.n	80159a2 <uxr_read_framed_msg+0x22>
 8015aca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015ace:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015ad2:	4298      	cmp	r0, r3
 8015ad4:	f000 80c2 	beq.w	8015c5c <uxr_read_framed_msg+0x2dc>
 8015ad8:	18e2      	adds	r2, r4, r3
 8015ada:	7891      	ldrb	r1, [r2, #2]
 8015adc:	297d      	cmp	r1, #125	; 0x7d
 8015ade:	f000 814c 	beq.w	8015d7a <uxr_read_framed_msg+0x3fa>
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	085a      	lsrs	r2, r3, #1
 8015ae6:	fba5 0202 	umull	r0, r2, r5, r2
 8015aea:	0892      	lsrs	r2, r2, #2
 8015aec:	202a      	movs	r0, #42	; 0x2a
 8015aee:	fb00 3312 	mls	r3, r0, r2, r3
 8015af2:	297e      	cmp	r1, #126	; 0x7e
 8015af4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015af8:	f000 81ca 	beq.w	8015e90 <uxr_read_framed_msg+0x510>
 8015afc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015afe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015b02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b04:	b29b      	uxth	r3, r3
 8015b06:	2000      	movs	r0, #0
 8015b08:	428b      	cmp	r3, r1
 8015b0a:	8623      	strh	r3, [r4, #48]	; 0x30
 8015b0c:	8660      	strh	r0, [r4, #50]	; 0x32
 8015b0e:	86e0      	strh	r0, [r4, #54]	; 0x36
 8015b10:	f240 80df 	bls.w	8015cd2 <uxr_read_framed_msg+0x352>
 8015b14:	7020      	strb	r0, [r4, #0]
 8015b16:	b003      	add	sp, #12
 8015b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b1c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015b20:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015b24:	4299      	cmp	r1, r3
 8015b26:	f000 80a8 	beq.w	8015c7a <uxr_read_framed_msg+0x2fa>
 8015b2a:	18e2      	adds	r2, r4, r3
 8015b2c:	7890      	ldrb	r0, [r2, #2]
 8015b2e:	287d      	cmp	r0, #125	; 0x7d
 8015b30:	f000 8164 	beq.w	8015dfc <uxr_read_framed_msg+0x47c>
 8015b34:	3301      	adds	r3, #1
 8015b36:	085a      	lsrs	r2, r3, #1
 8015b38:	fba5 1202 	umull	r1, r2, r5, r2
 8015b3c:	0892      	lsrs	r2, r2, #2
 8015b3e:	212a      	movs	r1, #42	; 0x2a
 8015b40:	fb01 3312 	mls	r3, r1, r2, r3
 8015b44:	287e      	cmp	r0, #126	; 0x7e
 8015b46:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015b4a:	f000 8191 	beq.w	8015e70 <uxr_read_framed_msg+0x4f0>
 8015b4e:	2304      	movs	r3, #4
 8015b50:	8620      	strh	r0, [r4, #48]	; 0x30
 8015b52:	7023      	strb	r3, [r4, #0]
 8015b54:	e725      	b.n	80159a2 <uxr_read_framed_msg+0x22>
 8015b56:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015b5a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015b5e:	4290      	cmp	r0, r2
 8015b60:	f000 80b3 	beq.w	8015cca <uxr_read_framed_msg+0x34a>
 8015b64:	18a3      	adds	r3, r4, r2
 8015b66:	7899      	ldrb	r1, [r3, #2]
 8015b68:	297d      	cmp	r1, #125	; 0x7d
 8015b6a:	f000 8164 	beq.w	8015e36 <uxr_read_framed_msg+0x4b6>
 8015b6e:	3201      	adds	r2, #1
 8015b70:	0850      	lsrs	r0, r2, #1
 8015b72:	fba5 3000 	umull	r3, r0, r5, r0
 8015b76:	0880      	lsrs	r0, r0, #2
 8015b78:	232a      	movs	r3, #42	; 0x2a
 8015b7a:	fb03 2210 	mls	r2, r3, r0, r2
 8015b7e:	297e      	cmp	r1, #126	; 0x7e
 8015b80:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015b84:	f000 8188 	beq.w	8015e98 <uxr_read_framed_msg+0x518>
 8015b88:	7863      	ldrb	r3, [r4, #1]
 8015b8a:	428b      	cmp	r3, r1
 8015b8c:	bf0c      	ite	eq
 8015b8e:	2303      	moveq	r3, #3
 8015b90:	2300      	movne	r3, #0
 8015b92:	7023      	strb	r3, [r4, #0]
 8015b94:	e705      	b.n	80159a2 <uxr_read_framed_msg+0x22>
 8015b96:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015b9a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	4299      	cmp	r1, r3
 8015ba2:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8015ba6:	d06c      	beq.n	8015c82 <uxr_read_framed_msg+0x302>
 8015ba8:	18e2      	adds	r2, r4, r3
 8015baa:	7890      	ldrb	r0, [r2, #2]
 8015bac:	287d      	cmp	r0, #125	; 0x7d
 8015bae:	f000 8101 	beq.w	8015db4 <uxr_read_framed_msg+0x434>
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	085a      	lsrs	r2, r3, #1
 8015bb6:	fba5 1202 	umull	r1, r2, r5, r2
 8015bba:	0892      	lsrs	r2, r2, #2
 8015bbc:	212a      	movs	r1, #42	; 0x2a
 8015bbe:	fb01 3312 	mls	r3, r1, r2, r3
 8015bc2:	287e      	cmp	r0, #126	; 0x7e
 8015bc4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8015bc8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015bcc:	d059      	beq.n	8015c82 <uxr_read_framed_msg+0x302>
 8015bce:	2302      	movs	r3, #2
 8015bd0:	7023      	strb	r3, [r4, #0]
 8015bd2:	e6e6      	b.n	80159a2 <uxr_read_framed_msg+0x22>
 8015bd4:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015bd8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015bdc:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8015be0:	1c51      	adds	r1, r2, #1
 8015be2:	084b      	lsrs	r3, r1, #1
 8015be4:	fba5 c303 	umull	ip, r3, r5, r3
 8015be8:	089b      	lsrs	r3, r3, #2
 8015bea:	fb0e 1313 	mls	r3, lr, r3, r1
 8015bee:	4592      	cmp	sl, r2
 8015bf0:	eb04 0002 	add.w	r0, r4, r2
 8015bf4:	b2da      	uxtb	r2, r3
 8015bf6:	f43f af04 	beq.w	8015a02 <uxr_read_framed_msg+0x82>
 8015bfa:	7883      	ldrb	r3, [r0, #2]
 8015bfc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015c00:	2b7e      	cmp	r3, #126	; 0x7e
 8015c02:	d1ed      	bne.n	8015be0 <uxr_read_framed_msg+0x260>
 8015c04:	2301      	movs	r3, #1
 8015c06:	7023      	strb	r3, [r4, #0]
 8015c08:	e6cb      	b.n	80159a2 <uxr_read_framed_msg+0x22>
 8015c0a:	f100 0c01 	add.w	ip, r0, #1
 8015c0e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015c12:	fba5 8202 	umull	r8, r2, r5, r2
 8015c16:	0892      	lsrs	r2, r2, #2
 8015c18:	fb01 c212 	mls	r2, r1, r2, ip
 8015c1c:	eb04 0c02 	add.w	ip, r4, r2
 8015c20:	b2d2      	uxtb	r2, r2
 8015c22:	4592      	cmp	sl, r2
 8015c24:	f100 0002 	add.w	r0, r0, #2
 8015c28:	f43f af47 	beq.w	8015aba <uxr_read_framed_msg+0x13a>
 8015c2c:	0842      	lsrs	r2, r0, #1
 8015c2e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8015c32:	fba5 8202 	umull	r8, r2, r5, r2
 8015c36:	0892      	lsrs	r2, r2, #2
 8015c38:	fb01 0012 	mls	r0, r1, r2, r0
 8015c3c:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8015c40:	f08a 0c20 	eor.w	ip, sl, #32
 8015c44:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8015c48:	f47f af11 	bne.w	8015a6e <uxr_read_framed_msg+0xee>
 8015c4c:	459e      	cmp	lr, r3
 8015c4e:	ee17 8a90 	vmov	r8, s15
 8015c52:	f43f af37 	beq.w	8015ac4 <uxr_read_framed_msg+0x144>
 8015c56:	2301      	movs	r3, #1
 8015c58:	7023      	strb	r3, [r4, #0]
 8015c5a:	e6a2      	b.n	80159a2 <uxr_read_framed_msg+0x22>
 8015c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c5e:	9300      	str	r3, [sp, #0]
 8015c60:	2301      	movs	r3, #1
 8015c62:	9301      	str	r3, [sp, #4]
 8015c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c66:	464a      	mov	r2, r9
 8015c68:	4641      	mov	r1, r8
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	f7ff fe06 	bl	801587c <uxr_framing_read_transport>
 8015c70:	2800      	cmp	r0, #0
 8015c72:	f43f aec6 	beq.w	8015a02 <uxr_read_framed_msg+0x82>
 8015c76:	7823      	ldrb	r3, [r4, #0]
 8015c78:	e693      	b.n	80159a2 <uxr_read_framed_msg+0x22>
 8015c7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c7c:	9300      	str	r3, [sp, #0]
 8015c7e:	2302      	movs	r3, #2
 8015c80:	e7ef      	b.n	8015c62 <uxr_read_framed_msg+0x2e2>
 8015c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c84:	9300      	str	r3, [sp, #0]
 8015c86:	2304      	movs	r3, #4
 8015c88:	9301      	str	r3, [sp, #4]
 8015c8a:	464a      	mov	r2, r9
 8015c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c8e:	4641      	mov	r1, r8
 8015c90:	4620      	mov	r0, r4
 8015c92:	f7ff fdf3 	bl	801587c <uxr_framing_read_transport>
 8015c96:	2800      	cmp	r0, #0
 8015c98:	d1ed      	bne.n	8015c76 <uxr_read_framed_msg+0x2f6>
 8015c9a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015c9e:	2b7e      	cmp	r3, #126	; 0x7e
 8015ca0:	d0e9      	beq.n	8015c76 <uxr_read_framed_msg+0x2f6>
 8015ca2:	e6ae      	b.n	8015a02 <uxr_read_framed_msg+0x82>
 8015ca4:	30c30c31 	.word	0x30c30c31
 8015ca8:	08018624 	.word	0x08018624
 8015cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cae:	9300      	str	r3, [sp, #0]
 8015cb0:	2305      	movs	r3, #5
 8015cb2:	9301      	str	r3, [sp, #4]
 8015cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cb6:	f7ff fde1 	bl	801587c <uxr_framing_read_transport>
 8015cba:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015cbe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	f43f ae9d 	beq.w	8015a02 <uxr_read_framed_msg+0x82>
 8015cc8:	e668      	b.n	801599c <uxr_read_framed_msg+0x1c>
 8015cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ccc:	9300      	str	r3, [sp, #0]
 8015cce:	2303      	movs	r3, #3
 8015cd0:	e7c7      	b.n	8015c62 <uxr_read_framed_msg+0x2e2>
 8015cd2:	2305      	movs	r3, #5
 8015cd4:	7023      	strb	r3, [r4, #0]
 8015cd6:	e664      	b.n	80159a2 <uxr_read_framed_msg+0x22>
 8015cd8:	ee17 8a90 	vmov	r8, s15
 8015cdc:	f43f aef2 	beq.w	8015ac4 <uxr_read_framed_msg+0x144>
 8015ce0:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015ce4:	d08e      	beq.n	8015c04 <uxr_read_framed_msg+0x284>
 8015ce6:	ebae 0303 	sub.w	r3, lr, r3
 8015cea:	3302      	adds	r3, #2
 8015cec:	9301      	str	r3, [sp, #4]
 8015cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cf0:	9300      	str	r3, [sp, #0]
 8015cf2:	e7b7      	b.n	8015c64 <uxr_read_framed_msg+0x2e4>
 8015cf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015cf6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015cfa:	7013      	strb	r3, [r2, #0]
 8015cfc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015cfe:	b003      	add	sp, #12
 8015d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d04:	f103 0c01 	add.w	ip, r3, #1
 8015d08:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015d0c:	fba5 0202 	umull	r0, r2, r5, r2
 8015d10:	0892      	lsrs	r2, r2, #2
 8015d12:	202a      	movs	r0, #42	; 0x2a
 8015d14:	fb00 c212 	mls	r2, r0, r2, ip
 8015d18:	fa5f fc82 	uxtb.w	ip, r2
 8015d1c:	4561      	cmp	r1, ip
 8015d1e:	d09d      	beq.n	8015c5c <uxr_read_framed_msg+0x2dc>
 8015d20:	3302      	adds	r3, #2
 8015d22:	4422      	add	r2, r4
 8015d24:	0859      	lsrs	r1, r3, #1
 8015d26:	7892      	ldrb	r2, [r2, #2]
 8015d28:	fba5 c101 	umull	ip, r1, r5, r1
 8015d2c:	0889      	lsrs	r1, r1, #2
 8015d2e:	fb00 3311 	mls	r3, r0, r1, r3
 8015d32:	2a7e      	cmp	r2, #126	; 0x7e
 8015d34:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015d38:	f000 80aa 	beq.w	8015e90 <uxr_read_framed_msg+0x510>
 8015d3c:	f082 0220 	eor.w	r2, r2, #32
 8015d40:	e654      	b.n	80159ec <uxr_read_framed_msg+0x6c>
 8015d42:	1c58      	adds	r0, r3, #1
 8015d44:	0842      	lsrs	r2, r0, #1
 8015d46:	fba5 c202 	umull	ip, r2, r5, r2
 8015d4a:	0892      	lsrs	r2, r2, #2
 8015d4c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015d50:	fb0c 0212 	mls	r2, ip, r2, r0
 8015d54:	b2d0      	uxtb	r0, r2
 8015d56:	4281      	cmp	r1, r0
 8015d58:	d08f      	beq.n	8015c7a <uxr_read_framed_msg+0x2fa>
 8015d5a:	4422      	add	r2, r4
 8015d5c:	3302      	adds	r3, #2
 8015d5e:	7890      	ldrb	r0, [r2, #2]
 8015d60:	085a      	lsrs	r2, r3, #1
 8015d62:	fba5 1202 	umull	r1, r2, r5, r2
 8015d66:	0892      	lsrs	r2, r2, #2
 8015d68:	fb0c 3312 	mls	r3, ip, r2, r3
 8015d6c:	287e      	cmp	r0, #126	; 0x7e
 8015d6e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015d72:	d07d      	beq.n	8015e70 <uxr_read_framed_msg+0x4f0>
 8015d74:	f080 0020 	eor.w	r0, r0, #32
 8015d78:	e660      	b.n	8015a3c <uxr_read_framed_msg+0xbc>
 8015d7a:	1c59      	adds	r1, r3, #1
 8015d7c:	084a      	lsrs	r2, r1, #1
 8015d7e:	fba5 c202 	umull	ip, r2, r5, r2
 8015d82:	0892      	lsrs	r2, r2, #2
 8015d84:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015d88:	fb0c 1212 	mls	r2, ip, r2, r1
 8015d8c:	b2d1      	uxtb	r1, r2
 8015d8e:	4288      	cmp	r0, r1
 8015d90:	f43f af64 	beq.w	8015c5c <uxr_read_framed_msg+0x2dc>
 8015d94:	4422      	add	r2, r4
 8015d96:	3302      	adds	r3, #2
 8015d98:	7891      	ldrb	r1, [r2, #2]
 8015d9a:	085a      	lsrs	r2, r3, #1
 8015d9c:	fba5 0202 	umull	r0, r2, r5, r2
 8015da0:	0892      	lsrs	r2, r2, #2
 8015da2:	fb0c 3312 	mls	r3, ip, r2, r3
 8015da6:	297e      	cmp	r1, #126	; 0x7e
 8015da8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015dac:	d070      	beq.n	8015e90 <uxr_read_framed_msg+0x510>
 8015dae:	f081 0120 	eor.w	r1, r1, #32
 8015db2:	e6a3      	b.n	8015afc <uxr_read_framed_msg+0x17c>
 8015db4:	f103 0c01 	add.w	ip, r3, #1
 8015db8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015dbc:	fba5 0202 	umull	r0, r2, r5, r2
 8015dc0:	0892      	lsrs	r2, r2, #2
 8015dc2:	202a      	movs	r0, #42	; 0x2a
 8015dc4:	fb00 c212 	mls	r2, r0, r2, ip
 8015dc8:	fa5f fc82 	uxtb.w	ip, r2
 8015dcc:	4561      	cmp	r1, ip
 8015dce:	f43f af58 	beq.w	8015c82 <uxr_read_framed_msg+0x302>
 8015dd2:	4422      	add	r2, r4
 8015dd4:	3302      	adds	r3, #2
 8015dd6:	7891      	ldrb	r1, [r2, #2]
 8015dd8:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015ddc:	085a      	lsrs	r2, r3, #1
 8015dde:	fba5 c202 	umull	ip, r2, r5, r2
 8015de2:	0892      	lsrs	r2, r2, #2
 8015de4:	fb00 3312 	mls	r3, r0, r2, r3
 8015de8:	297e      	cmp	r1, #126	; 0x7e
 8015dea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015dee:	f43f af48 	beq.w	8015c82 <uxr_read_framed_msg+0x302>
 8015df2:	f081 0120 	eor.w	r1, r1, #32
 8015df6:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015dfa:	e6e8      	b.n	8015bce <uxr_read_framed_msg+0x24e>
 8015dfc:	1c58      	adds	r0, r3, #1
 8015dfe:	0842      	lsrs	r2, r0, #1
 8015e00:	fba5 c202 	umull	ip, r2, r5, r2
 8015e04:	0892      	lsrs	r2, r2, #2
 8015e06:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015e0a:	fb0c 0212 	mls	r2, ip, r2, r0
 8015e0e:	b2d0      	uxtb	r0, r2
 8015e10:	4281      	cmp	r1, r0
 8015e12:	f43f af32 	beq.w	8015c7a <uxr_read_framed_msg+0x2fa>
 8015e16:	4422      	add	r2, r4
 8015e18:	3302      	adds	r3, #2
 8015e1a:	7890      	ldrb	r0, [r2, #2]
 8015e1c:	085a      	lsrs	r2, r3, #1
 8015e1e:	fba5 1202 	umull	r1, r2, r5, r2
 8015e22:	0892      	lsrs	r2, r2, #2
 8015e24:	fb0c 3312 	mls	r3, ip, r2, r3
 8015e28:	287e      	cmp	r0, #126	; 0x7e
 8015e2a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015e2e:	d01f      	beq.n	8015e70 <uxr_read_framed_msg+0x4f0>
 8015e30:	f080 0020 	eor.w	r0, r0, #32
 8015e34:	e68b      	b.n	8015b4e <uxr_read_framed_msg+0x1ce>
 8015e36:	1c51      	adds	r1, r2, #1
 8015e38:	084b      	lsrs	r3, r1, #1
 8015e3a:	fba5 c303 	umull	ip, r3, r5, r3
 8015e3e:	089b      	lsrs	r3, r3, #2
 8015e40:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015e44:	fb0c 1313 	mls	r3, ip, r3, r1
 8015e48:	b2d9      	uxtb	r1, r3
 8015e4a:	4288      	cmp	r0, r1
 8015e4c:	f43f af3d 	beq.w	8015cca <uxr_read_framed_msg+0x34a>
 8015e50:	3202      	adds	r2, #2
 8015e52:	4423      	add	r3, r4
 8015e54:	0850      	lsrs	r0, r2, #1
 8015e56:	789b      	ldrb	r3, [r3, #2]
 8015e58:	fba5 1000 	umull	r1, r0, r5, r0
 8015e5c:	0880      	lsrs	r0, r0, #2
 8015e5e:	fb0c 2210 	mls	r2, ip, r0, r2
 8015e62:	2b7e      	cmp	r3, #126	; 0x7e
 8015e64:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015e68:	d016      	beq.n	8015e98 <uxr_read_framed_msg+0x518>
 8015e6a:	f083 0120 	eor.w	r1, r3, #32
 8015e6e:	e68b      	b.n	8015b88 <uxr_read_framed_msg+0x208>
 8015e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e72:	9300      	str	r3, [sp, #0]
 8015e74:	2302      	movs	r3, #2
 8015e76:	9301      	str	r3, [sp, #4]
 8015e78:	464a      	mov	r2, r9
 8015e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e7c:	4641      	mov	r1, r8
 8015e7e:	4620      	mov	r0, r4
 8015e80:	f7ff fcfc 	bl	801587c <uxr_framing_read_transport>
 8015e84:	2800      	cmp	r0, #0
 8015e86:	f47f aef6 	bne.w	8015c76 <uxr_read_framed_msg+0x2f6>
 8015e8a:	2301      	movs	r3, #1
 8015e8c:	7023      	strb	r3, [r4, #0]
 8015e8e:	e588      	b.n	80159a2 <uxr_read_framed_msg+0x22>
 8015e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	2301      	movs	r3, #1
 8015e96:	e7ee      	b.n	8015e76 <uxr_read_framed_msg+0x4f6>
 8015e98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e9a:	9300      	str	r3, [sp, #0]
 8015e9c:	2303      	movs	r3, #3
 8015e9e:	e7ea      	b.n	8015e76 <uxr_read_framed_msg+0x4f6>
 8015ea0:	ee17 8a90 	vmov	r8, s15
 8015ea4:	e6ae      	b.n	8015c04 <uxr_read_framed_msg+0x284>
 8015ea6:	bf00      	nop

08015ea8 <rcl_get_default_domain_id>:
 8015ea8:	b530      	push	{r4, r5, lr}
 8015eaa:	b083      	sub	sp, #12
 8015eac:	2300      	movs	r3, #0
 8015eae:	9300      	str	r3, [sp, #0]
 8015eb0:	b1d0      	cbz	r0, 8015ee8 <rcl_get_default_domain_id+0x40>
 8015eb2:	4604      	mov	r4, r0
 8015eb4:	4669      	mov	r1, sp
 8015eb6:	4815      	ldr	r0, [pc, #84]	; (8015f0c <rcl_get_default_domain_id+0x64>)
 8015eb8:	f7f5 fb40 	bl	800b53c <rcutils_get_env>
 8015ebc:	4602      	mov	r2, r0
 8015ebe:	b110      	cbz	r0, 8015ec6 <rcl_get_default_domain_id+0x1e>
 8015ec0:	2001      	movs	r0, #1
 8015ec2:	b003      	add	sp, #12
 8015ec4:	bd30      	pop	{r4, r5, pc}
 8015ec6:	9b00      	ldr	r3, [sp, #0]
 8015ec8:	b18b      	cbz	r3, 8015eee <rcl_get_default_domain_id+0x46>
 8015eca:	7818      	ldrb	r0, [r3, #0]
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d0f8      	beq.n	8015ec2 <rcl_get_default_domain_id+0x1a>
 8015ed0:	a901      	add	r1, sp, #4
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	9201      	str	r2, [sp, #4]
 8015ed6:	f000 fd71 	bl	80169bc <strtoul>
 8015eda:	4605      	mov	r5, r0
 8015edc:	b150      	cbz	r0, 8015ef4 <rcl_get_default_domain_id+0x4c>
 8015ede:	1c43      	adds	r3, r0, #1
 8015ee0:	d00d      	beq.n	8015efe <rcl_get_default_domain_id+0x56>
 8015ee2:	6025      	str	r5, [r4, #0]
 8015ee4:	2000      	movs	r0, #0
 8015ee6:	e7ec      	b.n	8015ec2 <rcl_get_default_domain_id+0x1a>
 8015ee8:	200b      	movs	r0, #11
 8015eea:	b003      	add	sp, #12
 8015eec:	bd30      	pop	{r4, r5, pc}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	b003      	add	sp, #12
 8015ef2:	bd30      	pop	{r4, r5, pc}
 8015ef4:	9b01      	ldr	r3, [sp, #4]
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d0f2      	beq.n	8015ee2 <rcl_get_default_domain_id+0x3a>
 8015efc:	e7e0      	b.n	8015ec0 <rcl_get_default_domain_id+0x18>
 8015efe:	f000 ff97 	bl	8016e30 <__errno>
 8015f02:	6803      	ldr	r3, [r0, #0]
 8015f04:	2b22      	cmp	r3, #34	; 0x22
 8015f06:	d1ec      	bne.n	8015ee2 <rcl_get_default_domain_id+0x3a>
 8015f08:	e7da      	b.n	8015ec0 <rcl_get_default_domain_id+0x18>
 8015f0a:	bf00      	nop
 8015f0c:	08018824 	.word	0x08018824

08015f10 <rcl_expand_topic_name>:
 8015f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f14:	b08b      	sub	sp, #44	; 0x2c
 8015f16:	9306      	str	r3, [sp, #24]
 8015f18:	2800      	cmp	r0, #0
 8015f1a:	f000 80ad 	beq.w	8016078 <rcl_expand_topic_name+0x168>
 8015f1e:	460e      	mov	r6, r1
 8015f20:	2900      	cmp	r1, #0
 8015f22:	f000 80a9 	beq.w	8016078 <rcl_expand_topic_name+0x168>
 8015f26:	4617      	mov	r7, r2
 8015f28:	2a00      	cmp	r2, #0
 8015f2a:	f000 80a5 	beq.w	8016078 <rcl_expand_topic_name+0x168>
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	f000 80a2 	beq.w	8016078 <rcl_expand_topic_name+0x168>
 8015f34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	f000 809e 	beq.w	8016078 <rcl_expand_topic_name+0x168>
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	a909      	add	r1, sp, #36	; 0x24
 8015f40:	4680      	mov	r8, r0
 8015f42:	f000 f949 	bl	80161d8 <rcl_validate_topic_name>
 8015f46:	4604      	mov	r4, r0
 8015f48:	2800      	cmp	r0, #0
 8015f4a:	f040 8096 	bne.w	801607a <rcl_expand_topic_name+0x16a>
 8015f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	f040 809a 	bne.w	801608a <rcl_expand_topic_name+0x17a>
 8015f56:	4602      	mov	r2, r0
 8015f58:	a909      	add	r1, sp, #36	; 0x24
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	f7f5 fd50 	bl	800ba00 <rmw_validate_node_name>
 8015f60:	2800      	cmp	r0, #0
 8015f62:	f040 808e 	bne.w	8016082 <rcl_expand_topic_name+0x172>
 8015f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f68:	2a00      	cmp	r2, #0
 8015f6a:	f040 8093 	bne.w	8016094 <rcl_expand_topic_name+0x184>
 8015f6e:	a909      	add	r1, sp, #36	; 0x24
 8015f70:	4638      	mov	r0, r7
 8015f72:	f7f5 fd27 	bl	800b9c4 <rmw_validate_namespace>
 8015f76:	2800      	cmp	r0, #0
 8015f78:	f040 8083 	bne.w	8016082 <rcl_expand_topic_name+0x172>
 8015f7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015f7e:	2c00      	cmp	r4, #0
 8015f80:	f040 80ed 	bne.w	801615e <rcl_expand_topic_name+0x24e>
 8015f84:	217b      	movs	r1, #123	; 0x7b
 8015f86:	4640      	mov	r0, r8
 8015f88:	f000 fec6 	bl	8016d18 <strchr>
 8015f8c:	f898 3000 	ldrb.w	r3, [r8]
 8015f90:	2b2f      	cmp	r3, #47	; 0x2f
 8015f92:	4605      	mov	r5, r0
 8015f94:	f000 809e 	beq.w	80160d4 <rcl_expand_topic_name+0x1c4>
 8015f98:	2b7e      	cmp	r3, #126	; 0x7e
 8015f9a:	f040 80a2 	bne.w	80160e2 <rcl_expand_topic_name+0x1d2>
 8015f9e:	4638      	mov	r0, r7
 8015fa0:	f7ea f920 	bl	80001e4 <strlen>
 8015fa4:	4a82      	ldr	r2, [pc, #520]	; (80161b0 <rcl_expand_topic_name+0x2a0>)
 8015fa6:	4b83      	ldr	r3, [pc, #524]	; (80161b4 <rcl_expand_topic_name+0x2a4>)
 8015fa8:	2801      	cmp	r0, #1
 8015faa:	bf18      	it	ne
 8015fac:	4613      	movne	r3, r2
 8015fae:	9302      	str	r3, [sp, #8]
 8015fb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015fb2:	9300      	str	r3, [sp, #0]
 8015fb4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015fb8:	f108 0301 	add.w	r3, r8, #1
 8015fbc:	9305      	str	r3, [sp, #20]
 8015fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015fc2:	9301      	str	r3, [sp, #4]
 8015fc4:	ab14      	add	r3, sp, #80	; 0x50
 8015fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015fc8:	f7f5 fb02 	bl	800b5d0 <rcutils_format_string_limit>
 8015fcc:	4682      	mov	sl, r0
 8015fce:	2800      	cmp	r0, #0
 8015fd0:	f000 80c7 	beq.w	8016162 <rcl_expand_topic_name+0x252>
 8015fd4:	2d00      	cmp	r5, #0
 8015fd6:	f000 80a2 	beq.w	801611e <rcl_expand_topic_name+0x20e>
 8015fda:	217b      	movs	r1, #123	; 0x7b
 8015fdc:	f000 fe9c 	bl	8016d18 <strchr>
 8015fe0:	46d1      	mov	r9, sl
 8015fe2:	4605      	mov	r5, r0
 8015fe4:	9407      	str	r4, [sp, #28]
 8015fe6:	46d3      	mov	fp, sl
 8015fe8:	464c      	mov	r4, r9
 8015fea:	2d00      	cmp	r5, #0
 8015fec:	f000 80be 	beq.w	801616c <rcl_expand_topic_name+0x25c>
 8015ff0:	217d      	movs	r1, #125	; 0x7d
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	f000 fe90 	bl	8016d18 <strchr>
 8015ff8:	eba0 0905 	sub.w	r9, r0, r5
 8015ffc:	f109 0a01 	add.w	sl, r9, #1
 8016000:	486d      	ldr	r0, [pc, #436]	; (80161b8 <rcl_expand_topic_name+0x2a8>)
 8016002:	4652      	mov	r2, sl
 8016004:	4629      	mov	r1, r5
 8016006:	f000 fe94 	bl	8016d32 <strncmp>
 801600a:	2800      	cmp	r0, #0
 801600c:	d067      	beq.n	80160de <rcl_expand_topic_name+0x1ce>
 801600e:	486b      	ldr	r0, [pc, #428]	; (80161bc <rcl_expand_topic_name+0x2ac>)
 8016010:	4652      	mov	r2, sl
 8016012:	4629      	mov	r1, r5
 8016014:	f000 fe8d 	bl	8016d32 <strncmp>
 8016018:	b130      	cbz	r0, 8016028 <rcl_expand_topic_name+0x118>
 801601a:	4869      	ldr	r0, [pc, #420]	; (80161c0 <rcl_expand_topic_name+0x2b0>)
 801601c:	4652      	mov	r2, sl
 801601e:	4629      	mov	r1, r5
 8016020:	f000 fe87 	bl	8016d32 <strncmp>
 8016024:	2800      	cmp	r0, #0
 8016026:	d137      	bne.n	8016098 <rcl_expand_topic_name+0x188>
 8016028:	46b9      	mov	r9, r7
 801602a:	ab16      	add	r3, sp, #88	; 0x58
 801602c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016030:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016034:	ab14      	add	r3, sp, #80	; 0x50
 8016036:	4628      	mov	r0, r5
 8016038:	cb0c      	ldmia	r3, {r2, r3}
 801603a:	4651      	mov	r1, sl
 801603c:	f7f5 fc04 	bl	800b848 <rcutils_strndup>
 8016040:	4605      	mov	r5, r0
 8016042:	2800      	cmp	r0, #0
 8016044:	f000 809c 	beq.w	8016180 <rcl_expand_topic_name+0x270>
 8016048:	464a      	mov	r2, r9
 801604a:	4620      	mov	r0, r4
 801604c:	ab14      	add	r3, sp, #80	; 0x50
 801604e:	4629      	mov	r1, r5
 8016050:	f7f5 faf8 	bl	800b644 <rcutils_repl_str>
 8016054:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016058:	4604      	mov	r4, r0
 801605a:	4628      	mov	r0, r5
 801605c:	4798      	blx	r3
 801605e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016060:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016062:	4658      	mov	r0, fp
 8016064:	4798      	blx	r3
 8016066:	2c00      	cmp	r4, #0
 8016068:	d07b      	beq.n	8016162 <rcl_expand_topic_name+0x252>
 801606a:	217b      	movs	r1, #123	; 0x7b
 801606c:	4620      	mov	r0, r4
 801606e:	f000 fe53 	bl	8016d18 <strchr>
 8016072:	46a3      	mov	fp, r4
 8016074:	4605      	mov	r5, r0
 8016076:	e7b8      	b.n	8015fea <rcl_expand_topic_name+0xda>
 8016078:	240b      	movs	r4, #11
 801607a:	4620      	mov	r0, r4
 801607c:	b00b      	add	sp, #44	; 0x2c
 801607e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016082:	f7fa fb13 	bl	80106ac <rcl_convert_rmw_ret_to_rcl_ret>
 8016086:	4604      	mov	r4, r0
 8016088:	e7f7      	b.n	801607a <rcl_expand_topic_name+0x16a>
 801608a:	2467      	movs	r4, #103	; 0x67
 801608c:	4620      	mov	r0, r4
 801608e:	b00b      	add	sp, #44	; 0x2c
 8016090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016094:	24c9      	movs	r4, #201	; 0xc9
 8016096:	e7f0      	b.n	801607a <rcl_expand_topic_name+0x16a>
 8016098:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801609c:	9806      	ldr	r0, [sp, #24]
 801609e:	1c69      	adds	r1, r5, #1
 80160a0:	f7fd fa48 	bl	8013534 <rcutils_string_map_getn>
 80160a4:	4681      	mov	r9, r0
 80160a6:	2800      	cmp	r0, #0
 80160a8:	d1bf      	bne.n	801602a <rcl_expand_topic_name+0x11a>
 80160aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80160ac:	aa16      	add	r2, sp, #88	; 0x58
 80160ae:	6018      	str	r0, [r3, #0]
 80160b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80160b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80160b6:	ab14      	add	r3, sp, #80	; 0x50
 80160b8:	cb0c      	ldmia	r3, {r2, r3}
 80160ba:	4651      	mov	r1, sl
 80160bc:	4628      	mov	r0, r5
 80160be:	f7f5 fbc3 	bl	800b848 <rcutils_strndup>
 80160c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80160c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160c6:	4798      	blx	r3
 80160c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80160cc:	4658      	mov	r0, fp
 80160ce:	2469      	movs	r4, #105	; 0x69
 80160d0:	4798      	blx	r3
 80160d2:	e7d2      	b.n	801607a <rcl_expand_topic_name+0x16a>
 80160d4:	2800      	cmp	r0, #0
 80160d6:	d05b      	beq.n	8016190 <rcl_expand_topic_name+0x280>
 80160d8:	46c1      	mov	r9, r8
 80160da:	46a2      	mov	sl, r4
 80160dc:	e782      	b.n	8015fe4 <rcl_expand_topic_name+0xd4>
 80160de:	46b1      	mov	r9, r6
 80160e0:	e7a3      	b.n	801602a <rcl_expand_topic_name+0x11a>
 80160e2:	2800      	cmp	r0, #0
 80160e4:	d1f8      	bne.n	80160d8 <rcl_expand_topic_name+0x1c8>
 80160e6:	4638      	mov	r0, r7
 80160e8:	f7ea f87c 	bl	80001e4 <strlen>
 80160ec:	4a35      	ldr	r2, [pc, #212]	; (80161c4 <rcl_expand_topic_name+0x2b4>)
 80160ee:	4b36      	ldr	r3, [pc, #216]	; (80161c8 <rcl_expand_topic_name+0x2b8>)
 80160f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80160f4:	2801      	cmp	r0, #1
 80160f6:	bf18      	it	ne
 80160f8:	4613      	movne	r3, r2
 80160fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80160fe:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016102:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016104:	9703      	str	r7, [sp, #12]
 8016106:	9200      	str	r2, [sp, #0]
 8016108:	ab14      	add	r3, sp, #80	; 0x50
 801610a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801610c:	f7f5 fa60 	bl	800b5d0 <rcutils_format_string_limit>
 8016110:	4682      	mov	sl, r0
 8016112:	4653      	mov	r3, sl
 8016114:	b32b      	cbz	r3, 8016162 <rcl_expand_topic_name+0x252>
 8016116:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016118:	f8c3 a000 	str.w	sl, [r3]
 801611c:	e7ad      	b.n	801607a <rcl_expand_topic_name+0x16a>
 801611e:	f89a 3000 	ldrb.w	r3, [sl]
 8016122:	2b2f      	cmp	r3, #47	; 0x2f
 8016124:	d0f7      	beq.n	8016116 <rcl_expand_topic_name+0x206>
 8016126:	4638      	mov	r0, r7
 8016128:	f7ea f85c 	bl	80001e4 <strlen>
 801612c:	4a25      	ldr	r2, [pc, #148]	; (80161c4 <rcl_expand_topic_name+0x2b4>)
 801612e:	4b26      	ldr	r3, [pc, #152]	; (80161c8 <rcl_expand_topic_name+0x2b8>)
 8016130:	f8cd a010 	str.w	sl, [sp, #16]
 8016134:	2801      	cmp	r0, #1
 8016136:	bf18      	it	ne
 8016138:	4613      	movne	r3, r2
 801613a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801613e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016142:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016144:	9703      	str	r7, [sp, #12]
 8016146:	9200      	str	r2, [sp, #0]
 8016148:	ab14      	add	r3, sp, #80	; 0x50
 801614a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801614c:	f7f5 fa40 	bl	800b5d0 <rcutils_format_string_limit>
 8016150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016152:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016154:	4605      	mov	r5, r0
 8016156:	4650      	mov	r0, sl
 8016158:	4798      	blx	r3
 801615a:	46aa      	mov	sl, r5
 801615c:	e7d9      	b.n	8016112 <rcl_expand_topic_name+0x202>
 801615e:	24ca      	movs	r4, #202	; 0xca
 8016160:	e78b      	b.n	801607a <rcl_expand_topic_name+0x16a>
 8016162:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016164:	2300      	movs	r3, #0
 8016166:	6013      	str	r3, [r2, #0]
 8016168:	240a      	movs	r4, #10
 801616a:	e786      	b.n	801607a <rcl_expand_topic_name+0x16a>
 801616c:	465b      	mov	r3, fp
 801616e:	9c07      	ldr	r4, [sp, #28]
 8016170:	46da      	mov	sl, fp
 8016172:	2b00      	cmp	r3, #0
 8016174:	d1d3      	bne.n	801611e <rcl_expand_topic_name+0x20e>
 8016176:	f898 3000 	ldrb.w	r3, [r8]
 801617a:	2b2f      	cmp	r3, #47	; 0x2f
 801617c:	d0cb      	beq.n	8016116 <rcl_expand_topic_name+0x206>
 801617e:	e7b2      	b.n	80160e6 <rcl_expand_topic_name+0x1d6>
 8016180:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8016184:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016186:	6015      	str	r5, [r2, #0]
 8016188:	4658      	mov	r0, fp
 801618a:	4798      	blx	r3
 801618c:	240a      	movs	r4, #10
 801618e:	e774      	b.n	801607a <rcl_expand_topic_name+0x16a>
 8016190:	ab17      	add	r3, sp, #92	; 0x5c
 8016192:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016196:	e88d 0003 	stmia.w	sp, {r0, r1}
 801619a:	ab14      	add	r3, sp, #80	; 0x50
 801619c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801619e:	4640      	mov	r0, r8
 80161a0:	f7f5 fb30 	bl	800b804 <rcutils_strdup>
 80161a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80161a6:	2800      	cmp	r0, #0
 80161a8:	6018      	str	r0, [r3, #0]
 80161aa:	bf08      	it	eq
 80161ac:	240a      	moveq	r4, #10
 80161ae:	e764      	b.n	801607a <rcl_expand_topic_name+0x16a>
 80161b0:	08018834 	.word	0x08018834
 80161b4:	080182a0 	.word	0x080182a0
 80161b8:	0801883c 	.word	0x0801883c
 80161bc:	08018844 	.word	0x08018844
 80161c0:	0801884c 	.word	0x0801884c
 80161c4:	08017dc8 	.word	0x08017dc8
 80161c8:	08017dc0 	.word	0x08017dc0

080161cc <rcl_get_default_topic_name_substitutions>:
 80161cc:	2800      	cmp	r0, #0
 80161ce:	bf0c      	ite	eq
 80161d0:	200b      	moveq	r0, #11
 80161d2:	2000      	movne	r0, #0
 80161d4:	4770      	bx	lr
 80161d6:	bf00      	nop

080161d8 <rcl_validate_topic_name>:
 80161d8:	2800      	cmp	r0, #0
 80161da:	d07a      	beq.n	80162d2 <rcl_validate_topic_name+0xfa>
 80161dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161e0:	460e      	mov	r6, r1
 80161e2:	2900      	cmp	r1, #0
 80161e4:	d07c      	beq.n	80162e0 <rcl_validate_topic_name+0x108>
 80161e6:	4617      	mov	r7, r2
 80161e8:	4605      	mov	r5, r0
 80161ea:	f7e9 fffb 	bl	80001e4 <strlen>
 80161ee:	b1b0      	cbz	r0, 801621e <rcl_validate_topic_name+0x46>
 80161f0:	f895 9000 	ldrb.w	r9, [r5]
 80161f4:	f8df c180 	ldr.w	ip, [pc, #384]	; 8016378 <rcl_validate_topic_name+0x1a0>
 80161f8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80161fc:	f013 0304 	ands.w	r3, r3, #4
 8016200:	d169      	bne.n	80162d6 <rcl_validate_topic_name+0xfe>
 8016202:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8016206:	f815 2008 	ldrb.w	r2, [r5, r8]
 801620a:	2a2f      	cmp	r2, #47	; 0x2f
 801620c:	d10e      	bne.n	801622c <rcl_validate_topic_name+0x54>
 801620e:	2202      	movs	r2, #2
 8016210:	6032      	str	r2, [r6, #0]
 8016212:	b36f      	cbz	r7, 8016270 <rcl_validate_topic_name+0x98>
 8016214:	f8c7 8000 	str.w	r8, [r7]
 8016218:	4618      	mov	r0, r3
 801621a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801621e:	2301      	movs	r3, #1
 8016220:	6033      	str	r3, [r6, #0]
 8016222:	b32f      	cbz	r7, 8016270 <rcl_validate_topic_name+0x98>
 8016224:	2000      	movs	r0, #0
 8016226:	6038      	str	r0, [r7, #0]
 8016228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801622c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8016230:	461c      	mov	r4, r3
 8016232:	4619      	mov	r1, r3
 8016234:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016238:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801623c:	f1be 0f09 	cmp.w	lr, #9
 8016240:	d919      	bls.n	8016276 <rcl_validate_topic_name+0x9e>
 8016242:	f022 0e20 	bic.w	lr, r2, #32
 8016246:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 801624a:	f1be 0f19 	cmp.w	lr, #25
 801624e:	d912      	bls.n	8016276 <rcl_validate_topic_name+0x9e>
 8016250:	2a5f      	cmp	r2, #95	; 0x5f
 8016252:	d019      	beq.n	8016288 <rcl_validate_topic_name+0xb0>
 8016254:	2a2f      	cmp	r2, #47	; 0x2f
 8016256:	d051      	beq.n	80162fc <rcl_validate_topic_name+0x124>
 8016258:	2a7e      	cmp	r2, #126	; 0x7e
 801625a:	d048      	beq.n	80162ee <rcl_validate_topic_name+0x116>
 801625c:	2a7b      	cmp	r2, #123	; 0x7b
 801625e:	d054      	beq.n	801630a <rcl_validate_topic_name+0x132>
 8016260:	2a7d      	cmp	r2, #125	; 0x7d
 8016262:	d161      	bne.n	8016328 <rcl_validate_topic_name+0x150>
 8016264:	2c00      	cmp	r4, #0
 8016266:	d155      	bne.n	8016314 <rcl_validate_topic_name+0x13c>
 8016268:	2305      	movs	r3, #5
 801626a:	6033      	str	r3, [r6, #0]
 801626c:	b107      	cbz	r7, 8016270 <rcl_validate_topic_name+0x98>
 801626e:	6039      	str	r1, [r7, #0]
 8016270:	2000      	movs	r0, #0
 8016272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016276:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801627a:	0752      	lsls	r2, r2, #29
 801627c:	d504      	bpl.n	8016288 <rcl_validate_topic_name+0xb0>
 801627e:	b11c      	cbz	r4, 8016288 <rcl_validate_topic_name+0xb0>
 8016280:	b111      	cbz	r1, 8016288 <rcl_validate_topic_name+0xb0>
 8016282:	1e4a      	subs	r2, r1, #1
 8016284:	429a      	cmp	r2, r3
 8016286:	d02d      	beq.n	80162e4 <rcl_validate_topic_name+0x10c>
 8016288:	3101      	adds	r1, #1
 801628a:	4288      	cmp	r0, r1
 801628c:	d1d2      	bne.n	8016234 <rcl_validate_topic_name+0x5c>
 801628e:	2c00      	cmp	r4, #0
 8016290:	d145      	bne.n	801631e <rcl_validate_topic_name+0x146>
 8016292:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8016296:	d04f      	beq.n	8016338 <rcl_validate_topic_name+0x160>
 8016298:	4620      	mov	r0, r4
 801629a:	2301      	movs	r3, #1
 801629c:	e006      	b.n	80162ac <rcl_validate_topic_name+0xd4>
 801629e:	428b      	cmp	r3, r1
 80162a0:	f105 0501 	add.w	r5, r5, #1
 80162a4:	f103 0201 	add.w	r2, r3, #1
 80162a8:	d236      	bcs.n	8016318 <rcl_validate_topic_name+0x140>
 80162aa:	4613      	mov	r3, r2
 80162ac:	4580      	cmp	r8, r0
 80162ae:	f100 0001 	add.w	r0, r0, #1
 80162b2:	d0f4      	beq.n	801629e <rcl_validate_topic_name+0xc6>
 80162b4:	782a      	ldrb	r2, [r5, #0]
 80162b6:	2a2f      	cmp	r2, #47	; 0x2f
 80162b8:	d1f1      	bne.n	801629e <rcl_validate_topic_name+0xc6>
 80162ba:	786a      	ldrb	r2, [r5, #1]
 80162bc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80162c0:	0754      	lsls	r4, r2, #29
 80162c2:	d5ec      	bpl.n	801629e <rcl_validate_topic_name+0xc6>
 80162c4:	2204      	movs	r2, #4
 80162c6:	6032      	str	r2, [r6, #0]
 80162c8:	2f00      	cmp	r7, #0
 80162ca:	d0d1      	beq.n	8016270 <rcl_validate_topic_name+0x98>
 80162cc:	603b      	str	r3, [r7, #0]
 80162ce:	2000      	movs	r0, #0
 80162d0:	e7aa      	b.n	8016228 <rcl_validate_topic_name+0x50>
 80162d2:	200b      	movs	r0, #11
 80162d4:	4770      	bx	lr
 80162d6:	2304      	movs	r3, #4
 80162d8:	6033      	str	r3, [r6, #0]
 80162da:	2f00      	cmp	r7, #0
 80162dc:	d1a2      	bne.n	8016224 <rcl_validate_topic_name+0x4c>
 80162de:	e7c7      	b.n	8016270 <rcl_validate_topic_name+0x98>
 80162e0:	200b      	movs	r0, #11
 80162e2:	e7a1      	b.n	8016228 <rcl_validate_topic_name+0x50>
 80162e4:	2309      	movs	r3, #9
 80162e6:	6033      	str	r3, [r6, #0]
 80162e8:	2f00      	cmp	r7, #0
 80162ea:	d1c0      	bne.n	801626e <rcl_validate_topic_name+0x96>
 80162ec:	e7c0      	b.n	8016270 <rcl_validate_topic_name+0x98>
 80162ee:	2900      	cmp	r1, #0
 80162f0:	d0ca      	beq.n	8016288 <rcl_validate_topic_name+0xb0>
 80162f2:	2306      	movs	r3, #6
 80162f4:	6033      	str	r3, [r6, #0]
 80162f6:	2f00      	cmp	r7, #0
 80162f8:	d1b9      	bne.n	801626e <rcl_validate_topic_name+0x96>
 80162fa:	e7b9      	b.n	8016270 <rcl_validate_topic_name+0x98>
 80162fc:	2c00      	cmp	r4, #0
 80162fe:	d0c3      	beq.n	8016288 <rcl_validate_topic_name+0xb0>
 8016300:	2308      	movs	r3, #8
 8016302:	6033      	str	r3, [r6, #0]
 8016304:	2f00      	cmp	r7, #0
 8016306:	d1b2      	bne.n	801626e <rcl_validate_topic_name+0x96>
 8016308:	e7b2      	b.n	8016270 <rcl_validate_topic_name+0x98>
 801630a:	2c00      	cmp	r4, #0
 801630c:	d1f8      	bne.n	8016300 <rcl_validate_topic_name+0x128>
 801630e:	460b      	mov	r3, r1
 8016310:	2401      	movs	r4, #1
 8016312:	e7b9      	b.n	8016288 <rcl_validate_topic_name+0xb0>
 8016314:	2400      	movs	r4, #0
 8016316:	e7b7      	b.n	8016288 <rcl_validate_topic_name+0xb0>
 8016318:	2000      	movs	r0, #0
 801631a:	6030      	str	r0, [r6, #0]
 801631c:	e784      	b.n	8016228 <rcl_validate_topic_name+0x50>
 801631e:	2205      	movs	r2, #5
 8016320:	6032      	str	r2, [r6, #0]
 8016322:	2f00      	cmp	r7, #0
 8016324:	d1d2      	bne.n	80162cc <rcl_validate_topic_name+0xf4>
 8016326:	e7a3      	b.n	8016270 <rcl_validate_topic_name+0x98>
 8016328:	2c00      	cmp	r4, #0
 801632a:	bf14      	ite	ne
 801632c:	2308      	movne	r3, #8
 801632e:	2303      	moveq	r3, #3
 8016330:	6033      	str	r3, [r6, #0]
 8016332:	2f00      	cmp	r7, #0
 8016334:	d19b      	bne.n	801626e <rcl_validate_topic_name+0x96>
 8016336:	e79b      	b.n	8016270 <rcl_validate_topic_name+0x98>
 8016338:	2301      	movs	r3, #1
 801633a:	e00a      	b.n	8016352 <rcl_validate_topic_name+0x17a>
 801633c:	2c01      	cmp	r4, #1
 801633e:	d013      	beq.n	8016368 <rcl_validate_topic_name+0x190>
 8016340:	4299      	cmp	r1, r3
 8016342:	f104 0401 	add.w	r4, r4, #1
 8016346:	f105 0501 	add.w	r5, r5, #1
 801634a:	f103 0201 	add.w	r2, r3, #1
 801634e:	d9e3      	bls.n	8016318 <rcl_validate_topic_name+0x140>
 8016350:	4613      	mov	r3, r2
 8016352:	45a0      	cmp	r8, r4
 8016354:	d0f4      	beq.n	8016340 <rcl_validate_topic_name+0x168>
 8016356:	782a      	ldrb	r2, [r5, #0]
 8016358:	2a2f      	cmp	r2, #47	; 0x2f
 801635a:	d1ef      	bne.n	801633c <rcl_validate_topic_name+0x164>
 801635c:	786a      	ldrb	r2, [r5, #1]
 801635e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016362:	0752      	lsls	r2, r2, #29
 8016364:	d5ec      	bpl.n	8016340 <rcl_validate_topic_name+0x168>
 8016366:	e7ad      	b.n	80162c4 <rcl_validate_topic_name+0xec>
 8016368:	2307      	movs	r3, #7
 801636a:	6033      	str	r3, [r6, #0]
 801636c:	2f00      	cmp	r7, #0
 801636e:	f43f af7f 	beq.w	8016270 <rcl_validate_topic_name+0x98>
 8016372:	603c      	str	r4, [r7, #0]
 8016374:	2000      	movs	r0, #0
 8016376:	e757      	b.n	8016228 <rcl_validate_topic_name+0x50>
 8016378:	080188c8 	.word	0x080188c8

0801637c <on_status>:
 801637c:	b082      	sub	sp, #8
 801637e:	b002      	add	sp, #8
 8016380:	4770      	bx	lr
 8016382:	bf00      	nop

08016384 <on_topic>:
 8016384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016388:	4a22      	ldr	r2, [pc, #136]	; (8016414 <on_topic+0x90>)
 801638a:	b094      	sub	sp, #80	; 0x50
 801638c:	6812      	ldr	r2, [r2, #0]
 801638e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016390:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8016394:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8016398:	b3c2      	cbz	r2, 801640c <on_topic+0x88>
 801639a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801639e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80163a2:	e001      	b.n	80163a8 <on_topic+0x24>
 80163a4:	6852      	ldr	r2, [r2, #4]
 80163a6:	b38a      	cbz	r2, 801640c <on_topic+0x88>
 80163a8:	6894      	ldr	r4, [r2, #8]
 80163aa:	8aa3      	ldrh	r3, [r4, #20]
 80163ac:	428b      	cmp	r3, r1
 80163ae:	d1f9      	bne.n	80163a4 <on_topic+0x20>
 80163b0:	7da3      	ldrb	r3, [r4, #22]
 80163b2:	4283      	cmp	r3, r0
 80163b4:	d1f6      	bne.n	80163a4 <on_topic+0x20>
 80163b6:	2248      	movs	r2, #72	; 0x48
 80163b8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80163bc:	4668      	mov	r0, sp
 80163be:	f000 fd6b 	bl	8016e98 <memcpy>
 80163c2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80163c6:	cb0c      	ldmia	r3, {r2, r3}
 80163c8:	4620      	mov	r0, r4
 80163ca:	f7f6 f8cb 	bl	800c564 <rmw_uxrce_get_static_input_buffer_for_entity>
 80163ce:	4607      	mov	r7, r0
 80163d0:	b1e0      	cbz	r0, 801640c <on_topic+0x88>
 80163d2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80163d6:	4632      	mov	r2, r6
 80163d8:	4628      	mov	r0, r5
 80163da:	f108 0110 	add.w	r1, r8, #16
 80163de:	f7fe f9d3 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 80163e2:	b930      	cbnz	r0, 80163f2 <on_topic+0x6e>
 80163e4:	480c      	ldr	r0, [pc, #48]	; (8016418 <on_topic+0x94>)
 80163e6:	4639      	mov	r1, r7
 80163e8:	b014      	add	sp, #80	; 0x50
 80163ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163ee:	f7fd ba05 	b.w	80137fc <put_memory>
 80163f2:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80163f6:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 80163fa:	f7fe f8bb 	bl	8014574 <rmw_uros_epoch_nanos>
 80163fe:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8016402:	2305      	movs	r3, #5
 8016404:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016408:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801640c:	b014      	add	sp, #80	; 0x50
 801640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016412:	bf00      	nop
 8016414:	2000ddbc 	.word	0x2000ddbc
 8016418:	2000ddac 	.word	0x2000ddac

0801641c <on_request>:
 801641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016420:	4823      	ldr	r0, [pc, #140]	; (80164b0 <on_request+0x94>)
 8016422:	b094      	sub	sp, #80	; 0x50
 8016424:	6800      	ldr	r0, [r0, #0]
 8016426:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8016428:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801642c:	9113      	str	r1, [sp, #76]	; 0x4c
 801642e:	2800      	cmp	r0, #0
 8016430:	d03b      	beq.n	80164aa <on_request+0x8e>
 8016432:	461d      	mov	r5, r3
 8016434:	e001      	b.n	801643a <on_request+0x1e>
 8016436:	6840      	ldr	r0, [r0, #4]
 8016438:	b3b8      	cbz	r0, 80164aa <on_request+0x8e>
 801643a:	6884      	ldr	r4, [r0, #8]
 801643c:	8b21      	ldrh	r1, [r4, #24]
 801643e:	4291      	cmp	r1, r2
 8016440:	d1f9      	bne.n	8016436 <on_request+0x1a>
 8016442:	2248      	movs	r2, #72	; 0x48
 8016444:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016448:	4668      	mov	r0, sp
 801644a:	f000 fd25 	bl	8016e98 <memcpy>
 801644e:	f104 0320 	add.w	r3, r4, #32
 8016452:	cb0c      	ldmia	r3, {r2, r3}
 8016454:	4620      	mov	r0, r4
 8016456:	f7f6 f885 	bl	800c564 <rmw_uxrce_get_static_input_buffer_for_entity>
 801645a:	4680      	mov	r8, r0
 801645c:	b328      	cbz	r0, 80164aa <on_request+0x8e>
 801645e:	4638      	mov	r0, r7
 8016460:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016464:	4632      	mov	r2, r6
 8016466:	f107 0110 	add.w	r1, r7, #16
 801646a:	f7fe f98d 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 801646e:	b930      	cbnz	r0, 801647e <on_request+0x62>
 8016470:	4810      	ldr	r0, [pc, #64]	; (80164b4 <on_request+0x98>)
 8016472:	4641      	mov	r1, r8
 8016474:	b014      	add	sp, #80	; 0x50
 8016476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801647a:	f7fd b9bf 	b.w	80137fc <put_memory>
 801647e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016480:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8016484:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8016488:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801648c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016490:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016494:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016498:	f7fe f86c 	bl	8014574 <rmw_uros_epoch_nanos>
 801649c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80164a0:	2303      	movs	r3, #3
 80164a2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80164a6:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80164aa:	b014      	add	sp, #80	; 0x50
 80164ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164b0:	2000dd8c 	.word	0x2000dd8c
 80164b4:	2000ddac 	.word	0x2000ddac

080164b8 <on_reply>:
 80164b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164bc:	4821      	ldr	r0, [pc, #132]	; (8016544 <on_reply+0x8c>)
 80164be:	b094      	sub	sp, #80	; 0x50
 80164c0:	6800      	ldr	r0, [r0, #0]
 80164c2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80164c4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80164c8:	9113      	str	r1, [sp, #76]	; 0x4c
 80164ca:	b3b8      	cbz	r0, 801653c <on_reply+0x84>
 80164cc:	461d      	mov	r5, r3
 80164ce:	e001      	b.n	80164d4 <on_reply+0x1c>
 80164d0:	6840      	ldr	r0, [r0, #4]
 80164d2:	b398      	cbz	r0, 801653c <on_reply+0x84>
 80164d4:	6884      	ldr	r4, [r0, #8]
 80164d6:	8b21      	ldrh	r1, [r4, #24]
 80164d8:	4291      	cmp	r1, r2
 80164da:	d1f9      	bne.n	80164d0 <on_reply+0x18>
 80164dc:	2248      	movs	r2, #72	; 0x48
 80164de:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80164e2:	4668      	mov	r0, sp
 80164e4:	f000 fcd8 	bl	8016e98 <memcpy>
 80164e8:	f104 0320 	add.w	r3, r4, #32
 80164ec:	cb0c      	ldmia	r3, {r2, r3}
 80164ee:	4620      	mov	r0, r4
 80164f0:	f7f6 f838 	bl	800c564 <rmw_uxrce_get_static_input_buffer_for_entity>
 80164f4:	4680      	mov	r8, r0
 80164f6:	b308      	cbz	r0, 801653c <on_reply+0x84>
 80164f8:	4638      	mov	r0, r7
 80164fa:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80164fe:	4632      	mov	r2, r6
 8016500:	f107 0110 	add.w	r1, r7, #16
 8016504:	f7fe f940 	bl	8014788 <ucdr_deserialize_array_uint8_t>
 8016508:	b930      	cbnz	r0, 8016518 <on_reply+0x60>
 801650a:	480f      	ldr	r0, [pc, #60]	; (8016548 <on_reply+0x90>)
 801650c:	4641      	mov	r1, r8
 801650e:	b014      	add	sp, #80	; 0x50
 8016510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016514:	f7fd b972 	b.w	80137fc <put_memory>
 8016518:	2200      	movs	r2, #0
 801651a:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801651e:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8016522:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8016526:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 801652a:	f7fe f823 	bl	8014574 <rmw_uros_epoch_nanos>
 801652e:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8016532:	2304      	movs	r3, #4
 8016534:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016538:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801653c:	b014      	add	sp, #80	; 0x50
 801653e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016542:	bf00      	nop
 8016544:	2000949c 	.word	0x2000949c
 8016548:	2000ddac 	.word	0x2000ddac

0801654c <calloc>:
 801654c:	4b02      	ldr	r3, [pc, #8]	; (8016558 <calloc+0xc>)
 801654e:	460a      	mov	r2, r1
 8016550:	4601      	mov	r1, r0
 8016552:	6818      	ldr	r0, [r3, #0]
 8016554:	f000 b802 	b.w	801655c <_calloc_r>
 8016558:	2000010c 	.word	0x2000010c

0801655c <_calloc_r>:
 801655c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801655e:	fba1 2402 	umull	r2, r4, r1, r2
 8016562:	b94c      	cbnz	r4, 8016578 <_calloc_r+0x1c>
 8016564:	4611      	mov	r1, r2
 8016566:	9201      	str	r2, [sp, #4]
 8016568:	f000 f886 	bl	8016678 <_malloc_r>
 801656c:	9a01      	ldr	r2, [sp, #4]
 801656e:	4605      	mov	r5, r0
 8016570:	b930      	cbnz	r0, 8016580 <_calloc_r+0x24>
 8016572:	4628      	mov	r0, r5
 8016574:	b003      	add	sp, #12
 8016576:	bd30      	pop	{r4, r5, pc}
 8016578:	220c      	movs	r2, #12
 801657a:	6002      	str	r2, [r0, #0]
 801657c:	2500      	movs	r5, #0
 801657e:	e7f8      	b.n	8016572 <_calloc_r+0x16>
 8016580:	4621      	mov	r1, r4
 8016582:	f000 fbc1 	bl	8016d08 <memset>
 8016586:	e7f4      	b.n	8016572 <_calloc_r+0x16>

08016588 <getenv>:
 8016588:	b507      	push	{r0, r1, r2, lr}
 801658a:	4b04      	ldr	r3, [pc, #16]	; (801659c <getenv+0x14>)
 801658c:	4601      	mov	r1, r0
 801658e:	aa01      	add	r2, sp, #4
 8016590:	6818      	ldr	r0, [r3, #0]
 8016592:	f000 f805 	bl	80165a0 <_findenv_r>
 8016596:	b003      	add	sp, #12
 8016598:	f85d fb04 	ldr.w	pc, [sp], #4
 801659c:	2000010c 	.word	0x2000010c

080165a0 <_findenv_r>:
 80165a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8016614 <_findenv_r+0x74>
 80165a8:	4607      	mov	r7, r0
 80165aa:	4689      	mov	r9, r1
 80165ac:	4616      	mov	r6, r2
 80165ae:	f000 fc9f 	bl	8016ef0 <__env_lock>
 80165b2:	f8da 4000 	ldr.w	r4, [sl]
 80165b6:	b134      	cbz	r4, 80165c6 <_findenv_r+0x26>
 80165b8:	464b      	mov	r3, r9
 80165ba:	4698      	mov	r8, r3
 80165bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165c0:	b13a      	cbz	r2, 80165d2 <_findenv_r+0x32>
 80165c2:	2a3d      	cmp	r2, #61	; 0x3d
 80165c4:	d1f9      	bne.n	80165ba <_findenv_r+0x1a>
 80165c6:	4638      	mov	r0, r7
 80165c8:	f000 fc98 	bl	8016efc <__env_unlock>
 80165cc:	2000      	movs	r0, #0
 80165ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165d2:	eba8 0809 	sub.w	r8, r8, r9
 80165d6:	46a3      	mov	fp, r4
 80165d8:	f854 0b04 	ldr.w	r0, [r4], #4
 80165dc:	2800      	cmp	r0, #0
 80165de:	d0f2      	beq.n	80165c6 <_findenv_r+0x26>
 80165e0:	4642      	mov	r2, r8
 80165e2:	4649      	mov	r1, r9
 80165e4:	f000 fba5 	bl	8016d32 <strncmp>
 80165e8:	2800      	cmp	r0, #0
 80165ea:	d1f4      	bne.n	80165d6 <_findenv_r+0x36>
 80165ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80165f0:	eb03 0508 	add.w	r5, r3, r8
 80165f4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80165f8:	2b3d      	cmp	r3, #61	; 0x3d
 80165fa:	d1ec      	bne.n	80165d6 <_findenv_r+0x36>
 80165fc:	f8da 3000 	ldr.w	r3, [sl]
 8016600:	ebab 0303 	sub.w	r3, fp, r3
 8016604:	109b      	asrs	r3, r3, #2
 8016606:	4638      	mov	r0, r7
 8016608:	6033      	str	r3, [r6, #0]
 801660a:	f000 fc77 	bl	8016efc <__env_unlock>
 801660e:	1c68      	adds	r0, r5, #1
 8016610:	e7dd      	b.n	80165ce <_findenv_r+0x2e>
 8016612:	bf00      	nop
 8016614:	20000000 	.word	0x20000000

08016618 <malloc>:
 8016618:	4b02      	ldr	r3, [pc, #8]	; (8016624 <malloc+0xc>)
 801661a:	4601      	mov	r1, r0
 801661c:	6818      	ldr	r0, [r3, #0]
 801661e:	f000 b82b 	b.w	8016678 <_malloc_r>
 8016622:	bf00      	nop
 8016624:	2000010c 	.word	0x2000010c

08016628 <free>:
 8016628:	4b02      	ldr	r3, [pc, #8]	; (8016634 <free+0xc>)
 801662a:	4601      	mov	r1, r0
 801662c:	6818      	ldr	r0, [r3, #0]
 801662e:	f000 bc6b 	b.w	8016f08 <_free_r>
 8016632:	bf00      	nop
 8016634:	2000010c 	.word	0x2000010c

08016638 <sbrk_aligned>:
 8016638:	b570      	push	{r4, r5, r6, lr}
 801663a:	4e0e      	ldr	r6, [pc, #56]	; (8016674 <sbrk_aligned+0x3c>)
 801663c:	460c      	mov	r4, r1
 801663e:	6831      	ldr	r1, [r6, #0]
 8016640:	4605      	mov	r5, r0
 8016642:	b911      	cbnz	r1, 801664a <sbrk_aligned+0x12>
 8016644:	f000 fbd2 	bl	8016dec <_sbrk_r>
 8016648:	6030      	str	r0, [r6, #0]
 801664a:	4621      	mov	r1, r4
 801664c:	4628      	mov	r0, r5
 801664e:	f000 fbcd 	bl	8016dec <_sbrk_r>
 8016652:	1c43      	adds	r3, r0, #1
 8016654:	d00a      	beq.n	801666c <sbrk_aligned+0x34>
 8016656:	1cc4      	adds	r4, r0, #3
 8016658:	f024 0403 	bic.w	r4, r4, #3
 801665c:	42a0      	cmp	r0, r4
 801665e:	d007      	beq.n	8016670 <sbrk_aligned+0x38>
 8016660:	1a21      	subs	r1, r4, r0
 8016662:	4628      	mov	r0, r5
 8016664:	f000 fbc2 	bl	8016dec <_sbrk_r>
 8016668:	3001      	adds	r0, #1
 801666a:	d101      	bne.n	8016670 <sbrk_aligned+0x38>
 801666c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016670:	4620      	mov	r0, r4
 8016672:	bd70      	pop	{r4, r5, r6, pc}
 8016674:	2000dec8 	.word	0x2000dec8

08016678 <_malloc_r>:
 8016678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801667c:	1ccd      	adds	r5, r1, #3
 801667e:	f025 0503 	bic.w	r5, r5, #3
 8016682:	3508      	adds	r5, #8
 8016684:	2d0c      	cmp	r5, #12
 8016686:	bf38      	it	cc
 8016688:	250c      	movcc	r5, #12
 801668a:	2d00      	cmp	r5, #0
 801668c:	4607      	mov	r7, r0
 801668e:	db01      	blt.n	8016694 <_malloc_r+0x1c>
 8016690:	42a9      	cmp	r1, r5
 8016692:	d905      	bls.n	80166a0 <_malloc_r+0x28>
 8016694:	230c      	movs	r3, #12
 8016696:	603b      	str	r3, [r7, #0]
 8016698:	2600      	movs	r6, #0
 801669a:	4630      	mov	r0, r6
 801669c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016774 <_malloc_r+0xfc>
 80166a4:	f000 f868 	bl	8016778 <__malloc_lock>
 80166a8:	f8d8 3000 	ldr.w	r3, [r8]
 80166ac:	461c      	mov	r4, r3
 80166ae:	bb5c      	cbnz	r4, 8016708 <_malloc_r+0x90>
 80166b0:	4629      	mov	r1, r5
 80166b2:	4638      	mov	r0, r7
 80166b4:	f7ff ffc0 	bl	8016638 <sbrk_aligned>
 80166b8:	1c43      	adds	r3, r0, #1
 80166ba:	4604      	mov	r4, r0
 80166bc:	d155      	bne.n	801676a <_malloc_r+0xf2>
 80166be:	f8d8 4000 	ldr.w	r4, [r8]
 80166c2:	4626      	mov	r6, r4
 80166c4:	2e00      	cmp	r6, #0
 80166c6:	d145      	bne.n	8016754 <_malloc_r+0xdc>
 80166c8:	2c00      	cmp	r4, #0
 80166ca:	d048      	beq.n	801675e <_malloc_r+0xe6>
 80166cc:	6823      	ldr	r3, [r4, #0]
 80166ce:	4631      	mov	r1, r6
 80166d0:	4638      	mov	r0, r7
 80166d2:	eb04 0903 	add.w	r9, r4, r3
 80166d6:	f000 fb89 	bl	8016dec <_sbrk_r>
 80166da:	4581      	cmp	r9, r0
 80166dc:	d13f      	bne.n	801675e <_malloc_r+0xe6>
 80166de:	6821      	ldr	r1, [r4, #0]
 80166e0:	1a6d      	subs	r5, r5, r1
 80166e2:	4629      	mov	r1, r5
 80166e4:	4638      	mov	r0, r7
 80166e6:	f7ff ffa7 	bl	8016638 <sbrk_aligned>
 80166ea:	3001      	adds	r0, #1
 80166ec:	d037      	beq.n	801675e <_malloc_r+0xe6>
 80166ee:	6823      	ldr	r3, [r4, #0]
 80166f0:	442b      	add	r3, r5
 80166f2:	6023      	str	r3, [r4, #0]
 80166f4:	f8d8 3000 	ldr.w	r3, [r8]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d038      	beq.n	801676e <_malloc_r+0xf6>
 80166fc:	685a      	ldr	r2, [r3, #4]
 80166fe:	42a2      	cmp	r2, r4
 8016700:	d12b      	bne.n	801675a <_malloc_r+0xe2>
 8016702:	2200      	movs	r2, #0
 8016704:	605a      	str	r2, [r3, #4]
 8016706:	e00f      	b.n	8016728 <_malloc_r+0xb0>
 8016708:	6822      	ldr	r2, [r4, #0]
 801670a:	1b52      	subs	r2, r2, r5
 801670c:	d41f      	bmi.n	801674e <_malloc_r+0xd6>
 801670e:	2a0b      	cmp	r2, #11
 8016710:	d917      	bls.n	8016742 <_malloc_r+0xca>
 8016712:	1961      	adds	r1, r4, r5
 8016714:	42a3      	cmp	r3, r4
 8016716:	6025      	str	r5, [r4, #0]
 8016718:	bf18      	it	ne
 801671a:	6059      	strne	r1, [r3, #4]
 801671c:	6863      	ldr	r3, [r4, #4]
 801671e:	bf08      	it	eq
 8016720:	f8c8 1000 	streq.w	r1, [r8]
 8016724:	5162      	str	r2, [r4, r5]
 8016726:	604b      	str	r3, [r1, #4]
 8016728:	4638      	mov	r0, r7
 801672a:	f104 060b 	add.w	r6, r4, #11
 801672e:	f000 f829 	bl	8016784 <__malloc_unlock>
 8016732:	f026 0607 	bic.w	r6, r6, #7
 8016736:	1d23      	adds	r3, r4, #4
 8016738:	1af2      	subs	r2, r6, r3
 801673a:	d0ae      	beq.n	801669a <_malloc_r+0x22>
 801673c:	1b9b      	subs	r3, r3, r6
 801673e:	50a3      	str	r3, [r4, r2]
 8016740:	e7ab      	b.n	801669a <_malloc_r+0x22>
 8016742:	42a3      	cmp	r3, r4
 8016744:	6862      	ldr	r2, [r4, #4]
 8016746:	d1dd      	bne.n	8016704 <_malloc_r+0x8c>
 8016748:	f8c8 2000 	str.w	r2, [r8]
 801674c:	e7ec      	b.n	8016728 <_malloc_r+0xb0>
 801674e:	4623      	mov	r3, r4
 8016750:	6864      	ldr	r4, [r4, #4]
 8016752:	e7ac      	b.n	80166ae <_malloc_r+0x36>
 8016754:	4634      	mov	r4, r6
 8016756:	6876      	ldr	r6, [r6, #4]
 8016758:	e7b4      	b.n	80166c4 <_malloc_r+0x4c>
 801675a:	4613      	mov	r3, r2
 801675c:	e7cc      	b.n	80166f8 <_malloc_r+0x80>
 801675e:	230c      	movs	r3, #12
 8016760:	603b      	str	r3, [r7, #0]
 8016762:	4638      	mov	r0, r7
 8016764:	f000 f80e 	bl	8016784 <__malloc_unlock>
 8016768:	e797      	b.n	801669a <_malloc_r+0x22>
 801676a:	6025      	str	r5, [r4, #0]
 801676c:	e7dc      	b.n	8016728 <_malloc_r+0xb0>
 801676e:	605b      	str	r3, [r3, #4]
 8016770:	deff      	udf	#255	; 0xff
 8016772:	bf00      	nop
 8016774:	2000dec4 	.word	0x2000dec4

08016778 <__malloc_lock>:
 8016778:	4801      	ldr	r0, [pc, #4]	; (8016780 <__malloc_lock+0x8>)
 801677a:	f000 bb83 	b.w	8016e84 <__retarget_lock_acquire_recursive>
 801677e:	bf00      	nop
 8016780:	2000e00d 	.word	0x2000e00d

08016784 <__malloc_unlock>:
 8016784:	4801      	ldr	r0, [pc, #4]	; (801678c <__malloc_unlock+0x8>)
 8016786:	f000 bb7e 	b.w	8016e86 <__retarget_lock_release_recursive>
 801678a:	bf00      	nop
 801678c:	2000e00d 	.word	0x2000e00d

08016790 <srand>:
 8016790:	b538      	push	{r3, r4, r5, lr}
 8016792:	4b10      	ldr	r3, [pc, #64]	; (80167d4 <srand+0x44>)
 8016794:	681d      	ldr	r5, [r3, #0]
 8016796:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016798:	4604      	mov	r4, r0
 801679a:	b9b3      	cbnz	r3, 80167ca <srand+0x3a>
 801679c:	2018      	movs	r0, #24
 801679e:	f7ff ff3b 	bl	8016618 <malloc>
 80167a2:	4602      	mov	r2, r0
 80167a4:	6328      	str	r0, [r5, #48]	; 0x30
 80167a6:	b920      	cbnz	r0, 80167b2 <srand+0x22>
 80167a8:	4b0b      	ldr	r3, [pc, #44]	; (80167d8 <srand+0x48>)
 80167aa:	480c      	ldr	r0, [pc, #48]	; (80167dc <srand+0x4c>)
 80167ac:	2146      	movs	r1, #70	; 0x46
 80167ae:	f000 fb81 	bl	8016eb4 <__assert_func>
 80167b2:	490b      	ldr	r1, [pc, #44]	; (80167e0 <srand+0x50>)
 80167b4:	4b0b      	ldr	r3, [pc, #44]	; (80167e4 <srand+0x54>)
 80167b6:	e9c0 1300 	strd	r1, r3, [r0]
 80167ba:	4b0b      	ldr	r3, [pc, #44]	; (80167e8 <srand+0x58>)
 80167bc:	6083      	str	r3, [r0, #8]
 80167be:	230b      	movs	r3, #11
 80167c0:	8183      	strh	r3, [r0, #12]
 80167c2:	2100      	movs	r1, #0
 80167c4:	2001      	movs	r0, #1
 80167c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80167ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80167cc:	2200      	movs	r2, #0
 80167ce:	611c      	str	r4, [r3, #16]
 80167d0:	615a      	str	r2, [r3, #20]
 80167d2:	bd38      	pop	{r3, r4, r5, pc}
 80167d4:	2000010c 	.word	0x2000010c
 80167d8:	08018858 	.word	0x08018858
 80167dc:	0801886f 	.word	0x0801886f
 80167e0:	abcd330e 	.word	0xabcd330e
 80167e4:	e66d1234 	.word	0xe66d1234
 80167e8:	0005deec 	.word	0x0005deec

080167ec <rand>:
 80167ec:	4b16      	ldr	r3, [pc, #88]	; (8016848 <rand+0x5c>)
 80167ee:	b510      	push	{r4, lr}
 80167f0:	681c      	ldr	r4, [r3, #0]
 80167f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80167f4:	b9b3      	cbnz	r3, 8016824 <rand+0x38>
 80167f6:	2018      	movs	r0, #24
 80167f8:	f7ff ff0e 	bl	8016618 <malloc>
 80167fc:	4602      	mov	r2, r0
 80167fe:	6320      	str	r0, [r4, #48]	; 0x30
 8016800:	b920      	cbnz	r0, 801680c <rand+0x20>
 8016802:	4b12      	ldr	r3, [pc, #72]	; (801684c <rand+0x60>)
 8016804:	4812      	ldr	r0, [pc, #72]	; (8016850 <rand+0x64>)
 8016806:	2152      	movs	r1, #82	; 0x52
 8016808:	f000 fb54 	bl	8016eb4 <__assert_func>
 801680c:	4911      	ldr	r1, [pc, #68]	; (8016854 <rand+0x68>)
 801680e:	4b12      	ldr	r3, [pc, #72]	; (8016858 <rand+0x6c>)
 8016810:	e9c0 1300 	strd	r1, r3, [r0]
 8016814:	4b11      	ldr	r3, [pc, #68]	; (801685c <rand+0x70>)
 8016816:	6083      	str	r3, [r0, #8]
 8016818:	230b      	movs	r3, #11
 801681a:	8183      	strh	r3, [r0, #12]
 801681c:	2100      	movs	r1, #0
 801681e:	2001      	movs	r0, #1
 8016820:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016824:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016826:	480e      	ldr	r0, [pc, #56]	; (8016860 <rand+0x74>)
 8016828:	690b      	ldr	r3, [r1, #16]
 801682a:	694c      	ldr	r4, [r1, #20]
 801682c:	4a0d      	ldr	r2, [pc, #52]	; (8016864 <rand+0x78>)
 801682e:	4358      	muls	r0, r3
 8016830:	fb02 0004 	mla	r0, r2, r4, r0
 8016834:	fba3 3202 	umull	r3, r2, r3, r2
 8016838:	3301      	adds	r3, #1
 801683a:	eb40 0002 	adc.w	r0, r0, r2
 801683e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016842:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016846:	bd10      	pop	{r4, pc}
 8016848:	2000010c 	.word	0x2000010c
 801684c:	08018858 	.word	0x08018858
 8016850:	0801886f 	.word	0x0801886f
 8016854:	abcd330e 	.word	0xabcd330e
 8016858:	e66d1234 	.word	0xe66d1234
 801685c:	0005deec 	.word	0x0005deec
 8016860:	5851f42d 	.word	0x5851f42d
 8016864:	4c957f2d 	.word	0x4c957f2d

08016868 <realloc>:
 8016868:	4b02      	ldr	r3, [pc, #8]	; (8016874 <realloc+0xc>)
 801686a:	460a      	mov	r2, r1
 801686c:	4601      	mov	r1, r0
 801686e:	6818      	ldr	r0, [r3, #0]
 8016870:	f000 b802 	b.w	8016878 <_realloc_r>
 8016874:	2000010c 	.word	0x2000010c

08016878 <_realloc_r>:
 8016878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801687c:	4680      	mov	r8, r0
 801687e:	4614      	mov	r4, r2
 8016880:	460e      	mov	r6, r1
 8016882:	b921      	cbnz	r1, 801688e <_realloc_r+0x16>
 8016884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016888:	4611      	mov	r1, r2
 801688a:	f7ff bef5 	b.w	8016678 <_malloc_r>
 801688e:	b92a      	cbnz	r2, 801689c <_realloc_r+0x24>
 8016890:	f000 fb3a 	bl	8016f08 <_free_r>
 8016894:	4625      	mov	r5, r4
 8016896:	4628      	mov	r0, r5
 8016898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801689c:	f000 fb80 	bl	8016fa0 <_malloc_usable_size_r>
 80168a0:	4284      	cmp	r4, r0
 80168a2:	4607      	mov	r7, r0
 80168a4:	d802      	bhi.n	80168ac <_realloc_r+0x34>
 80168a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80168aa:	d812      	bhi.n	80168d2 <_realloc_r+0x5a>
 80168ac:	4621      	mov	r1, r4
 80168ae:	4640      	mov	r0, r8
 80168b0:	f7ff fee2 	bl	8016678 <_malloc_r>
 80168b4:	4605      	mov	r5, r0
 80168b6:	2800      	cmp	r0, #0
 80168b8:	d0ed      	beq.n	8016896 <_realloc_r+0x1e>
 80168ba:	42bc      	cmp	r4, r7
 80168bc:	4622      	mov	r2, r4
 80168be:	4631      	mov	r1, r6
 80168c0:	bf28      	it	cs
 80168c2:	463a      	movcs	r2, r7
 80168c4:	f000 fae8 	bl	8016e98 <memcpy>
 80168c8:	4631      	mov	r1, r6
 80168ca:	4640      	mov	r0, r8
 80168cc:	f000 fb1c 	bl	8016f08 <_free_r>
 80168d0:	e7e1      	b.n	8016896 <_realloc_r+0x1e>
 80168d2:	4635      	mov	r5, r6
 80168d4:	e7df      	b.n	8016896 <_realloc_r+0x1e>
	...

080168d8 <_strtoul_l.constprop.0>:
 80168d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168dc:	4f36      	ldr	r7, [pc, #216]	; (80169b8 <_strtoul_l.constprop.0+0xe0>)
 80168de:	4686      	mov	lr, r0
 80168e0:	460d      	mov	r5, r1
 80168e2:	4628      	mov	r0, r5
 80168e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80168e8:	5d3e      	ldrb	r6, [r7, r4]
 80168ea:	f016 0608 	ands.w	r6, r6, #8
 80168ee:	d1f8      	bne.n	80168e2 <_strtoul_l.constprop.0+0xa>
 80168f0:	2c2d      	cmp	r4, #45	; 0x2d
 80168f2:	d130      	bne.n	8016956 <_strtoul_l.constprop.0+0x7e>
 80168f4:	782c      	ldrb	r4, [r5, #0]
 80168f6:	2601      	movs	r6, #1
 80168f8:	1c85      	adds	r5, r0, #2
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d057      	beq.n	80169ae <_strtoul_l.constprop.0+0xd6>
 80168fe:	2b10      	cmp	r3, #16
 8016900:	d109      	bne.n	8016916 <_strtoul_l.constprop.0+0x3e>
 8016902:	2c30      	cmp	r4, #48	; 0x30
 8016904:	d107      	bne.n	8016916 <_strtoul_l.constprop.0+0x3e>
 8016906:	7828      	ldrb	r0, [r5, #0]
 8016908:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801690c:	2858      	cmp	r0, #88	; 0x58
 801690e:	d149      	bne.n	80169a4 <_strtoul_l.constprop.0+0xcc>
 8016910:	786c      	ldrb	r4, [r5, #1]
 8016912:	2310      	movs	r3, #16
 8016914:	3502      	adds	r5, #2
 8016916:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801691a:	2700      	movs	r7, #0
 801691c:	fbb8 f8f3 	udiv	r8, r8, r3
 8016920:	fb03 f908 	mul.w	r9, r3, r8
 8016924:	ea6f 0909 	mvn.w	r9, r9
 8016928:	4638      	mov	r0, r7
 801692a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801692e:	f1bc 0f09 	cmp.w	ip, #9
 8016932:	d815      	bhi.n	8016960 <_strtoul_l.constprop.0+0x88>
 8016934:	4664      	mov	r4, ip
 8016936:	42a3      	cmp	r3, r4
 8016938:	dd23      	ble.n	8016982 <_strtoul_l.constprop.0+0xaa>
 801693a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801693e:	d007      	beq.n	8016950 <_strtoul_l.constprop.0+0x78>
 8016940:	4580      	cmp	r8, r0
 8016942:	d31b      	bcc.n	801697c <_strtoul_l.constprop.0+0xa4>
 8016944:	d101      	bne.n	801694a <_strtoul_l.constprop.0+0x72>
 8016946:	45a1      	cmp	r9, r4
 8016948:	db18      	blt.n	801697c <_strtoul_l.constprop.0+0xa4>
 801694a:	fb00 4003 	mla	r0, r0, r3, r4
 801694e:	2701      	movs	r7, #1
 8016950:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016954:	e7e9      	b.n	801692a <_strtoul_l.constprop.0+0x52>
 8016956:	2c2b      	cmp	r4, #43	; 0x2b
 8016958:	bf04      	itt	eq
 801695a:	782c      	ldrbeq	r4, [r5, #0]
 801695c:	1c85      	addeq	r5, r0, #2
 801695e:	e7cc      	b.n	80168fa <_strtoul_l.constprop.0+0x22>
 8016960:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016964:	f1bc 0f19 	cmp.w	ip, #25
 8016968:	d801      	bhi.n	801696e <_strtoul_l.constprop.0+0x96>
 801696a:	3c37      	subs	r4, #55	; 0x37
 801696c:	e7e3      	b.n	8016936 <_strtoul_l.constprop.0+0x5e>
 801696e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016972:	f1bc 0f19 	cmp.w	ip, #25
 8016976:	d804      	bhi.n	8016982 <_strtoul_l.constprop.0+0xaa>
 8016978:	3c57      	subs	r4, #87	; 0x57
 801697a:	e7dc      	b.n	8016936 <_strtoul_l.constprop.0+0x5e>
 801697c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016980:	e7e6      	b.n	8016950 <_strtoul_l.constprop.0+0x78>
 8016982:	1c7b      	adds	r3, r7, #1
 8016984:	d106      	bne.n	8016994 <_strtoul_l.constprop.0+0xbc>
 8016986:	2322      	movs	r3, #34	; 0x22
 8016988:	f8ce 3000 	str.w	r3, [lr]
 801698c:	4638      	mov	r0, r7
 801698e:	b932      	cbnz	r2, 801699e <_strtoul_l.constprop.0+0xc6>
 8016990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016994:	b106      	cbz	r6, 8016998 <_strtoul_l.constprop.0+0xc0>
 8016996:	4240      	negs	r0, r0
 8016998:	2a00      	cmp	r2, #0
 801699a:	d0f9      	beq.n	8016990 <_strtoul_l.constprop.0+0xb8>
 801699c:	b107      	cbz	r7, 80169a0 <_strtoul_l.constprop.0+0xc8>
 801699e:	1e69      	subs	r1, r5, #1
 80169a0:	6011      	str	r1, [r2, #0]
 80169a2:	e7f5      	b.n	8016990 <_strtoul_l.constprop.0+0xb8>
 80169a4:	2430      	movs	r4, #48	; 0x30
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d1b5      	bne.n	8016916 <_strtoul_l.constprop.0+0x3e>
 80169aa:	2308      	movs	r3, #8
 80169ac:	e7b3      	b.n	8016916 <_strtoul_l.constprop.0+0x3e>
 80169ae:	2c30      	cmp	r4, #48	; 0x30
 80169b0:	d0a9      	beq.n	8016906 <_strtoul_l.constprop.0+0x2e>
 80169b2:	230a      	movs	r3, #10
 80169b4:	e7af      	b.n	8016916 <_strtoul_l.constprop.0+0x3e>
 80169b6:	bf00      	nop
 80169b8:	080188c8 	.word	0x080188c8

080169bc <strtoul>:
 80169bc:	4613      	mov	r3, r2
 80169be:	460a      	mov	r2, r1
 80169c0:	4601      	mov	r1, r0
 80169c2:	4802      	ldr	r0, [pc, #8]	; (80169cc <strtoul+0x10>)
 80169c4:	6800      	ldr	r0, [r0, #0]
 80169c6:	f7ff bf87 	b.w	80168d8 <_strtoul_l.constprop.0>
 80169ca:	bf00      	nop
 80169cc:	2000010c 	.word	0x2000010c

080169d0 <std>:
 80169d0:	2300      	movs	r3, #0
 80169d2:	b510      	push	{r4, lr}
 80169d4:	4604      	mov	r4, r0
 80169d6:	e9c0 3300 	strd	r3, r3, [r0]
 80169da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80169de:	6083      	str	r3, [r0, #8]
 80169e0:	8181      	strh	r1, [r0, #12]
 80169e2:	6643      	str	r3, [r0, #100]	; 0x64
 80169e4:	81c2      	strh	r2, [r0, #14]
 80169e6:	6183      	str	r3, [r0, #24]
 80169e8:	4619      	mov	r1, r3
 80169ea:	2208      	movs	r2, #8
 80169ec:	305c      	adds	r0, #92	; 0x5c
 80169ee:	f000 f98b 	bl	8016d08 <memset>
 80169f2:	4b05      	ldr	r3, [pc, #20]	; (8016a08 <std+0x38>)
 80169f4:	6263      	str	r3, [r4, #36]	; 0x24
 80169f6:	4b05      	ldr	r3, [pc, #20]	; (8016a0c <std+0x3c>)
 80169f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80169fa:	4b05      	ldr	r3, [pc, #20]	; (8016a10 <std+0x40>)
 80169fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80169fe:	4b05      	ldr	r3, [pc, #20]	; (8016a14 <std+0x44>)
 8016a00:	6224      	str	r4, [r4, #32]
 8016a02:	6323      	str	r3, [r4, #48]	; 0x30
 8016a04:	bd10      	pop	{r4, pc}
 8016a06:	bf00      	nop
 8016a08:	08016bbd 	.word	0x08016bbd
 8016a0c:	08016bdf 	.word	0x08016bdf
 8016a10:	08016c17 	.word	0x08016c17
 8016a14:	08016c3b 	.word	0x08016c3b

08016a18 <stdio_exit_handler>:
 8016a18:	4a02      	ldr	r2, [pc, #8]	; (8016a24 <stdio_exit_handler+0xc>)
 8016a1a:	4903      	ldr	r1, [pc, #12]	; (8016a28 <stdio_exit_handler+0x10>)
 8016a1c:	4803      	ldr	r0, [pc, #12]	; (8016a2c <stdio_exit_handler+0x14>)
 8016a1e:	f000 b869 	b.w	8016af4 <_fwalk_sglue>
 8016a22:	bf00      	nop
 8016a24:	200000b4 	.word	0x200000b4
 8016a28:	08017915 	.word	0x08017915
 8016a2c:	200000c0 	.word	0x200000c0

08016a30 <cleanup_stdio>:
 8016a30:	6841      	ldr	r1, [r0, #4]
 8016a32:	4b0c      	ldr	r3, [pc, #48]	; (8016a64 <cleanup_stdio+0x34>)
 8016a34:	4299      	cmp	r1, r3
 8016a36:	b510      	push	{r4, lr}
 8016a38:	4604      	mov	r4, r0
 8016a3a:	d001      	beq.n	8016a40 <cleanup_stdio+0x10>
 8016a3c:	f000 ff6a 	bl	8017914 <_fflush_r>
 8016a40:	68a1      	ldr	r1, [r4, #8]
 8016a42:	4b09      	ldr	r3, [pc, #36]	; (8016a68 <cleanup_stdio+0x38>)
 8016a44:	4299      	cmp	r1, r3
 8016a46:	d002      	beq.n	8016a4e <cleanup_stdio+0x1e>
 8016a48:	4620      	mov	r0, r4
 8016a4a:	f000 ff63 	bl	8017914 <_fflush_r>
 8016a4e:	68e1      	ldr	r1, [r4, #12]
 8016a50:	4b06      	ldr	r3, [pc, #24]	; (8016a6c <cleanup_stdio+0x3c>)
 8016a52:	4299      	cmp	r1, r3
 8016a54:	d004      	beq.n	8016a60 <cleanup_stdio+0x30>
 8016a56:	4620      	mov	r0, r4
 8016a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a5c:	f000 bf5a 	b.w	8017914 <_fflush_r>
 8016a60:	bd10      	pop	{r4, pc}
 8016a62:	bf00      	nop
 8016a64:	2000decc 	.word	0x2000decc
 8016a68:	2000df34 	.word	0x2000df34
 8016a6c:	2000df9c 	.word	0x2000df9c

08016a70 <global_stdio_init.part.0>:
 8016a70:	b510      	push	{r4, lr}
 8016a72:	4b0b      	ldr	r3, [pc, #44]	; (8016aa0 <global_stdio_init.part.0+0x30>)
 8016a74:	4c0b      	ldr	r4, [pc, #44]	; (8016aa4 <global_stdio_init.part.0+0x34>)
 8016a76:	4a0c      	ldr	r2, [pc, #48]	; (8016aa8 <global_stdio_init.part.0+0x38>)
 8016a78:	601a      	str	r2, [r3, #0]
 8016a7a:	4620      	mov	r0, r4
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	2104      	movs	r1, #4
 8016a80:	f7ff ffa6 	bl	80169d0 <std>
 8016a84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016a88:	2201      	movs	r2, #1
 8016a8a:	2109      	movs	r1, #9
 8016a8c:	f7ff ffa0 	bl	80169d0 <std>
 8016a90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016a94:	2202      	movs	r2, #2
 8016a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a9a:	2112      	movs	r1, #18
 8016a9c:	f7ff bf98 	b.w	80169d0 <std>
 8016aa0:	2000e004 	.word	0x2000e004
 8016aa4:	2000decc 	.word	0x2000decc
 8016aa8:	08016a19 	.word	0x08016a19

08016aac <__sfp_lock_acquire>:
 8016aac:	4801      	ldr	r0, [pc, #4]	; (8016ab4 <__sfp_lock_acquire+0x8>)
 8016aae:	f000 b9e9 	b.w	8016e84 <__retarget_lock_acquire_recursive>
 8016ab2:	bf00      	nop
 8016ab4:	2000e00e 	.word	0x2000e00e

08016ab8 <__sfp_lock_release>:
 8016ab8:	4801      	ldr	r0, [pc, #4]	; (8016ac0 <__sfp_lock_release+0x8>)
 8016aba:	f000 b9e4 	b.w	8016e86 <__retarget_lock_release_recursive>
 8016abe:	bf00      	nop
 8016ac0:	2000e00e 	.word	0x2000e00e

08016ac4 <__sinit>:
 8016ac4:	b510      	push	{r4, lr}
 8016ac6:	4604      	mov	r4, r0
 8016ac8:	f7ff fff0 	bl	8016aac <__sfp_lock_acquire>
 8016acc:	6a23      	ldr	r3, [r4, #32]
 8016ace:	b11b      	cbz	r3, 8016ad8 <__sinit+0x14>
 8016ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ad4:	f7ff bff0 	b.w	8016ab8 <__sfp_lock_release>
 8016ad8:	4b04      	ldr	r3, [pc, #16]	; (8016aec <__sinit+0x28>)
 8016ada:	6223      	str	r3, [r4, #32]
 8016adc:	4b04      	ldr	r3, [pc, #16]	; (8016af0 <__sinit+0x2c>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d1f5      	bne.n	8016ad0 <__sinit+0xc>
 8016ae4:	f7ff ffc4 	bl	8016a70 <global_stdio_init.part.0>
 8016ae8:	e7f2      	b.n	8016ad0 <__sinit+0xc>
 8016aea:	bf00      	nop
 8016aec:	08016a31 	.word	0x08016a31
 8016af0:	2000e004 	.word	0x2000e004

08016af4 <_fwalk_sglue>:
 8016af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016af8:	4607      	mov	r7, r0
 8016afa:	4688      	mov	r8, r1
 8016afc:	4614      	mov	r4, r2
 8016afe:	2600      	movs	r6, #0
 8016b00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016b04:	f1b9 0901 	subs.w	r9, r9, #1
 8016b08:	d505      	bpl.n	8016b16 <_fwalk_sglue+0x22>
 8016b0a:	6824      	ldr	r4, [r4, #0]
 8016b0c:	2c00      	cmp	r4, #0
 8016b0e:	d1f7      	bne.n	8016b00 <_fwalk_sglue+0xc>
 8016b10:	4630      	mov	r0, r6
 8016b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b16:	89ab      	ldrh	r3, [r5, #12]
 8016b18:	2b01      	cmp	r3, #1
 8016b1a:	d907      	bls.n	8016b2c <_fwalk_sglue+0x38>
 8016b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016b20:	3301      	adds	r3, #1
 8016b22:	d003      	beq.n	8016b2c <_fwalk_sglue+0x38>
 8016b24:	4629      	mov	r1, r5
 8016b26:	4638      	mov	r0, r7
 8016b28:	47c0      	blx	r8
 8016b2a:	4306      	orrs	r6, r0
 8016b2c:	3568      	adds	r5, #104	; 0x68
 8016b2e:	e7e9      	b.n	8016b04 <_fwalk_sglue+0x10>

08016b30 <iprintf>:
 8016b30:	b40f      	push	{r0, r1, r2, r3}
 8016b32:	b507      	push	{r0, r1, r2, lr}
 8016b34:	4906      	ldr	r1, [pc, #24]	; (8016b50 <iprintf+0x20>)
 8016b36:	ab04      	add	r3, sp, #16
 8016b38:	6808      	ldr	r0, [r1, #0]
 8016b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b3e:	6881      	ldr	r1, [r0, #8]
 8016b40:	9301      	str	r3, [sp, #4]
 8016b42:	f000 fbb7 	bl	80172b4 <_vfiprintf_r>
 8016b46:	b003      	add	sp, #12
 8016b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b4c:	b004      	add	sp, #16
 8016b4e:	4770      	bx	lr
 8016b50:	2000010c 	.word	0x2000010c

08016b54 <sniprintf>:
 8016b54:	b40c      	push	{r2, r3}
 8016b56:	b530      	push	{r4, r5, lr}
 8016b58:	4b17      	ldr	r3, [pc, #92]	; (8016bb8 <sniprintf+0x64>)
 8016b5a:	1e0c      	subs	r4, r1, #0
 8016b5c:	681d      	ldr	r5, [r3, #0]
 8016b5e:	b09d      	sub	sp, #116	; 0x74
 8016b60:	da08      	bge.n	8016b74 <sniprintf+0x20>
 8016b62:	238b      	movs	r3, #139	; 0x8b
 8016b64:	602b      	str	r3, [r5, #0]
 8016b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b6a:	b01d      	add	sp, #116	; 0x74
 8016b6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b70:	b002      	add	sp, #8
 8016b72:	4770      	bx	lr
 8016b74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016b78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016b7c:	bf14      	ite	ne
 8016b7e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016b82:	4623      	moveq	r3, r4
 8016b84:	9304      	str	r3, [sp, #16]
 8016b86:	9307      	str	r3, [sp, #28]
 8016b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b8c:	9002      	str	r0, [sp, #8]
 8016b8e:	9006      	str	r0, [sp, #24]
 8016b90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016b94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016b96:	ab21      	add	r3, sp, #132	; 0x84
 8016b98:	a902      	add	r1, sp, #8
 8016b9a:	4628      	mov	r0, r5
 8016b9c:	9301      	str	r3, [sp, #4]
 8016b9e:	f000 fa61 	bl	8017064 <_svfiprintf_r>
 8016ba2:	1c43      	adds	r3, r0, #1
 8016ba4:	bfbc      	itt	lt
 8016ba6:	238b      	movlt	r3, #139	; 0x8b
 8016ba8:	602b      	strlt	r3, [r5, #0]
 8016baa:	2c00      	cmp	r4, #0
 8016bac:	d0dd      	beq.n	8016b6a <sniprintf+0x16>
 8016bae:	9b02      	ldr	r3, [sp, #8]
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	701a      	strb	r2, [r3, #0]
 8016bb4:	e7d9      	b.n	8016b6a <sniprintf+0x16>
 8016bb6:	bf00      	nop
 8016bb8:	2000010c 	.word	0x2000010c

08016bbc <__sread>:
 8016bbc:	b510      	push	{r4, lr}
 8016bbe:	460c      	mov	r4, r1
 8016bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bc4:	f000 f900 	bl	8016dc8 <_read_r>
 8016bc8:	2800      	cmp	r0, #0
 8016bca:	bfab      	itete	ge
 8016bcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016bce:	89a3      	ldrhlt	r3, [r4, #12]
 8016bd0:	181b      	addge	r3, r3, r0
 8016bd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016bd6:	bfac      	ite	ge
 8016bd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8016bda:	81a3      	strhlt	r3, [r4, #12]
 8016bdc:	bd10      	pop	{r4, pc}

08016bde <__swrite>:
 8016bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016be2:	461f      	mov	r7, r3
 8016be4:	898b      	ldrh	r3, [r1, #12]
 8016be6:	05db      	lsls	r3, r3, #23
 8016be8:	4605      	mov	r5, r0
 8016bea:	460c      	mov	r4, r1
 8016bec:	4616      	mov	r6, r2
 8016bee:	d505      	bpl.n	8016bfc <__swrite+0x1e>
 8016bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bf4:	2302      	movs	r3, #2
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	f000 f8d4 	bl	8016da4 <_lseek_r>
 8016bfc:	89a3      	ldrh	r3, [r4, #12]
 8016bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c06:	81a3      	strh	r3, [r4, #12]
 8016c08:	4632      	mov	r2, r6
 8016c0a:	463b      	mov	r3, r7
 8016c0c:	4628      	mov	r0, r5
 8016c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c12:	f000 b8fb 	b.w	8016e0c <_write_r>

08016c16 <__sseek>:
 8016c16:	b510      	push	{r4, lr}
 8016c18:	460c      	mov	r4, r1
 8016c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c1e:	f000 f8c1 	bl	8016da4 <_lseek_r>
 8016c22:	1c43      	adds	r3, r0, #1
 8016c24:	89a3      	ldrh	r3, [r4, #12]
 8016c26:	bf15      	itete	ne
 8016c28:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c32:	81a3      	strheq	r3, [r4, #12]
 8016c34:	bf18      	it	ne
 8016c36:	81a3      	strhne	r3, [r4, #12]
 8016c38:	bd10      	pop	{r4, pc}

08016c3a <__sclose>:
 8016c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c3e:	f000 b8a1 	b.w	8016d84 <_close_r>

08016c42 <_vsniprintf_r>:
 8016c42:	b530      	push	{r4, r5, lr}
 8016c44:	4614      	mov	r4, r2
 8016c46:	2c00      	cmp	r4, #0
 8016c48:	b09b      	sub	sp, #108	; 0x6c
 8016c4a:	4605      	mov	r5, r0
 8016c4c:	461a      	mov	r2, r3
 8016c4e:	da05      	bge.n	8016c5c <_vsniprintf_r+0x1a>
 8016c50:	238b      	movs	r3, #139	; 0x8b
 8016c52:	6003      	str	r3, [r0, #0]
 8016c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c58:	b01b      	add	sp, #108	; 0x6c
 8016c5a:	bd30      	pop	{r4, r5, pc}
 8016c5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016c60:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016c64:	bf14      	ite	ne
 8016c66:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016c6a:	4623      	moveq	r3, r4
 8016c6c:	9302      	str	r3, [sp, #8]
 8016c6e:	9305      	str	r3, [sp, #20]
 8016c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c74:	9100      	str	r1, [sp, #0]
 8016c76:	9104      	str	r1, [sp, #16]
 8016c78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016c7c:	4669      	mov	r1, sp
 8016c7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016c80:	f000 f9f0 	bl	8017064 <_svfiprintf_r>
 8016c84:	1c43      	adds	r3, r0, #1
 8016c86:	bfbc      	itt	lt
 8016c88:	238b      	movlt	r3, #139	; 0x8b
 8016c8a:	602b      	strlt	r3, [r5, #0]
 8016c8c:	2c00      	cmp	r4, #0
 8016c8e:	d0e3      	beq.n	8016c58 <_vsniprintf_r+0x16>
 8016c90:	9b00      	ldr	r3, [sp, #0]
 8016c92:	2200      	movs	r2, #0
 8016c94:	701a      	strb	r2, [r3, #0]
 8016c96:	e7df      	b.n	8016c58 <_vsniprintf_r+0x16>

08016c98 <vsniprintf>:
 8016c98:	b507      	push	{r0, r1, r2, lr}
 8016c9a:	9300      	str	r3, [sp, #0]
 8016c9c:	4613      	mov	r3, r2
 8016c9e:	460a      	mov	r2, r1
 8016ca0:	4601      	mov	r1, r0
 8016ca2:	4803      	ldr	r0, [pc, #12]	; (8016cb0 <vsniprintf+0x18>)
 8016ca4:	6800      	ldr	r0, [r0, #0]
 8016ca6:	f7ff ffcc 	bl	8016c42 <_vsniprintf_r>
 8016caa:	b003      	add	sp, #12
 8016cac:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cb0:	2000010c 	.word	0x2000010c

08016cb4 <memcmp>:
 8016cb4:	b510      	push	{r4, lr}
 8016cb6:	3901      	subs	r1, #1
 8016cb8:	4402      	add	r2, r0
 8016cba:	4290      	cmp	r0, r2
 8016cbc:	d101      	bne.n	8016cc2 <memcmp+0xe>
 8016cbe:	2000      	movs	r0, #0
 8016cc0:	e005      	b.n	8016cce <memcmp+0x1a>
 8016cc2:	7803      	ldrb	r3, [r0, #0]
 8016cc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016cc8:	42a3      	cmp	r3, r4
 8016cca:	d001      	beq.n	8016cd0 <memcmp+0x1c>
 8016ccc:	1b18      	subs	r0, r3, r4
 8016cce:	bd10      	pop	{r4, pc}
 8016cd0:	3001      	adds	r0, #1
 8016cd2:	e7f2      	b.n	8016cba <memcmp+0x6>

08016cd4 <memmove>:
 8016cd4:	4288      	cmp	r0, r1
 8016cd6:	b510      	push	{r4, lr}
 8016cd8:	eb01 0402 	add.w	r4, r1, r2
 8016cdc:	d902      	bls.n	8016ce4 <memmove+0x10>
 8016cde:	4284      	cmp	r4, r0
 8016ce0:	4623      	mov	r3, r4
 8016ce2:	d807      	bhi.n	8016cf4 <memmove+0x20>
 8016ce4:	1e43      	subs	r3, r0, #1
 8016ce6:	42a1      	cmp	r1, r4
 8016ce8:	d008      	beq.n	8016cfc <memmove+0x28>
 8016cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016cee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016cf2:	e7f8      	b.n	8016ce6 <memmove+0x12>
 8016cf4:	4402      	add	r2, r0
 8016cf6:	4601      	mov	r1, r0
 8016cf8:	428a      	cmp	r2, r1
 8016cfa:	d100      	bne.n	8016cfe <memmove+0x2a>
 8016cfc:	bd10      	pop	{r4, pc}
 8016cfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d06:	e7f7      	b.n	8016cf8 <memmove+0x24>

08016d08 <memset>:
 8016d08:	4402      	add	r2, r0
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	4293      	cmp	r3, r2
 8016d0e:	d100      	bne.n	8016d12 <memset+0xa>
 8016d10:	4770      	bx	lr
 8016d12:	f803 1b01 	strb.w	r1, [r3], #1
 8016d16:	e7f9      	b.n	8016d0c <memset+0x4>

08016d18 <strchr>:
 8016d18:	b2c9      	uxtb	r1, r1
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d20:	b11a      	cbz	r2, 8016d2a <strchr+0x12>
 8016d22:	428a      	cmp	r2, r1
 8016d24:	d1f9      	bne.n	8016d1a <strchr+0x2>
 8016d26:	4618      	mov	r0, r3
 8016d28:	4770      	bx	lr
 8016d2a:	2900      	cmp	r1, #0
 8016d2c:	bf18      	it	ne
 8016d2e:	2300      	movne	r3, #0
 8016d30:	e7f9      	b.n	8016d26 <strchr+0xe>

08016d32 <strncmp>:
 8016d32:	b510      	push	{r4, lr}
 8016d34:	b16a      	cbz	r2, 8016d52 <strncmp+0x20>
 8016d36:	3901      	subs	r1, #1
 8016d38:	1884      	adds	r4, r0, r2
 8016d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d3e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016d42:	429a      	cmp	r2, r3
 8016d44:	d103      	bne.n	8016d4e <strncmp+0x1c>
 8016d46:	42a0      	cmp	r0, r4
 8016d48:	d001      	beq.n	8016d4e <strncmp+0x1c>
 8016d4a:	2a00      	cmp	r2, #0
 8016d4c:	d1f5      	bne.n	8016d3a <strncmp+0x8>
 8016d4e:	1ad0      	subs	r0, r2, r3
 8016d50:	bd10      	pop	{r4, pc}
 8016d52:	4610      	mov	r0, r2
 8016d54:	e7fc      	b.n	8016d50 <strncmp+0x1e>

08016d56 <strstr>:
 8016d56:	780a      	ldrb	r2, [r1, #0]
 8016d58:	b570      	push	{r4, r5, r6, lr}
 8016d5a:	b96a      	cbnz	r2, 8016d78 <strstr+0x22>
 8016d5c:	bd70      	pop	{r4, r5, r6, pc}
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d109      	bne.n	8016d76 <strstr+0x20>
 8016d62:	460c      	mov	r4, r1
 8016d64:	4605      	mov	r5, r0
 8016d66:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d0f6      	beq.n	8016d5c <strstr+0x6>
 8016d6e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016d72:	429e      	cmp	r6, r3
 8016d74:	d0f7      	beq.n	8016d66 <strstr+0x10>
 8016d76:	3001      	adds	r0, #1
 8016d78:	7803      	ldrb	r3, [r0, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d1ef      	bne.n	8016d5e <strstr+0x8>
 8016d7e:	4618      	mov	r0, r3
 8016d80:	e7ec      	b.n	8016d5c <strstr+0x6>
	...

08016d84 <_close_r>:
 8016d84:	b538      	push	{r3, r4, r5, lr}
 8016d86:	4d06      	ldr	r5, [pc, #24]	; (8016da0 <_close_r+0x1c>)
 8016d88:	2300      	movs	r3, #0
 8016d8a:	4604      	mov	r4, r0
 8016d8c:	4608      	mov	r0, r1
 8016d8e:	602b      	str	r3, [r5, #0]
 8016d90:	f7ea fe9f 	bl	8001ad2 <_close>
 8016d94:	1c43      	adds	r3, r0, #1
 8016d96:	d102      	bne.n	8016d9e <_close_r+0x1a>
 8016d98:	682b      	ldr	r3, [r5, #0]
 8016d9a:	b103      	cbz	r3, 8016d9e <_close_r+0x1a>
 8016d9c:	6023      	str	r3, [r4, #0]
 8016d9e:	bd38      	pop	{r3, r4, r5, pc}
 8016da0:	2000e008 	.word	0x2000e008

08016da4 <_lseek_r>:
 8016da4:	b538      	push	{r3, r4, r5, lr}
 8016da6:	4d07      	ldr	r5, [pc, #28]	; (8016dc4 <_lseek_r+0x20>)
 8016da8:	4604      	mov	r4, r0
 8016daa:	4608      	mov	r0, r1
 8016dac:	4611      	mov	r1, r2
 8016dae:	2200      	movs	r2, #0
 8016db0:	602a      	str	r2, [r5, #0]
 8016db2:	461a      	mov	r2, r3
 8016db4:	f7ea feb4 	bl	8001b20 <_lseek>
 8016db8:	1c43      	adds	r3, r0, #1
 8016dba:	d102      	bne.n	8016dc2 <_lseek_r+0x1e>
 8016dbc:	682b      	ldr	r3, [r5, #0]
 8016dbe:	b103      	cbz	r3, 8016dc2 <_lseek_r+0x1e>
 8016dc0:	6023      	str	r3, [r4, #0]
 8016dc2:	bd38      	pop	{r3, r4, r5, pc}
 8016dc4:	2000e008 	.word	0x2000e008

08016dc8 <_read_r>:
 8016dc8:	b538      	push	{r3, r4, r5, lr}
 8016dca:	4d07      	ldr	r5, [pc, #28]	; (8016de8 <_read_r+0x20>)
 8016dcc:	4604      	mov	r4, r0
 8016dce:	4608      	mov	r0, r1
 8016dd0:	4611      	mov	r1, r2
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	602a      	str	r2, [r5, #0]
 8016dd6:	461a      	mov	r2, r3
 8016dd8:	f7ea fe42 	bl	8001a60 <_read>
 8016ddc:	1c43      	adds	r3, r0, #1
 8016dde:	d102      	bne.n	8016de6 <_read_r+0x1e>
 8016de0:	682b      	ldr	r3, [r5, #0]
 8016de2:	b103      	cbz	r3, 8016de6 <_read_r+0x1e>
 8016de4:	6023      	str	r3, [r4, #0]
 8016de6:	bd38      	pop	{r3, r4, r5, pc}
 8016de8:	2000e008 	.word	0x2000e008

08016dec <_sbrk_r>:
 8016dec:	b538      	push	{r3, r4, r5, lr}
 8016dee:	4d06      	ldr	r5, [pc, #24]	; (8016e08 <_sbrk_r+0x1c>)
 8016df0:	2300      	movs	r3, #0
 8016df2:	4604      	mov	r4, r0
 8016df4:	4608      	mov	r0, r1
 8016df6:	602b      	str	r3, [r5, #0]
 8016df8:	f7ea fea0 	bl	8001b3c <_sbrk>
 8016dfc:	1c43      	adds	r3, r0, #1
 8016dfe:	d102      	bne.n	8016e06 <_sbrk_r+0x1a>
 8016e00:	682b      	ldr	r3, [r5, #0]
 8016e02:	b103      	cbz	r3, 8016e06 <_sbrk_r+0x1a>
 8016e04:	6023      	str	r3, [r4, #0]
 8016e06:	bd38      	pop	{r3, r4, r5, pc}
 8016e08:	2000e008 	.word	0x2000e008

08016e0c <_write_r>:
 8016e0c:	b538      	push	{r3, r4, r5, lr}
 8016e0e:	4d07      	ldr	r5, [pc, #28]	; (8016e2c <_write_r+0x20>)
 8016e10:	4604      	mov	r4, r0
 8016e12:	4608      	mov	r0, r1
 8016e14:	4611      	mov	r1, r2
 8016e16:	2200      	movs	r2, #0
 8016e18:	602a      	str	r2, [r5, #0]
 8016e1a:	461a      	mov	r2, r3
 8016e1c:	f7ea fe3d 	bl	8001a9a <_write>
 8016e20:	1c43      	adds	r3, r0, #1
 8016e22:	d102      	bne.n	8016e2a <_write_r+0x1e>
 8016e24:	682b      	ldr	r3, [r5, #0]
 8016e26:	b103      	cbz	r3, 8016e2a <_write_r+0x1e>
 8016e28:	6023      	str	r3, [r4, #0]
 8016e2a:	bd38      	pop	{r3, r4, r5, pc}
 8016e2c:	2000e008 	.word	0x2000e008

08016e30 <__errno>:
 8016e30:	4b01      	ldr	r3, [pc, #4]	; (8016e38 <__errno+0x8>)
 8016e32:	6818      	ldr	r0, [r3, #0]
 8016e34:	4770      	bx	lr
 8016e36:	bf00      	nop
 8016e38:	2000010c 	.word	0x2000010c

08016e3c <__libc_init_array>:
 8016e3c:	b570      	push	{r4, r5, r6, lr}
 8016e3e:	4d0d      	ldr	r5, [pc, #52]	; (8016e74 <__libc_init_array+0x38>)
 8016e40:	4c0d      	ldr	r4, [pc, #52]	; (8016e78 <__libc_init_array+0x3c>)
 8016e42:	1b64      	subs	r4, r4, r5
 8016e44:	10a4      	asrs	r4, r4, #2
 8016e46:	2600      	movs	r6, #0
 8016e48:	42a6      	cmp	r6, r4
 8016e4a:	d109      	bne.n	8016e60 <__libc_init_array+0x24>
 8016e4c:	4d0b      	ldr	r5, [pc, #44]	; (8016e7c <__libc_init_array+0x40>)
 8016e4e:	4c0c      	ldr	r4, [pc, #48]	; (8016e80 <__libc_init_array+0x44>)
 8016e50:	f000 ff00 	bl	8017c54 <_init>
 8016e54:	1b64      	subs	r4, r4, r5
 8016e56:	10a4      	asrs	r4, r4, #2
 8016e58:	2600      	movs	r6, #0
 8016e5a:	42a6      	cmp	r6, r4
 8016e5c:	d105      	bne.n	8016e6a <__libc_init_array+0x2e>
 8016e5e:	bd70      	pop	{r4, r5, r6, pc}
 8016e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e64:	4798      	blx	r3
 8016e66:	3601      	adds	r6, #1
 8016e68:	e7ee      	b.n	8016e48 <__libc_init_array+0xc>
 8016e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e6e:	4798      	blx	r3
 8016e70:	3601      	adds	r6, #1
 8016e72:	e7f2      	b.n	8016e5a <__libc_init_array+0x1e>
 8016e74:	08018a40 	.word	0x08018a40
 8016e78:	08018a40 	.word	0x08018a40
 8016e7c:	08018a40 	.word	0x08018a40
 8016e80:	08018a48 	.word	0x08018a48

08016e84 <__retarget_lock_acquire_recursive>:
 8016e84:	4770      	bx	lr

08016e86 <__retarget_lock_release_recursive>:
 8016e86:	4770      	bx	lr

08016e88 <strcpy>:
 8016e88:	4603      	mov	r3, r0
 8016e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e8e:	f803 2b01 	strb.w	r2, [r3], #1
 8016e92:	2a00      	cmp	r2, #0
 8016e94:	d1f9      	bne.n	8016e8a <strcpy+0x2>
 8016e96:	4770      	bx	lr

08016e98 <memcpy>:
 8016e98:	440a      	add	r2, r1
 8016e9a:	4291      	cmp	r1, r2
 8016e9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016ea0:	d100      	bne.n	8016ea4 <memcpy+0xc>
 8016ea2:	4770      	bx	lr
 8016ea4:	b510      	push	{r4, lr}
 8016ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016eae:	4291      	cmp	r1, r2
 8016eb0:	d1f9      	bne.n	8016ea6 <memcpy+0xe>
 8016eb2:	bd10      	pop	{r4, pc}

08016eb4 <__assert_func>:
 8016eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016eb6:	4614      	mov	r4, r2
 8016eb8:	461a      	mov	r2, r3
 8016eba:	4b09      	ldr	r3, [pc, #36]	; (8016ee0 <__assert_func+0x2c>)
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	4605      	mov	r5, r0
 8016ec0:	68d8      	ldr	r0, [r3, #12]
 8016ec2:	b14c      	cbz	r4, 8016ed8 <__assert_func+0x24>
 8016ec4:	4b07      	ldr	r3, [pc, #28]	; (8016ee4 <__assert_func+0x30>)
 8016ec6:	9100      	str	r1, [sp, #0]
 8016ec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016ecc:	4906      	ldr	r1, [pc, #24]	; (8016ee8 <__assert_func+0x34>)
 8016ece:	462b      	mov	r3, r5
 8016ed0:	f000 fd48 	bl	8017964 <fiprintf>
 8016ed4:	f000 fdee 	bl	8017ab4 <abort>
 8016ed8:	4b04      	ldr	r3, [pc, #16]	; (8016eec <__assert_func+0x38>)
 8016eda:	461c      	mov	r4, r3
 8016edc:	e7f3      	b.n	8016ec6 <__assert_func+0x12>
 8016ede:	bf00      	nop
 8016ee0:	2000010c 	.word	0x2000010c
 8016ee4:	080189c8 	.word	0x080189c8
 8016ee8:	080189d5 	.word	0x080189d5
 8016eec:	08018a03 	.word	0x08018a03

08016ef0 <__env_lock>:
 8016ef0:	4801      	ldr	r0, [pc, #4]	; (8016ef8 <__env_lock+0x8>)
 8016ef2:	f7ff bfc7 	b.w	8016e84 <__retarget_lock_acquire_recursive>
 8016ef6:	bf00      	nop
 8016ef8:	2000e00c 	.word	0x2000e00c

08016efc <__env_unlock>:
 8016efc:	4801      	ldr	r0, [pc, #4]	; (8016f04 <__env_unlock+0x8>)
 8016efe:	f7ff bfc2 	b.w	8016e86 <__retarget_lock_release_recursive>
 8016f02:	bf00      	nop
 8016f04:	2000e00c 	.word	0x2000e00c

08016f08 <_free_r>:
 8016f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f0a:	2900      	cmp	r1, #0
 8016f0c:	d044      	beq.n	8016f98 <_free_r+0x90>
 8016f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f12:	9001      	str	r0, [sp, #4]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	f1a1 0404 	sub.w	r4, r1, #4
 8016f1a:	bfb8      	it	lt
 8016f1c:	18e4      	addlt	r4, r4, r3
 8016f1e:	f7ff fc2b 	bl	8016778 <__malloc_lock>
 8016f22:	4a1e      	ldr	r2, [pc, #120]	; (8016f9c <_free_r+0x94>)
 8016f24:	9801      	ldr	r0, [sp, #4]
 8016f26:	6813      	ldr	r3, [r2, #0]
 8016f28:	b933      	cbnz	r3, 8016f38 <_free_r+0x30>
 8016f2a:	6063      	str	r3, [r4, #4]
 8016f2c:	6014      	str	r4, [r2, #0]
 8016f2e:	b003      	add	sp, #12
 8016f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f34:	f7ff bc26 	b.w	8016784 <__malloc_unlock>
 8016f38:	42a3      	cmp	r3, r4
 8016f3a:	d908      	bls.n	8016f4e <_free_r+0x46>
 8016f3c:	6825      	ldr	r5, [r4, #0]
 8016f3e:	1961      	adds	r1, r4, r5
 8016f40:	428b      	cmp	r3, r1
 8016f42:	bf01      	itttt	eq
 8016f44:	6819      	ldreq	r1, [r3, #0]
 8016f46:	685b      	ldreq	r3, [r3, #4]
 8016f48:	1949      	addeq	r1, r1, r5
 8016f4a:	6021      	streq	r1, [r4, #0]
 8016f4c:	e7ed      	b.n	8016f2a <_free_r+0x22>
 8016f4e:	461a      	mov	r2, r3
 8016f50:	685b      	ldr	r3, [r3, #4]
 8016f52:	b10b      	cbz	r3, 8016f58 <_free_r+0x50>
 8016f54:	42a3      	cmp	r3, r4
 8016f56:	d9fa      	bls.n	8016f4e <_free_r+0x46>
 8016f58:	6811      	ldr	r1, [r2, #0]
 8016f5a:	1855      	adds	r5, r2, r1
 8016f5c:	42a5      	cmp	r5, r4
 8016f5e:	d10b      	bne.n	8016f78 <_free_r+0x70>
 8016f60:	6824      	ldr	r4, [r4, #0]
 8016f62:	4421      	add	r1, r4
 8016f64:	1854      	adds	r4, r2, r1
 8016f66:	42a3      	cmp	r3, r4
 8016f68:	6011      	str	r1, [r2, #0]
 8016f6a:	d1e0      	bne.n	8016f2e <_free_r+0x26>
 8016f6c:	681c      	ldr	r4, [r3, #0]
 8016f6e:	685b      	ldr	r3, [r3, #4]
 8016f70:	6053      	str	r3, [r2, #4]
 8016f72:	440c      	add	r4, r1
 8016f74:	6014      	str	r4, [r2, #0]
 8016f76:	e7da      	b.n	8016f2e <_free_r+0x26>
 8016f78:	d902      	bls.n	8016f80 <_free_r+0x78>
 8016f7a:	230c      	movs	r3, #12
 8016f7c:	6003      	str	r3, [r0, #0]
 8016f7e:	e7d6      	b.n	8016f2e <_free_r+0x26>
 8016f80:	6825      	ldr	r5, [r4, #0]
 8016f82:	1961      	adds	r1, r4, r5
 8016f84:	428b      	cmp	r3, r1
 8016f86:	bf04      	itt	eq
 8016f88:	6819      	ldreq	r1, [r3, #0]
 8016f8a:	685b      	ldreq	r3, [r3, #4]
 8016f8c:	6063      	str	r3, [r4, #4]
 8016f8e:	bf04      	itt	eq
 8016f90:	1949      	addeq	r1, r1, r5
 8016f92:	6021      	streq	r1, [r4, #0]
 8016f94:	6054      	str	r4, [r2, #4]
 8016f96:	e7ca      	b.n	8016f2e <_free_r+0x26>
 8016f98:	b003      	add	sp, #12
 8016f9a:	bd30      	pop	{r4, r5, pc}
 8016f9c:	2000dec4 	.word	0x2000dec4

08016fa0 <_malloc_usable_size_r>:
 8016fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fa4:	1f18      	subs	r0, r3, #4
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	bfbc      	itt	lt
 8016faa:	580b      	ldrlt	r3, [r1, r0]
 8016fac:	18c0      	addlt	r0, r0, r3
 8016fae:	4770      	bx	lr

08016fb0 <__ssputs_r>:
 8016fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb4:	688e      	ldr	r6, [r1, #8]
 8016fb6:	461f      	mov	r7, r3
 8016fb8:	42be      	cmp	r6, r7
 8016fba:	680b      	ldr	r3, [r1, #0]
 8016fbc:	4682      	mov	sl, r0
 8016fbe:	460c      	mov	r4, r1
 8016fc0:	4690      	mov	r8, r2
 8016fc2:	d82c      	bhi.n	801701e <__ssputs_r+0x6e>
 8016fc4:	898a      	ldrh	r2, [r1, #12]
 8016fc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016fca:	d026      	beq.n	801701a <__ssputs_r+0x6a>
 8016fcc:	6965      	ldr	r5, [r4, #20]
 8016fce:	6909      	ldr	r1, [r1, #16]
 8016fd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fd4:	eba3 0901 	sub.w	r9, r3, r1
 8016fd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016fdc:	1c7b      	adds	r3, r7, #1
 8016fde:	444b      	add	r3, r9
 8016fe0:	106d      	asrs	r5, r5, #1
 8016fe2:	429d      	cmp	r5, r3
 8016fe4:	bf38      	it	cc
 8016fe6:	461d      	movcc	r5, r3
 8016fe8:	0553      	lsls	r3, r2, #21
 8016fea:	d527      	bpl.n	801703c <__ssputs_r+0x8c>
 8016fec:	4629      	mov	r1, r5
 8016fee:	f7ff fb43 	bl	8016678 <_malloc_r>
 8016ff2:	4606      	mov	r6, r0
 8016ff4:	b360      	cbz	r0, 8017050 <__ssputs_r+0xa0>
 8016ff6:	6921      	ldr	r1, [r4, #16]
 8016ff8:	464a      	mov	r2, r9
 8016ffa:	f7ff ff4d 	bl	8016e98 <memcpy>
 8016ffe:	89a3      	ldrh	r3, [r4, #12]
 8017000:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017008:	81a3      	strh	r3, [r4, #12]
 801700a:	6126      	str	r6, [r4, #16]
 801700c:	6165      	str	r5, [r4, #20]
 801700e:	444e      	add	r6, r9
 8017010:	eba5 0509 	sub.w	r5, r5, r9
 8017014:	6026      	str	r6, [r4, #0]
 8017016:	60a5      	str	r5, [r4, #8]
 8017018:	463e      	mov	r6, r7
 801701a:	42be      	cmp	r6, r7
 801701c:	d900      	bls.n	8017020 <__ssputs_r+0x70>
 801701e:	463e      	mov	r6, r7
 8017020:	6820      	ldr	r0, [r4, #0]
 8017022:	4632      	mov	r2, r6
 8017024:	4641      	mov	r1, r8
 8017026:	f7ff fe55 	bl	8016cd4 <memmove>
 801702a:	68a3      	ldr	r3, [r4, #8]
 801702c:	1b9b      	subs	r3, r3, r6
 801702e:	60a3      	str	r3, [r4, #8]
 8017030:	6823      	ldr	r3, [r4, #0]
 8017032:	4433      	add	r3, r6
 8017034:	6023      	str	r3, [r4, #0]
 8017036:	2000      	movs	r0, #0
 8017038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801703c:	462a      	mov	r2, r5
 801703e:	f7ff fc1b 	bl	8016878 <_realloc_r>
 8017042:	4606      	mov	r6, r0
 8017044:	2800      	cmp	r0, #0
 8017046:	d1e0      	bne.n	801700a <__ssputs_r+0x5a>
 8017048:	6921      	ldr	r1, [r4, #16]
 801704a:	4650      	mov	r0, sl
 801704c:	f7ff ff5c 	bl	8016f08 <_free_r>
 8017050:	230c      	movs	r3, #12
 8017052:	f8ca 3000 	str.w	r3, [sl]
 8017056:	89a3      	ldrh	r3, [r4, #12]
 8017058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801705c:	81a3      	strh	r3, [r4, #12]
 801705e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017062:	e7e9      	b.n	8017038 <__ssputs_r+0x88>

08017064 <_svfiprintf_r>:
 8017064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017068:	4698      	mov	r8, r3
 801706a:	898b      	ldrh	r3, [r1, #12]
 801706c:	061b      	lsls	r3, r3, #24
 801706e:	b09d      	sub	sp, #116	; 0x74
 8017070:	4607      	mov	r7, r0
 8017072:	460d      	mov	r5, r1
 8017074:	4614      	mov	r4, r2
 8017076:	d50e      	bpl.n	8017096 <_svfiprintf_r+0x32>
 8017078:	690b      	ldr	r3, [r1, #16]
 801707a:	b963      	cbnz	r3, 8017096 <_svfiprintf_r+0x32>
 801707c:	2140      	movs	r1, #64	; 0x40
 801707e:	f7ff fafb 	bl	8016678 <_malloc_r>
 8017082:	6028      	str	r0, [r5, #0]
 8017084:	6128      	str	r0, [r5, #16]
 8017086:	b920      	cbnz	r0, 8017092 <_svfiprintf_r+0x2e>
 8017088:	230c      	movs	r3, #12
 801708a:	603b      	str	r3, [r7, #0]
 801708c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017090:	e0d0      	b.n	8017234 <_svfiprintf_r+0x1d0>
 8017092:	2340      	movs	r3, #64	; 0x40
 8017094:	616b      	str	r3, [r5, #20]
 8017096:	2300      	movs	r3, #0
 8017098:	9309      	str	r3, [sp, #36]	; 0x24
 801709a:	2320      	movs	r3, #32
 801709c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80170a4:	2330      	movs	r3, #48	; 0x30
 80170a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801724c <_svfiprintf_r+0x1e8>
 80170aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170ae:	f04f 0901 	mov.w	r9, #1
 80170b2:	4623      	mov	r3, r4
 80170b4:	469a      	mov	sl, r3
 80170b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170ba:	b10a      	cbz	r2, 80170c0 <_svfiprintf_r+0x5c>
 80170bc:	2a25      	cmp	r2, #37	; 0x25
 80170be:	d1f9      	bne.n	80170b4 <_svfiprintf_r+0x50>
 80170c0:	ebba 0b04 	subs.w	fp, sl, r4
 80170c4:	d00b      	beq.n	80170de <_svfiprintf_r+0x7a>
 80170c6:	465b      	mov	r3, fp
 80170c8:	4622      	mov	r2, r4
 80170ca:	4629      	mov	r1, r5
 80170cc:	4638      	mov	r0, r7
 80170ce:	f7ff ff6f 	bl	8016fb0 <__ssputs_r>
 80170d2:	3001      	adds	r0, #1
 80170d4:	f000 80a9 	beq.w	801722a <_svfiprintf_r+0x1c6>
 80170d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170da:	445a      	add	r2, fp
 80170dc:	9209      	str	r2, [sp, #36]	; 0x24
 80170de:	f89a 3000 	ldrb.w	r3, [sl]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	f000 80a1 	beq.w	801722a <_svfiprintf_r+0x1c6>
 80170e8:	2300      	movs	r3, #0
 80170ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80170ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170f2:	f10a 0a01 	add.w	sl, sl, #1
 80170f6:	9304      	str	r3, [sp, #16]
 80170f8:	9307      	str	r3, [sp, #28]
 80170fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80170fe:	931a      	str	r3, [sp, #104]	; 0x68
 8017100:	4654      	mov	r4, sl
 8017102:	2205      	movs	r2, #5
 8017104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017108:	4850      	ldr	r0, [pc, #320]	; (801724c <_svfiprintf_r+0x1e8>)
 801710a:	f7e9 f879 	bl	8000200 <memchr>
 801710e:	9a04      	ldr	r2, [sp, #16]
 8017110:	b9d8      	cbnz	r0, 801714a <_svfiprintf_r+0xe6>
 8017112:	06d0      	lsls	r0, r2, #27
 8017114:	bf44      	itt	mi
 8017116:	2320      	movmi	r3, #32
 8017118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801711c:	0711      	lsls	r1, r2, #28
 801711e:	bf44      	itt	mi
 8017120:	232b      	movmi	r3, #43	; 0x2b
 8017122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017126:	f89a 3000 	ldrb.w	r3, [sl]
 801712a:	2b2a      	cmp	r3, #42	; 0x2a
 801712c:	d015      	beq.n	801715a <_svfiprintf_r+0xf6>
 801712e:	9a07      	ldr	r2, [sp, #28]
 8017130:	4654      	mov	r4, sl
 8017132:	2000      	movs	r0, #0
 8017134:	f04f 0c0a 	mov.w	ip, #10
 8017138:	4621      	mov	r1, r4
 801713a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801713e:	3b30      	subs	r3, #48	; 0x30
 8017140:	2b09      	cmp	r3, #9
 8017142:	d94d      	bls.n	80171e0 <_svfiprintf_r+0x17c>
 8017144:	b1b0      	cbz	r0, 8017174 <_svfiprintf_r+0x110>
 8017146:	9207      	str	r2, [sp, #28]
 8017148:	e014      	b.n	8017174 <_svfiprintf_r+0x110>
 801714a:	eba0 0308 	sub.w	r3, r0, r8
 801714e:	fa09 f303 	lsl.w	r3, r9, r3
 8017152:	4313      	orrs	r3, r2
 8017154:	9304      	str	r3, [sp, #16]
 8017156:	46a2      	mov	sl, r4
 8017158:	e7d2      	b.n	8017100 <_svfiprintf_r+0x9c>
 801715a:	9b03      	ldr	r3, [sp, #12]
 801715c:	1d19      	adds	r1, r3, #4
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	9103      	str	r1, [sp, #12]
 8017162:	2b00      	cmp	r3, #0
 8017164:	bfbb      	ittet	lt
 8017166:	425b      	neglt	r3, r3
 8017168:	f042 0202 	orrlt.w	r2, r2, #2
 801716c:	9307      	strge	r3, [sp, #28]
 801716e:	9307      	strlt	r3, [sp, #28]
 8017170:	bfb8      	it	lt
 8017172:	9204      	strlt	r2, [sp, #16]
 8017174:	7823      	ldrb	r3, [r4, #0]
 8017176:	2b2e      	cmp	r3, #46	; 0x2e
 8017178:	d10c      	bne.n	8017194 <_svfiprintf_r+0x130>
 801717a:	7863      	ldrb	r3, [r4, #1]
 801717c:	2b2a      	cmp	r3, #42	; 0x2a
 801717e:	d134      	bne.n	80171ea <_svfiprintf_r+0x186>
 8017180:	9b03      	ldr	r3, [sp, #12]
 8017182:	1d1a      	adds	r2, r3, #4
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	9203      	str	r2, [sp, #12]
 8017188:	2b00      	cmp	r3, #0
 801718a:	bfb8      	it	lt
 801718c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017190:	3402      	adds	r4, #2
 8017192:	9305      	str	r3, [sp, #20]
 8017194:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801725c <_svfiprintf_r+0x1f8>
 8017198:	7821      	ldrb	r1, [r4, #0]
 801719a:	2203      	movs	r2, #3
 801719c:	4650      	mov	r0, sl
 801719e:	f7e9 f82f 	bl	8000200 <memchr>
 80171a2:	b138      	cbz	r0, 80171b4 <_svfiprintf_r+0x150>
 80171a4:	9b04      	ldr	r3, [sp, #16]
 80171a6:	eba0 000a 	sub.w	r0, r0, sl
 80171aa:	2240      	movs	r2, #64	; 0x40
 80171ac:	4082      	lsls	r2, r0
 80171ae:	4313      	orrs	r3, r2
 80171b0:	3401      	adds	r4, #1
 80171b2:	9304      	str	r3, [sp, #16]
 80171b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171b8:	4825      	ldr	r0, [pc, #148]	; (8017250 <_svfiprintf_r+0x1ec>)
 80171ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80171be:	2206      	movs	r2, #6
 80171c0:	f7e9 f81e 	bl	8000200 <memchr>
 80171c4:	2800      	cmp	r0, #0
 80171c6:	d038      	beq.n	801723a <_svfiprintf_r+0x1d6>
 80171c8:	4b22      	ldr	r3, [pc, #136]	; (8017254 <_svfiprintf_r+0x1f0>)
 80171ca:	bb1b      	cbnz	r3, 8017214 <_svfiprintf_r+0x1b0>
 80171cc:	9b03      	ldr	r3, [sp, #12]
 80171ce:	3307      	adds	r3, #7
 80171d0:	f023 0307 	bic.w	r3, r3, #7
 80171d4:	3308      	adds	r3, #8
 80171d6:	9303      	str	r3, [sp, #12]
 80171d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171da:	4433      	add	r3, r6
 80171dc:	9309      	str	r3, [sp, #36]	; 0x24
 80171de:	e768      	b.n	80170b2 <_svfiprintf_r+0x4e>
 80171e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80171e4:	460c      	mov	r4, r1
 80171e6:	2001      	movs	r0, #1
 80171e8:	e7a6      	b.n	8017138 <_svfiprintf_r+0xd4>
 80171ea:	2300      	movs	r3, #0
 80171ec:	3401      	adds	r4, #1
 80171ee:	9305      	str	r3, [sp, #20]
 80171f0:	4619      	mov	r1, r3
 80171f2:	f04f 0c0a 	mov.w	ip, #10
 80171f6:	4620      	mov	r0, r4
 80171f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171fc:	3a30      	subs	r2, #48	; 0x30
 80171fe:	2a09      	cmp	r2, #9
 8017200:	d903      	bls.n	801720a <_svfiprintf_r+0x1a6>
 8017202:	2b00      	cmp	r3, #0
 8017204:	d0c6      	beq.n	8017194 <_svfiprintf_r+0x130>
 8017206:	9105      	str	r1, [sp, #20]
 8017208:	e7c4      	b.n	8017194 <_svfiprintf_r+0x130>
 801720a:	fb0c 2101 	mla	r1, ip, r1, r2
 801720e:	4604      	mov	r4, r0
 8017210:	2301      	movs	r3, #1
 8017212:	e7f0      	b.n	80171f6 <_svfiprintf_r+0x192>
 8017214:	ab03      	add	r3, sp, #12
 8017216:	9300      	str	r3, [sp, #0]
 8017218:	462a      	mov	r2, r5
 801721a:	4b0f      	ldr	r3, [pc, #60]	; (8017258 <_svfiprintf_r+0x1f4>)
 801721c:	a904      	add	r1, sp, #16
 801721e:	4638      	mov	r0, r7
 8017220:	f3af 8000 	nop.w
 8017224:	1c42      	adds	r2, r0, #1
 8017226:	4606      	mov	r6, r0
 8017228:	d1d6      	bne.n	80171d8 <_svfiprintf_r+0x174>
 801722a:	89ab      	ldrh	r3, [r5, #12]
 801722c:	065b      	lsls	r3, r3, #25
 801722e:	f53f af2d 	bmi.w	801708c <_svfiprintf_r+0x28>
 8017232:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017234:	b01d      	add	sp, #116	; 0x74
 8017236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801723a:	ab03      	add	r3, sp, #12
 801723c:	9300      	str	r3, [sp, #0]
 801723e:	462a      	mov	r2, r5
 8017240:	4b05      	ldr	r3, [pc, #20]	; (8017258 <_svfiprintf_r+0x1f4>)
 8017242:	a904      	add	r1, sp, #16
 8017244:	4638      	mov	r0, r7
 8017246:	f000 f9bd 	bl	80175c4 <_printf_i>
 801724a:	e7eb      	b.n	8017224 <_svfiprintf_r+0x1c0>
 801724c:	08018a04 	.word	0x08018a04
 8017250:	08018a0e 	.word	0x08018a0e
 8017254:	00000000 	.word	0x00000000
 8017258:	08016fb1 	.word	0x08016fb1
 801725c:	08018a0a 	.word	0x08018a0a

08017260 <__sfputc_r>:
 8017260:	6893      	ldr	r3, [r2, #8]
 8017262:	3b01      	subs	r3, #1
 8017264:	2b00      	cmp	r3, #0
 8017266:	b410      	push	{r4}
 8017268:	6093      	str	r3, [r2, #8]
 801726a:	da08      	bge.n	801727e <__sfputc_r+0x1e>
 801726c:	6994      	ldr	r4, [r2, #24]
 801726e:	42a3      	cmp	r3, r4
 8017270:	db01      	blt.n	8017276 <__sfputc_r+0x16>
 8017272:	290a      	cmp	r1, #10
 8017274:	d103      	bne.n	801727e <__sfputc_r+0x1e>
 8017276:	f85d 4b04 	ldr.w	r4, [sp], #4
 801727a:	f000 bb85 	b.w	8017988 <__swbuf_r>
 801727e:	6813      	ldr	r3, [r2, #0]
 8017280:	1c58      	adds	r0, r3, #1
 8017282:	6010      	str	r0, [r2, #0]
 8017284:	7019      	strb	r1, [r3, #0]
 8017286:	4608      	mov	r0, r1
 8017288:	f85d 4b04 	ldr.w	r4, [sp], #4
 801728c:	4770      	bx	lr

0801728e <__sfputs_r>:
 801728e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017290:	4606      	mov	r6, r0
 8017292:	460f      	mov	r7, r1
 8017294:	4614      	mov	r4, r2
 8017296:	18d5      	adds	r5, r2, r3
 8017298:	42ac      	cmp	r4, r5
 801729a:	d101      	bne.n	80172a0 <__sfputs_r+0x12>
 801729c:	2000      	movs	r0, #0
 801729e:	e007      	b.n	80172b0 <__sfputs_r+0x22>
 80172a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172a4:	463a      	mov	r2, r7
 80172a6:	4630      	mov	r0, r6
 80172a8:	f7ff ffda 	bl	8017260 <__sfputc_r>
 80172ac:	1c43      	adds	r3, r0, #1
 80172ae:	d1f3      	bne.n	8017298 <__sfputs_r+0xa>
 80172b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080172b4 <_vfiprintf_r>:
 80172b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b8:	460d      	mov	r5, r1
 80172ba:	b09d      	sub	sp, #116	; 0x74
 80172bc:	4614      	mov	r4, r2
 80172be:	4698      	mov	r8, r3
 80172c0:	4606      	mov	r6, r0
 80172c2:	b118      	cbz	r0, 80172cc <_vfiprintf_r+0x18>
 80172c4:	6a03      	ldr	r3, [r0, #32]
 80172c6:	b90b      	cbnz	r3, 80172cc <_vfiprintf_r+0x18>
 80172c8:	f7ff fbfc 	bl	8016ac4 <__sinit>
 80172cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80172ce:	07d9      	lsls	r1, r3, #31
 80172d0:	d405      	bmi.n	80172de <_vfiprintf_r+0x2a>
 80172d2:	89ab      	ldrh	r3, [r5, #12]
 80172d4:	059a      	lsls	r2, r3, #22
 80172d6:	d402      	bmi.n	80172de <_vfiprintf_r+0x2a>
 80172d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80172da:	f7ff fdd3 	bl	8016e84 <__retarget_lock_acquire_recursive>
 80172de:	89ab      	ldrh	r3, [r5, #12]
 80172e0:	071b      	lsls	r3, r3, #28
 80172e2:	d501      	bpl.n	80172e8 <_vfiprintf_r+0x34>
 80172e4:	692b      	ldr	r3, [r5, #16]
 80172e6:	b99b      	cbnz	r3, 8017310 <_vfiprintf_r+0x5c>
 80172e8:	4629      	mov	r1, r5
 80172ea:	4630      	mov	r0, r6
 80172ec:	f000 fb8a 	bl	8017a04 <__swsetup_r>
 80172f0:	b170      	cbz	r0, 8017310 <_vfiprintf_r+0x5c>
 80172f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80172f4:	07dc      	lsls	r4, r3, #31
 80172f6:	d504      	bpl.n	8017302 <_vfiprintf_r+0x4e>
 80172f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172fc:	b01d      	add	sp, #116	; 0x74
 80172fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017302:	89ab      	ldrh	r3, [r5, #12]
 8017304:	0598      	lsls	r0, r3, #22
 8017306:	d4f7      	bmi.n	80172f8 <_vfiprintf_r+0x44>
 8017308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801730a:	f7ff fdbc 	bl	8016e86 <__retarget_lock_release_recursive>
 801730e:	e7f3      	b.n	80172f8 <_vfiprintf_r+0x44>
 8017310:	2300      	movs	r3, #0
 8017312:	9309      	str	r3, [sp, #36]	; 0x24
 8017314:	2320      	movs	r3, #32
 8017316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801731a:	f8cd 800c 	str.w	r8, [sp, #12]
 801731e:	2330      	movs	r3, #48	; 0x30
 8017320:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80174d4 <_vfiprintf_r+0x220>
 8017324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017328:	f04f 0901 	mov.w	r9, #1
 801732c:	4623      	mov	r3, r4
 801732e:	469a      	mov	sl, r3
 8017330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017334:	b10a      	cbz	r2, 801733a <_vfiprintf_r+0x86>
 8017336:	2a25      	cmp	r2, #37	; 0x25
 8017338:	d1f9      	bne.n	801732e <_vfiprintf_r+0x7a>
 801733a:	ebba 0b04 	subs.w	fp, sl, r4
 801733e:	d00b      	beq.n	8017358 <_vfiprintf_r+0xa4>
 8017340:	465b      	mov	r3, fp
 8017342:	4622      	mov	r2, r4
 8017344:	4629      	mov	r1, r5
 8017346:	4630      	mov	r0, r6
 8017348:	f7ff ffa1 	bl	801728e <__sfputs_r>
 801734c:	3001      	adds	r0, #1
 801734e:	f000 80a9 	beq.w	80174a4 <_vfiprintf_r+0x1f0>
 8017352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017354:	445a      	add	r2, fp
 8017356:	9209      	str	r2, [sp, #36]	; 0x24
 8017358:	f89a 3000 	ldrb.w	r3, [sl]
 801735c:	2b00      	cmp	r3, #0
 801735e:	f000 80a1 	beq.w	80174a4 <_vfiprintf_r+0x1f0>
 8017362:	2300      	movs	r3, #0
 8017364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801736c:	f10a 0a01 	add.w	sl, sl, #1
 8017370:	9304      	str	r3, [sp, #16]
 8017372:	9307      	str	r3, [sp, #28]
 8017374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017378:	931a      	str	r3, [sp, #104]	; 0x68
 801737a:	4654      	mov	r4, sl
 801737c:	2205      	movs	r2, #5
 801737e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017382:	4854      	ldr	r0, [pc, #336]	; (80174d4 <_vfiprintf_r+0x220>)
 8017384:	f7e8 ff3c 	bl	8000200 <memchr>
 8017388:	9a04      	ldr	r2, [sp, #16]
 801738a:	b9d8      	cbnz	r0, 80173c4 <_vfiprintf_r+0x110>
 801738c:	06d1      	lsls	r1, r2, #27
 801738e:	bf44      	itt	mi
 8017390:	2320      	movmi	r3, #32
 8017392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017396:	0713      	lsls	r3, r2, #28
 8017398:	bf44      	itt	mi
 801739a:	232b      	movmi	r3, #43	; 0x2b
 801739c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173a0:	f89a 3000 	ldrb.w	r3, [sl]
 80173a4:	2b2a      	cmp	r3, #42	; 0x2a
 80173a6:	d015      	beq.n	80173d4 <_vfiprintf_r+0x120>
 80173a8:	9a07      	ldr	r2, [sp, #28]
 80173aa:	4654      	mov	r4, sl
 80173ac:	2000      	movs	r0, #0
 80173ae:	f04f 0c0a 	mov.w	ip, #10
 80173b2:	4621      	mov	r1, r4
 80173b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173b8:	3b30      	subs	r3, #48	; 0x30
 80173ba:	2b09      	cmp	r3, #9
 80173bc:	d94d      	bls.n	801745a <_vfiprintf_r+0x1a6>
 80173be:	b1b0      	cbz	r0, 80173ee <_vfiprintf_r+0x13a>
 80173c0:	9207      	str	r2, [sp, #28]
 80173c2:	e014      	b.n	80173ee <_vfiprintf_r+0x13a>
 80173c4:	eba0 0308 	sub.w	r3, r0, r8
 80173c8:	fa09 f303 	lsl.w	r3, r9, r3
 80173cc:	4313      	orrs	r3, r2
 80173ce:	9304      	str	r3, [sp, #16]
 80173d0:	46a2      	mov	sl, r4
 80173d2:	e7d2      	b.n	801737a <_vfiprintf_r+0xc6>
 80173d4:	9b03      	ldr	r3, [sp, #12]
 80173d6:	1d19      	adds	r1, r3, #4
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	9103      	str	r1, [sp, #12]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	bfbb      	ittet	lt
 80173e0:	425b      	neglt	r3, r3
 80173e2:	f042 0202 	orrlt.w	r2, r2, #2
 80173e6:	9307      	strge	r3, [sp, #28]
 80173e8:	9307      	strlt	r3, [sp, #28]
 80173ea:	bfb8      	it	lt
 80173ec:	9204      	strlt	r2, [sp, #16]
 80173ee:	7823      	ldrb	r3, [r4, #0]
 80173f0:	2b2e      	cmp	r3, #46	; 0x2e
 80173f2:	d10c      	bne.n	801740e <_vfiprintf_r+0x15a>
 80173f4:	7863      	ldrb	r3, [r4, #1]
 80173f6:	2b2a      	cmp	r3, #42	; 0x2a
 80173f8:	d134      	bne.n	8017464 <_vfiprintf_r+0x1b0>
 80173fa:	9b03      	ldr	r3, [sp, #12]
 80173fc:	1d1a      	adds	r2, r3, #4
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	9203      	str	r2, [sp, #12]
 8017402:	2b00      	cmp	r3, #0
 8017404:	bfb8      	it	lt
 8017406:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801740a:	3402      	adds	r4, #2
 801740c:	9305      	str	r3, [sp, #20]
 801740e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80174e4 <_vfiprintf_r+0x230>
 8017412:	7821      	ldrb	r1, [r4, #0]
 8017414:	2203      	movs	r2, #3
 8017416:	4650      	mov	r0, sl
 8017418:	f7e8 fef2 	bl	8000200 <memchr>
 801741c:	b138      	cbz	r0, 801742e <_vfiprintf_r+0x17a>
 801741e:	9b04      	ldr	r3, [sp, #16]
 8017420:	eba0 000a 	sub.w	r0, r0, sl
 8017424:	2240      	movs	r2, #64	; 0x40
 8017426:	4082      	lsls	r2, r0
 8017428:	4313      	orrs	r3, r2
 801742a:	3401      	adds	r4, #1
 801742c:	9304      	str	r3, [sp, #16]
 801742e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017432:	4829      	ldr	r0, [pc, #164]	; (80174d8 <_vfiprintf_r+0x224>)
 8017434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017438:	2206      	movs	r2, #6
 801743a:	f7e8 fee1 	bl	8000200 <memchr>
 801743e:	2800      	cmp	r0, #0
 8017440:	d03f      	beq.n	80174c2 <_vfiprintf_r+0x20e>
 8017442:	4b26      	ldr	r3, [pc, #152]	; (80174dc <_vfiprintf_r+0x228>)
 8017444:	bb1b      	cbnz	r3, 801748e <_vfiprintf_r+0x1da>
 8017446:	9b03      	ldr	r3, [sp, #12]
 8017448:	3307      	adds	r3, #7
 801744a:	f023 0307 	bic.w	r3, r3, #7
 801744e:	3308      	adds	r3, #8
 8017450:	9303      	str	r3, [sp, #12]
 8017452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017454:	443b      	add	r3, r7
 8017456:	9309      	str	r3, [sp, #36]	; 0x24
 8017458:	e768      	b.n	801732c <_vfiprintf_r+0x78>
 801745a:	fb0c 3202 	mla	r2, ip, r2, r3
 801745e:	460c      	mov	r4, r1
 8017460:	2001      	movs	r0, #1
 8017462:	e7a6      	b.n	80173b2 <_vfiprintf_r+0xfe>
 8017464:	2300      	movs	r3, #0
 8017466:	3401      	adds	r4, #1
 8017468:	9305      	str	r3, [sp, #20]
 801746a:	4619      	mov	r1, r3
 801746c:	f04f 0c0a 	mov.w	ip, #10
 8017470:	4620      	mov	r0, r4
 8017472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017476:	3a30      	subs	r2, #48	; 0x30
 8017478:	2a09      	cmp	r2, #9
 801747a:	d903      	bls.n	8017484 <_vfiprintf_r+0x1d0>
 801747c:	2b00      	cmp	r3, #0
 801747e:	d0c6      	beq.n	801740e <_vfiprintf_r+0x15a>
 8017480:	9105      	str	r1, [sp, #20]
 8017482:	e7c4      	b.n	801740e <_vfiprintf_r+0x15a>
 8017484:	fb0c 2101 	mla	r1, ip, r1, r2
 8017488:	4604      	mov	r4, r0
 801748a:	2301      	movs	r3, #1
 801748c:	e7f0      	b.n	8017470 <_vfiprintf_r+0x1bc>
 801748e:	ab03      	add	r3, sp, #12
 8017490:	9300      	str	r3, [sp, #0]
 8017492:	462a      	mov	r2, r5
 8017494:	4b12      	ldr	r3, [pc, #72]	; (80174e0 <_vfiprintf_r+0x22c>)
 8017496:	a904      	add	r1, sp, #16
 8017498:	4630      	mov	r0, r6
 801749a:	f3af 8000 	nop.w
 801749e:	4607      	mov	r7, r0
 80174a0:	1c78      	adds	r0, r7, #1
 80174a2:	d1d6      	bne.n	8017452 <_vfiprintf_r+0x19e>
 80174a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174a6:	07d9      	lsls	r1, r3, #31
 80174a8:	d405      	bmi.n	80174b6 <_vfiprintf_r+0x202>
 80174aa:	89ab      	ldrh	r3, [r5, #12]
 80174ac:	059a      	lsls	r2, r3, #22
 80174ae:	d402      	bmi.n	80174b6 <_vfiprintf_r+0x202>
 80174b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174b2:	f7ff fce8 	bl	8016e86 <__retarget_lock_release_recursive>
 80174b6:	89ab      	ldrh	r3, [r5, #12]
 80174b8:	065b      	lsls	r3, r3, #25
 80174ba:	f53f af1d 	bmi.w	80172f8 <_vfiprintf_r+0x44>
 80174be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80174c0:	e71c      	b.n	80172fc <_vfiprintf_r+0x48>
 80174c2:	ab03      	add	r3, sp, #12
 80174c4:	9300      	str	r3, [sp, #0]
 80174c6:	462a      	mov	r2, r5
 80174c8:	4b05      	ldr	r3, [pc, #20]	; (80174e0 <_vfiprintf_r+0x22c>)
 80174ca:	a904      	add	r1, sp, #16
 80174cc:	4630      	mov	r0, r6
 80174ce:	f000 f879 	bl	80175c4 <_printf_i>
 80174d2:	e7e4      	b.n	801749e <_vfiprintf_r+0x1ea>
 80174d4:	08018a04 	.word	0x08018a04
 80174d8:	08018a0e 	.word	0x08018a0e
 80174dc:	00000000 	.word	0x00000000
 80174e0:	0801728f 	.word	0x0801728f
 80174e4:	08018a0a 	.word	0x08018a0a

080174e8 <_printf_common>:
 80174e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174ec:	4616      	mov	r6, r2
 80174ee:	4699      	mov	r9, r3
 80174f0:	688a      	ldr	r2, [r1, #8]
 80174f2:	690b      	ldr	r3, [r1, #16]
 80174f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80174f8:	4293      	cmp	r3, r2
 80174fa:	bfb8      	it	lt
 80174fc:	4613      	movlt	r3, r2
 80174fe:	6033      	str	r3, [r6, #0]
 8017500:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017504:	4607      	mov	r7, r0
 8017506:	460c      	mov	r4, r1
 8017508:	b10a      	cbz	r2, 801750e <_printf_common+0x26>
 801750a:	3301      	adds	r3, #1
 801750c:	6033      	str	r3, [r6, #0]
 801750e:	6823      	ldr	r3, [r4, #0]
 8017510:	0699      	lsls	r1, r3, #26
 8017512:	bf42      	ittt	mi
 8017514:	6833      	ldrmi	r3, [r6, #0]
 8017516:	3302      	addmi	r3, #2
 8017518:	6033      	strmi	r3, [r6, #0]
 801751a:	6825      	ldr	r5, [r4, #0]
 801751c:	f015 0506 	ands.w	r5, r5, #6
 8017520:	d106      	bne.n	8017530 <_printf_common+0x48>
 8017522:	f104 0a19 	add.w	sl, r4, #25
 8017526:	68e3      	ldr	r3, [r4, #12]
 8017528:	6832      	ldr	r2, [r6, #0]
 801752a:	1a9b      	subs	r3, r3, r2
 801752c:	42ab      	cmp	r3, r5
 801752e:	dc26      	bgt.n	801757e <_printf_common+0x96>
 8017530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017534:	1e13      	subs	r3, r2, #0
 8017536:	6822      	ldr	r2, [r4, #0]
 8017538:	bf18      	it	ne
 801753a:	2301      	movne	r3, #1
 801753c:	0692      	lsls	r2, r2, #26
 801753e:	d42b      	bmi.n	8017598 <_printf_common+0xb0>
 8017540:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017544:	4649      	mov	r1, r9
 8017546:	4638      	mov	r0, r7
 8017548:	47c0      	blx	r8
 801754a:	3001      	adds	r0, #1
 801754c:	d01e      	beq.n	801758c <_printf_common+0xa4>
 801754e:	6823      	ldr	r3, [r4, #0]
 8017550:	6922      	ldr	r2, [r4, #16]
 8017552:	f003 0306 	and.w	r3, r3, #6
 8017556:	2b04      	cmp	r3, #4
 8017558:	bf02      	ittt	eq
 801755a:	68e5      	ldreq	r5, [r4, #12]
 801755c:	6833      	ldreq	r3, [r6, #0]
 801755e:	1aed      	subeq	r5, r5, r3
 8017560:	68a3      	ldr	r3, [r4, #8]
 8017562:	bf0c      	ite	eq
 8017564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017568:	2500      	movne	r5, #0
 801756a:	4293      	cmp	r3, r2
 801756c:	bfc4      	itt	gt
 801756e:	1a9b      	subgt	r3, r3, r2
 8017570:	18ed      	addgt	r5, r5, r3
 8017572:	2600      	movs	r6, #0
 8017574:	341a      	adds	r4, #26
 8017576:	42b5      	cmp	r5, r6
 8017578:	d11a      	bne.n	80175b0 <_printf_common+0xc8>
 801757a:	2000      	movs	r0, #0
 801757c:	e008      	b.n	8017590 <_printf_common+0xa8>
 801757e:	2301      	movs	r3, #1
 8017580:	4652      	mov	r2, sl
 8017582:	4649      	mov	r1, r9
 8017584:	4638      	mov	r0, r7
 8017586:	47c0      	blx	r8
 8017588:	3001      	adds	r0, #1
 801758a:	d103      	bne.n	8017594 <_printf_common+0xac>
 801758c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017594:	3501      	adds	r5, #1
 8017596:	e7c6      	b.n	8017526 <_printf_common+0x3e>
 8017598:	18e1      	adds	r1, r4, r3
 801759a:	1c5a      	adds	r2, r3, #1
 801759c:	2030      	movs	r0, #48	; 0x30
 801759e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80175a2:	4422      	add	r2, r4
 80175a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80175a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80175ac:	3302      	adds	r3, #2
 80175ae:	e7c7      	b.n	8017540 <_printf_common+0x58>
 80175b0:	2301      	movs	r3, #1
 80175b2:	4622      	mov	r2, r4
 80175b4:	4649      	mov	r1, r9
 80175b6:	4638      	mov	r0, r7
 80175b8:	47c0      	blx	r8
 80175ba:	3001      	adds	r0, #1
 80175bc:	d0e6      	beq.n	801758c <_printf_common+0xa4>
 80175be:	3601      	adds	r6, #1
 80175c0:	e7d9      	b.n	8017576 <_printf_common+0x8e>
	...

080175c4 <_printf_i>:
 80175c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80175c8:	7e0f      	ldrb	r7, [r1, #24]
 80175ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80175cc:	2f78      	cmp	r7, #120	; 0x78
 80175ce:	4691      	mov	r9, r2
 80175d0:	4680      	mov	r8, r0
 80175d2:	460c      	mov	r4, r1
 80175d4:	469a      	mov	sl, r3
 80175d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80175da:	d807      	bhi.n	80175ec <_printf_i+0x28>
 80175dc:	2f62      	cmp	r7, #98	; 0x62
 80175de:	d80a      	bhi.n	80175f6 <_printf_i+0x32>
 80175e0:	2f00      	cmp	r7, #0
 80175e2:	f000 80d4 	beq.w	801778e <_printf_i+0x1ca>
 80175e6:	2f58      	cmp	r7, #88	; 0x58
 80175e8:	f000 80c0 	beq.w	801776c <_printf_i+0x1a8>
 80175ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80175f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80175f4:	e03a      	b.n	801766c <_printf_i+0xa8>
 80175f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80175fa:	2b15      	cmp	r3, #21
 80175fc:	d8f6      	bhi.n	80175ec <_printf_i+0x28>
 80175fe:	a101      	add	r1, pc, #4	; (adr r1, 8017604 <_printf_i+0x40>)
 8017600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017604:	0801765d 	.word	0x0801765d
 8017608:	08017671 	.word	0x08017671
 801760c:	080175ed 	.word	0x080175ed
 8017610:	080175ed 	.word	0x080175ed
 8017614:	080175ed 	.word	0x080175ed
 8017618:	080175ed 	.word	0x080175ed
 801761c:	08017671 	.word	0x08017671
 8017620:	080175ed 	.word	0x080175ed
 8017624:	080175ed 	.word	0x080175ed
 8017628:	080175ed 	.word	0x080175ed
 801762c:	080175ed 	.word	0x080175ed
 8017630:	08017775 	.word	0x08017775
 8017634:	0801769d 	.word	0x0801769d
 8017638:	0801772f 	.word	0x0801772f
 801763c:	080175ed 	.word	0x080175ed
 8017640:	080175ed 	.word	0x080175ed
 8017644:	08017797 	.word	0x08017797
 8017648:	080175ed 	.word	0x080175ed
 801764c:	0801769d 	.word	0x0801769d
 8017650:	080175ed 	.word	0x080175ed
 8017654:	080175ed 	.word	0x080175ed
 8017658:	08017737 	.word	0x08017737
 801765c:	682b      	ldr	r3, [r5, #0]
 801765e:	1d1a      	adds	r2, r3, #4
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	602a      	str	r2, [r5, #0]
 8017664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801766c:	2301      	movs	r3, #1
 801766e:	e09f      	b.n	80177b0 <_printf_i+0x1ec>
 8017670:	6820      	ldr	r0, [r4, #0]
 8017672:	682b      	ldr	r3, [r5, #0]
 8017674:	0607      	lsls	r7, r0, #24
 8017676:	f103 0104 	add.w	r1, r3, #4
 801767a:	6029      	str	r1, [r5, #0]
 801767c:	d501      	bpl.n	8017682 <_printf_i+0xbe>
 801767e:	681e      	ldr	r6, [r3, #0]
 8017680:	e003      	b.n	801768a <_printf_i+0xc6>
 8017682:	0646      	lsls	r6, r0, #25
 8017684:	d5fb      	bpl.n	801767e <_printf_i+0xba>
 8017686:	f9b3 6000 	ldrsh.w	r6, [r3]
 801768a:	2e00      	cmp	r6, #0
 801768c:	da03      	bge.n	8017696 <_printf_i+0xd2>
 801768e:	232d      	movs	r3, #45	; 0x2d
 8017690:	4276      	negs	r6, r6
 8017692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017696:	485a      	ldr	r0, [pc, #360]	; (8017800 <_printf_i+0x23c>)
 8017698:	230a      	movs	r3, #10
 801769a:	e012      	b.n	80176c2 <_printf_i+0xfe>
 801769c:	682b      	ldr	r3, [r5, #0]
 801769e:	6820      	ldr	r0, [r4, #0]
 80176a0:	1d19      	adds	r1, r3, #4
 80176a2:	6029      	str	r1, [r5, #0]
 80176a4:	0605      	lsls	r5, r0, #24
 80176a6:	d501      	bpl.n	80176ac <_printf_i+0xe8>
 80176a8:	681e      	ldr	r6, [r3, #0]
 80176aa:	e002      	b.n	80176b2 <_printf_i+0xee>
 80176ac:	0641      	lsls	r1, r0, #25
 80176ae:	d5fb      	bpl.n	80176a8 <_printf_i+0xe4>
 80176b0:	881e      	ldrh	r6, [r3, #0]
 80176b2:	4853      	ldr	r0, [pc, #332]	; (8017800 <_printf_i+0x23c>)
 80176b4:	2f6f      	cmp	r7, #111	; 0x6f
 80176b6:	bf0c      	ite	eq
 80176b8:	2308      	moveq	r3, #8
 80176ba:	230a      	movne	r3, #10
 80176bc:	2100      	movs	r1, #0
 80176be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80176c2:	6865      	ldr	r5, [r4, #4]
 80176c4:	60a5      	str	r5, [r4, #8]
 80176c6:	2d00      	cmp	r5, #0
 80176c8:	bfa2      	ittt	ge
 80176ca:	6821      	ldrge	r1, [r4, #0]
 80176cc:	f021 0104 	bicge.w	r1, r1, #4
 80176d0:	6021      	strge	r1, [r4, #0]
 80176d2:	b90e      	cbnz	r6, 80176d8 <_printf_i+0x114>
 80176d4:	2d00      	cmp	r5, #0
 80176d6:	d04b      	beq.n	8017770 <_printf_i+0x1ac>
 80176d8:	4615      	mov	r5, r2
 80176da:	fbb6 f1f3 	udiv	r1, r6, r3
 80176de:	fb03 6711 	mls	r7, r3, r1, r6
 80176e2:	5dc7      	ldrb	r7, [r0, r7]
 80176e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80176e8:	4637      	mov	r7, r6
 80176ea:	42bb      	cmp	r3, r7
 80176ec:	460e      	mov	r6, r1
 80176ee:	d9f4      	bls.n	80176da <_printf_i+0x116>
 80176f0:	2b08      	cmp	r3, #8
 80176f2:	d10b      	bne.n	801770c <_printf_i+0x148>
 80176f4:	6823      	ldr	r3, [r4, #0]
 80176f6:	07de      	lsls	r6, r3, #31
 80176f8:	d508      	bpl.n	801770c <_printf_i+0x148>
 80176fa:	6923      	ldr	r3, [r4, #16]
 80176fc:	6861      	ldr	r1, [r4, #4]
 80176fe:	4299      	cmp	r1, r3
 8017700:	bfde      	ittt	le
 8017702:	2330      	movle	r3, #48	; 0x30
 8017704:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017708:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801770c:	1b52      	subs	r2, r2, r5
 801770e:	6122      	str	r2, [r4, #16]
 8017710:	f8cd a000 	str.w	sl, [sp]
 8017714:	464b      	mov	r3, r9
 8017716:	aa03      	add	r2, sp, #12
 8017718:	4621      	mov	r1, r4
 801771a:	4640      	mov	r0, r8
 801771c:	f7ff fee4 	bl	80174e8 <_printf_common>
 8017720:	3001      	adds	r0, #1
 8017722:	d14a      	bne.n	80177ba <_printf_i+0x1f6>
 8017724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017728:	b004      	add	sp, #16
 801772a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801772e:	6823      	ldr	r3, [r4, #0]
 8017730:	f043 0320 	orr.w	r3, r3, #32
 8017734:	6023      	str	r3, [r4, #0]
 8017736:	4833      	ldr	r0, [pc, #204]	; (8017804 <_printf_i+0x240>)
 8017738:	2778      	movs	r7, #120	; 0x78
 801773a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801773e:	6823      	ldr	r3, [r4, #0]
 8017740:	6829      	ldr	r1, [r5, #0]
 8017742:	061f      	lsls	r7, r3, #24
 8017744:	f851 6b04 	ldr.w	r6, [r1], #4
 8017748:	d402      	bmi.n	8017750 <_printf_i+0x18c>
 801774a:	065f      	lsls	r7, r3, #25
 801774c:	bf48      	it	mi
 801774e:	b2b6      	uxthmi	r6, r6
 8017750:	07df      	lsls	r7, r3, #31
 8017752:	bf48      	it	mi
 8017754:	f043 0320 	orrmi.w	r3, r3, #32
 8017758:	6029      	str	r1, [r5, #0]
 801775a:	bf48      	it	mi
 801775c:	6023      	strmi	r3, [r4, #0]
 801775e:	b91e      	cbnz	r6, 8017768 <_printf_i+0x1a4>
 8017760:	6823      	ldr	r3, [r4, #0]
 8017762:	f023 0320 	bic.w	r3, r3, #32
 8017766:	6023      	str	r3, [r4, #0]
 8017768:	2310      	movs	r3, #16
 801776a:	e7a7      	b.n	80176bc <_printf_i+0xf8>
 801776c:	4824      	ldr	r0, [pc, #144]	; (8017800 <_printf_i+0x23c>)
 801776e:	e7e4      	b.n	801773a <_printf_i+0x176>
 8017770:	4615      	mov	r5, r2
 8017772:	e7bd      	b.n	80176f0 <_printf_i+0x12c>
 8017774:	682b      	ldr	r3, [r5, #0]
 8017776:	6826      	ldr	r6, [r4, #0]
 8017778:	6961      	ldr	r1, [r4, #20]
 801777a:	1d18      	adds	r0, r3, #4
 801777c:	6028      	str	r0, [r5, #0]
 801777e:	0635      	lsls	r5, r6, #24
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	d501      	bpl.n	8017788 <_printf_i+0x1c4>
 8017784:	6019      	str	r1, [r3, #0]
 8017786:	e002      	b.n	801778e <_printf_i+0x1ca>
 8017788:	0670      	lsls	r0, r6, #25
 801778a:	d5fb      	bpl.n	8017784 <_printf_i+0x1c0>
 801778c:	8019      	strh	r1, [r3, #0]
 801778e:	2300      	movs	r3, #0
 8017790:	6123      	str	r3, [r4, #16]
 8017792:	4615      	mov	r5, r2
 8017794:	e7bc      	b.n	8017710 <_printf_i+0x14c>
 8017796:	682b      	ldr	r3, [r5, #0]
 8017798:	1d1a      	adds	r2, r3, #4
 801779a:	602a      	str	r2, [r5, #0]
 801779c:	681d      	ldr	r5, [r3, #0]
 801779e:	6862      	ldr	r2, [r4, #4]
 80177a0:	2100      	movs	r1, #0
 80177a2:	4628      	mov	r0, r5
 80177a4:	f7e8 fd2c 	bl	8000200 <memchr>
 80177a8:	b108      	cbz	r0, 80177ae <_printf_i+0x1ea>
 80177aa:	1b40      	subs	r0, r0, r5
 80177ac:	6060      	str	r0, [r4, #4]
 80177ae:	6863      	ldr	r3, [r4, #4]
 80177b0:	6123      	str	r3, [r4, #16]
 80177b2:	2300      	movs	r3, #0
 80177b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80177b8:	e7aa      	b.n	8017710 <_printf_i+0x14c>
 80177ba:	6923      	ldr	r3, [r4, #16]
 80177bc:	462a      	mov	r2, r5
 80177be:	4649      	mov	r1, r9
 80177c0:	4640      	mov	r0, r8
 80177c2:	47d0      	blx	sl
 80177c4:	3001      	adds	r0, #1
 80177c6:	d0ad      	beq.n	8017724 <_printf_i+0x160>
 80177c8:	6823      	ldr	r3, [r4, #0]
 80177ca:	079b      	lsls	r3, r3, #30
 80177cc:	d413      	bmi.n	80177f6 <_printf_i+0x232>
 80177ce:	68e0      	ldr	r0, [r4, #12]
 80177d0:	9b03      	ldr	r3, [sp, #12]
 80177d2:	4298      	cmp	r0, r3
 80177d4:	bfb8      	it	lt
 80177d6:	4618      	movlt	r0, r3
 80177d8:	e7a6      	b.n	8017728 <_printf_i+0x164>
 80177da:	2301      	movs	r3, #1
 80177dc:	4632      	mov	r2, r6
 80177de:	4649      	mov	r1, r9
 80177e0:	4640      	mov	r0, r8
 80177e2:	47d0      	blx	sl
 80177e4:	3001      	adds	r0, #1
 80177e6:	d09d      	beq.n	8017724 <_printf_i+0x160>
 80177e8:	3501      	adds	r5, #1
 80177ea:	68e3      	ldr	r3, [r4, #12]
 80177ec:	9903      	ldr	r1, [sp, #12]
 80177ee:	1a5b      	subs	r3, r3, r1
 80177f0:	42ab      	cmp	r3, r5
 80177f2:	dcf2      	bgt.n	80177da <_printf_i+0x216>
 80177f4:	e7eb      	b.n	80177ce <_printf_i+0x20a>
 80177f6:	2500      	movs	r5, #0
 80177f8:	f104 0619 	add.w	r6, r4, #25
 80177fc:	e7f5      	b.n	80177ea <_printf_i+0x226>
 80177fe:	bf00      	nop
 8017800:	08018a15 	.word	0x08018a15
 8017804:	08018a26 	.word	0x08018a26

08017808 <__sflush_r>:
 8017808:	898a      	ldrh	r2, [r1, #12]
 801780a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801780e:	4605      	mov	r5, r0
 8017810:	0710      	lsls	r0, r2, #28
 8017812:	460c      	mov	r4, r1
 8017814:	d458      	bmi.n	80178c8 <__sflush_r+0xc0>
 8017816:	684b      	ldr	r3, [r1, #4]
 8017818:	2b00      	cmp	r3, #0
 801781a:	dc05      	bgt.n	8017828 <__sflush_r+0x20>
 801781c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801781e:	2b00      	cmp	r3, #0
 8017820:	dc02      	bgt.n	8017828 <__sflush_r+0x20>
 8017822:	2000      	movs	r0, #0
 8017824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801782a:	2e00      	cmp	r6, #0
 801782c:	d0f9      	beq.n	8017822 <__sflush_r+0x1a>
 801782e:	2300      	movs	r3, #0
 8017830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017834:	682f      	ldr	r7, [r5, #0]
 8017836:	6a21      	ldr	r1, [r4, #32]
 8017838:	602b      	str	r3, [r5, #0]
 801783a:	d032      	beq.n	80178a2 <__sflush_r+0x9a>
 801783c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801783e:	89a3      	ldrh	r3, [r4, #12]
 8017840:	075a      	lsls	r2, r3, #29
 8017842:	d505      	bpl.n	8017850 <__sflush_r+0x48>
 8017844:	6863      	ldr	r3, [r4, #4]
 8017846:	1ac0      	subs	r0, r0, r3
 8017848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801784a:	b10b      	cbz	r3, 8017850 <__sflush_r+0x48>
 801784c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801784e:	1ac0      	subs	r0, r0, r3
 8017850:	2300      	movs	r3, #0
 8017852:	4602      	mov	r2, r0
 8017854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017856:	6a21      	ldr	r1, [r4, #32]
 8017858:	4628      	mov	r0, r5
 801785a:	47b0      	blx	r6
 801785c:	1c43      	adds	r3, r0, #1
 801785e:	89a3      	ldrh	r3, [r4, #12]
 8017860:	d106      	bne.n	8017870 <__sflush_r+0x68>
 8017862:	6829      	ldr	r1, [r5, #0]
 8017864:	291d      	cmp	r1, #29
 8017866:	d82b      	bhi.n	80178c0 <__sflush_r+0xb8>
 8017868:	4a29      	ldr	r2, [pc, #164]	; (8017910 <__sflush_r+0x108>)
 801786a:	410a      	asrs	r2, r1
 801786c:	07d6      	lsls	r6, r2, #31
 801786e:	d427      	bmi.n	80178c0 <__sflush_r+0xb8>
 8017870:	2200      	movs	r2, #0
 8017872:	6062      	str	r2, [r4, #4]
 8017874:	04d9      	lsls	r1, r3, #19
 8017876:	6922      	ldr	r2, [r4, #16]
 8017878:	6022      	str	r2, [r4, #0]
 801787a:	d504      	bpl.n	8017886 <__sflush_r+0x7e>
 801787c:	1c42      	adds	r2, r0, #1
 801787e:	d101      	bne.n	8017884 <__sflush_r+0x7c>
 8017880:	682b      	ldr	r3, [r5, #0]
 8017882:	b903      	cbnz	r3, 8017886 <__sflush_r+0x7e>
 8017884:	6560      	str	r0, [r4, #84]	; 0x54
 8017886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017888:	602f      	str	r7, [r5, #0]
 801788a:	2900      	cmp	r1, #0
 801788c:	d0c9      	beq.n	8017822 <__sflush_r+0x1a>
 801788e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017892:	4299      	cmp	r1, r3
 8017894:	d002      	beq.n	801789c <__sflush_r+0x94>
 8017896:	4628      	mov	r0, r5
 8017898:	f7ff fb36 	bl	8016f08 <_free_r>
 801789c:	2000      	movs	r0, #0
 801789e:	6360      	str	r0, [r4, #52]	; 0x34
 80178a0:	e7c0      	b.n	8017824 <__sflush_r+0x1c>
 80178a2:	2301      	movs	r3, #1
 80178a4:	4628      	mov	r0, r5
 80178a6:	47b0      	blx	r6
 80178a8:	1c41      	adds	r1, r0, #1
 80178aa:	d1c8      	bne.n	801783e <__sflush_r+0x36>
 80178ac:	682b      	ldr	r3, [r5, #0]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d0c5      	beq.n	801783e <__sflush_r+0x36>
 80178b2:	2b1d      	cmp	r3, #29
 80178b4:	d001      	beq.n	80178ba <__sflush_r+0xb2>
 80178b6:	2b16      	cmp	r3, #22
 80178b8:	d101      	bne.n	80178be <__sflush_r+0xb6>
 80178ba:	602f      	str	r7, [r5, #0]
 80178bc:	e7b1      	b.n	8017822 <__sflush_r+0x1a>
 80178be:	89a3      	ldrh	r3, [r4, #12]
 80178c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178c4:	81a3      	strh	r3, [r4, #12]
 80178c6:	e7ad      	b.n	8017824 <__sflush_r+0x1c>
 80178c8:	690f      	ldr	r7, [r1, #16]
 80178ca:	2f00      	cmp	r7, #0
 80178cc:	d0a9      	beq.n	8017822 <__sflush_r+0x1a>
 80178ce:	0793      	lsls	r3, r2, #30
 80178d0:	680e      	ldr	r6, [r1, #0]
 80178d2:	bf08      	it	eq
 80178d4:	694b      	ldreq	r3, [r1, #20]
 80178d6:	600f      	str	r7, [r1, #0]
 80178d8:	bf18      	it	ne
 80178da:	2300      	movne	r3, #0
 80178dc:	eba6 0807 	sub.w	r8, r6, r7
 80178e0:	608b      	str	r3, [r1, #8]
 80178e2:	f1b8 0f00 	cmp.w	r8, #0
 80178e6:	dd9c      	ble.n	8017822 <__sflush_r+0x1a>
 80178e8:	6a21      	ldr	r1, [r4, #32]
 80178ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80178ec:	4643      	mov	r3, r8
 80178ee:	463a      	mov	r2, r7
 80178f0:	4628      	mov	r0, r5
 80178f2:	47b0      	blx	r6
 80178f4:	2800      	cmp	r0, #0
 80178f6:	dc06      	bgt.n	8017906 <__sflush_r+0xfe>
 80178f8:	89a3      	ldrh	r3, [r4, #12]
 80178fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178fe:	81a3      	strh	r3, [r4, #12]
 8017900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017904:	e78e      	b.n	8017824 <__sflush_r+0x1c>
 8017906:	4407      	add	r7, r0
 8017908:	eba8 0800 	sub.w	r8, r8, r0
 801790c:	e7e9      	b.n	80178e2 <__sflush_r+0xda>
 801790e:	bf00      	nop
 8017910:	dfbffffe 	.word	0xdfbffffe

08017914 <_fflush_r>:
 8017914:	b538      	push	{r3, r4, r5, lr}
 8017916:	690b      	ldr	r3, [r1, #16]
 8017918:	4605      	mov	r5, r0
 801791a:	460c      	mov	r4, r1
 801791c:	b913      	cbnz	r3, 8017924 <_fflush_r+0x10>
 801791e:	2500      	movs	r5, #0
 8017920:	4628      	mov	r0, r5
 8017922:	bd38      	pop	{r3, r4, r5, pc}
 8017924:	b118      	cbz	r0, 801792e <_fflush_r+0x1a>
 8017926:	6a03      	ldr	r3, [r0, #32]
 8017928:	b90b      	cbnz	r3, 801792e <_fflush_r+0x1a>
 801792a:	f7ff f8cb 	bl	8016ac4 <__sinit>
 801792e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d0f3      	beq.n	801791e <_fflush_r+0xa>
 8017936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017938:	07d0      	lsls	r0, r2, #31
 801793a:	d404      	bmi.n	8017946 <_fflush_r+0x32>
 801793c:	0599      	lsls	r1, r3, #22
 801793e:	d402      	bmi.n	8017946 <_fflush_r+0x32>
 8017940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017942:	f7ff fa9f 	bl	8016e84 <__retarget_lock_acquire_recursive>
 8017946:	4628      	mov	r0, r5
 8017948:	4621      	mov	r1, r4
 801794a:	f7ff ff5d 	bl	8017808 <__sflush_r>
 801794e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017950:	07da      	lsls	r2, r3, #31
 8017952:	4605      	mov	r5, r0
 8017954:	d4e4      	bmi.n	8017920 <_fflush_r+0xc>
 8017956:	89a3      	ldrh	r3, [r4, #12]
 8017958:	059b      	lsls	r3, r3, #22
 801795a:	d4e1      	bmi.n	8017920 <_fflush_r+0xc>
 801795c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801795e:	f7ff fa92 	bl	8016e86 <__retarget_lock_release_recursive>
 8017962:	e7dd      	b.n	8017920 <_fflush_r+0xc>

08017964 <fiprintf>:
 8017964:	b40e      	push	{r1, r2, r3}
 8017966:	b503      	push	{r0, r1, lr}
 8017968:	4601      	mov	r1, r0
 801796a:	ab03      	add	r3, sp, #12
 801796c:	4805      	ldr	r0, [pc, #20]	; (8017984 <fiprintf+0x20>)
 801796e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017972:	6800      	ldr	r0, [r0, #0]
 8017974:	9301      	str	r3, [sp, #4]
 8017976:	f7ff fc9d 	bl	80172b4 <_vfiprintf_r>
 801797a:	b002      	add	sp, #8
 801797c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017980:	b003      	add	sp, #12
 8017982:	4770      	bx	lr
 8017984:	2000010c 	.word	0x2000010c

08017988 <__swbuf_r>:
 8017988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801798a:	460e      	mov	r6, r1
 801798c:	4614      	mov	r4, r2
 801798e:	4605      	mov	r5, r0
 8017990:	b118      	cbz	r0, 801799a <__swbuf_r+0x12>
 8017992:	6a03      	ldr	r3, [r0, #32]
 8017994:	b90b      	cbnz	r3, 801799a <__swbuf_r+0x12>
 8017996:	f7ff f895 	bl	8016ac4 <__sinit>
 801799a:	69a3      	ldr	r3, [r4, #24]
 801799c:	60a3      	str	r3, [r4, #8]
 801799e:	89a3      	ldrh	r3, [r4, #12]
 80179a0:	071a      	lsls	r2, r3, #28
 80179a2:	d525      	bpl.n	80179f0 <__swbuf_r+0x68>
 80179a4:	6923      	ldr	r3, [r4, #16]
 80179a6:	b31b      	cbz	r3, 80179f0 <__swbuf_r+0x68>
 80179a8:	6823      	ldr	r3, [r4, #0]
 80179aa:	6922      	ldr	r2, [r4, #16]
 80179ac:	1a98      	subs	r0, r3, r2
 80179ae:	6963      	ldr	r3, [r4, #20]
 80179b0:	b2f6      	uxtb	r6, r6
 80179b2:	4283      	cmp	r3, r0
 80179b4:	4637      	mov	r7, r6
 80179b6:	dc04      	bgt.n	80179c2 <__swbuf_r+0x3a>
 80179b8:	4621      	mov	r1, r4
 80179ba:	4628      	mov	r0, r5
 80179bc:	f7ff ffaa 	bl	8017914 <_fflush_r>
 80179c0:	b9e0      	cbnz	r0, 80179fc <__swbuf_r+0x74>
 80179c2:	68a3      	ldr	r3, [r4, #8]
 80179c4:	3b01      	subs	r3, #1
 80179c6:	60a3      	str	r3, [r4, #8]
 80179c8:	6823      	ldr	r3, [r4, #0]
 80179ca:	1c5a      	adds	r2, r3, #1
 80179cc:	6022      	str	r2, [r4, #0]
 80179ce:	701e      	strb	r6, [r3, #0]
 80179d0:	6962      	ldr	r2, [r4, #20]
 80179d2:	1c43      	adds	r3, r0, #1
 80179d4:	429a      	cmp	r2, r3
 80179d6:	d004      	beq.n	80179e2 <__swbuf_r+0x5a>
 80179d8:	89a3      	ldrh	r3, [r4, #12]
 80179da:	07db      	lsls	r3, r3, #31
 80179dc:	d506      	bpl.n	80179ec <__swbuf_r+0x64>
 80179de:	2e0a      	cmp	r6, #10
 80179e0:	d104      	bne.n	80179ec <__swbuf_r+0x64>
 80179e2:	4621      	mov	r1, r4
 80179e4:	4628      	mov	r0, r5
 80179e6:	f7ff ff95 	bl	8017914 <_fflush_r>
 80179ea:	b938      	cbnz	r0, 80179fc <__swbuf_r+0x74>
 80179ec:	4638      	mov	r0, r7
 80179ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179f0:	4621      	mov	r1, r4
 80179f2:	4628      	mov	r0, r5
 80179f4:	f000 f806 	bl	8017a04 <__swsetup_r>
 80179f8:	2800      	cmp	r0, #0
 80179fa:	d0d5      	beq.n	80179a8 <__swbuf_r+0x20>
 80179fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017a00:	e7f4      	b.n	80179ec <__swbuf_r+0x64>
	...

08017a04 <__swsetup_r>:
 8017a04:	b538      	push	{r3, r4, r5, lr}
 8017a06:	4b2a      	ldr	r3, [pc, #168]	; (8017ab0 <__swsetup_r+0xac>)
 8017a08:	4605      	mov	r5, r0
 8017a0a:	6818      	ldr	r0, [r3, #0]
 8017a0c:	460c      	mov	r4, r1
 8017a0e:	b118      	cbz	r0, 8017a18 <__swsetup_r+0x14>
 8017a10:	6a03      	ldr	r3, [r0, #32]
 8017a12:	b90b      	cbnz	r3, 8017a18 <__swsetup_r+0x14>
 8017a14:	f7ff f856 	bl	8016ac4 <__sinit>
 8017a18:	89a3      	ldrh	r3, [r4, #12]
 8017a1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a1e:	0718      	lsls	r0, r3, #28
 8017a20:	d422      	bmi.n	8017a68 <__swsetup_r+0x64>
 8017a22:	06d9      	lsls	r1, r3, #27
 8017a24:	d407      	bmi.n	8017a36 <__swsetup_r+0x32>
 8017a26:	2309      	movs	r3, #9
 8017a28:	602b      	str	r3, [r5, #0]
 8017a2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017a2e:	81a3      	strh	r3, [r4, #12]
 8017a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a34:	e034      	b.n	8017aa0 <__swsetup_r+0x9c>
 8017a36:	0758      	lsls	r0, r3, #29
 8017a38:	d512      	bpl.n	8017a60 <__swsetup_r+0x5c>
 8017a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a3c:	b141      	cbz	r1, 8017a50 <__swsetup_r+0x4c>
 8017a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a42:	4299      	cmp	r1, r3
 8017a44:	d002      	beq.n	8017a4c <__swsetup_r+0x48>
 8017a46:	4628      	mov	r0, r5
 8017a48:	f7ff fa5e 	bl	8016f08 <_free_r>
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	6363      	str	r3, [r4, #52]	; 0x34
 8017a50:	89a3      	ldrh	r3, [r4, #12]
 8017a52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a56:	81a3      	strh	r3, [r4, #12]
 8017a58:	2300      	movs	r3, #0
 8017a5a:	6063      	str	r3, [r4, #4]
 8017a5c:	6923      	ldr	r3, [r4, #16]
 8017a5e:	6023      	str	r3, [r4, #0]
 8017a60:	89a3      	ldrh	r3, [r4, #12]
 8017a62:	f043 0308 	orr.w	r3, r3, #8
 8017a66:	81a3      	strh	r3, [r4, #12]
 8017a68:	6923      	ldr	r3, [r4, #16]
 8017a6a:	b94b      	cbnz	r3, 8017a80 <__swsetup_r+0x7c>
 8017a6c:	89a3      	ldrh	r3, [r4, #12]
 8017a6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a76:	d003      	beq.n	8017a80 <__swsetup_r+0x7c>
 8017a78:	4621      	mov	r1, r4
 8017a7a:	4628      	mov	r0, r5
 8017a7c:	f000 f847 	bl	8017b0e <__smakebuf_r>
 8017a80:	89a0      	ldrh	r0, [r4, #12]
 8017a82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a86:	f010 0301 	ands.w	r3, r0, #1
 8017a8a:	d00a      	beq.n	8017aa2 <__swsetup_r+0x9e>
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	60a3      	str	r3, [r4, #8]
 8017a90:	6963      	ldr	r3, [r4, #20]
 8017a92:	425b      	negs	r3, r3
 8017a94:	61a3      	str	r3, [r4, #24]
 8017a96:	6923      	ldr	r3, [r4, #16]
 8017a98:	b943      	cbnz	r3, 8017aac <__swsetup_r+0xa8>
 8017a9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017a9e:	d1c4      	bne.n	8017a2a <__swsetup_r+0x26>
 8017aa0:	bd38      	pop	{r3, r4, r5, pc}
 8017aa2:	0781      	lsls	r1, r0, #30
 8017aa4:	bf58      	it	pl
 8017aa6:	6963      	ldrpl	r3, [r4, #20]
 8017aa8:	60a3      	str	r3, [r4, #8]
 8017aaa:	e7f4      	b.n	8017a96 <__swsetup_r+0x92>
 8017aac:	2000      	movs	r0, #0
 8017aae:	e7f7      	b.n	8017aa0 <__swsetup_r+0x9c>
 8017ab0:	2000010c 	.word	0x2000010c

08017ab4 <abort>:
 8017ab4:	b508      	push	{r3, lr}
 8017ab6:	2006      	movs	r0, #6
 8017ab8:	f000 f88e 	bl	8017bd8 <raise>
 8017abc:	2001      	movs	r0, #1
 8017abe:	f7e9 ffc5 	bl	8001a4c <_exit>

08017ac2 <__swhatbuf_r>:
 8017ac2:	b570      	push	{r4, r5, r6, lr}
 8017ac4:	460c      	mov	r4, r1
 8017ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017aca:	2900      	cmp	r1, #0
 8017acc:	b096      	sub	sp, #88	; 0x58
 8017ace:	4615      	mov	r5, r2
 8017ad0:	461e      	mov	r6, r3
 8017ad2:	da0d      	bge.n	8017af0 <__swhatbuf_r+0x2e>
 8017ad4:	89a3      	ldrh	r3, [r4, #12]
 8017ad6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017ada:	f04f 0100 	mov.w	r1, #0
 8017ade:	bf0c      	ite	eq
 8017ae0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017ae4:	2340      	movne	r3, #64	; 0x40
 8017ae6:	2000      	movs	r0, #0
 8017ae8:	6031      	str	r1, [r6, #0]
 8017aea:	602b      	str	r3, [r5, #0]
 8017aec:	b016      	add	sp, #88	; 0x58
 8017aee:	bd70      	pop	{r4, r5, r6, pc}
 8017af0:	466a      	mov	r2, sp
 8017af2:	f000 f879 	bl	8017be8 <_fstat_r>
 8017af6:	2800      	cmp	r0, #0
 8017af8:	dbec      	blt.n	8017ad4 <__swhatbuf_r+0x12>
 8017afa:	9901      	ldr	r1, [sp, #4]
 8017afc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017b00:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017b04:	4259      	negs	r1, r3
 8017b06:	4159      	adcs	r1, r3
 8017b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b0c:	e7eb      	b.n	8017ae6 <__swhatbuf_r+0x24>

08017b0e <__smakebuf_r>:
 8017b0e:	898b      	ldrh	r3, [r1, #12]
 8017b10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b12:	079d      	lsls	r5, r3, #30
 8017b14:	4606      	mov	r6, r0
 8017b16:	460c      	mov	r4, r1
 8017b18:	d507      	bpl.n	8017b2a <__smakebuf_r+0x1c>
 8017b1a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017b1e:	6023      	str	r3, [r4, #0]
 8017b20:	6123      	str	r3, [r4, #16]
 8017b22:	2301      	movs	r3, #1
 8017b24:	6163      	str	r3, [r4, #20]
 8017b26:	b002      	add	sp, #8
 8017b28:	bd70      	pop	{r4, r5, r6, pc}
 8017b2a:	ab01      	add	r3, sp, #4
 8017b2c:	466a      	mov	r2, sp
 8017b2e:	f7ff ffc8 	bl	8017ac2 <__swhatbuf_r>
 8017b32:	9900      	ldr	r1, [sp, #0]
 8017b34:	4605      	mov	r5, r0
 8017b36:	4630      	mov	r0, r6
 8017b38:	f7fe fd9e 	bl	8016678 <_malloc_r>
 8017b3c:	b948      	cbnz	r0, 8017b52 <__smakebuf_r+0x44>
 8017b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b42:	059a      	lsls	r2, r3, #22
 8017b44:	d4ef      	bmi.n	8017b26 <__smakebuf_r+0x18>
 8017b46:	f023 0303 	bic.w	r3, r3, #3
 8017b4a:	f043 0302 	orr.w	r3, r3, #2
 8017b4e:	81a3      	strh	r3, [r4, #12]
 8017b50:	e7e3      	b.n	8017b1a <__smakebuf_r+0xc>
 8017b52:	89a3      	ldrh	r3, [r4, #12]
 8017b54:	6020      	str	r0, [r4, #0]
 8017b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b5a:	81a3      	strh	r3, [r4, #12]
 8017b5c:	9b00      	ldr	r3, [sp, #0]
 8017b5e:	6163      	str	r3, [r4, #20]
 8017b60:	9b01      	ldr	r3, [sp, #4]
 8017b62:	6120      	str	r0, [r4, #16]
 8017b64:	b15b      	cbz	r3, 8017b7e <__smakebuf_r+0x70>
 8017b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b6a:	4630      	mov	r0, r6
 8017b6c:	f000 f84e 	bl	8017c0c <_isatty_r>
 8017b70:	b128      	cbz	r0, 8017b7e <__smakebuf_r+0x70>
 8017b72:	89a3      	ldrh	r3, [r4, #12]
 8017b74:	f023 0303 	bic.w	r3, r3, #3
 8017b78:	f043 0301 	orr.w	r3, r3, #1
 8017b7c:	81a3      	strh	r3, [r4, #12]
 8017b7e:	89a3      	ldrh	r3, [r4, #12]
 8017b80:	431d      	orrs	r5, r3
 8017b82:	81a5      	strh	r5, [r4, #12]
 8017b84:	e7cf      	b.n	8017b26 <__smakebuf_r+0x18>

08017b86 <_raise_r>:
 8017b86:	291f      	cmp	r1, #31
 8017b88:	b538      	push	{r3, r4, r5, lr}
 8017b8a:	4604      	mov	r4, r0
 8017b8c:	460d      	mov	r5, r1
 8017b8e:	d904      	bls.n	8017b9a <_raise_r+0x14>
 8017b90:	2316      	movs	r3, #22
 8017b92:	6003      	str	r3, [r0, #0]
 8017b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b98:	bd38      	pop	{r3, r4, r5, pc}
 8017b9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017b9c:	b112      	cbz	r2, 8017ba4 <_raise_r+0x1e>
 8017b9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ba2:	b94b      	cbnz	r3, 8017bb8 <_raise_r+0x32>
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	f000 f853 	bl	8017c50 <_getpid_r>
 8017baa:	462a      	mov	r2, r5
 8017bac:	4601      	mov	r1, r0
 8017bae:	4620      	mov	r0, r4
 8017bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017bb4:	f000 b83a 	b.w	8017c2c <_kill_r>
 8017bb8:	2b01      	cmp	r3, #1
 8017bba:	d00a      	beq.n	8017bd2 <_raise_r+0x4c>
 8017bbc:	1c59      	adds	r1, r3, #1
 8017bbe:	d103      	bne.n	8017bc8 <_raise_r+0x42>
 8017bc0:	2316      	movs	r3, #22
 8017bc2:	6003      	str	r3, [r0, #0]
 8017bc4:	2001      	movs	r0, #1
 8017bc6:	e7e7      	b.n	8017b98 <_raise_r+0x12>
 8017bc8:	2400      	movs	r4, #0
 8017bca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017bce:	4628      	mov	r0, r5
 8017bd0:	4798      	blx	r3
 8017bd2:	2000      	movs	r0, #0
 8017bd4:	e7e0      	b.n	8017b98 <_raise_r+0x12>
	...

08017bd8 <raise>:
 8017bd8:	4b02      	ldr	r3, [pc, #8]	; (8017be4 <raise+0xc>)
 8017bda:	4601      	mov	r1, r0
 8017bdc:	6818      	ldr	r0, [r3, #0]
 8017bde:	f7ff bfd2 	b.w	8017b86 <_raise_r>
 8017be2:	bf00      	nop
 8017be4:	2000010c 	.word	0x2000010c

08017be8 <_fstat_r>:
 8017be8:	b538      	push	{r3, r4, r5, lr}
 8017bea:	4d07      	ldr	r5, [pc, #28]	; (8017c08 <_fstat_r+0x20>)
 8017bec:	2300      	movs	r3, #0
 8017bee:	4604      	mov	r4, r0
 8017bf0:	4608      	mov	r0, r1
 8017bf2:	4611      	mov	r1, r2
 8017bf4:	602b      	str	r3, [r5, #0]
 8017bf6:	f7e9 ff78 	bl	8001aea <_fstat>
 8017bfa:	1c43      	adds	r3, r0, #1
 8017bfc:	d102      	bne.n	8017c04 <_fstat_r+0x1c>
 8017bfe:	682b      	ldr	r3, [r5, #0]
 8017c00:	b103      	cbz	r3, 8017c04 <_fstat_r+0x1c>
 8017c02:	6023      	str	r3, [r4, #0]
 8017c04:	bd38      	pop	{r3, r4, r5, pc}
 8017c06:	bf00      	nop
 8017c08:	2000e008 	.word	0x2000e008

08017c0c <_isatty_r>:
 8017c0c:	b538      	push	{r3, r4, r5, lr}
 8017c0e:	4d06      	ldr	r5, [pc, #24]	; (8017c28 <_isatty_r+0x1c>)
 8017c10:	2300      	movs	r3, #0
 8017c12:	4604      	mov	r4, r0
 8017c14:	4608      	mov	r0, r1
 8017c16:	602b      	str	r3, [r5, #0]
 8017c18:	f7e9 ff77 	bl	8001b0a <_isatty>
 8017c1c:	1c43      	adds	r3, r0, #1
 8017c1e:	d102      	bne.n	8017c26 <_isatty_r+0x1a>
 8017c20:	682b      	ldr	r3, [r5, #0]
 8017c22:	b103      	cbz	r3, 8017c26 <_isatty_r+0x1a>
 8017c24:	6023      	str	r3, [r4, #0]
 8017c26:	bd38      	pop	{r3, r4, r5, pc}
 8017c28:	2000e008 	.word	0x2000e008

08017c2c <_kill_r>:
 8017c2c:	b538      	push	{r3, r4, r5, lr}
 8017c2e:	4d07      	ldr	r5, [pc, #28]	; (8017c4c <_kill_r+0x20>)
 8017c30:	2300      	movs	r3, #0
 8017c32:	4604      	mov	r4, r0
 8017c34:	4608      	mov	r0, r1
 8017c36:	4611      	mov	r1, r2
 8017c38:	602b      	str	r3, [r5, #0]
 8017c3a:	f7e9 fef7 	bl	8001a2c <_kill>
 8017c3e:	1c43      	adds	r3, r0, #1
 8017c40:	d102      	bne.n	8017c48 <_kill_r+0x1c>
 8017c42:	682b      	ldr	r3, [r5, #0]
 8017c44:	b103      	cbz	r3, 8017c48 <_kill_r+0x1c>
 8017c46:	6023      	str	r3, [r4, #0]
 8017c48:	bd38      	pop	{r3, r4, r5, pc}
 8017c4a:	bf00      	nop
 8017c4c:	2000e008 	.word	0x2000e008

08017c50 <_getpid_r>:
 8017c50:	f7e9 bee4 	b.w	8001a1c <_getpid>

08017c54 <_init>:
 8017c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c56:	bf00      	nop
 8017c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c5a:	bc08      	pop	{r3}
 8017c5c:	469e      	mov	lr, r3
 8017c5e:	4770      	bx	lr

08017c60 <_fini>:
 8017c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c62:	bf00      	nop
 8017c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c66:	bc08      	pop	{r3}
 8017c68:	469e      	mov	lr, r3
 8017c6a:	4770      	bx	lr
