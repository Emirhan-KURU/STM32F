
PmodNAV_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800868c  0800868c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008694  08008694  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800869c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00001934  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200019b0  200019b0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015301  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ba7  00000000  00000000  000353f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011c0  00000000  00000000  00038f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d84  00000000  00000000  0003a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000235c4  00000000  00000000  0003aedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001799c  00000000  00000000  0005e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb42c  00000000  00000000  00075e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ce4  00000000  00000000  00141268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00145f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008658 	.word	0x08008658

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008658 	.word	0x08008658

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fe20 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f838 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f934 	bl	800073c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f89e 	bl	8000614 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 f8ca 	bl	8000670 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8f8 	bl	80006d0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f007 fc42 	bl	8007d68 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2SEx_TransmitReceive_DMA (&hi2s3, txBuf, rxBuf, 4);
 80004e4:	2304      	movs	r3, #4
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <main+0x5c>)
 80004e8:	490e      	ldr	r1, [pc, #56]	; (8000524 <main+0x60>)
 80004ea:	480f      	ldr	r0, [pc, #60]	; (8000528 <main+0x64>)
 80004ec:	f003 f986 	bl	80037fc <HAL_I2SEx_TransmitReceive_DMA>

  	//0°
  	WtrP = 0;
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <main+0x68>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]

  	Rd_P = 0.0f;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <main+0x6c>)
 80004f8:	f04f 0200 	mov.w	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
  	Shift = 1.4f;
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <main+0x70>)
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <main+0x74>)
 8000502:	601a      	str	r2, [r3, #0]
  	CrossFade = 1.0f;
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <main+0x78>)
 8000506:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800050a:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800050c:	f007 fc52 	bl	8007db4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    Do_HighPass (3);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 fa29 	bl	8000968 <Do_HighPass>
    Do_PitchShift(5, 0);
 8000516:	2100      	movs	r1, #0
 8000518:	2005      	movs	r0, #5
 800051a:	f000 faa5 	bl	8000a68 <Do_PitchShift>
  {
 800051e:	e7f5      	b.n	800050c <main+0x48>
 8000520:	20001160 	.word	0x20001160
 8000524:	20001170 	.word	0x20001170
 8000528:	200000ec 	.word	0x200000ec
 800052c:	2000112c 	.word	0x2000112c
 8000530:	20001130 	.word	0x20001130
 8000534:	20001134 	.word	0x20001134
 8000538:	3fb33333 	.word	0x3fb33333
 800053c:	20001138 	.word	0x20001138

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f007 ffce 	bl	80084f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fdac 	bl	8004124 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 fbb7 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 f80d 	bl	8004614 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000600:	f000 fba0 	bl	8000d44 <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	; 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2C1_Init+0x50>)
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MX_I2C1_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C1_Init+0x50>)
 8000620:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_I2C1_Init+0x58>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_I2C1_Init+0x50>)
 8000632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_I2C1_Init+0x50>)
 8000652:	f002 fd49 	bl	80030e8 <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 fb72 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000098 	.word	0x20000098
 8000668:	40005400 	.word	0x40005400
 800066c:	000186a0 	.word	0x000186a0

08000670 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000676:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <MX_I2S3_Init+0x58>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <MX_I2S3_Init+0x5c>)
 800069a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_I2S3_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_I2S3_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_I2S3_Init+0x54>)
 80006b0:	f002 fe5e 	bl	8003370 <HAL_I2S_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ba:	f000 fb43 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000ec 	.word	0x200000ec
 80006c8:	40003c00 	.word	0x40003c00
 80006cc:	00017700 	.word	0x00017700

080006d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_SPI1_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_SPI1_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI1_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_SPI1_Init+0x64>)
 8000722:	f004 fac3 	bl	8004cac <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 fb0a 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000134 	.word	0x20000134
 8000738:	40013000 	.word	0x40013000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4b7e      	ldr	r3, [pc, #504]	; (8000950 <MX_GPIO_Init+0x214>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a7d      	ldr	r2, [pc, #500]	; (8000950 <MX_GPIO_Init+0x214>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b7b      	ldr	r3, [pc, #492]	; (8000950 <MX_GPIO_Init+0x214>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b77      	ldr	r3, [pc, #476]	; (8000950 <MX_GPIO_Init+0x214>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a76      	ldr	r2, [pc, #472]	; (8000950 <MX_GPIO_Init+0x214>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b74      	ldr	r3, [pc, #464]	; (8000950 <MX_GPIO_Init+0x214>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b70      	ldr	r3, [pc, #448]	; (8000950 <MX_GPIO_Init+0x214>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a6f      	ldr	r2, [pc, #444]	; (8000950 <MX_GPIO_Init+0x214>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b6d      	ldr	r3, [pc, #436]	; (8000950 <MX_GPIO_Init+0x214>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b69      	ldr	r3, [pc, #420]	; (8000950 <MX_GPIO_Init+0x214>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a68      	ldr	r2, [pc, #416]	; (8000950 <MX_GPIO_Init+0x214>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b66      	ldr	r3, [pc, #408]	; (8000950 <MX_GPIO_Init+0x214>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b62      	ldr	r3, [pc, #392]	; (8000950 <MX_GPIO_Init+0x214>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a61      	ldr	r2, [pc, #388]	; (8000950 <MX_GPIO_Init+0x214>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b5f      	ldr	r3, [pc, #380]	; (8000950 <MX_GPIO_Init+0x214>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b5b      	ldr	r3, [pc, #364]	; (8000950 <MX_GPIO_Init+0x214>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a5a      	ldr	r2, [pc, #360]	; (8000950 <MX_GPIO_Init+0x214>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b58      	ldr	r3, [pc, #352]	; (8000950 <MX_GPIO_Init+0x214>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2108      	movs	r1, #8
 80007fe:	4855      	ldr	r0, [pc, #340]	; (8000954 <MX_GPIO_Init+0x218>)
 8000800:	f001 f84e 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2101      	movs	r1, #1
 8000808:	4853      	ldr	r0, [pc, #332]	; (8000958 <MX_GPIO_Init+0x21c>)
 800080a:	f001 f849 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Gyro_Pin|Altimeter_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2130      	movs	r1, #48	; 0x30
 8000812:	4851      	ldr	r0, [pc, #324]	; (8000958 <MX_GPIO_Init+0x21c>)
 8000814:	f001 f844 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Magneto_GPIO_Port, Magneto_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2101      	movs	r1, #1
 800081c:	484f      	ldr	r0, [pc, #316]	; (800095c <MX_GPIO_Init+0x220>)
 800081e:	f001 f83f 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000822:	2200      	movs	r2, #0
 8000824:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000828:	484d      	ldr	r0, [pc, #308]	; (8000960 <MX_GPIO_Init+0x224>)
 800082a:	f001 f839 	bl	80018a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4843      	ldr	r0, [pc, #268]	; (8000954 <MX_GPIO_Init+0x218>)
 8000846:	f000 fe8f 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Gyro_Pin Altimeter_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Gyro_Pin|Altimeter_Pin;
 800084a:	2331      	movs	r3, #49	; 0x31
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	483d      	ldr	r0, [pc, #244]	; (8000958 <MX_GPIO_Init+0x21c>)
 8000862:	f000 fe81 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000876:	2305      	movs	r3, #5
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4835      	ldr	r0, [pc, #212]	; (8000958 <MX_GPIO_Init+0x21c>)
 8000882:	f000 fe71 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800088a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4832      	ldr	r0, [pc, #200]	; (8000964 <MX_GPIO_Init+0x228>)
 800089c:	f000 fe64 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : Magneto_Pin */
  GPIO_InitStruct.Pin = Magneto_Pin;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Magneto_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4829      	ldr	r0, [pc, #164]	; (800095c <MX_GPIO_Init+0x220>)
 80008b8:	f000 fe56 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008bc:	2304      	movs	r3, #4
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4823      	ldr	r0, [pc, #140]	; (800095c <MX_GPIO_Init+0x220>)
 80008d0:	f000 fe4a 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	481a      	ldr	r0, [pc, #104]	; (800095c <MX_GPIO_Init+0x220>)
 80008f2:	f000 fe39 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4814      	ldr	r0, [pc, #80]	; (8000960 <MX_GPIO_Init+0x224>)
 8000910:	f000 fe2a 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000914:	2320      	movs	r3, #32
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	480e      	ldr	r0, [pc, #56]	; (8000960 <MX_GPIO_Init+0x224>)
 8000928:	f000 fe1e 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000930:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0x218>)
 8000942:	f000 fe11 	bl	8001568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	; 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40021000 	.word	0x40021000
 8000958:	40020800 	.word	0x40020800
 800095c:	40020400 	.word	0x40020400
 8000960:	40020c00 	.word	0x40020c00
 8000964:	40020000 	.word	0x40020000

08000968 <Do_HighPass>:

/* USER CODE BEGIN 4 */
int Do_HighPass (int inSample) {
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	//300Hz high-pass, 96k
	a0 = 0.9862117951198142f;
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <Do_HighPass+0xcc>)
 8000972:	4a31      	ldr	r2, [pc, #196]	; (8000a38 <Do_HighPass+0xd0>)
 8000974:	601a      	str	r2, [r3, #0]
	a1 = -1.9724235902396283f;
 8000976:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <Do_HighPass+0xd4>)
 8000978:	4a31      	ldr	r2, [pc, #196]	; (8000a40 <Do_HighPass+0xd8>)
 800097a:	601a      	str	r2, [r3, #0]
	a2 = 0.9862117951198142f;
 800097c:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <Do_HighPass+0xdc>)
 800097e:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <Do_HighPass+0xd0>)
 8000980:	601a      	str	r2, [r3, #0]
	b1 = -1.972233470205696f;
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <Do_HighPass+0xe0>)
 8000984:	4a31      	ldr	r2, [pc, #196]	; (8000a4c <Do_HighPass+0xe4>)
 8000986:	601a      	str	r2, [r3, #0]
	b2 = 0.9726137102735608f;
 8000988:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <Do_HighPass+0xe8>)
 800098a:	4a32      	ldr	r2, [pc, #200]	; (8000a54 <Do_HighPass+0xec>)
 800098c:	601a      	str	r2, [r3, #0]

	float inSampleF = (float)inSample;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	ee07 3a90 	vmov	s15, r3
 8000994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000998:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF =
			a0 * inSampleF
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <Do_HighPass+0xcc>)
 800099e:	ed93 7a00 	vldr	s14, [r3]
 80009a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80009a6:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ a1 * hp_in_z1
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <Do_HighPass+0xd4>)
 80009ac:	edd3 6a00 	vldr	s13, [r3]
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <Do_HighPass+0xf0>)
 80009b2:	edd3 7a00 	vldr	s15, [r3]
 80009b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009ba:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ a2 * hp_in_z2
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <Do_HighPass+0xdc>)
 80009c0:	edd3 6a00 	vldr	s13, [r3]
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <Do_HighPass+0xf4>)
 80009c6:	edd3 7a00 	vldr	s15, [r3]
 80009ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009ce:	ee37 7a27 	vadd.f32	s14, s14, s15
			- b1 * hp_out_z1
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <Do_HighPass+0xe0>)
 80009d4:	edd3 6a00 	vldr	s13, [r3]
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <Do_HighPass+0xf8>)
 80009da:	edd3 7a00 	vldr	s15, [r3]
 80009de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009e2:	ee37 7a67 	vsub.f32	s14, s14, s15
			- b2 * hp_out_z2;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <Do_HighPass+0xe8>)
 80009e8:	edd3 6a00 	vldr	s13, [r3]
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <Do_HighPass+0xfc>)
 80009ee:	edd3 7a00 	vldr	s15, [r3]
 80009f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float outSampleF =
 80009f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fa:	edc7 7a02 	vstr	s15, [r7, #8]
	hp_in_z2 = hp_in_z1;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <Do_HighPass+0xf0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <Do_HighPass+0xf4>)
 8000a04:	6013      	str	r3, [r2, #0]
	hp_in_z1 = inSampleF;
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <Do_HighPass+0xf0>)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6013      	str	r3, [r2, #0]
	hp_out_z2 = hp_out_z1;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <Do_HighPass+0xf8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <Do_HighPass+0xfc>)
 8000a12:	6013      	str	r3, [r2, #0]
	hp_out_z1 = outSampleF;
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <Do_HighPass+0xf8>)
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	6013      	str	r3, [r2, #0]

	return (int) outSampleF;
 8000a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a22:	ee17 3a90 	vmov	r3, s15
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	2000113c 	.word	0x2000113c
 8000a38:	3f7c7860 	.word	0x3f7c7860
 8000a3c:	20001140 	.word	0x20001140
 8000a40:	bffc7860 	.word	0xbffc7860
 8000a44:	20001144 	.word	0x20001144
 8000a48:	20001148 	.word	0x20001148
 8000a4c:	bffc7225 	.word	0xbffc7225
 8000a50:	2000114c 	.word	0x2000114c
 8000a54:	3f78fd36 	.word	0x3f78fd36
 8000a58:	20001150 	.word	0x20001150
 8000a5c:	20001154 	.word	0x20001154
 8000a60:	20001158 	.word	0x20001158
 8000a64:	2000115c 	.word	0x2000115c

08000a68 <Do_PitchShift>:
int Do_PitchShift(int lSample, int rSample) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	int sum = lSample + rSample;
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	623b      	str	r3, [r7, #32]
	//sum up and do high-pass
	sum=Do_HighPass(sum);
 8000a7a:	6a38      	ldr	r0, [r7, #32]
 8000a7c:	f7ff ff74 	bl	8000968 <Do_HighPass>
 8000a80:	6238      	str	r0, [r7, #32]

	//write to ringbuffer
	Buf[WtrP] = sum;
 8000a82:	4b73      	ldr	r3, [pc, #460]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4973      	ldr	r1, [pc, #460]	; (8000c54 <Do_PitchShift+0x1ec>)
 8000a88:	6a3a      	ldr	r2, [r7, #32]
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//read fractional readpointer and generate 0° and 180° read-pointer in integer
	int RdPtr_Int = roundf(Rd_P);
 8000a8e:	4b72      	ldr	r3, [pc, #456]	; (8000c58 <Do_PitchShift+0x1f0>)
 8000a90:	edd3 7a00 	vldr	s15, [r3]
 8000a94:	eeb0 0a67 	vmov.f32	s0, s15
 8000a98:	f007 fdba 	bl	8008610 <roundf>
 8000a9c:	eef0 7a40 	vmov.f32	s15, s0
 8000aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa4:	ee17 3a90 	vmov	r3, s15
 8000aa8:	61fb      	str	r3, [r7, #28]
	int RdPtr_Int2 = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ab4:	db04      	blt.n	8000ac0 <Do_PitchShift+0x58>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
 8000abe:	e003      	b.n	8000ac8 <Do_PitchShift+0x60>
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24

	//read the two samples...
	float Rd0 = (float) Buf[RdPtr_Int];
 8000ac8:	4a62      	ldr	r2, [pc, #392]	; (8000c54 <Do_PitchShift+0x1ec>)
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	ee07 3a90 	vmov	s15, r3
 8000ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad8:	edc7 7a06 	vstr	s15, [r7, #24]
	float Rd1 = (float) Buf[RdPtr_Int2];
 8000adc:	4a5d      	ldr	r2, [pc, #372]	; (8000c54 <Do_PitchShift+0x1ec>)
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae4:	ee07 3a90 	vmov	s15, r3
 8000ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aec:	edc7 7a05 	vstr	s15, [r7, #20]

	//Check if first readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to second read-pointer
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000af0:	4b57      	ldr	r3, [pc, #348]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	2b64      	cmp	r3, #100	; 0x64
 8000afa:	dc21      	bgt.n	8000b40 <Do_PitchShift+0xd8>
 8000afc:	4b54      	ldr	r3, [pc, #336]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db1b      	blt.n	8000b40 <Do_PitchShift+0xd8>
 8000b08:	4b54      	ldr	r3, [pc, #336]	; (8000c5c <Do_PitchShift+0x1f4>)
 8000b0a:	edd3 7a00 	vldr	s15, [r3]
 8000b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b12:	eef4 7a47 	vcmp.f32	s15, s14
 8000b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b1a:	d011      	beq.n	8000b40 <Do_PitchShift+0xd8>
		int rel = WtrP-RdPtr_Int;
 8000b1c:	4b4c      	ldr	r3, [pc, #304]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	613b      	str	r3, [r7, #16]
		CrossFade = ((float)rel)/(float)Overlap;
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b30:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000c60 <Do_PitchShift+0x1f8>
 8000b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b38:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <Do_PitchShift+0x1fc>)
 8000b3a:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8000b3e:	e008      	b.n	8000b52 <Do_PitchShift+0xea>
	}
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8000b40:	4b43      	ldr	r3, [pc, #268]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	69fa      	ldr	r2, [r7, #28]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d103      	bne.n	8000b52 <Do_PitchShift+0xea>
 8000b4a:	4b46      	ldr	r3, [pc, #280]	; (8000c64 <Do_PitchShift+0x1fc>)
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]

	//Check if second readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to first read-pointer
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8000b52:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	2b64      	cmp	r3, #100	; 0x64
 8000b5c:	dc25      	bgt.n	8000baa <Do_PitchShift+0x142>
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db1f      	blt.n	8000baa <Do_PitchShift+0x142>
 8000b6a:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <Do_PitchShift+0x1f4>)
 8000b6c:	edd3 7a00 	vldr	s15, [r3]
 8000b70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b74:	eef4 7a47 	vcmp.f32	s15, s14
 8000b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b7c:	d015      	beq.n	8000baa <Do_PitchShift+0x142>
			int rel = WtrP-RdPtr_Int2;
 8000b7e:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	60fb      	str	r3, [r7, #12]
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b92:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000c60 <Do_PitchShift+0x1f8>
 8000b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ba2:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <Do_PitchShift+0x1fc>)
 8000ba4:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8000ba8:	e008      	b.n	8000bbc <Do_PitchShift+0x154>
		}
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d103      	bne.n	8000bbc <Do_PitchShift+0x154>
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <Do_PitchShift+0x1fc>)
 8000bb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000bba:	601a      	str	r2, [r3, #0]


	//do cross-fading and sum up
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <Do_PitchShift+0x1fc>)
 8000bbe:	ed93 7a00 	vldr	s14, [r3]
 8000bc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <Do_PitchShift+0x1fc>)
 8000bcc:	edd3 7a00 	vldr	s15, [r3]
 8000bd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000bd4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000bd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000be8:	ee17 3a90 	vmov	r3, s15
 8000bec:	623b      	str	r3, [r7, #32]

	//increment fractional read-pointer and write-pointer
	Rd_P += Shift;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <Do_PitchShift+0x1f0>)
 8000bf0:	ed93 7a00 	vldr	s14, [r3]
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <Do_PitchShift+0x1f4>)
 8000bf6:	edd3 7a00 	vldr	s15, [r3]
 8000bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <Do_PitchShift+0x1f0>)
 8000c00:	edc3 7a00 	vstr	s15, [r3]
	WtrP++;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a11      	ldr	r2, [pc, #68]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000c0c:	6013      	str	r3, [r2, #0]
	if (WtrP == BufSize) WtrP = 0;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c16:	d102      	bne.n	8000c1e <Do_PitchShift+0x1b6>
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <Do_PitchShift+0x1e8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
	if (roundf(Rd_P) >= BufSize) Rd_P = 0.0f;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <Do_PitchShift+0x1f0>)
 8000c20:	edd3 7a00 	vldr	s15, [r3]
 8000c24:	eeb0 0a67 	vmov.f32	s0, s15
 8000c28:	f007 fcf2 	bl	8008610 <roundf>
 8000c2c:	eef0 7a40 	vmov.f32	s15, s0
 8000c30:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000c68 <Do_PitchShift+0x200>
 8000c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3c:	db03      	blt.n	8000c46 <Do_PitchShift+0x1de>
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <Do_PitchShift+0x1f0>)
 8000c40:	f04f 0200 	mov.w	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]

	return sum;
 8000c46:	6a3b      	ldr	r3, [r7, #32]


}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000112c 	.word	0x2000112c
 8000c54:	2000018c 	.word	0x2000018c
 8000c58:	20001130 	.word	0x20001130
 8000c5c:	20001134 	.word	0x20001134
 8000c60:	42c80000 	.word	0x42c80000
 8000c64:	20001138 	.word	0x20001138
 8000c68:	447a0000 	.word	0x447a0000

08000c6c <HAL_I2SEx_TxRxHalfCpltCallback>:
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[0]<<16)|rxBuf[1];
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	041b      	lsls	r3, r3, #16
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8000c7c:	8852      	ldrh	r2, [r2, #2]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	617b      	str	r3, [r7, #20]
	int rSample = (int) (rxBuf[2]<<16)|rxBuf[3];
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8000c84:	889b      	ldrh	r3, [r3, #4]
 8000c86:	041b      	lsls	r3, r3, #16
 8000c88:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <HAL_I2SEx_TxRxHalfCpltCallback+0x64>)
 8000c8a:	88d2      	ldrh	r2, [r2, #6]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]

	int ret_sample = Do_PitchShift(lSample, rSample);
 8000c90:	6939      	ldr	r1, [r7, #16]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff fee8 	bl	8000a68 <Do_PitchShift>
 8000c98:	60f8      	str	r0, [r7, #12]
	lSample = ret_sample;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	617b      	str	r3, [r7, #20]
	rSample = ret_sample;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	613b      	str	r3, [r7, #16]

	//restore to buffer
	txBuf[0] = (lSample>>16)&0xFFFF;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8000caa:	801a      	strh	r2, [r3, #0]
	txBuf[1] = lSample&0xFFFF;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8000cb2:	805a      	strh	r2, [r3, #2]
	txBuf[2] = (rSample>>16)&0xFFFF;
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	0c1b      	lsrs	r3, r3, #16
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8000cbc:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rSample&0xFFFF;
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_I2SEx_TxRxHalfCpltCallback+0x68>)
 8000cc4:	80da      	strh	r2, [r3, #6]
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20001160 	.word	0x20001160
 8000cd4:	20001170 	.word	0x20001170

08000cd8 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[4]<<16)|rxBuf[5];
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000ce2:	891b      	ldrh	r3, [r3, #8]
 8000ce4:	041b      	lsls	r3, r3, #16
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000ce8:	8952      	ldrh	r2, [r2, #10]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	617b      	str	r3, [r7, #20]
	int rSample = (int) (rxBuf[6]<<16)|rxBuf[7];
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000cf0:	899b      	ldrh	r3, [r3, #12]
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <HAL_I2SEx_TxRxCpltCallback+0x64>)
 8000cf6:	89d2      	ldrh	r2, [r2, #14]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]

	int ret_sample = Do_PitchShift(lSample, rSample);
 8000cfc:	6939      	ldr	r1, [r7, #16]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff feb2 	bl	8000a68 <Do_PitchShift>
 8000d04:	60f8      	str	r0, [r7, #12]
	lSample = ret_sample;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	617b      	str	r3, [r7, #20]
	rSample = ret_sample;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	613b      	str	r3, [r7, #16]

	//restore to buffer
	txBuf[4] = (lSample>>16)&0xFFFF;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	0c1b      	lsrs	r3, r3, #16
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000d16:	811a      	strh	r2, [r3, #8]
	txBuf[5] = lSample&0xFFFF;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000d1e:	815a      	strh	r2, [r3, #10]
	txBuf[6] = (rSample>>16)&0xFFFF;
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	0c1b      	lsrs	r3, r3, #16
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000d28:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rSample&0xFFFF;
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <HAL_I2SEx_TxRxCpltCallback+0x68>)
 8000d30:	81da      	strh	r2, [r3, #14]
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20001160 	.word	0x20001160
 8000d40:	20001170 	.word	0x20001170

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d8e:	2007      	movs	r0, #7
 8000d90:	f000 fb22 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_I2C_MspInit+0x84>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d12c      	bne.n	8000e1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dde:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de4:	2312      	movs	r3, #18
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df0:	2304      	movs	r3, #4
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <HAL_I2C_MspInit+0x8c>)
 8000dfc:	f000 fbb4 	bl	8001568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_I2C_MspInit+0x88>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40005400 	.word	0x40005400
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020400 	.word	0x40020400

08000e30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a31      	ldr	r2, [pc, #196]	; (8000f20 <HAL_I2S_MspInit+0xf0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d15a      	bne.n	8000f16 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e60:	2301      	movs	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e64:	23c0      	movs	r3, #192	; 0xc0
 8000e66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 fddb 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e7c:	f7ff ff62 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_I2S_MspInit+0xf4>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <HAL_I2S_MspInit+0xf8>)
 8000ef0:	f000 fb3a 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ef4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f06:	2306      	movs	r3, #6
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <HAL_I2S_MspInit+0xfc>)
 8000f12:	f000 fb29 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3738      	adds	r7, #56	; 0x38
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40003c00 	.word	0x40003c00
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020800 	.word	0x40020800

08000f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <HAL_SPI_MspInit+0x84>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d12b      	bne.n	8000faa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_SPI_MspInit+0x88>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f8a:	23e0      	movs	r3, #224	; 0xe0
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_SPI_MspInit+0x8c>)
 8000fa6:	f000 fadf 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40013000 	.word	0x40013000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 f8d0 	bl	80011b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <OTG_FS_IRQHandler+0x10>)
 800101a:	f000 fec5 	bl	8001da8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20001564 	.word	0x20001564

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f007 fa62 	bl	8008520 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20020000 	.word	0x20020000
 8001088:	00000400 	.word	0x00000400
 800108c:	20001180 	.word	0x20001180
 8001090:	200019b0 	.word	0x200019b0

08001094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <SystemInit+0x20>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <SystemInit+0x20>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010be:	490e      	ldr	r1, [pc, #56]	; (80010f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d4:	4c0b      	ldr	r4, [pc, #44]	; (8001104 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010e2:	f7ff ffd7 	bl	8001094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e6:	f007 fa21 	bl	800852c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ea:	f7ff f9eb 	bl	80004c4 <main>
  bx  lr    
 80010ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010fc:	0800869c 	.word	0x0800869c
  ldr r2, =_sbss
 8001100:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001104:	200019b0 	.word	0x200019b0

08001108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <HAL_Init+0x40>)
 8001116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_Init+0x40>)
 8001122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_Init+0x40>)
 800112e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f94f 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f808 	bl	8001150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001140:	f7ff fe06 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023c00 	.word	0x40023c00

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x54>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x58>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	fbb3 f3f1 	udiv	r3, r3, r1
 800116a:	fbb2 f3f3 	udiv	r3, r2, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f967 	bl	8001442 <HAL_SYSTICK_Config>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e00e      	b.n	800119c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d80a      	bhi.n	800119a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800118c:	f000 f92f 	bl	80013ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001190:	4a06      	ldr	r2, [pc, #24]	; (80011ac <HAL_InitTick+0x5c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e000      	b.n	800119c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000004 	.word	0x20000004

080011b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_IncTick+0x20>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x24>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <HAL_IncTick+0x24>)
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20001184 	.word	0x20001184

080011d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <HAL_GetTick+0x14>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20001184 	.word	0x20001184

080011f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f8:	f7ff ffee 	bl	80011d8 <HAL_GetTick>
 80011fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001208:	d005      	beq.n	8001216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_Delay+0x44>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001216:	bf00      	nop
 8001218:	f7ff ffde 	bl	80011d8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d8f7      	bhi.n	8001218 <HAL_Delay+0x28>
  {
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0b      	blt.n	80012c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 021f 	and.w	r2, r3, #31
 80012b4:	4907      	ldr	r1, [pc, #28]	; (80012d4 <__NVIC_EnableIRQ+0x38>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	2001      	movs	r0, #1
 80012be:	fa00 f202 	lsl.w	r2, r0, r2
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	; (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff29 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff3e 	bl	8001280 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff8e 	bl	800132c <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5d 	bl	80012d8 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff31 	bl	800129c <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa2 	bl	8001394 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001470:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_DMA_Start_IT+0x26>
 800147c:	2302      	movs	r3, #2
 800147e:	e040      	b.n	8001502 <HAL_DMA_Start_IT+0xa8>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d12f      	bne.n	80014f4 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 f82e 	bl	800150a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b2:	223f      	movs	r2, #63	; 0x3f
 80014b4:	409a      	lsls	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0216 	orr.w	r2, r2, #22
 80014c8:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0208 	orr.w	r2, r2, #8
 80014e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0201 	orr.w	r2, r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e005      	b.n	8001500 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014fc:	2302      	movs	r3, #2
 80014fe:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001500:	7dfb      	ldrb	r3, [r7, #23]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001526:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b40      	cmp	r3, #64	; 0x40
 8001536:	d108      	bne.n	800154a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001548:	e007      	b.n	800155a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	60da      	str	r2, [r3, #12]
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	e16b      	b.n	800185c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	f040 815a 	bne.w	8001856 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d005      	beq.n	80015ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d130      	bne.n	800161c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 0201 	and.w	r2, r3, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b03      	cmp	r3, #3
 8001626:	d017      	beq.n	8001658 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80b4 	beq.w	8001856 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b60      	ldr	r3, [pc, #384]	; (8001874 <HAL_GPIO_Init+0x30c>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a5f      	ldr	r2, [pc, #380]	; (8001874 <HAL_GPIO_Init+0x30c>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_GPIO_Init+0x30c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170a:	4a5b      	ldr	r2, [pc, #364]	; (8001878 <HAL_GPIO_Init+0x310>)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_GPIO_Init+0x314>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d02b      	beq.n	800178e <HAL_GPIO_Init+0x226>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a51      	ldr	r2, [pc, #324]	; (8001880 <HAL_GPIO_Init+0x318>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d025      	beq.n	800178a <HAL_GPIO_Init+0x222>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a50      	ldr	r2, [pc, #320]	; (8001884 <HAL_GPIO_Init+0x31c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01f      	beq.n	8001786 <HAL_GPIO_Init+0x21e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4f      	ldr	r2, [pc, #316]	; (8001888 <HAL_GPIO_Init+0x320>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d019      	beq.n	8001782 <HAL_GPIO_Init+0x21a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4e      	ldr	r2, [pc, #312]	; (800188c <HAL_GPIO_Init+0x324>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0x216>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4d      	ldr	r2, [pc, #308]	; (8001890 <HAL_GPIO_Init+0x328>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00d      	beq.n	800177a <HAL_GPIO_Init+0x212>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_GPIO_Init+0x32c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x20e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4b      	ldr	r2, [pc, #300]	; (8001898 <HAL_GPIO_Init+0x330>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_GPIO_Init+0x20a>
 800176e:	2307      	movs	r3, #7
 8001770:	e00e      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001772:	2308      	movs	r3, #8
 8001774:	e00c      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001776:	2306      	movs	r3, #6
 8001778:	e00a      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800177a:	2305      	movs	r3, #5
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800177e:	2304      	movs	r3, #4
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x228>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x228>
 800178e:	2300      	movs	r3, #0
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_GPIO_Init+0x310>)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_GPIO_Init+0x334>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017d2:	4a32      	ldr	r2, [pc, #200]	; (800189c <HAL_GPIO_Init+0x334>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_GPIO_Init+0x334>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <HAL_GPIO_Init+0x334>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_GPIO_Init+0x334>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001826:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_GPIO_Init+0x334>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_GPIO_Init+0x334>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001850:	4a12      	ldr	r2, [pc, #72]	; (800189c <HAL_GPIO_Init+0x334>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	f67f ae90 	bls.w	8001584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40013800 	.word	0x40013800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	40020800 	.word	0x40020800
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40021000 	.word	0x40021000
 8001890:	40021400 	.word	0x40021400
 8001894:	40021800 	.word	0x40021800
 8001898:	40021c00 	.word	0x40021c00
 800189c:	40013c00 	.word	0x40013c00

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	619a      	str	r2, [r3, #24]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d4:	b08f      	sub	sp, #60	; 0x3c
 80018d6:	af0a      	add	r7, sp, #40	; 0x28
 80018d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e054      	b.n	800198e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f006 fa90 	bl	8007e24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2203      	movs	r2, #3
 8001908:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f003 fabd 	bl	8004ea2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	687e      	ldr	r6, [r7, #4]
 8001930:	466d      	mov	r5, sp
 8001932:	f106 0410 	add.w	r4, r6, #16
 8001936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001942:	e885 0003 	stmia.w	r5, {r0, r1}
 8001946:	1d33      	adds	r3, r6, #4
 8001948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800194a:	6838      	ldr	r0, [r7, #0]
 800194c:	f003 fa37 	bl	8004dbe <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fab4 	bl	8004ec4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	687e      	ldr	r6, [r7, #4]
 8001964:	466d      	mov	r5, sp
 8001966:	f106 0410 	add.w	r4, r6, #16
 800196a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001972:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001976:	e885 0003 	stmia.w	r5, {r0, r1}
 800197a:	1d33      	adds	r3, r6, #4
 800197c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800197e:	6838      	ldr	r0, [r7, #0]
 8001980:	f003 fc3c 	bl	80051fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001996 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001996:	b590      	push	{r4, r7, lr}
 8001998:	b089      	sub	sp, #36	; 0x24
 800199a:	af04      	add	r7, sp, #16
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	4608      	mov	r0, r1
 80019a0:	4611      	mov	r1, r2
 80019a2:	461a      	mov	r2, r3
 80019a4:	4603      	mov	r3, r0
 80019a6:	70fb      	strb	r3, [r7, #3]
 80019a8:	460b      	mov	r3, r1
 80019aa:	70bb      	strb	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_HCD_HC_Init+0x28>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e076      	b.n	8001aac <HAL_HCD_HC_Init+0x116>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	333d      	adds	r3, #61	; 0x3d
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	3338      	adds	r3, #56	; 0x38
 80019e6:	787a      	ldrb	r2, [r7, #1]
 80019e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3340      	adds	r3, #64	; 0x40
 80019f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019fa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	3339      	adds	r3, #57	; 0x39
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	333f      	adds	r3, #63	; 0x3f
 8001a1c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	78ba      	ldrb	r2, [r7, #2]
 8001a26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a2a:	b2d0      	uxtb	r0, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	333a      	adds	r3, #58	; 0x3a
 8001a38:	4602      	mov	r2, r0
 8001a3a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da09      	bge.n	8001a58 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	333b      	adds	r3, #59	; 0x3b
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e008      	b.n	8001a6a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	333b      	adds	r3, #59	; 0x3b
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	333c      	adds	r3, #60	; 0x3c
 8001a78:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a7c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	787c      	ldrb	r4, [r7, #1]
 8001a84:	78ba      	ldrb	r2, [r7, #2]
 8001a86:	78f9      	ldrb	r1, [r7, #3]
 8001a88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4623      	mov	r3, r4
 8001a9a:	f003 fd35 	bl	8005508 <USB_HC_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}

08001ab4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_HCD_HC_Halt+0x1e>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e00f      	b.n	8001af2 <HAL_HCD_HC_Halt+0x3e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 ff85 	bl	80059f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	70fb      	strb	r3, [r7, #3]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	70bb      	strb	r3, [r7, #2]
 8001b12:	4613      	mov	r3, r2
 8001b14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	212c      	movs	r1, #44	; 0x2c
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	333b      	adds	r3, #59	; 0x3b
 8001b24:	78ba      	ldrb	r2, [r7, #2]
 8001b26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	333f      	adds	r3, #63	; 0x3f
 8001b36:	787a      	ldrb	r2, [r7, #1]
 8001b38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b3a:	7c3b      	ldrb	r3, [r7, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d112      	bne.n	8001b66 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	212c      	movs	r1, #44	; 0x2c
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3342      	adds	r3, #66	; 0x42
 8001b4e:	2203      	movs	r2, #3
 8001b50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	333d      	adds	r3, #61	; 0x3d
 8001b60:	7f3a      	ldrb	r2, [r7, #28]
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	e008      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3342      	adds	r3, #66	; 0x42
 8001b74:	2202      	movs	r2, #2
 8001b76:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	f200 80c6 	bhi.w	8001d0c <HAL_HCD_HC_SubmitRequest+0x210>
 8001b80:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001cf9 	.word	0x08001cf9
 8001b90:	08001bfd 	.word	0x08001bfd
 8001b94:	08001c7b 	.word	0x08001c7b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b98:	7c3b      	ldrb	r3, [r7, #16]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	f040 80b8 	bne.w	8001d10 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ba0:	78bb      	ldrb	r3, [r7, #2]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 80b4 	bne.w	8001d10 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001ba8:	8b3b      	ldrh	r3, [r7, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d108      	bne.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	3355      	adds	r3, #85	; 0x55
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3355      	adds	r3, #85	; 0x55
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3342      	adds	r3, #66	; 0x42
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001be6:	e093      	b.n	8001d10 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3342      	adds	r3, #66	; 0x42
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	701a      	strb	r2, [r3, #0]
      break;
 8001bfa:	e089      	b.n	8001d10 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bfc:	78bb      	ldrb	r3, [r7, #2]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d11d      	bne.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3355      	adds	r3, #85	; 0x55
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3342      	adds	r3, #66	; 0x42
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c28:	e073      	b.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3342      	adds	r3, #66	; 0x42
 8001c38:	2202      	movs	r2, #2
 8001c3a:	701a      	strb	r2, [r3, #0]
      break;
 8001c3c:	e069      	b.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	212c      	movs	r1, #44	; 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3354      	adds	r3, #84	; 0x54
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	212c      	movs	r1, #44	; 0x2c
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3342      	adds	r3, #66	; 0x42
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
      break;
 8001c64:	e055      	b.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3342      	adds	r3, #66	; 0x42
 8001c74:	2202      	movs	r2, #2
 8001c76:	701a      	strb	r2, [r3, #0]
      break;
 8001c78:	e04b      	b.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c7a:	78bb      	ldrb	r3, [r7, #2]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d11d      	bne.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	212c      	movs	r1, #44	; 0x2c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3355      	adds	r3, #85	; 0x55
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3342      	adds	r3, #66	; 0x42
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ca6:	e034      	b.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3342      	adds	r3, #66	; 0x42
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	701a      	strb	r2, [r3, #0]
      break;
 8001cba:	e02a      	b.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3354      	adds	r3, #84	; 0x54
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3342      	adds	r3, #66	; 0x42
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
      break;
 8001ce2:	e016      	b.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	212c      	movs	r1, #44	; 0x2c
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	3342      	adds	r3, #66	; 0x42
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	701a      	strb	r2, [r3, #0]
      break;
 8001cf6:	e00c      	b.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	3342      	adds	r3, #66	; 0x42
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
      break;
 8001d0a:	e002      	b.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d0c:	bf00      	nop
 8001d0e:	e000      	b.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d10:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3344      	adds	r3, #68	; 0x44
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	8b3a      	ldrh	r2, [r7, #24]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	202c      	movs	r0, #44	; 0x2c
 8001d2c:	fb00 f303 	mul.w	r3, r0, r3
 8001d30:	440b      	add	r3, r1
 8001d32:	334c      	adds	r3, #76	; 0x4c
 8001d34:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3360      	adds	r3, #96	; 0x60
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	3350      	adds	r3, #80	; 0x50
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	3339      	adds	r3, #57	; 0x39
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	3361      	adds	r3, #97	; 0x61
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	222c      	movs	r2, #44	; 0x2c
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	3338      	adds	r3, #56	; 0x38
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	18d1      	adds	r1, r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	f003 fcd8 	bl	800574c <USB_HC_StartXfer>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop

08001da8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 f9d9 	bl	8005176 <USB_GetMode>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	f040 80f6 	bne.w	8001fb8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 f9bd 	bl	8005150 <USB_ReadInterrupts>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80ec 	beq.w	8001fb6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 f9b4 	bl	8005150 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df2:	d104      	bne.n	8001dfe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 f9a4 	bl	8005150 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e12:	d104      	bne.n	8001e1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 f994 	bl	8005150 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e32:	d104      	bne.n	8001e3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 f984 	bl	8005150 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d103      	bne.n	8001e5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2202      	movs	r2, #2
 8001e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 f976 	bl	8005150 <USB_ReadInterrupts>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e6e:	d11c      	bne.n	8001eaa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10f      	bne.n	8001eaa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	6938      	ldr	r0, [r7, #16]
 8001e8e:	f003 f865 	bl	8004f5c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e92:	6938      	ldr	r0, [r7, #16]
 8001e94:	f003 f896 	bl	8004fc4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fa6c 	bl	800537c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f006 f83b 	bl	8007f20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 f94e 	bl	8005150 <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ebe:	d102      	bne.n	8001ec6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f001 f89e 	bl	8003002 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 f940 	bl	8005150 <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d106      	bne.n	8001ee8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f006 f804 	bl	8007ee8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 f92f 	bl	8005150 <USB_ReadInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d101      	bne.n	8001f00 <HAL_HCD_IRQHandler+0x158>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_HCD_IRQHandler+0x15a>
 8001f00:	2300      	movs	r3, #0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d012      	beq.n	8001f2c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0210 	bic.w	r2, r2, #16
 8001f14:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 ffa1 	bl	8002e5e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0210 	orr.w	r2, r2, #16
 8001f2a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f90d 	bl	8005150 <USB_ReadInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f40:	d13a      	bne.n	8001fb8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 fd42 	bl	80059d0 <USB_HC_ReadInterrupt>
 8001f4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e025      	b.n	8001fa0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d018      	beq.n	8001f9a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7e:	d106      	bne.n	8001f8e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	4619      	mov	r1, r3
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8ab 	bl	80020e2 <HCD_HC_IN_IRQHandler>
 8001f8c:	e005      	b.n	8001f9a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4619      	mov	r1, r3
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fbf9 	bl	800278c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d3d4      	bcc.n	8001f54 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	e000      	b.n	8001fb8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001fb6:	bf00      	nop
    }
  }
}
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_HCD_Start+0x16>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e013      	b.n	8001ffc <HAL_HCD_Start+0x3e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 fa2e 	bl	8005444 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f002 ff47 	bl	8004e80 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_HCD_Stop+0x16>
 8002016:	2302      	movs	r3, #2
 8002018:	e00d      	b.n	8002036 <HAL_HCD_Stop+0x32>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fe1c 	bl	8005c64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f003 f9d0 	bl	80053f0 <USB_ResetPort>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3360      	adds	r3, #96	; 0x60
 8002074:	781b      	ldrb	r3, [r3, #0]
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3350      	adds	r3, #80	; 0x50
 800209c:	681b      	ldr	r3, [r3, #0]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 fa14 	bl	80054e4 <USB_GetCurrentFrame>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 f9ef 	bl	80054b6 <USB_GetHostSpeed>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	d11a      	bne.n	8002148 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	461a      	mov	r2, r3
 8002120:	2304      	movs	r3, #4
 8002122:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3361      	adds	r3, #97	; 0x61
 8002132:	2206      	movs	r2, #6
 8002134:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f003 fc56 	bl	80059f2 <USB_HC_Halt>
 8002146:	e0af      	b.n	80022a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215e:	d11b      	bne.n	8002198 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216c:	461a      	mov	r2, r3
 800216e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002172:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3361      	adds	r3, #97	; 0x61
 8002182:	2207      	movs	r2, #7
 8002184:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f003 fc2e 	bl	80059f2 <USB_HC_Halt>
 8002196:	e087      	b.n	80022a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	d109      	bne.n	80021c2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	461a      	mov	r2, r3
 80021bc:	2320      	movs	r3, #32
 80021be:	6093      	str	r3, [r2, #8]
 80021c0:	e072      	b.n	80022a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d11a      	bne.n	800220e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e4:	461a      	mov	r2, r3
 80021e6:	2308      	movs	r3, #8
 80021e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3361      	adds	r3, #97	; 0x61
 80021f8:	2205      	movs	r2, #5
 80021fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fbf3 	bl	80059f2 <USB_HC_Halt>
 800220c:	e04c      	b.n	80022a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002224:	d11b      	bne.n	800225e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	461a      	mov	r2, r3
 8002234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002238:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	3361      	adds	r3, #97	; 0x61
 8002248:	2208      	movs	r2, #8
 800224a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fbcb 	bl	80059f2 <USB_HC_Halt>
 800225c:	e024      	b.n	80022a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	2b80      	cmp	r3, #128	; 0x80
 8002272:	d119      	bne.n	80022a8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	461a      	mov	r2, r3
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	3361      	adds	r3, #97	; 0x61
 8002294:	2206      	movs	r2, #6
 8002296:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fba5 	bl	80059f2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022be:	d112      	bne.n	80022e6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 fb91 	bl	80059f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022dc:	461a      	mov	r2, r3
 80022de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022e4:	e24e      	b.n	8002784 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	f040 80df 	bne.w	80024bc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d019      	beq.n	800233a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	3348      	adds	r3, #72	; 0x48
 8002314:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0159      	lsls	r1, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	440b      	add	r3, r1
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002328:	1ad2      	subs	r2, r2, r3
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	202c      	movs	r0, #44	; 0x2c
 8002330:	fb00 f303 	mul.w	r3, r0, r3
 8002334:	440b      	add	r3, r1
 8002336:	3350      	adds	r3, #80	; 0x50
 8002338:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3361      	adds	r3, #97	; 0x61
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	335c      	adds	r3, #92	; 0x5c
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	461a      	mov	r2, r3
 800236c:	2301      	movs	r3, #1
 800236e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	333f      	adds	r3, #63	; 0x3f
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	333f      	adds	r3, #63	; 0x3f
 8002392:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002394:	2b02      	cmp	r3, #2
 8002396:	d111      	bne.n	80023bc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fb25 	bl	80059f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	461a      	mov	r2, r3
 80023b6:	2310      	movs	r3, #16
 80023b8:	6093      	str	r3, [r2, #8]
 80023ba:	e03a      	b.n	8002432 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	333f      	adds	r3, #63	; 0x3f
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d009      	beq.n	80023e4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	333f      	adds	r3, #63	; 0x3f
 80023de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d126      	bne.n	8002432 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	0151      	lsls	r1, r2, #5
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	440a      	add	r2, r1
 80023fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002402:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3360      	adds	r3, #96	; 0x60
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	b2d9      	uxtb	r1, r3
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	202c      	movs	r0, #44	; 0x2c
 8002420:	fb00 f303 	mul.w	r3, r0, r3
 8002424:	4413      	add	r3, r2
 8002426:	3360      	adds	r3, #96	; 0x60
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f005 fd85 	bl	8007f3c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d12b      	bne.n	8002492 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	3348      	adds	r3, #72	; 0x48
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	202c      	movs	r0, #44	; 0x2c
 8002450:	fb00 f202 	mul.w	r2, r0, r2
 8002454:	440a      	add	r2, r1
 8002456:	3240      	adds	r2, #64	; 0x40
 8002458:	8812      	ldrh	r2, [r2, #0]
 800245a:	fbb3 f3f2 	udiv	r3, r3, r2
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 818e 	beq.w	8002784 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	212c      	movs	r1, #44	; 0x2c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	3354      	adds	r3, #84	; 0x54
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	f083 0301 	eor.w	r3, r3, #1
 800247c:	b2d8      	uxtb	r0, r3
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3354      	adds	r3, #84	; 0x54
 800248c:	4602      	mov	r2, r0
 800248e:	701a      	strb	r2, [r3, #0]
}
 8002490:	e178      	b.n	8002784 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3354      	adds	r3, #84	; 0x54
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2d8      	uxtb	r0, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3354      	adds	r3, #84	; 0x54
 80024b6:	4602      	mov	r2, r0
 80024b8:	701a      	strb	r2, [r3, #0]
}
 80024ba:	e163      	b.n	8002784 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	f040 80f6 	bne.w	80026c0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3361      	adds	r3, #97	; 0x61
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d109      	bne.n	80024fc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3360      	adds	r3, #96	; 0x60
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e0c9      	b.n	8002690 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3361      	adds	r3, #97	; 0x61
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d109      	bne.n	8002524 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3360      	adds	r3, #96	; 0x60
 800251e:	2205      	movs	r2, #5
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e0b5      	b.n	8002690 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3361      	adds	r3, #97	; 0x61
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b06      	cmp	r3, #6
 8002536:	d009      	beq.n	800254c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3361      	adds	r3, #97	; 0x61
 8002546:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002548:	2b08      	cmp	r3, #8
 800254a:	d150      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	335c      	adds	r3, #92	; 0x5c
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	202c      	movs	r0, #44	; 0x2c
 8002564:	fb00 f303 	mul.w	r3, r0, r3
 8002568:	440b      	add	r3, r1
 800256a:	335c      	adds	r3, #92	; 0x5c
 800256c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	335c      	adds	r3, #92	; 0x5c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d912      	bls.n	80025a8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	335c      	adds	r3, #92	; 0x5c
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3360      	adds	r3, #96	; 0x60
 80025a2:	2204      	movs	r2, #4
 80025a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025a6:	e073      	b.n	8002690 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3360      	adds	r3, #96	; 0x60
 80025b6:	2202      	movs	r2, #2
 80025b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025d0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025d8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	461a      	mov	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025ec:	e050      	b.n	8002690 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	3361      	adds	r3, #97	; 0x61
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d122      	bne.n	8002648 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	3360      	adds	r3, #96	; 0x60
 8002610:	2202      	movs	r2, #2
 8002612:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800262a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002632:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e023      	b.n	8002690 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	3361      	adds	r3, #97	; 0x61
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b07      	cmp	r3, #7
 800265a:	d119      	bne.n	8002690 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	335c      	adds	r3, #92	; 0x5c
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	202c      	movs	r0, #44	; 0x2c
 8002674:	fb00 f303 	mul.w	r3, r0, r3
 8002678:	440b      	add	r3, r1
 800267a:	335c      	adds	r3, #92	; 0x5c
 800267c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3360      	adds	r3, #96	; 0x60
 800268c:	2204      	movs	r2, #4
 800268e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	461a      	mov	r2, r3
 800269e:	2302      	movs	r3, #2
 80026a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	b2d9      	uxtb	r1, r3
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	202c      	movs	r0, #44	; 0x2c
 80026ac:	fb00 f303 	mul.w	r3, r0, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	3360      	adds	r3, #96	; 0x60
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f005 fc3f 	bl	8007f3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026be:	e061      	b.n	8002784 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d156      	bne.n	8002784 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	333f      	adds	r3, #63	; 0x3f
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d111      	bne.n	800270e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	335c      	adds	r3, #92	; 0x5c
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f003 f973 	bl	80059f2 <USB_HC_Halt>
 800270c:	e031      	b.n	8002772 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	333f      	adds	r3, #63	; 0x3f
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	333f      	adds	r3, #63	; 0x3f
 8002730:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002732:	2b02      	cmp	r3, #2
 8002734:	d11d      	bne.n	8002772 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	335c      	adds	r3, #92	; 0x5c
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d110      	bne.n	8002772 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	3361      	adds	r3, #97	; 0x61
 800275e:	2203      	movs	r2, #3
 8002760:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f003 f940 	bl	80059f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	461a      	mov	r2, r3
 8002780:	2310      	movs	r3, #16
 8002782:	6093      	str	r3, [r2, #8]
}
 8002784:	bf00      	nop
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d11a      	bne.n	80027f2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	461a      	mov	r2, r3
 80027ca:	2304      	movs	r3, #4
 80027cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3361      	adds	r3, #97	; 0x61
 80027dc:	2206      	movs	r2, #6
 80027de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f003 f901 	bl	80059f2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027f0:	e331      	b.n	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b20      	cmp	r3, #32
 8002806:	d12e      	bne.n	8002866 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	461a      	mov	r2, r3
 8002816:	2320      	movs	r3, #32
 8002818:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	333d      	adds	r3, #61	; 0x3d
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	f040 8313 	bne.w	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	333d      	adds	r3, #61	; 0x3d
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3360      	adds	r3, #96	; 0x60
 8002850:	2202      	movs	r2, #2
 8002852:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f003 f8c7 	bl	80059f2 <USB_HC_Halt>
}
 8002864:	e2f7      	b.n	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800287c:	d112      	bne.n	80028a4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	461a      	mov	r2, r3
 800288c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002890:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f003 f8a8 	bl	80059f2 <USB_HC_Halt>
}
 80028a2:	e2d8      	b.n	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d140      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	335c      	adds	r3, #92	; 0x5c
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	d111      	bne.n	8002906 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	333d      	adds	r3, #61	; 0x3d
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	2340      	movs	r3, #64	; 0x40
 8002904:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	461a      	mov	r2, r3
 8002914:	2301      	movs	r3, #1
 8002916:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3361      	adds	r3, #97	; 0x61
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f003 f85c 	bl	80059f2 <USB_HC_Halt>
}
 800293a:	e28c      	b.n	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d12c      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3361      	adds	r3, #97	; 0x61
 8002960:	2204      	movs	r2, #4
 8002962:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	333d      	adds	r3, #61	; 0x3d
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	335c      	adds	r3, #92	; 0x5c
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f003 f82d 	bl	80059f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	2340      	movs	r3, #64	; 0x40
 80029a8:	6093      	str	r3, [r2, #8]
}
 80029aa:	e254      	b.n	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d11a      	bne.n	80029f8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	2308      	movs	r3, #8
 80029d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3361      	adds	r3, #97	; 0x61
 80029e2:	2205      	movs	r2, #5
 80029e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f002 fffe 	bl	80059f2 <USB_HC_Halt>
}
 80029f6:	e22e      	b.n	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d140      	bne.n	8002a90 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	335c      	adds	r3, #92	; 0x5c
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3361      	adds	r3, #97	; 0x61
 8002a2e:	2203      	movs	r2, #3
 8002a30:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	333d      	adds	r3, #61	; 0x3d
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d112      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	333c      	adds	r3, #60	; 0x3c
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	333d      	adds	r3, #61	; 0x3d
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 ffbb 	bl	80059f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	6093      	str	r3, [r2, #8]
}
 8002a8e:	e1e2      	b.n	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d164      	bne.n	8002b70 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d111      	bne.n	8002ad2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3361      	adds	r3, #97	; 0x61
 8002abc:	2206      	movs	r2, #6
 8002abe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f002 ff91 	bl	80059f2 <USB_HC_Halt>
 8002ad0:	e044      	b.n	8002b5c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	202c      	movs	r0, #44	; 0x2c
 8002aea:	fb00 f303 	mul.w	r3, r0, r3
 8002aee:	440b      	add	r3, r1
 8002af0:	335c      	adds	r3, #92	; 0x5c
 8002af2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	335c      	adds	r3, #92	; 0x5c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d920      	bls.n	8002b4a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	335c      	adds	r3, #92	; 0x5c
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3360      	adds	r3, #96	; 0x60
 8002b28:	2204      	movs	r2, #4
 8002b2a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	b2d9      	uxtb	r1, r3
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	202c      	movs	r0, #44	; 0x2c
 8002b36:	fb00 f303 	mul.w	r3, r0, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3360      	adds	r3, #96	; 0x60
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f005 f9fa 	bl	8007f3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b48:	e008      	b.n	8002b5c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3360      	adds	r3, #96	; 0x60
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	6093      	str	r3, [r2, #8]
}
 8002b6e:	e172      	b.n	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b86:	d11b      	bne.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3361      	adds	r3, #97	; 0x61
 8002b96:	2208      	movs	r2, #8
 8002b98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f002 ff24 	bl	80059f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bbc:	6093      	str	r3, [r2, #8]
}
 8002bbe:	e14a      	b.n	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	f040 813f 	bne.w	8002e56 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3361      	adds	r3, #97	; 0x61
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d17d      	bne.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3360      	adds	r3, #96	; 0x60
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	333f      	adds	r3, #63	; 0x3f
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d00a      	beq.n	8002c28 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	333f      	adds	r3, #63	; 0x3f
 8002c20:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	f040 8100 	bne.w	8002e28 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d113      	bne.n	8002c58 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3355      	adds	r3, #85	; 0x55
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f083 0301 	eor.w	r3, r3, #1
 8002c44:	b2d8      	uxtb	r0, r3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3355      	adds	r3, #85	; 0x55
 8002c54:	4602      	mov	r2, r0
 8002c56:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	f040 80e3 	bne.w	8002e28 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	334c      	adds	r3, #76	; 0x4c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80d8 	beq.w	8002e28 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	334c      	adds	r3, #76	; 0x4c
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	202c      	movs	r0, #44	; 0x2c
 8002c8e:	fb00 f202 	mul.w	r2, r0, r2
 8002c92:	440a      	add	r2, r1
 8002c94:	3240      	adds	r2, #64	; 0x40
 8002c96:	8812      	ldrh	r2, [r2, #0]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	202c      	movs	r0, #44	; 0x2c
 8002ca2:	fb00 f202 	mul.w	r2, r0, r2
 8002ca6:	440a      	add	r2, r1
 8002ca8:	3240      	adds	r2, #64	; 0x40
 8002caa:	8812      	ldrh	r2, [r2, #0]
 8002cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80b5 	beq.w	8002e28 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3355      	adds	r3, #85	; 0x55
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	f083 0301 	eor.w	r3, r3, #1
 8002cd2:	b2d8      	uxtb	r0, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3355      	adds	r3, #85	; 0x55
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e09f      	b.n	8002e28 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3361      	adds	r3, #97	; 0x61
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d109      	bne.n	8002d10 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3360      	adds	r3, #96	; 0x60
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e08b      	b.n	8002e28 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3361      	adds	r3, #97	; 0x61
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d109      	bne.n	8002d38 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3360      	adds	r3, #96	; 0x60
 8002d32:	2202      	movs	r2, #2
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e077      	b.n	8002e28 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3361      	adds	r3, #97	; 0x61
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d109      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3360      	adds	r3, #96	; 0x60
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e063      	b.n	8002e28 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3361      	adds	r3, #97	; 0x61
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	d009      	beq.n	8002d88 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3361      	adds	r3, #97	; 0x61
 8002d82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d14f      	bne.n	8002e28 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	335c      	adds	r3, #92	; 0x5c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	202c      	movs	r0, #44	; 0x2c
 8002da0:	fb00 f303 	mul.w	r3, r0, r3
 8002da4:	440b      	add	r3, r1
 8002da6:	335c      	adds	r3, #92	; 0x5c
 8002da8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	335c      	adds	r3, #92	; 0x5c
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d912      	bls.n	8002de4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	335c      	adds	r3, #92	; 0x5c
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3360      	adds	r3, #96	; 0x60
 8002dde:	2204      	movs	r2, #4
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e021      	b.n	8002e28 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3360      	adds	r3, #96	; 0x60
 8002df2:	2202      	movs	r2, #2
 8002df4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e0c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e14:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e22:	461a      	mov	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2302      	movs	r3, #2
 8002e38:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	b2d9      	uxtb	r1, r3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	202c      	movs	r0, #44	; 0x2c
 8002e44:	fb00 f303 	mul.w	r3, r0, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3360      	adds	r3, #96	; 0x60
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f005 f873 	bl	8007f3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e56:	bf00      	nop
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b08a      	sub	sp, #40	; 0x28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	0c5b      	lsrs	r3, r3, #17
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e92:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d004      	beq.n	8002ea4 <HCD_RXQLVL_IRQHandler+0x46>
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	f000 80a9 	beq.w	8002ff4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ea2:	e0aa      	b.n	8002ffa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80a6 	beq.w	8002ff8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3344      	adds	r3, #68	; 0x44
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809b 	beq.w	8002ff8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3350      	adds	r3, #80	; 0x50
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	441a      	add	r2, r3
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	202c      	movs	r0, #44	; 0x2c
 8002edc:	fb00 f303 	mul.w	r3, r0, r3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	334c      	adds	r3, #76	; 0x4c
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d87a      	bhi.n	8002fe0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3344      	adds	r3, #68	; 0x44
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	b292      	uxth	r2, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	f002 f8cc 	bl	80050a0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	212c      	movs	r1, #44	; 0x2c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	3344      	adds	r3, #68	; 0x44
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	441a      	add	r2, r3
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	202c      	movs	r0, #44	; 0x2c
 8002f22:	fb00 f303 	mul.w	r3, r0, r3
 8002f26:	440b      	add	r3, r1
 8002f28:	3344      	adds	r3, #68	; 0x44
 8002f2a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3350      	adds	r3, #80	; 0x50
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	441a      	add	r2, r3
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	202c      	movs	r0, #44	; 0x2c
 8002f46:	fb00 f303 	mul.w	r3, r0, r3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3350      	adds	r3, #80	; 0x50
 8002f4e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	0cdb      	lsrs	r3, r3, #19
 8002f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f64:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	3340      	adds	r3, #64	; 0x40
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d13c      	bne.n	8002ff8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d039      	beq.n	8002ff8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f9a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fa2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3354      	adds	r3, #84	; 0x54
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	f083 0301 	eor.w	r3, r3, #1
 8002fca:	b2d8      	uxtb	r0, r3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3354      	adds	r3, #84	; 0x54
 8002fda:	4602      	mov	r2, r0
 8002fdc:	701a      	strb	r2, [r3, #0]
      break;
 8002fde:	e00b      	b.n	8002ff8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	212c      	movs	r1, #44	; 0x2c
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	3360      	adds	r3, #96	; 0x60
 8002fee:	2204      	movs	r2, #4
 8002ff0:	701a      	strb	r2, [r3, #0]
      break;
 8002ff2:	e001      	b.n	8002ff8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ff4:	bf00      	nop
 8002ff6:	e000      	b.n	8002ffa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ff8:	bf00      	nop
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	3728      	adds	r7, #40	; 0x28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800302e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b02      	cmp	r3, #2
 8003038:	d10b      	bne.n	8003052 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d102      	bne.n	800304a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f004 ff5d 	bl	8007f04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d132      	bne.n	80030c2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f043 0308 	orr.w	r3, r3, #8
 8003062:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d126      	bne.n	80030bc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d113      	bne.n	800309e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800307c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003080:	d106      	bne.n	8003090 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2102      	movs	r1, #2
 8003088:	4618      	mov	r0, r3
 800308a:	f002 f977 	bl	800537c <USB_InitFSLSPClkSel>
 800308e:	e011      	b.n	80030b4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f002 f970 	bl	800537c <USB_InitFSLSPClkSel>
 800309c:	e00a      	b.n	80030b4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d106      	bne.n	80030b4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ac:	461a      	mov	r2, r3
 80030ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030b2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f004 ff4f 	bl	8007f58 <HAL_HCD_PortEnabled_Callback>
 80030ba:	e002      	b.n	80030c2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f004 ff59 	bl	8007f74 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d103      	bne.n	80030d4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f043 0320 	orr.w	r3, r3, #32
 80030d2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030da:	461a      	mov	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	6013      	str	r3, [r2, #0]
}
 80030e0:	bf00      	nop
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e12b      	b.n	8003352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd fe46 	bl	8000da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800313a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800314a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800314c:	f001 fc5a 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8003150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4a81      	ldr	r2, [pc, #516]	; (800335c <HAL_I2C_Init+0x274>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d807      	bhi.n	800316c <HAL_I2C_Init+0x84>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a80      	ldr	r2, [pc, #512]	; (8003360 <HAL_I2C_Init+0x278>)
 8003160:	4293      	cmp	r3, r2
 8003162:	bf94      	ite	ls
 8003164:	2301      	movls	r3, #1
 8003166:	2300      	movhi	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e006      	b.n	800317a <HAL_I2C_Init+0x92>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a7d      	ldr	r2, [pc, #500]	; (8003364 <HAL_I2C_Init+0x27c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	bf94      	ite	ls
 8003174:	2301      	movls	r3, #1
 8003176:	2300      	movhi	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0e7      	b.n	8003352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a78      	ldr	r2, [pc, #480]	; (8003368 <HAL_I2C_Init+0x280>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a6a      	ldr	r2, [pc, #424]	; (800335c <HAL_I2C_Init+0x274>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d802      	bhi.n	80031bc <HAL_I2C_Init+0xd4>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3301      	adds	r3, #1
 80031ba:	e009      	b.n	80031d0 <HAL_I2C_Init+0xe8>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	4a69      	ldr	r2, [pc, #420]	; (800336c <HAL_I2C_Init+0x284>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	3301      	adds	r3, #1
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	495c      	ldr	r1, [pc, #368]	; (800335c <HAL_I2C_Init+0x274>)
 80031ec:	428b      	cmp	r3, r1
 80031ee:	d819      	bhi.n	8003224 <HAL_I2C_Init+0x13c>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e59      	subs	r1, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fe:	1c59      	adds	r1, r3, #1
 8003200:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003204:	400b      	ands	r3, r1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_I2C_Init+0x138>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1e59      	subs	r1, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fbb1 f3f3 	udiv	r3, r1, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	e051      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 8003220:	2304      	movs	r3, #4
 8003222:	e04f      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d111      	bne.n	8003250 <HAL_I2C_Init+0x168>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e58      	subs	r0, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	440b      	add	r3, r1
 800323a:	fbb0 f3f3 	udiv	r3, r0, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e012      	b.n	8003276 <HAL_I2C_Init+0x18e>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e58      	subs	r0, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	0099      	lsls	r1, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Init+0x196>
 800327a:	2301      	movs	r3, #1
 800327c:	e022      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10e      	bne.n	80032a4 <HAL_I2C_Init+0x1bc>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e58      	subs	r0, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	440b      	add	r3, r1
 8003294:	fbb0 f3f3 	udiv	r3, r0, r3
 8003298:	3301      	adds	r3, #1
 800329a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a2:	e00f      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e58      	subs	r0, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	0099      	lsls	r1, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	6809      	ldr	r1, [r1, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6911      	ldr	r1, [r2, #16]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68d2      	ldr	r2, [r2, #12]
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	430b      	orrs	r3, r1
 8003306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	000186a0 	.word	0x000186a0
 8003360:	001e847f 	.word	0x001e847f
 8003364:	003d08ff 	.word	0x003d08ff
 8003368:	431bde83 	.word	0x431bde83
 800336c:	10624dd3 	.word	0x10624dd3

08003370 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e128      	b.n	80035d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a90      	ldr	r2, [pc, #576]	; (80035dc <HAL_I2S_Init+0x26c>)
 800339a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fd fd47 	bl	8000e30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033b8:	f023 030f 	bic.w	r3, r3, #15
 80033bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2202      	movs	r2, #2
 80033c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d060      	beq.n	8003490 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033d6:	2310      	movs	r3, #16
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	e001      	b.n	80033e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033dc:	2320      	movs	r3, #32
 80033de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d802      	bhi.n	80033ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f001 fbfe 	bl	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq>
 80033f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033fe:	d125      	bne.n	800344c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	461a      	mov	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	3305      	adds	r3, #5
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	e01f      	b.n	800346a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	fbb2 f2f3 	udiv	r2, r2, r3
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	461a      	mov	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	3305      	adds	r3, #5
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	e00e      	b.n	800346a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	fbb2 f2f3 	udiv	r2, r2, r3
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	461a      	mov	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	3305      	adds	r3, #5
 8003468:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4a5c      	ldr	r2, [pc, #368]	; (80035e0 <HAL_I2S_Init+0x270>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	08db      	lsrs	r3, r3, #3
 8003474:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	e003      	b.n	8003498 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003490:	2302      	movs	r3, #2
 8003492:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d902      	bls.n	80034a4 <HAL_I2S_Init+0x134>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	2bff      	cmp	r3, #255	; 0xff
 80034a2:	d907      	bls.n	80034b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f043 0210 	orr.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e08f      	b.n	80035d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	ea42 0103 	orr.w	r1, r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034d2:	f023 030f 	bic.w	r3, r3, #15
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6851      	ldr	r1, [r2, #4]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6892      	ldr	r2, [r2, #8]
 80034de:	4311      	orrs	r1, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	68d2      	ldr	r2, [r2, #12]
 80034e4:	4311      	orrs	r1, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6992      	ldr	r2, [r2, #24]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d161      	bne.n	80035c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <HAL_I2S_Init+0x274>)
 8003504:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a37      	ldr	r2, [pc, #220]	; (80035e8 <HAL_I2S_Init+0x278>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d101      	bne.n	8003514 <HAL_I2S_Init+0x1a4>
 8003510:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_I2S_Init+0x27c>)
 8003512:	e001      	b.n	8003518 <HAL_I2S_Init+0x1a8>
 8003514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	4932      	ldr	r1, [pc, #200]	; (80035e8 <HAL_I2S_Init+0x278>)
 8003520:	428a      	cmp	r2, r1
 8003522:	d101      	bne.n	8003528 <HAL_I2S_Init+0x1b8>
 8003524:	4a31      	ldr	r2, [pc, #196]	; (80035ec <HAL_I2S_Init+0x27c>)
 8003526:	e001      	b.n	800352c <HAL_I2S_Init+0x1bc>
 8003528:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800352c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003530:	f023 030f 	bic.w	r3, r3, #15
 8003534:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2b      	ldr	r2, [pc, #172]	; (80035e8 <HAL_I2S_Init+0x278>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d101      	bne.n	8003544 <HAL_I2S_Init+0x1d4>
 8003540:	4b2a      	ldr	r3, [pc, #168]	; (80035ec <HAL_I2S_Init+0x27c>)
 8003542:	e001      	b.n	8003548 <HAL_I2S_Init+0x1d8>
 8003544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003548:	2202      	movs	r2, #2
 800354a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <HAL_I2S_Init+0x278>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_I2S_Init+0x1ea>
 8003556:	4b25      	ldr	r3, [pc, #148]	; (80035ec <HAL_I2S_Init+0x27c>)
 8003558:	e001      	b.n	800355e <HAL_I2S_Init+0x1ee>
 800355a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	d003      	beq.n	8003574 <HAL_I2S_Init+0x204>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	e001      	b.n	8003580 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800358a:	4313      	orrs	r3, r2
 800358c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003594:	4313      	orrs	r3, r2
 8003596:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800359e:	4313      	orrs	r3, r2
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <HAL_I2S_Init+0x278>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_I2S_Init+0x24c>
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_I2S_Init+0x27c>)
 80035ba:	e001      	b.n	80035c0 <HAL_I2S_Init+0x250>
 80035bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c0:	897a      	ldrh	r2, [r7, #10]
 80035c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	080036e7 	.word	0x080036e7
 80035e0:	cccccccd 	.word	0xcccccccd
 80035e4:	08003b11 	.word	0x08003b11
 80035e8:	40003800 	.word	0x40003800
 80035ec:	40003400 	.word	0x40003400

080035f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	881a      	ldrh	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10e      	bne.n	8003680 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003670:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff ffb8 	bl	80035f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	b292      	uxth	r2, r2
 800369c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	1c9a      	adds	r2, r3, #2
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10e      	bne.n	80036de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ff93 	bl	8003604 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d13a      	bne.n	8003778 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d109      	bne.n	8003720 <I2S_IRQHandler+0x3a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d102      	bne.n	8003720 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffb4 	bl	8003688 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d126      	bne.n	8003778 <I2S_IRQHandler+0x92>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b20      	cmp	r3, #32
 8003736:	d11f      	bne.n	8003778 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003746:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f043 0202 	orr.w	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff50 	bl	8003618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b03      	cmp	r3, #3
 8003782:	d136      	bne.n	80037f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d109      	bne.n	80037a2 <I2S_IRQHandler+0xbc>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b80      	cmp	r3, #128	; 0x80
 800379a:	d102      	bne.n	80037a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff45 	bl	800362c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d122      	bne.n	80037f2 <I2S_IRQHandler+0x10c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d11b      	bne.n	80037f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037ca:	2300      	movs	r3, #0
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff13 	bl	8003618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d002      	beq.n	8003828 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003822:	2302      	movs	r3, #2
 8003824:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003826:	e160      	b.n	8003aea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e15a      	b.n	8003af4 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800384a:	2302      	movs	r3, #2
 800384c:	e152      	b.n	8003af4 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d002      	beq.n	800387a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b05      	cmp	r3, #5
 8003878:	d114      	bne.n	80038a4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003884:	887b      	ldrh	r3, [r7, #2]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003898:	887b      	ldrh	r3, [r7, #2]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	865a      	strh	r2, [r3, #50]	; 0x32
 80038a2:	e00b      	b.n	80038bc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	887a      	ldrh	r2, [r7, #2]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	887a      	ldrh	r2, [r7, #2]
 80038b4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	887a      	ldrh	r2, [r7, #2]
 80038ba:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2205      	movs	r2, #5
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	4a8b      	ldr	r2, [pc, #556]	; (8003afc <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	4a8a      	ldr	r2, [pc, #552]	; (8003b00 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80038d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	4a89      	ldr	r2, [pc, #548]	; (8003b04 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80038e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	2200      	movs	r2, #0
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	2200      	movs	r2, #0
 80038f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	4a83      	ldr	r2, [pc, #524]	; (8003b04 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80038f8:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003904:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390c:	d002      	beq.n	8003914 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d16b      	bne.n	80039ec <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003914:	1d3b      	adds	r3, r7, #4
 8003916:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a79      	ldr	r2, [pc, #484]	; (8003b08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003926:	4b79      	ldr	r3, [pc, #484]	; (8003b0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003928:	e001      	b.n	800392e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800392a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392e:	330c      	adds	r3, #12
 8003930:	4619      	mov	r1, r3
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800393a:	b29b      	uxth	r3, r3
 800393c:	f7fd fd8d 	bl	800145a <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a70      	ldr	r2, [pc, #448]	; (8003b08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800394a:	4b70      	ldr	r3, [pc, #448]	; (8003b0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800394c:	e001      	b.n	8003952 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800394e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	496b      	ldr	r1, [pc, #428]	; (8003b08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800395a:	428b      	cmp	r3, r1
 800395c:	d101      	bne.n	8003962 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800395e:	4b6b      	ldr	r3, [pc, #428]	; (8003b0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003960:	e001      	b.n	8003966 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800396c:	f107 0308 	add.w	r3, r7, #8
 8003970:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	6819      	ldr	r1, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	461a      	mov	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	b29b      	uxth	r3, r3
 8003988:	f7fd fd67 	bl	800145a <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0202 	orr.w	r2, r2, #2
 800399a:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039aa:	f000 809e 	beq.w	8003aea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a55      	ldr	r2, [pc, #340]	; (8003b08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80039b8:	4b54      	ldr	r3, [pc, #336]	; (8003b0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80039ba:	e001      	b.n	80039c0 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80039bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4950      	ldr	r1, [pc, #320]	; (8003b08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d101      	bne.n	80039d0 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80039cc:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80039ce:	e001      	b.n	80039d4 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80039d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039d8:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039e8:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80039ea:	e07e      	b.n	8003aea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fa:	d10a      	bne.n	8003a12 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003a12:	f107 0308 	add.w	r3, r7, #8
 8003a16:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	6819      	ldr	r1, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a38      	ldr	r2, [pc, #224]	; (8003b08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8003a2a:	4b38      	ldr	r3, [pc, #224]	; (8003b0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003a2c:	e001      	b.n	8003a32 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003a2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a32:	330c      	adds	r3, #12
 8003a34:	461a      	mov	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f7fd fd0d 	bl	800145a <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8003a4a:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003a4c:	e001      	b.n	8003a52 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8003a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	492b      	ldr	r1, [pc, #172]	; (8003b08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003a5a:	428b      	cmp	r3, r1
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003a60:	e001      	b.n	8003a66 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a66:	f042 0202 	orr.w	r2, r2, #2
 8003a6a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f7fd fce8 	bl	800145a <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0201 	orr.w	r2, r2, #1
 8003a98:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa8:	d01e      	beq.n	8003ae8 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003ab6:	e001      	b.n	8003abc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8003ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4911      	ldr	r1, [pc, #68]	; (8003b08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003ac4:	428b      	cmp	r3, r1
 8003ac6:	d101      	bne.n	8003acc <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8003ac8:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003aca:	e001      	b.n	8003ad0 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ad4:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae4:	61da      	str	r2, [r3, #28]
 8003ae6:	e000      	b.n	8003aea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003ae8:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	08003db9 	.word	0x08003db9
 8003b00:	08003dd5 	.word	0x08003dd5
 8003b04:	08003ead 	.word	0x08003ead
 8003b08:	40003800 	.word	0x40003800
 8003b0c:	40003400 	.word	0x40003400

08003b10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a92      	ldr	r2, [pc, #584]	; (8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d101      	bne.n	8003b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b2a:	4b92      	ldr	r3, [pc, #584]	; (8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b2c:	e001      	b.n	8003b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a8b      	ldr	r2, [pc, #556]	; (8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d101      	bne.n	8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b48:	4b8a      	ldr	r3, [pc, #552]	; (8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b4a:	e001      	b.n	8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5c:	d004      	beq.n	8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 8099 	bne.w	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d107      	bne.n	8003b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f9d5 	bl	8003f2c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d107      	bne.n	8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa78 	bl	800408c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d13a      	bne.n	8003c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d035      	beq.n	8003c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6e      	ldr	r2, [pc, #440]	; (8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003bba:	4b6e      	ldr	r3, [pc, #440]	; (8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bbc:	e001      	b.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4969      	ldr	r1, [pc, #420]	; (8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bca:	428b      	cmp	r3, r1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003bce:	4b69      	ldr	r3, [pc, #420]	; (8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bd0:	e001      	b.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f043 0202 	orr.w	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff fcfe 	bl	8003618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	f040 80c3 	bne.w	8003dae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80bd 	beq.w	8003dae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a49      	ldr	r2, [pc, #292]	; (8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c4e:	4b49      	ldr	r3, [pc, #292]	; (8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c50:	e001      	b.n	8003c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4944      	ldr	r1, [pc, #272]	; (8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c5e:	428b      	cmp	r3, r1
 8003c60:	d101      	bne.n	8003c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003c62:	4b44      	ldr	r3, [pc, #272]	; (8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c64:	e001      	b.n	8003c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003c66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c70:	2300      	movs	r3, #0
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fcc0 	bl	8003618 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c98:	e089      	b.n	8003dae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d107      	bne.n	8003cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f96e 	bl	8003f90 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d107      	bne.n	8003cce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f9ad 	bl	8004028 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d12f      	bne.n	8003d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d02a      	beq.n	8003d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cf0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1e      	ldr	r2, [pc, #120]	; (8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cfe:	e001      	b.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4919      	ldr	r1, [pc, #100]	; (8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d101      	bne.n	8003d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d10:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d12:	e001      	b.n	8003d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f043 0202 	orr.w	r2, r3, #2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fc70 	bl	8003618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d136      	bne.n	8003db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d031      	beq.n	8003db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d58:	e001      	b.n	8003d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4902      	ldr	r1, [pc, #8]	; (8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d66:	428b      	cmp	r3, r1
 8003d68:	d106      	bne.n	8003d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003d6a:	4b02      	ldr	r3, [pc, #8]	; (8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d6c:	e006      	b.n	8003d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003d6e:	bf00      	nop
 8003d70:	40003800 	.word	0x40003800
 8003d74:	40003400 	.word	0x40003400
 8003d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d80:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	f043 0204 	orr.w	r2, r3, #4
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fc36 	bl	8003618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dac:	e000      	b.n	8003db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dae:	bf00      	nop
}
 8003db0:	bf00      	nop
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7fc ff50 	bl	8000c6c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d155      	bne.n	8003e96 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df8:	d006      	beq.n	8003e08 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d11e      	bne.n	8003e46 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <I2SEx_TxRxDMACplt+0xd0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <I2SEx_TxRxDMACplt+0x42>
 8003e12:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <I2SEx_TxRxDMACplt+0xd4>)
 8003e14:	e001      	b.n	8003e1a <I2SEx_TxRxDMACplt+0x46>
 8003e16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4920      	ldr	r1, [pc, #128]	; (8003ea4 <I2SEx_TxRxDMACplt+0xd0>)
 8003e22:	428b      	cmp	r3, r1
 8003e24:	d101      	bne.n	8003e2a <I2SEx_TxRxDMACplt+0x56>
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <I2SEx_TxRxDMACplt+0xd4>)
 8003e28:	e001      	b.n	8003e2e <I2SEx_TxRxDMACplt+0x5a>
 8003e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0202 	bic.w	r2, r2, #2
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	e01d      	b.n	8003e82 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a12      	ldr	r2, [pc, #72]	; (8003ea4 <I2SEx_TxRxDMACplt+0xd0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d101      	bne.n	8003e64 <I2SEx_TxRxDMACplt+0x90>
 8003e60:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <I2SEx_TxRxDMACplt+0xd4>)
 8003e62:	e001      	b.n	8003e68 <I2SEx_TxRxDMACplt+0x94>
 8003e64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	490d      	ldr	r1, [pc, #52]	; (8003ea4 <I2SEx_TxRxDMACplt+0xd0>)
 8003e70:	428b      	cmp	r3, r1
 8003e72:	d101      	bne.n	8003e78 <I2SEx_TxRxDMACplt+0xa4>
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <I2SEx_TxRxDMACplt+0xd4>)
 8003e76:	e001      	b.n	8003e7c <I2SEx_TxRxDMACplt+0xa8>
 8003e78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7c:	f022 0202 	bic.w	r2, r2, #2
 8003e80:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7fc ff1e 	bl	8000cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40003800 	.word	0x40003800
 8003ea8:	40003400 	.word	0x40003400

08003eac <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0203 	bic.w	r2, r2, #3
 8003ec8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <I2SEx_TxRxDMAError+0x78>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <I2SEx_TxRxDMAError+0x2c>
 8003ed4:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <I2SEx_TxRxDMAError+0x7c>)
 8003ed6:	e001      	b.n	8003edc <I2SEx_TxRxDMAError+0x30>
 8003ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4910      	ldr	r1, [pc, #64]	; (8003f24 <I2SEx_TxRxDMAError+0x78>)
 8003ee4:	428b      	cmp	r3, r1
 8003ee6:	d101      	bne.n	8003eec <I2SEx_TxRxDMAError+0x40>
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <I2SEx_TxRxDMAError+0x7c>)
 8003eea:	e001      	b.n	8003ef0 <I2SEx_TxRxDMAError+0x44>
 8003eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef0:	f022 0203 	bic.w	r2, r2, #3
 8003ef4:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	f043 0208 	orr.w	r2, r3, #8
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff fb7e 	bl	8003618 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40003800 	.word	0x40003800
 8003f28:	40003400 	.word	0x40003400

08003f2c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	1c99      	adds	r1, r3, #2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6251      	str	r1, [r2, #36]	; 0x24
 8003f3e:	881a      	ldrh	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d113      	bne.n	8003f86 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fc fea9 	bl	8000cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	1c99      	adds	r1, r3, #2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6251      	str	r1, [r2, #36]	; 0x24
 8003fa2:	8819      	ldrh	r1, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <I2SEx_TxISR_I2SExt+0x90>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <I2SEx_TxISR_I2SExt+0x22>
 8003fae:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <I2SEx_TxISR_I2SExt+0x94>)
 8003fb0:	e001      	b.n	8003fb6 <I2SEx_TxISR_I2SExt+0x26>
 8003fb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb6:	460a      	mov	r2, r1
 8003fb8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d121      	bne.n	8004016 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a12      	ldr	r2, [pc, #72]	; (8004020 <I2SEx_TxISR_I2SExt+0x90>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d101      	bne.n	8003fe0 <I2SEx_TxISR_I2SExt+0x50>
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <I2SEx_TxISR_I2SExt+0x94>)
 8003fde:	e001      	b.n	8003fe4 <I2SEx_TxISR_I2SExt+0x54>
 8003fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	490d      	ldr	r1, [pc, #52]	; (8004020 <I2SEx_TxISR_I2SExt+0x90>)
 8003fec:	428b      	cmp	r3, r1
 8003fee:	d101      	bne.n	8003ff4 <I2SEx_TxISR_I2SExt+0x64>
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <I2SEx_TxISR_I2SExt+0x94>)
 8003ff2:	e001      	b.n	8003ff8 <I2SEx_TxISR_I2SExt+0x68>
 8003ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ffc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fc fe61 	bl	8000cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004016:	bf00      	nop
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40003800 	.word	0x40003800
 8004024:	40003400 	.word	0x40003400

08004028 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68d8      	ldr	r0, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	1c99      	adds	r1, r3, #2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004040:	b282      	uxth	r2, r0
 8004042:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d113      	bne.n	8004084 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800406a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc fe2a 	bl	8000cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a20      	ldr	r2, [pc, #128]	; (800411c <I2SEx_RxISR_I2SExt+0x90>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <I2SEx_RxISR_I2SExt+0x16>
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <I2SEx_RxISR_I2SExt+0x94>)
 80040a0:	e001      	b.n	80040a6 <I2SEx_RxISR_I2SExt+0x1a>
 80040a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a6:	68d8      	ldr	r0, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	1c99      	adds	r1, r3, #2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040b2:	b282      	uxth	r2, r0
 80040b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d121      	bne.n	8004112 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a12      	ldr	r2, [pc, #72]	; (800411c <I2SEx_RxISR_I2SExt+0x90>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <I2SEx_RxISR_I2SExt+0x50>
 80040d8:	4b11      	ldr	r3, [pc, #68]	; (8004120 <I2SEx_RxISR_I2SExt+0x94>)
 80040da:	e001      	b.n	80040e0 <I2SEx_RxISR_I2SExt+0x54>
 80040dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	490d      	ldr	r1, [pc, #52]	; (800411c <I2SEx_RxISR_I2SExt+0x90>)
 80040e8:	428b      	cmp	r3, r1
 80040ea:	d101      	bne.n	80040f0 <I2SEx_RxISR_I2SExt+0x64>
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <I2SEx_RxISR_I2SExt+0x94>)
 80040ee:	e001      	b.n	80040f4 <I2SEx_RxISR_I2SExt+0x68>
 80040f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fc fde3 	bl	8000cd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40003800 	.word	0x40003800
 8004120:	40003400 	.word	0x40003400

08004124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e267      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d075      	beq.n	800422e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004142:	4b88      	ldr	r3, [pc, #544]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b04      	cmp	r3, #4
 800414c:	d00c      	beq.n	8004168 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414e:	4b85      	ldr	r3, [pc, #532]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004156:	2b08      	cmp	r3, #8
 8004158:	d112      	bne.n	8004180 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800415a:	4b82      	ldr	r3, [pc, #520]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004166:	d10b      	bne.n	8004180 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	4b7e      	ldr	r3, [pc, #504]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d05b      	beq.n	800422c <HAL_RCC_OscConfig+0x108>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d157      	bne.n	800422c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e242      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004188:	d106      	bne.n	8004198 <HAL_RCC_OscConfig+0x74>
 800418a:	4b76      	ldr	r3, [pc, #472]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a75      	ldr	r2, [pc, #468]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e01d      	b.n	80041d4 <HAL_RCC_OscConfig+0xb0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0x98>
 80041a2:	4b70      	ldr	r3, [pc, #448]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6f      	ldr	r2, [pc, #444]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80041a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4b6d      	ldr	r3, [pc, #436]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a6c      	ldr	r2, [pc, #432]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e00b      	b.n	80041d4 <HAL_RCC_OscConfig+0xb0>
 80041bc:	4b69      	ldr	r3, [pc, #420]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a68      	ldr	r2, [pc, #416]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	4b66      	ldr	r3, [pc, #408]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a65      	ldr	r2, [pc, #404]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80041ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d013      	beq.n	8004204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fc fffc 	bl	80011d8 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fc fff8 	bl	80011d8 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e207      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f6:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0xc0>
 8004202:	e014      	b.n	800422e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fc ffe8 	bl	80011d8 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420c:	f7fc ffe4 	bl	80011d8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e1f3      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421e:	4b51      	ldr	r3, [pc, #324]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0xe8>
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d063      	beq.n	8004302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800423a:	4b4a      	ldr	r3, [pc, #296]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004246:	4b47      	ldr	r3, [pc, #284]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800424e:	2b08      	cmp	r3, #8
 8004250:	d11c      	bne.n	800428c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004252:	4b44      	ldr	r3, [pc, #272]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d116      	bne.n	800428c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425e:	4b41      	ldr	r3, [pc, #260]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_RCC_OscConfig+0x152>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d001      	beq.n	8004276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e1c7      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004276:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4937      	ldr	r1, [pc, #220]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428a:	e03a      	b.n	8004302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d020      	beq.n	80042d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004294:	4b34      	ldr	r3, [pc, #208]	; (8004368 <HAL_RCC_OscConfig+0x244>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429a:	f7fc ff9d 	bl	80011d8 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042a2:	f7fc ff99 	bl	80011d8 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e1a8      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b4:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c0:	4b28      	ldr	r3, [pc, #160]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4925      	ldr	r1, [pc, #148]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	600b      	str	r3, [r1, #0]
 80042d4:	e015      	b.n	8004302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d6:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCC_OscConfig+0x244>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fc ff7c 	bl	80011d8 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e4:	f7fc ff78 	bl	80011d8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e187      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f6:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d036      	beq.n	800437c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d016      	beq.n	8004344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004316:	4b15      	ldr	r3, [pc, #84]	; (800436c <HAL_RCC_OscConfig+0x248>)
 8004318:	2201      	movs	r2, #1
 800431a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fc ff5c 	bl	80011d8 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004324:	f7fc ff58 	bl	80011d8 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e167      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_RCC_OscConfig+0x240>)
 8004338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x200>
 8004342:	e01b      	b.n	800437c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004344:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_RCC_OscConfig+0x248>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434a:	f7fc ff45 	bl	80011d8 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004350:	e00e      	b.n	8004370 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004352:	f7fc ff41 	bl	80011d8 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d907      	bls.n	8004370 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e150      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
 8004364:	40023800 	.word	0x40023800
 8004368:	42470000 	.word	0x42470000
 800436c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004370:	4b88      	ldr	r3, [pc, #544]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ea      	bne.n	8004352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8097 	beq.w	80044b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438a:	2300      	movs	r3, #0
 800438c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438e:	4b81      	ldr	r3, [pc, #516]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10f      	bne.n	80043ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	60bb      	str	r3, [r7, #8]
 800439e:	4b7d      	ldr	r3, [pc, #500]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	4a7c      	ldr	r2, [pc, #496]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 80043a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a8:	6413      	str	r3, [r2, #64]	; 0x40
 80043aa:	4b7a      	ldr	r3, [pc, #488]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b6:	2301      	movs	r3, #1
 80043b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ba:	4b77      	ldr	r3, [pc, #476]	; (8004598 <HAL_RCC_OscConfig+0x474>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d118      	bne.n	80043f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043c6:	4b74      	ldr	r3, [pc, #464]	; (8004598 <HAL_RCC_OscConfig+0x474>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a73      	ldr	r2, [pc, #460]	; (8004598 <HAL_RCC_OscConfig+0x474>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d2:	f7fc ff01 	bl	80011d8 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043da:	f7fc fefd 	bl	80011d8 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e10c      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ec:	4b6a      	ldr	r3, [pc, #424]	; (8004598 <HAL_RCC_OscConfig+0x474>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x2ea>
 8004400:	4b64      	ldr	r3, [pc, #400]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	4a63      	ldr	r2, [pc, #396]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	6713      	str	r3, [r2, #112]	; 0x70
 800440c:	e01c      	b.n	8004448 <HAL_RCC_OscConfig+0x324>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b05      	cmp	r3, #5
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0x30c>
 8004416:	4b5f      	ldr	r3, [pc, #380]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a5e      	ldr	r2, [pc, #376]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 800441c:	f043 0304 	orr.w	r3, r3, #4
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
 8004422:	4b5c      	ldr	r3, [pc, #368]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a5b      	ldr	r2, [pc, #364]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	6713      	str	r3, [r2, #112]	; 0x70
 800442e:	e00b      	b.n	8004448 <HAL_RCC_OscConfig+0x324>
 8004430:	4b58      	ldr	r3, [pc, #352]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4a57      	ldr	r2, [pc, #348]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	6713      	str	r3, [r2, #112]	; 0x70
 800443c:	4b55      	ldr	r3, [pc, #340]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	4a54      	ldr	r2, [pc, #336]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004442:	f023 0304 	bic.w	r3, r3, #4
 8004446:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d015      	beq.n	800447c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fc fec2 	bl	80011d8 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004456:	e00a      	b.n	800446e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004458:	f7fc febe 	bl	80011d8 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e0cb      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	4b49      	ldr	r3, [pc, #292]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0ee      	beq.n	8004458 <HAL_RCC_OscConfig+0x334>
 800447a:	e014      	b.n	80044a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447c:	f7fc feac 	bl	80011d8 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004482:	e00a      	b.n	800449a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004484:	f7fc fea8 	bl	80011d8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e0b5      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449a:	4b3e      	ldr	r3, [pc, #248]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ee      	bne.n	8004484 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d105      	bne.n	80044b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ac:	4b39      	ldr	r3, [pc, #228]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	4a38      	ldr	r2, [pc, #224]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 80044b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80a1 	beq.w	8004604 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044c2:	4b34      	ldr	r3, [pc, #208]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d05c      	beq.n	8004588 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d141      	bne.n	800455a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d6:	4b31      	ldr	r3, [pc, #196]	; (800459c <HAL_RCC_OscConfig+0x478>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fc fe7c 	bl	80011d8 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fc fe78 	bl	80011d8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e087      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f6:	4b27      	ldr	r3, [pc, #156]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	019b      	lsls	r3, r3, #6
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	3b01      	subs	r3, #1
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	061b      	lsls	r3, r3, #24
 8004526:	491b      	ldr	r1, [pc, #108]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 8004528:	4313      	orrs	r3, r2
 800452a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <HAL_RCC_OscConfig+0x478>)
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004532:	f7fc fe51 	bl	80011d8 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800453a:	f7fc fe4d 	bl	80011d8 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e05c      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454c:	4b11      	ldr	r3, [pc, #68]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x416>
 8004558:	e054      	b.n	8004604 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455a:	4b10      	ldr	r3, [pc, #64]	; (800459c <HAL_RCC_OscConfig+0x478>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fc fe3a 	bl	80011d8 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004568:	f7fc fe36 	bl	80011d8 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e045      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_RCC_OscConfig+0x470>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x444>
 8004586:	e03d      	b.n	8004604 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d107      	bne.n	80045a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e038      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
 8004594:	40023800 	.word	0x40023800
 8004598:	40007000 	.word	0x40007000
 800459c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045a0:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <HAL_RCC_OscConfig+0x4ec>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d028      	beq.n	8004600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d121      	bne.n	8004600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d11a      	bne.n	8004600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045d0:	4013      	ands	r3, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d8:	4293      	cmp	r3, r2
 80045da:	d111      	bne.n	8004600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	3b01      	subs	r3, #1
 80045ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800

08004614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0cc      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004628:	4b68      	ldr	r3, [pc, #416]	; (80047cc <HAL_RCC_ClockConfig+0x1b8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d90c      	bls.n	8004650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004636:	4b65      	ldr	r3, [pc, #404]	; (80047cc <HAL_RCC_ClockConfig+0x1b8>)
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463e:	4b63      	ldr	r3, [pc, #396]	; (80047cc <HAL_RCC_ClockConfig+0x1b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0b8      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d020      	beq.n	800469e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004668:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4a58      	ldr	r2, [pc, #352]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4a52      	ldr	r2, [pc, #328]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800468a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	494d      	ldr	r1, [pc, #308]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d044      	beq.n	8004734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d107      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d119      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e07f      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d003      	beq.n	80046d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d107      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d2:	4b3f      	ldr	r3, [pc, #252]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e06f      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e2:	4b3b      	ldr	r3, [pc, #236]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e067      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046f2:	4b37      	ldr	r3, [pc, #220]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f023 0203 	bic.w	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	4934      	ldr	r1, [pc, #208]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	4313      	orrs	r3, r2
 8004702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004704:	f7fc fd68 	bl	80011d8 <HAL_GetTick>
 8004708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470a:	e00a      	b.n	8004722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800470c:	f7fc fd64 	bl	80011d8 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f241 3288 	movw	r2, #5000	; 0x1388
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e04f      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004722:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 020c 	and.w	r2, r3, #12
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	429a      	cmp	r2, r3
 8004732:	d1eb      	bne.n	800470c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004734:	4b25      	ldr	r3, [pc, #148]	; (80047cc <HAL_RCC_ClockConfig+0x1b8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d20c      	bcs.n	800475c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b20      	ldr	r3, [pc, #128]	; (80047cc <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e032      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004768:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4916      	ldr	r1, [pc, #88]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	490e      	ldr	r1, [pc, #56]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	4313      	orrs	r3, r2
 8004798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800479a:	f000 f821 	bl	80047e0 <HAL_RCC_GetSysClockFreq>
 800479e:	4602      	mov	r2, r0
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	490a      	ldr	r1, [pc, #40]	; (80047d4 <HAL_RCC_ClockConfig+0x1c0>)
 80047ac:	5ccb      	ldrb	r3, [r1, r3]
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <HAL_RCC_ClockConfig+0x1c4>)
 80047b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <HAL_RCC_ClockConfig+0x1c8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fc fcc8 	bl	8001150 <HAL_InitTick>

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40023c00 	.word	0x40023c00
 80047d0:	40023800 	.word	0x40023800
 80047d4:	08008674 	.word	0x08008674
 80047d8:	20000000 	.word	0x20000000
 80047dc:	20000004 	.word	0x20000004

080047e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e4:	b094      	sub	sp, #80	; 0x50
 80047e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	647b      	str	r3, [r7, #68]	; 0x44
 80047ec:	2300      	movs	r3, #0
 80047ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f0:	2300      	movs	r3, #0
 80047f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047f8:	4b79      	ldr	r3, [pc, #484]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b08      	cmp	r3, #8
 8004802:	d00d      	beq.n	8004820 <HAL_RCC_GetSysClockFreq+0x40>
 8004804:	2b08      	cmp	r3, #8
 8004806:	f200 80e1 	bhi.w	80049cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x34>
 800480e:	2b04      	cmp	r3, #4
 8004810:	d003      	beq.n	800481a <HAL_RCC_GetSysClockFreq+0x3a>
 8004812:	e0db      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004814:	4b73      	ldr	r3, [pc, #460]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004816:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004818:	e0db      	b.n	80049d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800481a:	4b73      	ldr	r3, [pc, #460]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800481c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800481e:	e0d8      	b.n	80049d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004820:	4b6f      	ldr	r3, [pc, #444]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004828:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800482a:	4b6d      	ldr	r3, [pc, #436]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d063      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004836:	4b6a      	ldr	r3, [pc, #424]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	099b      	lsrs	r3, r3, #6
 800483c:	2200      	movs	r2, #0
 800483e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004840:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004848:	633b      	str	r3, [r7, #48]	; 0x30
 800484a:	2300      	movs	r3, #0
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
 800484e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004852:	4622      	mov	r2, r4
 8004854:	462b      	mov	r3, r5
 8004856:	f04f 0000 	mov.w	r0, #0
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	0159      	lsls	r1, r3, #5
 8004860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004864:	0150      	lsls	r0, r2, #5
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4621      	mov	r1, r4
 800486c:	1a51      	subs	r1, r2, r1
 800486e:	6139      	str	r1, [r7, #16]
 8004870:	4629      	mov	r1, r5
 8004872:	eb63 0301 	sbc.w	r3, r3, r1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004884:	4659      	mov	r1, fp
 8004886:	018b      	lsls	r3, r1, #6
 8004888:	4651      	mov	r1, sl
 800488a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800488e:	4651      	mov	r1, sl
 8004890:	018a      	lsls	r2, r1, #6
 8004892:	4651      	mov	r1, sl
 8004894:	ebb2 0801 	subs.w	r8, r2, r1
 8004898:	4659      	mov	r1, fp
 800489a:	eb63 0901 	sbc.w	r9, r3, r1
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048b2:	4690      	mov	r8, r2
 80048b4:	4699      	mov	r9, r3
 80048b6:	4623      	mov	r3, r4
 80048b8:	eb18 0303 	adds.w	r3, r8, r3
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	462b      	mov	r3, r5
 80048c0:	eb49 0303 	adc.w	r3, r9, r3
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048d2:	4629      	mov	r1, r5
 80048d4:	024b      	lsls	r3, r1, #9
 80048d6:	4621      	mov	r1, r4
 80048d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048dc:	4621      	mov	r1, r4
 80048de:	024a      	lsls	r2, r1, #9
 80048e0:	4610      	mov	r0, r2
 80048e2:	4619      	mov	r1, r3
 80048e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e6:	2200      	movs	r2, #0
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048f0:	f7fb fc6a 	bl	80001c8 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4613      	mov	r3, r2
 80048fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048fc:	e058      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fe:	4b38      	ldr	r3, [pc, #224]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	099b      	lsrs	r3, r3, #6
 8004904:	2200      	movs	r2, #0
 8004906:	4618      	mov	r0, r3
 8004908:	4611      	mov	r1, r2
 800490a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800490e:	623b      	str	r3, [r7, #32]
 8004910:	2300      	movs	r3, #0
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
 8004914:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004918:	4642      	mov	r2, r8
 800491a:	464b      	mov	r3, r9
 800491c:	f04f 0000 	mov.w	r0, #0
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	0159      	lsls	r1, r3, #5
 8004926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800492a:	0150      	lsls	r0, r2, #5
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4641      	mov	r1, r8
 8004932:	ebb2 0a01 	subs.w	sl, r2, r1
 8004936:	4649      	mov	r1, r9
 8004938:	eb63 0b01 	sbc.w	fp, r3, r1
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004948:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800494c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004950:	ebb2 040a 	subs.w	r4, r2, sl
 8004954:	eb63 050b 	sbc.w	r5, r3, fp
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	00eb      	lsls	r3, r5, #3
 8004962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004966:	00e2      	lsls	r2, r4, #3
 8004968:	4614      	mov	r4, r2
 800496a:	461d      	mov	r5, r3
 800496c:	4643      	mov	r3, r8
 800496e:	18e3      	adds	r3, r4, r3
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	464b      	mov	r3, r9
 8004974:	eb45 0303 	adc.w	r3, r5, r3
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004986:	4629      	mov	r1, r5
 8004988:	028b      	lsls	r3, r1, #10
 800498a:	4621      	mov	r1, r4
 800498c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004990:	4621      	mov	r1, r4
 8004992:	028a      	lsls	r2, r1, #10
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499a:	2200      	movs	r2, #0
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	61fa      	str	r2, [r7, #28]
 80049a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a4:	f7fb fc10 	bl	80001c8 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4613      	mov	r3, r2
 80049ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	3301      	adds	r3, #1
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ca:	e002      	b.n	80049d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80049ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3750      	adds	r7, #80	; 0x50
 80049d8:	46bd      	mov	sp, r7
 80049da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049de:	bf00      	nop
 80049e0:	40023800 	.word	0x40023800
 80049e4:	00f42400 	.word	0x00f42400
 80049e8:	007a1200 	.word	0x007a1200

080049ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f0:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000000 	.word	0x20000000

08004a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a08:	f7ff fff0 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0a9b      	lsrs	r3, r3, #10
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4903      	ldr	r1, [pc, #12]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40023800 	.word	0x40023800
 8004a28:	08008684 	.word	0x08008684

08004a2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d035      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a54:	4b62      	ldr	r3, [pc, #392]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a5a:	f7fc fbbd 	bl	80011d8 <HAL_GetTick>
 8004a5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a62:	f7fc fbb9 	bl	80011d8 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e0b0      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a74:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	019a      	lsls	r2, r3, #6
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	071b      	lsls	r3, r3, #28
 8004a8c:	4955      	ldr	r1, [pc, #340]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a94:	4b52      	ldr	r3, [pc, #328]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9a:	f7fc fb9d 	bl	80011d8 <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aa2:	f7fc fb99 	bl	80011d8 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e090      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab4:	4b4b      	ldr	r3, [pc, #300]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8083 	beq.w	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4b44      	ldr	r3, [pc, #272]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	4a43      	ldr	r2, [pc, #268]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004adc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ade:	4b41      	ldr	r3, [pc, #260]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004aea:	4b3f      	ldr	r3, [pc, #252]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a3e      	ldr	r2, [pc, #248]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af6:	f7fc fb6f 	bl	80011d8 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004afe:	f7fc fb6b 	bl	80011d8 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e062      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b10:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b1c:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d02f      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d028      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b3a:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b44:	4b29      	ldr	r3, [pc, #164]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b4a:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b50:	4a24      	ldr	r2, [pc, #144]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b56:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d114      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fc fb39 	bl	80011d8 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fc fb35 	bl	80011d8 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e02a      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ee      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b98:	d10d      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bae:	490d      	ldr	r1, [pc, #52]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	608b      	str	r3, [r1, #8]
 8004bb4:	e005      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bbc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bc0:	6093      	str	r3, [r2, #8]
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bce:	4905      	ldr	r1, [pc, #20]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	42470068 	.word	0x42470068
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40007000 	.word	0x40007000
 8004bec:	42470e40 	.word	0x42470e40

08004bf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d13e      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c0e:	4b23      	ldr	r3, [pc, #140]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d12f      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c24:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c26:	617b      	str	r3, [r7, #20]
          break;
 8004c28:	e02f      	b.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c36:	d108      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c38:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	e007      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c4a:	4b14      	ldr	r3, [pc, #80]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c52:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c60:	099b      	lsrs	r3, r3, #6
 8004c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	fb02 f303 	mul.w	r3, r2, r3
 8004c6c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c74:	0f1b      	lsrs	r3, r3, #28
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	617b      	str	r3, [r7, #20]
          break;
 8004c82:	e002      	b.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
          break;
 8004c88:	bf00      	nop
        }
      }
      break;
 8004c8a:	bf00      	nop
    }
  }
  return frequency;
 8004c8c:	697b      	ldr	r3, [r7, #20]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	00bb8000 	.word	0x00bb8000
 8004ca4:	007a1200 	.word	0x007a1200
 8004ca8:	00f42400 	.word	0x00f42400

08004cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e07b      	b.n	8004db6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d108      	bne.n	8004cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cce:	d009      	beq.n	8004ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	61da      	str	r2, [r3, #28]
 8004cd6:	e005      	b.n	8004ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc f916 	bl	8000f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	ea42 0103 	orr.w	r1, r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	f003 0104 	and.w	r1, r3, #4
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f003 0210 	and.w	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	f107 001c 	add.w	r0, r7, #28
 8004dcc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d122      	bne.n	8004e1c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d105      	bne.n	8004e10 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f9bf 	bl	8005194 <USB_CoreReset>
 8004e16:	4603      	mov	r3, r0
 8004e18:	73fb      	strb	r3, [r7, #15]
 8004e1a:	e01a      	b.n	8004e52 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f9b3 	bl	8005194 <USB_CoreReset>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38
 8004e44:	e005      	b.n	8004e52 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d10b      	bne.n	8004e70 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f043 0206 	orr.w	r2, r3, #6
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f043 0220 	orr.w	r2, r3, #32
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e7c:	b004      	add	sp, #16
 8004e7e:	4770      	bx	lr

08004e80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f043 0201 	orr.w	r2, r3, #1
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f023 0201 	bic.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d115      	bne.n	8004f12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f7fc f97c 	bl	80011f0 <HAL_Delay>
      ms++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3301      	adds	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f939 	bl	8005176 <USB_GetMode>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d01e      	beq.n	8004f48 <USB_SetCurrentMode+0x84>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b31      	cmp	r3, #49	; 0x31
 8004f0e:	d9f0      	bls.n	8004ef2 <USB_SetCurrentMode+0x2e>
 8004f10:	e01a      	b.n	8004f48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d115      	bne.n	8004f44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f24:	2001      	movs	r0, #1
 8004f26:	f7fc f963 	bl	80011f0 <HAL_Delay>
      ms++;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f920 	bl	8005176 <USB_GetMode>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <USB_SetCurrentMode+0x84>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b31      	cmp	r3, #49	; 0x31
 8004f40:	d9f0      	bls.n	8004f24 <USB_SetCurrentMode+0x60>
 8004f42:	e001      	b.n	8004f48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e005      	b.n	8004f54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b32      	cmp	r3, #50	; 0x32
 8004f4c:	d101      	bne.n	8004f52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <USB_FlushTxFifo+0x64>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e01b      	b.n	8004fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	daf2      	bge.n	8004f6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	019b      	lsls	r3, r3, #6
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <USB_FlushTxFifo+0x64>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e006      	b.n	8004fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d0f0      	beq.n	8004f94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	00030d40 	.word	0x00030d40

08004fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a11      	ldr	r2, [pc, #68]	; (8005020 <USB_FlushRxFifo+0x5c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e018      	b.n	8005014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	daf2      	bge.n	8004fd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a08      	ldr	r2, [pc, #32]	; (8005020 <USB_FlushRxFifo+0x5c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e006      	b.n	8005014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0310 	and.w	r3, r3, #16
 800500e:	2b10      	cmp	r3, #16
 8005010:	d0f0      	beq.n	8004ff4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	00030d40 	.word	0x00030d40

08005024 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005024:	b480      	push	{r7}
 8005026:	b089      	sub	sp, #36	; 0x24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	4611      	mov	r1, r2
 8005030:	461a      	mov	r2, r3
 8005032:	460b      	mov	r3, r1
 8005034:	71fb      	strb	r3, [r7, #7]
 8005036:	4613      	mov	r3, r2
 8005038:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005042:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d123      	bne.n	8005092 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800504a:	88bb      	ldrh	r3, [r7, #4]
 800504c:	3303      	adds	r3, #3
 800504e:	089b      	lsrs	r3, r3, #2
 8005050:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	e018      	b.n	800508a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	031a      	lsls	r2, r3, #12
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005064:	461a      	mov	r2, r3
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	3301      	adds	r3, #1
 8005070:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	3301      	adds	r3, #1
 800507c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3301      	adds	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	3301      	adds	r3, #1
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	429a      	cmp	r2, r3
 8005090:	d3e2      	bcc.n	8005058 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3724      	adds	r7, #36	; 0x24
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b08b      	sub	sp, #44	; 0x2c
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	e014      	b.n	80050f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	3301      	adds	r3, #1
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	3301      	adds	r3, #1
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	3301      	adds	r3, #1
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	3301      	adds	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	3301      	adds	r3, #1
 80050f4:	623b      	str	r3, [r7, #32]
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3e6      	bcc.n	80050cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050fe:	8bfb      	ldrh	r3, [r7, #30]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01e      	beq.n	8005142 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510e:	461a      	mov	r2, r3
 8005110:	f107 0310 	add.w	r3, r7, #16
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
 8005124:	b2da      	uxtb	r2, r3
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	701a      	strb	r2, [r3, #0]
      i++;
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	3301      	adds	r3, #1
 800512e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	3301      	adds	r3, #1
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005136:	8bfb      	ldrh	r3, [r7, #30]
 8005138:	3b01      	subs	r3, #1
 800513a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800513c:	8bfb      	ldrh	r3, [r7, #30]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1ea      	bne.n	8005118 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005144:	4618      	mov	r0, r3
 8005146:	372c      	adds	r7, #44	; 0x2c
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005168:	68fb      	ldr	r3, [r7, #12]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0301 	and.w	r3, r3, #1
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <USB_CoreReset+0x64>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e01b      	b.n	80051ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	daf2      	bge.n	80051a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f043 0201 	orr.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3301      	adds	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <USB_CoreReset+0x64>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e006      	b.n	80051ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d0f0      	beq.n	80051ca <USB_CoreReset+0x36>

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	00030d40 	.word	0x00030d40

080051fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051fc:	b084      	sub	sp, #16
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800520a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800521c:	461a      	mov	r2, r3
 800521e:	2300      	movs	r3, #0
 8005220:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	2b00      	cmp	r3, #0
 8005250:	d018      	beq.n	8005284 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d10a      	bne.n	800526e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005266:	f043 0304 	orr.w	r3, r3, #4
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	e014      	b.n	8005298 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800527c:	f023 0304 	bic.w	r3, r3, #4
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e009      	b.n	8005298 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005292:	f023 0304 	bic.w	r3, r3, #4
 8005296:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005298:	2110      	movs	r1, #16
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff fe5e 	bl	8004f5c <USB_FlushTxFifo>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fe8a 	bl	8004fc4 <USB_FlushRxFifo>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	e015      	b.n	80052ec <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052cc:	461a      	mov	r2, r3
 80052ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	461a      	mov	r2, r3
 80052e2:	2300      	movs	r3, #0
 80052e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	3301      	adds	r3, #1
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d3e5      	bcc.n	80052c0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005300:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005314:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a13      	ldr	r2, [pc, #76]	; (8005368 <USB_HostInit+0x16c>)
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a13      	ldr	r2, [pc, #76]	; (800536c <USB_HostInit+0x170>)
 8005320:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005324:	e009      	b.n	800533a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2280      	movs	r2, #128	; 0x80
 800532a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a10      	ldr	r2, [pc, #64]	; (8005370 <USB_HostInit+0x174>)
 8005330:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a0f      	ldr	r2, [pc, #60]	; (8005374 <USB_HostInit+0x178>)
 8005336:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	2b00      	cmp	r3, #0
 800533e:	d105      	bne.n	800534c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f043 0210 	orr.w	r2, r3, #16
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <USB_HostInit+0x17c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005358:	7dfb      	ldrb	r3, [r7, #23]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005364:	b004      	add	sp, #16
 8005366:	4770      	bx	lr
 8005368:	01000200 	.word	0x01000200
 800536c:	00e00300 	.word	0x00e00300
 8005370:	00600080 	.word	0x00600080
 8005374:	004000e0 	.word	0x004000e0
 8005378:	a3200008 	.word	0xa3200008

0800537c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d107      	bne.n	80053ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c4:	461a      	mov	r2, r3
 80053c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80053ca:	6053      	str	r3, [r2, #4]
 80053cc:	e009      	b.n	80053e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d106      	bne.n	80053e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053da:	461a      	mov	r2, r3
 80053dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80053e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005410:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800541a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005420:	2064      	movs	r0, #100	; 0x64
 8005422:	f7fb fee5 	bl	80011f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800542e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005432:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005434:	200a      	movs	r0, #10
 8005436:	f7fb fedb 	bl	80011f0 <HAL_Delay>

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005468:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <USB_DriveVbus+0x44>
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d106      	bne.n	8005488 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005486:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005492:	d109      	bne.n	80054a8 <USB_DriveVbus+0x64>
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	0c5b      	lsrs	r3, r3, #17
 80054d4:	f003 0303 	and.w	r3, r3, #3
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	b29b      	uxth	r3, r3
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	4608      	mov	r0, r1
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	4603      	mov	r3, r0
 8005518:	70fb      	strb	r3, [r7, #3]
 800551a:	460b      	mov	r3, r1
 800551c:	70bb      	strb	r3, [r7, #2]
 800551e:	4613      	mov	r3, r2
 8005520:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4413      	add	r3, r2
 8005532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005536:	461a      	mov	r2, r3
 8005538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800553c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800553e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005542:	2b03      	cmp	r3, #3
 8005544:	d87e      	bhi.n	8005644 <USB_HC_Init+0x13c>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <USB_HC_Init+0x44>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	0800555d 	.word	0x0800555d
 8005550:	08005607 	.word	0x08005607
 8005554:	0800555d 	.word	0x0800555d
 8005558:	080055c9 	.word	0x080055c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	461a      	mov	r2, r3
 800556a:	f240 439d 	movw	r3, #1181	; 0x49d
 800556e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005570:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005574:	2b00      	cmp	r3, #0
 8005576:	da10      	bge.n	800559a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	440a      	add	r2, r1
 800558e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005596:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005598:	e057      	b.n	800564a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d051      	beq.n	800564a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055c4:	60d3      	str	r3, [r2, #12]
      break;
 80055c6:	e040      	b.n	800564a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d4:	461a      	mov	r2, r3
 80055d6:	f240 639d 	movw	r3, #1693	; 0x69d
 80055da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	da34      	bge.n	800564e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005602:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005604:	e023      	b.n	800564e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	461a      	mov	r2, r3
 8005614:	f240 2325 	movw	r3, #549	; 0x225
 8005618:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800561a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800561e:	2b00      	cmp	r3, #0
 8005620:	da17      	bge.n	8005652 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	440a      	add	r2, r1
 8005638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800563c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005640:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005642:	e006      	b.n	8005652 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	77fb      	strb	r3, [r7, #31]
      break;
 8005648:	e004      	b.n	8005654 <USB_HC_Init+0x14c>
      break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <USB_HC_Init+0x14c>
      break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <USB_HC_Init+0x14c>
      break;
 8005652:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4413      	add	r3, r2
 800565c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	440a      	add	r2, r1
 800566a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800566e:	f043 0302 	orr.w	r3, r3, #2
 8005672:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	2101      	movs	r1, #1
 8005684:	fa01 f303 	lsl.w	r3, r1, r3
 8005688:	6939      	ldr	r1, [r7, #16]
 800568a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800568e:	4313      	orrs	r3, r2
 8005690:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800569e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da03      	bge.n	80056ae <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80056a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	e001      	b.n	80056b2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff feff 	bl	80054b6 <USB_GetHostSpeed>
 80056b8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80056ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d106      	bne.n	80056d0 <USB_HC_Init+0x1c8>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d003      	beq.n	80056d0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80056c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e001      	b.n	80056d4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056d4:	787b      	ldrb	r3, [r7, #1]
 80056d6:	059b      	lsls	r3, r3, #22
 80056d8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056dc:	78bb      	ldrb	r3, [r7, #2]
 80056de:	02db      	lsls	r3, r3, #11
 80056e0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056e4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056ea:	049b      	lsls	r3, r3, #18
 80056ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80056f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	0159      	lsls	r1, r3, #5
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	440b      	add	r3, r1
 8005706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005710:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005712:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005716:	2b03      	cmp	r3, #3
 8005718:	d003      	beq.n	8005722 <USB_HC_Init+0x21a>
 800571a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800571e:	2b01      	cmp	r3, #1
 8005720:	d10f      	bne.n	8005742 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	440a      	add	r2, r1
 8005738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800573c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005740:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005742:	7ffb      	ldrb	r3, [r7, #31]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4613      	mov	r3, r2
 8005758:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005768:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005772:	2b00      	cmp	r3, #0
 8005774:	d02d      	beq.n	80057d2 <USB_HC_StartXfer+0x86>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	791b      	ldrb	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d129      	bne.n	80057d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d117      	bne.n	80057b4 <USB_HC_StartXfer+0x68>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	79db      	ldrb	r3, [r3, #7]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <USB_HC_StartXfer+0x48>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	79db      	ldrb	r3, [r3, #7]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d10f      	bne.n	80057b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	4413      	add	r3, r2
 800579c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	6a3a      	ldr	r2, [r7, #32]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <USB_HC_StartXfer+0x86>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	795b      	ldrb	r3, [r3, #5]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d107      	bne.n	80057d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	4619      	mov	r1, r3
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 fa0f 	bl	8005bec <USB_DoPing>
      return HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e0f8      	b.n	80059c4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d018      	beq.n	800580c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	8912      	ldrh	r2, [r2, #8]
 80057e2:	4413      	add	r3, r2
 80057e4:	3b01      	subs	r3, #1
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	8912      	ldrh	r2, [r2, #8]
 80057ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80057f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80057f2:	8b7b      	ldrh	r3, [r7, #26]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d90b      	bls.n	8005810 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80057f8:	8b7b      	ldrh	r3, [r7, #26]
 80057fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	8912      	ldrh	r2, [r2, #8]
 8005802:	fb03 f202 	mul.w	r2, r3, r2
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	611a      	str	r2, [r3, #16]
 800580a:	e001      	b.n	8005810 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800580c:	2301      	movs	r3, #1
 800580e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	78db      	ldrb	r3, [r3, #3]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005818:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	8912      	ldrh	r2, [r2, #8]
 800581e:	fb03 f202 	mul.w	r2, r3, r2
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	611a      	str	r2, [r3, #16]
 8005826:	e003      	b.n	8005830 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	695a      	ldr	r2, [r3, #20]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800583a:	04d9      	lsls	r1, r3, #19
 800583c:	4b63      	ldr	r3, [pc, #396]	; (80059cc <USB_HC_StartXfer+0x280>)
 800583e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005840:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	7a9b      	ldrb	r3, [r3, #10]
 8005846:	075b      	lsls	r3, r3, #29
 8005848:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800584c:	69f9      	ldr	r1, [r7, #28]
 800584e:	0148      	lsls	r0, r1, #5
 8005850:	6a39      	ldr	r1, [r7, #32]
 8005852:	4401      	add	r1, r0
 8005854:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005858:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800585a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	68d9      	ldr	r1, [r3, #12]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005872:	460a      	mov	r2, r1
 8005874:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	bf0c      	ite	eq
 8005886:	2301      	moveq	r3, #1
 8005888:	2300      	movne	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	4413      	add	r3, r2
 8005896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	6a3a      	ldr	r2, [r7, #32]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	7e7b      	ldrb	r3, [r7, #25]
 80058be:	075b      	lsls	r3, r3, #29
 80058c0:	69f9      	ldr	r1, [r7, #28]
 80058c2:	0148      	lsls	r0, r1, #5
 80058c4:	6a39      	ldr	r1, [r7, #32]
 80058c6:	4401      	add	r1, r0
 80058c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80058cc:	4313      	orrs	r3, r2
 80058ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058e6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	78db      	ldrb	r3, [r3, #3]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	e003      	b.n	8005902 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005900:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005908:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	461a      	mov	r2, r3
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e04e      	b.n	80059c4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	78db      	ldrb	r3, [r3, #3]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d149      	bne.n	80059c2 <USB_HC_StartXfer+0x276>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d045      	beq.n	80059c2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	79db      	ldrb	r3, [r3, #7]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d830      	bhi.n	80059a0 <USB_HC_StartXfer+0x254>
 800593e:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <USB_HC_StartXfer+0x1f8>)
 8005940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005944:	08005955 	.word	0x08005955
 8005948:	08005979 	.word	0x08005979
 800594c:	08005955 	.word	0x08005955
 8005950:	08005979 	.word	0x08005979
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	3303      	adds	r3, #3
 800595a:	089b      	lsrs	r3, r3, #2
 800595c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800595e:	8afa      	ldrh	r2, [r7, #22]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	b29b      	uxth	r3, r3
 8005966:	429a      	cmp	r2, r3
 8005968:	d91c      	bls.n	80059a4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f043 0220 	orr.w	r2, r3, #32
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	619a      	str	r2, [r3, #24]
        }
        break;
 8005976:	e015      	b.n	80059a4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	3303      	adds	r3, #3
 800597e:	089b      	lsrs	r3, r3, #2
 8005980:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005982:	8afa      	ldrh	r2, [r7, #22]
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	b29b      	uxth	r3, r3
 800598e:	429a      	cmp	r2, r3
 8005990:	d90a      	bls.n	80059a8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	619a      	str	r2, [r3, #24]
        }
        break;
 800599e:	e003      	b.n	80059a8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80059a0:	bf00      	nop
 80059a2:	e002      	b.n	80059aa <USB_HC_StartXfer+0x25e>
        break;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <USB_HC_StartXfer+0x25e>
        break;
 80059a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	68d9      	ldr	r1, [r3, #12]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	785a      	ldrb	r2, [r3, #1]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2000      	movs	r0, #0
 80059ba:	9000      	str	r0, [sp, #0]
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7ff fb31 	bl	8005024 <USB_WritePacket>
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3728      	adds	r7, #40	; 0x28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	1ff80000 	.word	0x1ff80000

080059d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	b29b      	uxth	r3, r3
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b089      	sub	sp, #36	; 0x24
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	0c9b      	lsrs	r3, r3, #18
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	0fdb      	lsrs	r3, r3, #31
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	d104      	bne.n	8005a4c <USB_HC_Halt+0x5a>
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e0c8      	b.n	8005bde <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <USB_HC_Halt+0x66>
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d163      	bne.n	8005b20 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	0151      	lsls	r1, r2, #5
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	440a      	add	r2, r1
 8005a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a76:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f040 80ab 	bne.w	8005bdc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d133      	bne.n	8005afa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ab0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ad0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ade:	d81d      	bhi.n	8005b1c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af6:	d0ec      	beq.n	8005ad2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005af8:	e070      	b.n	8005bdc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b18:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b1a:	e05f      	b.n	8005bdc <USB_HC_Halt+0x1ea>
            break;
 8005b1c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b1e:	e05d      	b.n	8005bdc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b3e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d133      	bne.n	8005bb8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b8e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b9c:	d81d      	bhi.n	8005bda <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb4:	d0ec      	beq.n	8005b90 <USB_HC_Halt+0x19e>
 8005bb6:	e011      	b.n	8005bdc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e000      	b.n	8005bdc <USB_HC_Halt+0x1ea>
          break;
 8005bda:	bf00      	nop
    }
  }

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3724      	adds	r7, #36	; 0x24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c00:	2301      	movs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	04da      	lsls	r2, r3, #19
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <USB_DoPing+0x74>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	1ff80000 	.word	0x1ff80000

08005c64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff f912 	bl	8004ea2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c7e:	2110      	movs	r1, #16
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff f96b 	bl	8004f5c <USB_FlushTxFifo>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff f997 	bl	8004fc4 <USB_FlushRxFifo>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	e01f      	b.n	8005ce6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ccc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cda:	461a      	mov	r2, r3
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b0f      	cmp	r3, #15
 8005cea:	d9dc      	bls.n	8005ca6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005cec:	2300      	movs	r3, #0
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	e034      	b.n	8005d5c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d08:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d26:	461a      	mov	r2, r3
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d38:	d80c      	bhi.n	8005d54 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d50:	d0ec      	beq.n	8005d2c <USB_StopHost+0xc8>
 8005d52:	e000      	b.n	8005d56 <USB_StopHost+0xf2>
        break;
 8005d54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	61bb      	str	r3, [r7, #24]
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b0f      	cmp	r3, #15
 8005d60:	d9c7      	bls.n	8005cf2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d76:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff f881 	bl	8004e80 <USB_EnableGlobalInt>

  return ret;
 8005d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005d88:	b590      	push	{r4, r7, lr}
 8005d8a:	b089      	sub	sp, #36	; 0x24
 8005d8c:	af04      	add	r7, sp, #16
 8005d8e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005d90:	2301      	movs	r3, #1
 8005d92:	2202      	movs	r2, #2
 8005d94:	2102      	movs	r1, #2
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fc66 	bl	8006668 <USBH_FindInterface>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	2bff      	cmp	r3, #255	; 0xff
 8005da4:	d002      	beq.n	8005dac <USBH_CDC_InterfaceInit+0x24>
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d901      	bls.n	8005db0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005dac:	2302      	movs	r3, #2
 8005dae:	e13d      	b.n	800602c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fc3b 	bl	8006630 <USBH_SelectInterface>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e131      	b.n	800602c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005dce:	2050      	movs	r0, #80	; 0x50
 8005dd0:	f002 fad2 	bl	8008378 <malloc>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005de8:	2302      	movs	r3, #2
 8005dea:	e11f      	b.n	800602c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005dec:	2250      	movs	r2, #80	; 0x50
 8005dee:	2100      	movs	r1, #0
 8005df0:	68b8      	ldr	r0, [r7, #8]
 8005df2:	f002 fb7d 	bl	80084f0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	211a      	movs	r1, #26
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	b25b      	sxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da15      	bge.n	8005e3a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	211a      	movs	r1, #26
 8005e14:	fb01 f303 	mul.w	r3, r1, r3
 8005e18:	4413      	add	r3, r2
 8005e1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e1e:	781a      	ldrb	r2, [r3, #0]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	211a      	movs	r1, #26
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e34:	881a      	ldrh	r2, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 ff2e 	bl	8007ca2 <USBH_AllocPipe>
 8005e46:	4603      	mov	r3, r0
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	7819      	ldrb	r1, [r3, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	7858      	ldrb	r0, [r3, #1]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	8952      	ldrh	r2, [r2, #10]
 8005e66:	9202      	str	r2, [sp, #8]
 8005e68:	2203      	movs	r2, #3
 8005e6a:	9201      	str	r2, [sp, #4]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	4623      	mov	r3, r4
 8005e70:	4602      	mov	r2, r0
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f001 fee6 	bl	8007c44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f002 f9f5 	bl	8008270 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005e86:	2300      	movs	r3, #0
 8005e88:	2200      	movs	r2, #0
 8005e8a:	210a      	movs	r1, #10
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fbeb 	bl	8006668 <USBH_FindInterface>
 8005e92:	4603      	mov	r3, r0
 8005e94:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2bff      	cmp	r3, #255	; 0xff
 8005e9a:	d002      	beq.n	8005ea2 <USBH_CDC_InterfaceInit+0x11a>
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d901      	bls.n	8005ea6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e0c2      	b.n	800602c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	211a      	movs	r1, #26
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da16      	bge.n	8005eec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	211a      	movs	r1, #26
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ece:	781a      	ldrb	r2, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	211a      	movs	r1, #26
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	835a      	strh	r2, [r3, #26]
 8005eea:	e015      	b.n	8005f18 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	211a      	movs	r1, #26
 8005ef2:	fb01 f303 	mul.w	r3, r1, r3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005efc:	781a      	ldrb	r2, [r3, #0]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	211a      	movs	r1, #26
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f12:	881a      	ldrh	r2, [r3, #0]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	211a      	movs	r1, #26
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	4413      	add	r3, r2
 8005f24:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	b25b      	sxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	da16      	bge.n	8005f5e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	211a      	movs	r1, #26
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f40:	781a      	ldrb	r2, [r3, #0]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	211a      	movs	r1, #26
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f56:	881a      	ldrh	r2, [r3, #0]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	835a      	strh	r2, [r3, #26]
 8005f5c:	e015      	b.n	8005f8a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	211a      	movs	r1, #26
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	4413      	add	r3, r2
 8005f6a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f6e:	781a      	ldrb	r2, [r3, #0]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	211a      	movs	r1, #26
 8005f7a:	fb01 f303 	mul.w	r3, r1, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f84:	881a      	ldrh	r2, [r3, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	7b9b      	ldrb	r3, [r3, #14]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f001 fe86 	bl	8007ca2 <USBH_AllocPipe>
 8005f96:	4603      	mov	r3, r0
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	7bdb      	ldrb	r3, [r3, #15]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 fe7c 	bl	8007ca2 <USBH_AllocPipe>
 8005faa:	4603      	mov	r3, r0
 8005fac:	461a      	mov	r2, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	7b59      	ldrb	r1, [r3, #13]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	7b98      	ldrb	r0, [r3, #14]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	8b12      	ldrh	r2, [r2, #24]
 8005fca:	9202      	str	r2, [sp, #8]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	9201      	str	r2, [sp, #4]
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 fe34 	bl	8007c44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	7b19      	ldrb	r1, [r3, #12]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	7bd8      	ldrb	r0, [r3, #15]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	8b52      	ldrh	r2, [r2, #26]
 8005ff4:	9202      	str	r2, [sp, #8]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	9201      	str	r2, [sp, #4]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	4623      	mov	r3, r4
 8005ffe:	4602      	mov	r2, r0
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fe1f 	bl	8007c44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	7b5b      	ldrb	r3, [r3, #13]
 8006012:	2200      	movs	r2, #0
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f002 f92a 	bl	8008270 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	7b1b      	ldrb	r3, [r3, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f002 f923 	bl	8008270 <USBH_LL_SetToggle>

  return USBH_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	bd90      	pop	{r4, r7, pc}

08006034 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00e      	beq.n	800606c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fe14 	bl	8007c82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f001 fe3f 	bl	8007ce4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	7b1b      	ldrb	r3, [r3, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00e      	beq.n	8006092 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	7b1b      	ldrb	r3, [r3, #12]
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 fe01 	bl	8007c82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	7b1b      	ldrb	r3, [r3, #12]
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 fe2c 	bl	8007ce4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	7b5b      	ldrb	r3, [r3, #13]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00e      	beq.n	80060b8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	7b5b      	ldrb	r3, [r3, #13]
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 fdee 	bl	8007c82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	7b5b      	ldrb	r3, [r3, #13]
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 fe19 	bl	8007ce4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00b      	beq.n	80060dc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f002 f95b 	bl	8008388 <free>
    phost->pActiveClass->pData = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060d8:	2200      	movs	r2, #0
 80060da:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3340      	adds	r3, #64	; 0x40
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f8b1 	bl	8006266 <GetLineCoding>
 8006104:	4603      	mov	r3, r0
 8006106:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006108:	7afb      	ldrb	r3, [r7, #11]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d105      	bne.n	800611a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006114:	2102      	movs	r1, #2
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800611a:	7afb      	ldrb	r3, [r7, #11]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006144:	2b04      	cmp	r3, #4
 8006146:	d877      	bhi.n	8006238 <USBH_CDC_Process+0x114>
 8006148:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <USBH_CDC_Process+0x2c>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006165 	.word	0x08006165
 8006154:	0800616b 	.word	0x0800616b
 8006158:	0800619b 	.word	0x0800619b
 800615c:	0800620f 	.word	0x0800620f
 8006160:	0800621d 	.word	0x0800621d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]
      break;
 8006168:	e06d      	b.n	8006246 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f897 	bl	80062a4 <SetLineCoding>
 8006176:	4603      	mov	r3, r0
 8006178:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d104      	bne.n	800618a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006188:	e058      	b.n	800623c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d055      	beq.n	800623c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2204      	movs	r2, #4
 8006194:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006198:	e050      	b.n	800623c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3340      	adds	r3, #64	; 0x40
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f860 	bl	8006266 <GetLineCoding>
 80061a6:	4603      	mov	r3, r0
 80061a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d126      	bne.n	80061fe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c2:	791b      	ldrb	r3, [r3, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d13b      	bne.n	8006240 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d133      	bne.n	8006240 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d12b      	bne.n	8006240 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d124      	bne.n	8006240 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f958 	bl	80064ac <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061fc:	e020      	b.n	8006240 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d01d      	beq.n	8006240 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2204      	movs	r2, #4
 8006208:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800620c:	e018      	b.n	8006240 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f867 	bl	80062e2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f8da 	bl	80063ce <CDC_ProcessReception>
      break;
 800621a:	e014      	b.n	8006246 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800621c:	2100      	movs	r1, #0
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 ffef 	bl	8007202 <USBH_ClrFeature>
 8006224:	4603      	mov	r3, r0
 8006226:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006236:	e005      	b.n	8006244 <USBH_CDC_Process+0x120>

    default:
      break;
 8006238:	bf00      	nop
 800623a:	e004      	b.n	8006246 <USBH_CDC_Process+0x122>
      break;
 800623c:	bf00      	nop
 800623e:	e002      	b.n	8006246 <USBH_CDC_Process+0x122>
      break;
 8006240:	bf00      	nop
 8006242:	e000      	b.n	8006246 <USBH_CDC_Process+0x122>
      break;
 8006244:	bf00      	nop

  }

  return status;
 8006246:	7bfb      	ldrb	r3, [r7, #15]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	22a1      	movs	r2, #161	; 0xa1
 8006274:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2221      	movs	r2, #33	; 0x21
 800627a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2207      	movs	r2, #7
 800628c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2207      	movs	r2, #7
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 fa83 	bl	80077a0 <USBH_CtlReq>
 800629a:	4603      	mov	r3, r0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2221      	movs	r2, #33	; 0x21
 80062b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2207      	movs	r2, #7
 80062ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2207      	movs	r2, #7
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 fa64 	bl	80077a0 <USBH_CtlReq>
 80062d8:	4603      	mov	r3, r0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af02      	add	r7, sp, #8
 80062e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062f4:	2300      	movs	r3, #0
 80062f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d002      	beq.n	8006308 <CDC_ProcessTransmission+0x26>
 8006302:	2b02      	cmp	r3, #2
 8006304:	d023      	beq.n	800634e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006306:	e05e      	b.n	80063c6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	8b12      	ldrh	r2, [r2, #24]
 8006310:	4293      	cmp	r3, r2
 8006312:	d90b      	bls.n	800632c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	69d9      	ldr	r1, [r3, #28]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8b1a      	ldrh	r2, [r3, #24]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	7b5b      	ldrb	r3, [r3, #13]
 8006320:	2001      	movs	r0, #1
 8006322:	9000      	str	r0, [sp, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 fc4a 	bl	8007bbe <USBH_BulkSendData>
 800632a:	e00b      	b.n	8006344 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	7b5b      	ldrb	r3, [r3, #13]
 800633a:	2001      	movs	r0, #1
 800633c:	9000      	str	r0, [sp, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fc3d 	bl	8007bbe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800634c:	e03b      	b.n	80063c6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	7b5b      	ldrb	r3, [r3, #13]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 ff61 	bl	800821c <USBH_LL_GetURBState>
 800635a:	4603      	mov	r3, r0
 800635c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800635e:	7afb      	ldrb	r3, [r7, #11]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d128      	bne.n	80063b6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	8b12      	ldrh	r2, [r2, #24]
 800636c:	4293      	cmp	r3, r2
 800636e:	d90e      	bls.n	800638e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	8b12      	ldrh	r2, [r2, #24]
 8006378:	1a9a      	subs	r2, r3, r2
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	8b12      	ldrh	r2, [r2, #24]
 8006386:	441a      	add	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	61da      	str	r2, [r3, #28]
 800638c:	e002      	b.n	8006394 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063a4:	e00e      	b.n	80063c4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f868 	bl	8006484 <USBH_CDC_TransmitCallback>
      break;
 80063b4:	e006      	b.n	80063c4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80063b6:	7afb      	ldrb	r3, [r7, #11]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d103      	bne.n	80063c4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063c4:	bf00      	nop
  }
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b086      	sub	sp, #24
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063e0:	2300      	movs	r3, #0
 80063e2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d002      	beq.n	80063f4 <CDC_ProcessReception+0x26>
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d00e      	beq.n	8006410 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80063f2:	e043      	b.n	800647c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	6a19      	ldr	r1, [r3, #32]
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	8b5a      	ldrh	r2, [r3, #26]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	7b1b      	ldrb	r3, [r3, #12]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 fc01 	bl	8007c08 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2204      	movs	r2, #4
 800640a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800640e:	e035      	b.n	800647c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	7b1b      	ldrb	r3, [r3, #12]
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f001 ff00 	bl	800821c <USBH_LL_GetURBState>
 800641c:	4603      	mov	r3, r0
 800641e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006420:	7cfb      	ldrb	r3, [r7, #19]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d129      	bne.n	800647a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	7b1b      	ldrb	r3, [r3, #12]
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 fe63 	bl	80080f8 <USBH_LL_GetLastXferSize>
 8006432:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	429a      	cmp	r2, r3
 800643c:	d016      	beq.n	800646c <CDC_ProcessReception+0x9e>
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	8b5b      	ldrh	r3, [r3, #26]
 8006442:	461a      	mov	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4293      	cmp	r3, r2
 8006448:	d910      	bls.n	800646c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1ad2      	subs	r2, r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	6a1a      	ldr	r2, [r3, #32]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	441a      	add	r2, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2203      	movs	r2, #3
 8006466:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800646a:	e006      	b.n	800647a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f80f 	bl	8006498 <USBH_CDC_ReceiveCallback>
      break;
 800647a:	bf00      	nop
  }
}
 800647c:	bf00      	nop
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80064d4:	2302      	movs	r3, #2
 80064d6:	e029      	b.n	800652c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	79fa      	ldrb	r2, [r7, #7]
 80064dc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 f81f 	bl	8006534 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f001 fd33 	bl	8007f90 <USBH_LL_Init>

  return USBH_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e009      	b.n	800655a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	33e0      	adds	r3, #224	; 0xe0
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	2200      	movs	r2, #0
 8006552:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b0f      	cmp	r3, #15
 800655e:	d9f2      	bls.n	8006546 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e009      	b.n	800657a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006580:	d3f1      	bcc.n	8006566 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2240      	movs	r2, #64	; 0x40
 80065a6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d016      	beq.n	800661e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10e      	bne.n	8006618 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	33de      	adds	r3, #222	; 0xde
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	73fb      	strb	r3, [r7, #15]
 8006616:	e004      	b.n	8006622 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006618:	2302      	movs	r3, #2
 800661a:	73fb      	strb	r3, [r7, #15]
 800661c:	e001      	b.n	8006622 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800661e:	2302      	movs	r3, #2
 8006620:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006646:	78fa      	ldrb	r2, [r7, #3]
 8006648:	429a      	cmp	r2, r3
 800664a:	d204      	bcs.n	8006656 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006654:	e001      	b.n	800665a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006656:	2302      	movs	r3, #2
 8006658:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800665a:	7bfb      	ldrb	r3, [r7, #15]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	4608      	mov	r0, r1
 8006672:	4611      	mov	r1, r2
 8006674:	461a      	mov	r2, r3
 8006676:	4603      	mov	r3, r0
 8006678:	70fb      	strb	r3, [r7, #3]
 800667a:	460b      	mov	r3, r1
 800667c:	70bb      	strb	r3, [r7, #2]
 800667e:	4613      	mov	r3, r2
 8006680:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006690:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006692:	e025      	b.n	80066e0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	221a      	movs	r2, #26
 8006698:	fb02 f303 	mul.w	r3, r2, r3
 800669c:	3308      	adds	r3, #8
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	3302      	adds	r3, #2
 80066a4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	795b      	ldrb	r3, [r3, #5]
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d002      	beq.n	80066b6 <USBH_FindInterface+0x4e>
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	2bff      	cmp	r3, #255	; 0xff
 80066b4:	d111      	bne.n	80066da <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066ba:	78ba      	ldrb	r2, [r7, #2]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d002      	beq.n	80066c6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066c0:	78bb      	ldrb	r3, [r7, #2]
 80066c2:	2bff      	cmp	r3, #255	; 0xff
 80066c4:	d109      	bne.n	80066da <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066ca:	787a      	ldrb	r2, [r7, #1]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d002      	beq.n	80066d6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066d0:	787b      	ldrb	r3, [r7, #1]
 80066d2:	2bff      	cmp	r3, #255	; 0xff
 80066d4:	d101      	bne.n	80066da <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	e006      	b.n	80066e8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	3301      	adds	r3, #1
 80066de:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d9d6      	bls.n	8006694 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80066e6:	23ff      	movs	r3, #255	; 0xff
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fc83 	bl	8008008 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006702:	2101      	movs	r1, #1
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 fd9c 	bl	8008242 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af04      	add	r7, sp, #16
 800671a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800671c:	2302      	movs	r3, #2
 800671e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b01      	cmp	r3, #1
 800672e:	d102      	bne.n	8006736 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2203      	movs	r2, #3
 8006734:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b0b      	cmp	r3, #11
 800673e:	f200 81be 	bhi.w	8006abe <USBH_Process+0x3aa>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <USBH_Process+0x34>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	08006779 	.word	0x08006779
 800674c:	080067ab 	.word	0x080067ab
 8006750:	08006813 	.word	0x08006813
 8006754:	08006a59 	.word	0x08006a59
 8006758:	08006abf 	.word	0x08006abf
 800675c:	080068b7 	.word	0x080068b7
 8006760:	080069ff 	.word	0x080069ff
 8006764:	080068ed 	.word	0x080068ed
 8006768:	0800690d 	.word	0x0800690d
 800676c:	0800692d 	.word	0x0800692d
 8006770:	08006971 	.word	0x08006971
 8006774:	08006a41 	.word	0x08006a41
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 819e 	beq.w	8006ac2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800678c:	20c8      	movs	r0, #200	; 0xc8
 800678e:	f001 fd9f 	bl	80082d0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 fc95 	bl	80080c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067a8:	e18b      	b.n	8006ac2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d107      	bne.n	80067c4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067c2:	e18d      	b.n	8006ae0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ce:	d914      	bls.n	80067fa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067d6:	3301      	adds	r3, #1
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d903      	bls.n	80067f2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	220d      	movs	r2, #13
 80067ee:	701a      	strb	r2, [r3, #0]
      break;
 80067f0:	e176      	b.n	8006ae0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
      break;
 80067f8:	e172      	b.n	8006ae0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006800:	f103 020a 	add.w	r2, r3, #10
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800680a:	200a      	movs	r0, #10
 800680c:	f001 fd60 	bl	80082d0 <USBH_Delay>
      break;
 8006810:	e166      	b.n	8006ae0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006822:	2104      	movs	r1, #4
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006828:	2064      	movs	r0, #100	; 0x64
 800682a:	f001 fd51 	bl	80082d0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 fc20 	bl	8008074 <USBH_LL_GetSpeed>
 8006834:	4603      	mov	r3, r0
 8006836:	461a      	mov	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2205      	movs	r2, #5
 8006842:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006844:	2100      	movs	r1, #0
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 fa2b 	bl	8007ca2 <USBH_AllocPipe>
 800684c:	4603      	mov	r3, r0
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006854:	2180      	movs	r1, #128	; 0x80
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 fa23 	bl	8007ca2 <USBH_AllocPipe>
 800685c:	4603      	mov	r3, r0
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	7919      	ldrb	r1, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006878:	b292      	uxth	r2, r2
 800687a:	9202      	str	r2, [sp, #8]
 800687c:	2200      	movs	r2, #0
 800687e:	9201      	str	r2, [sp, #4]
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	4603      	mov	r3, r0
 8006884:	2280      	movs	r2, #128	; 0x80
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 f9dc 	bl	8007c44 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7959      	ldrb	r1, [r3, #5]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068a0:	b292      	uxth	r2, r2
 80068a2:	9202      	str	r2, [sp, #8]
 80068a4:	2200      	movs	r2, #0
 80068a6:	9201      	str	r2, [sp, #4]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4603      	mov	r3, r0
 80068ac:	2200      	movs	r2, #0
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 f9c8 	bl	8007c44 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068b4:	e114      	b.n	8006ae0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f918 	bl	8006aec <USBH_HandleEnum>
 80068bc:	4603      	mov	r3, r0
 80068be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f040 80fe 	bne.w	8006ac6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d103      	bne.n	80068e4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2208      	movs	r2, #8
 80068e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80068e2:	e0f0      	b.n	8006ac6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2207      	movs	r2, #7
 80068e8:	701a      	strb	r2, [r3, #0]
      break;
 80068ea:	e0ec      	b.n	8006ac6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80e9 	beq.w	8006aca <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068fe:	2101      	movs	r1, #1
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2208      	movs	r2, #8
 8006908:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800690a:	e0de      	b.n	8006aca <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006912:	b29b      	uxth	r3, r3
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fc2c 	bl	8007174 <USBH_SetCfg>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 80d5 	bne.w	8006ace <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2209      	movs	r2, #9
 8006928:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800692a:	e0d0      	b.n	8006ace <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d016      	beq.n	8006968 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800693a:	2101      	movs	r1, #1
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fc3c 	bl	80071ba <USBH_SetFeature>
 8006942:	4603      	mov	r3, r0
 8006944:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006946:	7bbb      	ldrb	r3, [r7, #14]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	220a      	movs	r2, #10
 8006952:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006954:	e0bd      	b.n	8006ad2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006956:	7bbb      	ldrb	r3, [r7, #14]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b03      	cmp	r3, #3
 800695c:	f040 80b9 	bne.w	8006ad2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	220a      	movs	r2, #10
 8006964:	701a      	strb	r2, [r3, #0]
      break;
 8006966:	e0b4      	b.n	8006ad2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	220a      	movs	r2, #10
 800696c:	701a      	strb	r2, [r3, #0]
      break;
 800696e:	e0b0      	b.n	8006ad2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80ad 	beq.w	8006ad6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]
 8006988:	e016      	b.n	80069b8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800698a:	7bfa      	ldrb	r2, [r7, #15]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	32de      	adds	r2, #222	; 0xde
 8006990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006994:	791a      	ldrb	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800699c:	429a      	cmp	r2, r3
 800699e:	d108      	bne.n	80069b2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80069a0:	7bfa      	ldrb	r2, [r7, #15]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	32de      	adds	r2, #222	; 0xde
 80069a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80069b0:	e005      	b.n	80069be <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	3301      	adds	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0e5      	beq.n	800698a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d016      	beq.n	80069f6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2206      	movs	r2, #6
 80069de:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069e6:	2103      	movs	r1, #3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069ec:	e073      	b.n	8006ad6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	220d      	movs	r2, #13
 80069f2:	701a      	strb	r2, [r3, #0]
      break;
 80069f4:	e06f      	b.n	8006ad6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	220d      	movs	r2, #13
 80069fa:	701a      	strb	r2, [r3, #0]
      break;
 80069fc:	e06b      	b.n	8006ad6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d017      	beq.n	8006a38 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
 8006a14:	4603      	mov	r3, r0
 8006a16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d103      	bne.n	8006a28 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	220b      	movs	r2, #11
 8006a24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a26:	e058      	b.n	8006ada <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d154      	bne.n	8006ada <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	220d      	movs	r2, #13
 8006a34:	701a      	strb	r2, [r3, #0]
      break;
 8006a36:	e050      	b.n	8006ada <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	220d      	movs	r2, #13
 8006a3c:	701a      	strb	r2, [r3, #0]
      break;
 8006a3e:	e04c      	b.n	8006ada <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d049      	beq.n	8006ade <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
      }
      break;
 8006a56:	e042      	b.n	8006ade <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff fd67 	bl	8006534 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d009      	beq.n	8006a84 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a94:	2105      	movs	r1, #5
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d107      	bne.n	8006ab6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff fe20 	bl	80066f4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ab4:	e014      	b.n	8006ae0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 faa6 	bl	8008008 <USBH_LL_Start>
      break;
 8006abc:	e010      	b.n	8006ae0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006abe:	bf00      	nop
 8006ac0:	e00e      	b.n	8006ae0 <USBH_Process+0x3cc>
      break;
 8006ac2:	bf00      	nop
 8006ac4:	e00c      	b.n	8006ae0 <USBH_Process+0x3cc>
      break;
 8006ac6:	bf00      	nop
 8006ac8:	e00a      	b.n	8006ae0 <USBH_Process+0x3cc>
    break;
 8006aca:	bf00      	nop
 8006acc:	e008      	b.n	8006ae0 <USBH_Process+0x3cc>
      break;
 8006ace:	bf00      	nop
 8006ad0:	e006      	b.n	8006ae0 <USBH_Process+0x3cc>
      break;
 8006ad2:	bf00      	nop
 8006ad4:	e004      	b.n	8006ae0 <USBH_Process+0x3cc>
      break;
 8006ad6:	bf00      	nop
 8006ad8:	e002      	b.n	8006ae0 <USBH_Process+0x3cc>
      break;
 8006ada:	bf00      	nop
 8006adc:	e000      	b.n	8006ae0 <USBH_Process+0x3cc>
      break;
 8006ade:	bf00      	nop
  }
  return USBH_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af04      	add	r7, sp, #16
 8006af2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006af4:	2301      	movs	r3, #1
 8006af6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b07      	cmp	r3, #7
 8006b02:	f200 81c1 	bhi.w	8006e88 <USBH_HandleEnum+0x39c>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <USBH_HandleEnum+0x20>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b2d 	.word	0x08006b2d
 8006b10:	08006beb 	.word	0x08006beb
 8006b14:	08006c55 	.word	0x08006c55
 8006b18:	08006ce3 	.word	0x08006ce3
 8006b1c:	08006d4d 	.word	0x08006d4d
 8006b20:	08006dbd 	.word	0x08006dbd
 8006b24:	08006e03 	.word	0x08006e03
 8006b28:	08006e49 	.word	0x08006e49
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b2c:	2108      	movs	r1, #8
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa50 	bl	8006fd4 <USBH_Get_DevDesc>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d130      	bne.n	8006ba0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	7919      	ldrb	r1, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b62:	b292      	uxth	r2, r2
 8006b64:	9202      	str	r2, [sp, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	9201      	str	r2, [sp, #4]
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2280      	movs	r2, #128	; 0x80
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 f867 	bl	8007c44 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	7959      	ldrb	r1, [r3, #5]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b8a:	b292      	uxth	r2, r2
 8006b8c:	9202      	str	r2, [sp, #8]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	9201      	str	r2, [sp, #4]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	4603      	mov	r3, r0
 8006b96:	2200      	movs	r2, #0
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 f853 	bl	8007c44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b9e:	e175      	b.n	8006e8c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	f040 8172 	bne.w	8006e8c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bae:	3301      	adds	r3, #1
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d903      	bls.n	8006bca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	220d      	movs	r2, #13
 8006bc6:	701a      	strb	r2, [r3, #0]
      break;
 8006bc8:	e160      	b.n	8006e8c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	795b      	ldrb	r3, [r3, #5]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 f887 	bl	8007ce4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	791b      	ldrb	r3, [r3, #4]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 f881 	bl	8007ce4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	701a      	strb	r2, [r3, #0]
      break;
 8006be8:	e150      	b.n	8006e8c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006bea:	2112      	movs	r1, #18
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f9f1 	bl	8006fd4 <USBH_Get_DevDesc>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c02:	e145      	b.n	8006e90 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	f040 8142 	bne.w	8006e90 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c12:	3301      	adds	r3, #1
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d903      	bls.n	8006c2e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	220d      	movs	r2, #13
 8006c2a:	701a      	strb	r2, [r3, #0]
      break;
 8006c2c:	e130      	b.n	8006e90 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	795b      	ldrb	r3, [r3, #5]
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 f855 	bl	8007ce4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	791b      	ldrb	r3, [r3, #4]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 f84f 	bl	8007ce4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	701a      	strb	r2, [r3, #0]
      break;
 8006c52:	e11d      	b.n	8006e90 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006c54:	2101      	movs	r1, #1
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fa68 	bl	800712c <USBH_SetAddress>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d132      	bne.n	8006ccc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006c66:	2002      	movs	r0, #2
 8006c68:	f001 fb32 	bl	80082d0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2203      	movs	r2, #3
 8006c78:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7919      	ldrb	r1, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c8e:	b292      	uxth	r2, r2
 8006c90:	9202      	str	r2, [sp, #8]
 8006c92:	2200      	movs	r2, #0
 8006c94:	9201      	str	r2, [sp, #4]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2280      	movs	r2, #128	; 0x80
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 ffd1 	bl	8007c44 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	7959      	ldrb	r1, [r3, #5]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cb6:	b292      	uxth	r2, r2
 8006cb8:	9202      	str	r2, [sp, #8]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	9201      	str	r2, [sp, #4]
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 ffbd 	bl	8007c44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cca:	e0e3      	b.n	8006e94 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	f040 80e0 	bne.w	8006e94 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	220d      	movs	r2, #13
 8006cd8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	705a      	strb	r2, [r3, #1]
      break;
 8006ce0:	e0d8      	b.n	8006e94 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006ce2:	2109      	movs	r1, #9
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f99d 	bl	8007024 <USBH_Get_CfgDesc>
 8006cea:	4603      	mov	r3, r0
 8006cec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d103      	bne.n	8006cfc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006cfa:	e0cd      	b.n	8006e98 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	f040 80ca 	bne.w	8006e98 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d903      	bls.n	8006d26 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	220d      	movs	r2, #13
 8006d22:	701a      	strb	r2, [r3, #0]
      break;
 8006d24:	e0b8      	b.n	8006e98 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	795b      	ldrb	r3, [r3, #5]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 ffd9 	bl	8007ce4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	791b      	ldrb	r3, [r3, #4]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 ffd3 	bl	8007ce4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	701a      	strb	r2, [r3, #0]
      break;
 8006d4a:	e0a5      	b.n	8006e98 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f965 	bl	8007024 <USBH_Get_CfgDesc>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2205      	movs	r2, #5
 8006d68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d6a:	e097      	b.n	8006e9c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	f040 8094 	bne.w	8006e9c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d903      	bls.n	8006d96 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	220d      	movs	r2, #13
 8006d92:	701a      	strb	r2, [r3, #0]
      break;
 8006d94:	e082      	b.n	8006e9c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	795b      	ldrb	r3, [r3, #5]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 ffa1 	bl	8007ce4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	791b      	ldrb	r3, [r3, #4]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 ff9b 	bl	8007ce4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	701a      	strb	r2, [r3, #0]
      break;
 8006dba:	e06f      	b.n	8006e9c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d019      	beq.n	8006dfa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006dd2:	23ff      	movs	r3, #255	; 0xff
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f949 	bl	800706c <USBH_Get_StringDesc>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2206      	movs	r2, #6
 8006de8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006dea:	e059      	b.n	8006ea0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d156      	bne.n	8006ea0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2206      	movs	r2, #6
 8006df6:	705a      	strb	r2, [r3, #1]
      break;
 8006df8:	e052      	b.n	8006ea0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2206      	movs	r2, #6
 8006dfe:	705a      	strb	r2, [r3, #1]
      break;
 8006e00:	e04e      	b.n	8006ea0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d019      	beq.n	8006e40 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e18:	23ff      	movs	r3, #255	; 0xff
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f926 	bl	800706c <USBH_Get_StringDesc>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e24:	7bbb      	ldrb	r3, [r7, #14]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2207      	movs	r2, #7
 8006e2e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e30:	e038      	b.n	8006ea4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d135      	bne.n	8006ea4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2207      	movs	r2, #7
 8006e3c:	705a      	strb	r2, [r3, #1]
      break;
 8006e3e:	e031      	b.n	8006ea4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2207      	movs	r2, #7
 8006e44:	705a      	strb	r2, [r3, #1]
      break;
 8006e46:	e02d      	b.n	8006ea4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d017      	beq.n	8006e82 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e5e:	23ff      	movs	r3, #255	; 0xff
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f903 	bl	800706c <USBH_Get_StringDesc>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006e74:	e018      	b.n	8006ea8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d115      	bne.n	8006ea8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e80:	e012      	b.n	8006ea8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]
      break;
 8006e86:	e00f      	b.n	8006ea8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006e88:	bf00      	nop
 8006e8a:	e00e      	b.n	8006eaa <USBH_HandleEnum+0x3be>
      break;
 8006e8c:	bf00      	nop
 8006e8e:	e00c      	b.n	8006eaa <USBH_HandleEnum+0x3be>
      break;
 8006e90:	bf00      	nop
 8006e92:	e00a      	b.n	8006eaa <USBH_HandleEnum+0x3be>
      break;
 8006e94:	bf00      	nop
 8006e96:	e008      	b.n	8006eaa <USBH_HandleEnum+0x3be>
      break;
 8006e98:	bf00      	nop
 8006e9a:	e006      	b.n	8006eaa <USBH_HandleEnum+0x3be>
      break;
 8006e9c:	bf00      	nop
 8006e9e:	e004      	b.n	8006eaa <USBH_HandleEnum+0x3be>
      break;
 8006ea0:	bf00      	nop
 8006ea2:	e002      	b.n	8006eaa <USBH_HandleEnum+0x3be>
      break;
 8006ea4:	bf00      	nop
 8006ea6:	e000      	b.n	8006eaa <USBH_HandleEnum+0x3be>
      break;
 8006ea8:	bf00      	nop
  }
  return Status;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f804 	bl	8006ef6 <USBH_HandleSof>
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b0b      	cmp	r3, #11
 8006f06:	d10a      	bne.n	8006f1e <USBH_HandleSof+0x28>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
  }
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006f36:	bf00      	nop
}
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006f52:	bf00      	nop
}
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 f846 	bl	800803e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	791b      	ldrb	r3, [r3, #4]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fe93 	bl	8007ce4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	795b      	ldrb	r3, [r3, #5]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fe8d 	bl	8007ce4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006fe6:	78fb      	ldrb	r3, [r7, #3]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f864 	bl	80070c2 <USBH_GetDescriptor>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f203 3026 	addw	r0, r3, #806	; 0x326
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	b292      	uxth	r2, r2
 8007014:	4619      	mov	r1, r3
 8007016:	f000 f919 	bl	800724c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af02      	add	r7, sp, #8
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	331c      	adds	r3, #28
 8007034:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007036:	887b      	ldrh	r3, [r7, #2]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007040:	2100      	movs	r1, #0
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f83d 	bl	80070c2 <USBH_GetDescriptor>
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d107      	bne.n	8007062 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007052:	887b      	ldrh	r3, [r7, #2]
 8007054:	461a      	mov	r2, r3
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f989 	bl	8007370 <USBH_ParseCfgDesc>
 800705e:	4603      	mov	r3, r0
 8007060:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af02      	add	r7, sp, #8
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	607a      	str	r2, [r7, #4]
 8007076:	461a      	mov	r2, r3
 8007078:	460b      	mov	r3, r1
 800707a:	72fb      	strb	r3, [r7, #11]
 800707c:	4613      	mov	r3, r2
 800707e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007080:	7afb      	ldrb	r3, [r7, #11]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007088:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007090:	893b      	ldrh	r3, [r7, #8]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	460b      	mov	r3, r1
 8007096:	2100      	movs	r1, #0
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f812 	bl	80070c2 <USBH_GetDescriptor>
 800709e:	4603      	mov	r3, r0
 80070a0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070ae:	893a      	ldrh	r2, [r7, #8]
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fb26 	bl	8007704 <USBH_ParseStringDesc>
  }

  return status;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	607b      	str	r3, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	72fb      	strb	r3, [r7, #11]
 80070d0:	4613      	mov	r3, r2
 80070d2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	789b      	ldrb	r3, [r3, #2]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d11c      	bne.n	8007116 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80070dc:	7afb      	ldrb	r3, [r7, #11]
 80070de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2206      	movs	r2, #6
 80070ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	893a      	ldrh	r2, [r7, #8]
 80070f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80070f4:	893b      	ldrh	r3, [r7, #8]
 80070f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070fe:	d104      	bne.n	800710a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f240 4209 	movw	r2, #1033	; 0x409
 8007106:	829a      	strh	r2, [r3, #20]
 8007108:	e002      	b.n	8007110 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8b3a      	ldrh	r2, [r7, #24]
 8007114:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007116:	8b3b      	ldrh	r3, [r7, #24]
 8007118:	461a      	mov	r2, r3
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fb3f 	bl	80077a0 <USBH_CtlReq>
 8007122:	4603      	mov	r3, r0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	789b      	ldrb	r3, [r3, #2]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10f      	bne.n	8007160 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2205      	movs	r2, #5
 800714a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	b29a      	uxth	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007160:	2200      	movs	r2, #0
 8007162:	2100      	movs	r1, #0
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fb1b 	bl	80077a0 <USBH_CtlReq>
 800716a:	4603      	mov	r3, r0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	789b      	ldrb	r3, [r3, #2]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d10e      	bne.n	80071a6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2209      	movs	r2, #9
 8007192:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	887a      	ldrh	r2, [r7, #2]
 8007198:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 faf8 	bl	80077a0 <USBH_CtlReq>
 80071b0:	4603      	mov	r3, r0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	789b      	ldrb	r3, [r3, #2]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d10f      	bne.n	80071ee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2203      	movs	r2, #3
 80071d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	b29a      	uxth	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071ee:	2200      	movs	r2, #0
 80071f0:	2100      	movs	r1, #0
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fad4 	bl	80077a0 <USBH_CtlReq>
 80071f8:	4603      	mov	r3, r0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	460b      	mov	r3, r1
 800720c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	789b      	ldrb	r3, [r3, #2]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d10f      	bne.n	8007236 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	b29a      	uxth	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007236:	2200      	movs	r2, #0
 8007238:	2100      	movs	r1, #0
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fab0 	bl	80077a0 <USBH_CtlReq>
 8007240:	4603      	mov	r3, r0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	781a      	ldrb	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	785a      	ldrb	r2, [r3, #1]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	3302      	adds	r3, #2
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	b29a      	uxth	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	3303      	adds	r3, #3
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	021b      	lsls	r3, r3, #8
 800727c:	b29b      	uxth	r3, r3
 800727e:	4313      	orrs	r3, r2
 8007280:	b29a      	uxth	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	791a      	ldrb	r2, [r3, #4]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	795a      	ldrb	r2, [r3, #5]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	799a      	ldrb	r2, [r3, #6]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	79da      	ldrb	r2, [r3, #7]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	79db      	ldrb	r3, [r3, #7]
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	dc0f      	bgt.n	80072ce <USBH_ParseDevDesc+0x82>
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	db14      	blt.n	80072dc <USBH_ParseDevDesc+0x90>
 80072b2:	3b08      	subs	r3, #8
 80072b4:	4a2d      	ldr	r2, [pc, #180]	; (800736c <USBH_ParseDevDesc+0x120>)
 80072b6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bf14      	ite	ne
 80072c2:	2301      	movne	r3, #1
 80072c4:	2300      	moveq	r3, #0
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <USBH_ParseDevDesc+0x86>
 80072cc:	e006      	b.n	80072dc <USBH_ParseDevDesc+0x90>
 80072ce:	2b40      	cmp	r3, #64	; 0x40
 80072d0:	d104      	bne.n	80072dc <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	79da      	ldrb	r2, [r3, #7]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	71da      	strb	r2, [r3, #7]
      break;
 80072da:	e003      	b.n	80072e4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2240      	movs	r2, #64	; 0x40
 80072e0:	71da      	strb	r2, [r3, #7]
      break;
 80072e2:	bf00      	nop
  }

  if (length > 8U)
 80072e4:	88fb      	ldrh	r3, [r7, #6]
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d939      	bls.n	800735e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	3308      	adds	r3, #8
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	3309      	adds	r3, #9
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	4313      	orrs	r3, r2
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	330a      	adds	r3, #10
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b29a      	uxth	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	330b      	adds	r3, #11
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	b29b      	uxth	r3, r3
 800731a:	4313      	orrs	r3, r2
 800731c:	b29a      	uxth	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	330c      	adds	r3, #12
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	b29a      	uxth	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	330d      	adds	r3, #13
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	021b      	lsls	r3, r3, #8
 8007334:	b29b      	uxth	r3, r3
 8007336:	4313      	orrs	r3, r2
 8007338:	b29a      	uxth	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	7b9a      	ldrb	r2, [r3, #14]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	7bda      	ldrb	r2, [r3, #15]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	7c1a      	ldrb	r2, [r3, #16]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	7c5a      	ldrb	r2, [r3, #17]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	745a      	strb	r2, [r3, #17]
  }
}
 800735e:	bf00      	nop
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	01000101 	.word	0x01000101

08007370 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08c      	sub	sp, #48	; 0x30
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007384:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	785a      	ldrb	r2, [r3, #1]
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	3302      	adds	r3, #2
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3303      	adds	r3, #3
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073cc:	bf28      	it	cs
 80073ce:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	791a      	ldrb	r2, [r3, #4]
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	795a      	ldrb	r2, [r3, #5]
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	799a      	ldrb	r2, [r3, #6]
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	79da      	ldrb	r2, [r3, #7]
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	7a1a      	ldrb	r2, [r3, #8]
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b09      	cmp	r3, #9
 8007406:	d002      	beq.n	800740e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	2209      	movs	r2, #9
 800740c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	2b09      	cmp	r3, #9
 8007412:	f240 809d 	bls.w	8007550 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007416:	2309      	movs	r3, #9
 8007418:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800741e:	e081      	b.n	8007524 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007420:	f107 0316 	add.w	r3, r7, #22
 8007424:	4619      	mov	r1, r3
 8007426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007428:	f000 f99f 	bl	800776a <USBH_GetNextDesc>
 800742c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	785b      	ldrb	r3, [r3, #1]
 8007432:	2b04      	cmp	r3, #4
 8007434:	d176      	bne.n	8007524 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b09      	cmp	r3, #9
 800743c:	d002      	beq.n	8007444 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	2209      	movs	r2, #9
 8007442:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007448:	221a      	movs	r2, #26
 800744a:	fb02 f303 	mul.w	r3, r2, r3
 800744e:	3308      	adds	r3, #8
 8007450:	6a3a      	ldr	r2, [r7, #32]
 8007452:	4413      	add	r3, r2
 8007454:	3302      	adds	r3, #2
 8007456:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800745a:	69f8      	ldr	r0, [r7, #28]
 800745c:	f000 f87e 	bl	800755c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007466:	2300      	movs	r3, #0
 8007468:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800746a:	e043      	b.n	80074f4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800746c:	f107 0316 	add.w	r3, r7, #22
 8007470:	4619      	mov	r1, r3
 8007472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007474:	f000 f979 	bl	800776a <USBH_GetNextDesc>
 8007478:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	2b05      	cmp	r3, #5
 8007480:	d138      	bne.n	80074f4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	795b      	ldrb	r3, [r3, #5]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d10f      	bne.n	80074aa <USBH_ParseCfgDesc+0x13a>
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	799b      	ldrb	r3, [r3, #6]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d10b      	bne.n	80074aa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	79db      	ldrb	r3, [r3, #7]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10f      	bne.n	80074ba <USBH_ParseCfgDesc+0x14a>
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b09      	cmp	r3, #9
 80074a0:	d00b      	beq.n	80074ba <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	2209      	movs	r2, #9
 80074a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074a8:	e007      	b.n	80074ba <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b07      	cmp	r3, #7
 80074b0:	d004      	beq.n	80074bc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	2207      	movs	r2, #7
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	e000      	b.n	80074bc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074ba:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80074bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074c4:	3201      	adds	r2, #1
 80074c6:	00d2      	lsls	r2, r2, #3
 80074c8:	211a      	movs	r1, #26
 80074ca:	fb01 f303 	mul.w	r3, r1, r3
 80074ce:	4413      	add	r3, r2
 80074d0:	3308      	adds	r3, #8
 80074d2:	6a3a      	ldr	r2, [r7, #32]
 80074d4:	4413      	add	r3, r2
 80074d6:	3304      	adds	r3, #4
 80074d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80074da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074dc:	69b9      	ldr	r1, [r7, #24]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 f86b 	bl	80075ba <USBH_ParseEPDesc>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80074ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074ee:	3301      	adds	r3, #1
 80074f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	791b      	ldrb	r3, [r3, #4]
 80074f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d204      	bcs.n	800750a <USBH_ParseCfgDesc+0x19a>
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	885a      	ldrh	r2, [r3, #2]
 8007504:	8afb      	ldrh	r3, [r7, #22]
 8007506:	429a      	cmp	r2, r3
 8007508:	d8b0      	bhi.n	800746c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	791b      	ldrb	r3, [r3, #4]
 800750e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007512:	429a      	cmp	r2, r3
 8007514:	d201      	bcs.n	800751a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007516:	2303      	movs	r3, #3
 8007518:	e01c      	b.n	8007554 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800751a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800751e:	3301      	adds	r3, #1
 8007520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007528:	2b01      	cmp	r3, #1
 800752a:	d805      	bhi.n	8007538 <USBH_ParseCfgDesc+0x1c8>
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	885a      	ldrh	r2, [r3, #2]
 8007530:	8afb      	ldrh	r3, [r7, #22]
 8007532:	429a      	cmp	r2, r3
 8007534:	f63f af74 	bhi.w	8007420 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	791b      	ldrb	r3, [r3, #4]
 800753c:	2b02      	cmp	r3, #2
 800753e:	bf28      	it	cs
 8007540:	2302      	movcs	r3, #2
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007548:	429a      	cmp	r2, r3
 800754a:	d201      	bcs.n	8007550 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800754c:	2303      	movs	r3, #3
 800754e:	e001      	b.n	8007554 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007550:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007554:	4618      	mov	r0, r3
 8007556:	3730      	adds	r7, #48	; 0x30
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	785a      	ldrb	r2, [r3, #1]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	789a      	ldrb	r2, [r3, #2]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	78da      	ldrb	r2, [r3, #3]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	791a      	ldrb	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	795a      	ldrb	r2, [r3, #5]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	799a      	ldrb	r2, [r3, #6]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	79da      	ldrb	r2, [r3, #7]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	7a1a      	ldrb	r2, [r3, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	721a      	strb	r2, [r3, #8]
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b087      	sub	sp, #28
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	785a      	ldrb	r2, [r3, #1]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	789a      	ldrb	r2, [r3, #2]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	78da      	ldrb	r2, [r3, #3]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3304      	adds	r3, #4
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3305      	adds	r3, #5
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	4313      	orrs	r3, r2
 8007600:	b29a      	uxth	r2, r3
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	799a      	ldrb	r2, [r3, #6]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	889b      	ldrh	r3, [r3, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d102      	bne.n	800761c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007616:	2303      	movs	r3, #3
 8007618:	75fb      	strb	r3, [r7, #23]
 800761a:	e033      	b.n	8007684 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	889b      	ldrh	r3, [r3, #4]
 8007620:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007624:	f023 0307 	bic.w	r3, r3, #7
 8007628:	b29a      	uxth	r2, r3
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	889b      	ldrh	r3, [r3, #4]
 8007632:	b21a      	sxth	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3304      	adds	r3, #4
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	b299      	uxth	r1, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3305      	adds	r3, #5
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	b29b      	uxth	r3, r3
 8007648:	430b      	orrs	r3, r1
 800764a:	b29b      	uxth	r3, r3
 800764c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007650:	2b00      	cmp	r3, #0
 8007652:	d110      	bne.n	8007676 <USBH_ParseEPDesc+0xbc>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3304      	adds	r3, #4
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b299      	uxth	r1, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3305      	adds	r3, #5
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	b29b      	uxth	r3, r3
 8007668:	430b      	orrs	r3, r1
 800766a:	b29b      	uxth	r3, r3
 800766c:	b21b      	sxth	r3, r3
 800766e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007672:	b21b      	sxth	r3, r3
 8007674:	e001      	b.n	800767a <USBH_ParseEPDesc+0xc0>
 8007676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800767a:	4313      	orrs	r3, r2
 800767c:	b21b      	sxth	r3, r3
 800767e:	b29a      	uxth	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800768a:	2b00      	cmp	r3, #0
 800768c:	d116      	bne.n	80076bc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	78db      	ldrb	r3, [r3, #3]
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	2b01      	cmp	r3, #1
 8007698:	d005      	beq.n	80076a6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	78db      	ldrb	r3, [r3, #3]
 800769e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d127      	bne.n	80076f6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	799b      	ldrb	r3, [r3, #6]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <USBH_ParseEPDesc+0xfc>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	799b      	ldrb	r3, [r3, #6]
 80076b2:	2b10      	cmp	r3, #16
 80076b4:	d91f      	bls.n	80076f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076b6:	2303      	movs	r3, #3
 80076b8:	75fb      	strb	r3, [r7, #23]
 80076ba:	e01c      	b.n	80076f6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	78db      	ldrb	r3, [r3, #3]
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d10a      	bne.n	80076de <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	799b      	ldrb	r3, [r3, #6]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <USBH_ParseEPDesc+0x11e>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	799b      	ldrb	r3, [r3, #6]
 80076d4:	2b10      	cmp	r3, #16
 80076d6:	d90e      	bls.n	80076f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076d8:	2303      	movs	r3, #3
 80076da:	75fb      	strb	r3, [r7, #23]
 80076dc:	e00b      	b.n	80076f6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	78db      	ldrb	r3, [r3, #3]
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d105      	bne.n	80076f6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	799b      	ldrb	r3, [r3, #6]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076f2:	2303      	movs	r3, #3
 80076f4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	4613      	mov	r3, r2
 8007710:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3301      	adds	r3, #1
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d120      	bne.n	800775e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	1e9a      	subs	r2, r3, #2
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	4293      	cmp	r3, r2
 8007726:	bf28      	it	cs
 8007728:	4613      	movcs	r3, r2
 800772a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3302      	adds	r3, #2
 8007730:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007732:	2300      	movs	r3, #0
 8007734:	82fb      	strh	r3, [r7, #22]
 8007736:	e00b      	b.n	8007750 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007738:	8afb      	ldrh	r3, [r7, #22]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	781a      	ldrb	r2, [r3, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	3301      	adds	r3, #1
 8007748:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800774a:	8afb      	ldrh	r3, [r7, #22]
 800774c:	3302      	adds	r3, #2
 800774e:	82fb      	strh	r3, [r7, #22]
 8007750:	8afa      	ldrh	r2, [r7, #22]
 8007752:	8abb      	ldrh	r3, [r7, #20]
 8007754:	429a      	cmp	r2, r3
 8007756:	d3ef      	bcc.n	8007738 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	701a      	strb	r2, [r3, #0]
  }
}
 800775e:	bf00      	nop
 8007760:	371c      	adds	r7, #28
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	881a      	ldrh	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	4413      	add	r3, r2
 8007780:	b29a      	uxth	r2, r3
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007792:	68fb      	ldr	r3, [r7, #12]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	4613      	mov	r3, r2
 80077ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	789b      	ldrb	r3, [r3, #2]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d002      	beq.n	80077c0 <USBH_CtlReq+0x20>
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d00f      	beq.n	80077de <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80077be:	e027      	b.n	8007810 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	88fa      	ldrh	r2, [r7, #6]
 80077ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2202      	movs	r2, #2
 80077d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80077d8:	2301      	movs	r3, #1
 80077da:	75fb      	strb	r3, [r7, #23]
      break;
 80077dc:	e018      	b.n	8007810 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 f81c 	bl	800781c <USBH_HandleControl>
 80077e4:	4603      	mov	r3, r0
 80077e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <USBH_CtlReq+0x54>
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d106      	bne.n	8007802 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2201      	movs	r2, #1
 80077f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	761a      	strb	r2, [r3, #24]
      break;
 8007800:	e005      	b.n	800780e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d102      	bne.n	800780e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	709a      	strb	r2, [r3, #2]
      break;
 800780e:	bf00      	nop
  }
  return status;
 8007810:	7dfb      	ldrb	r3, [r7, #23]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af02      	add	r7, sp, #8
 8007822:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007828:	2300      	movs	r3, #0
 800782a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7e1b      	ldrb	r3, [r3, #24]
 8007830:	3b01      	subs	r3, #1
 8007832:	2b0a      	cmp	r3, #10
 8007834:	f200 8156 	bhi.w	8007ae4 <USBH_HandleControl+0x2c8>
 8007838:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <USBH_HandleControl+0x24>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	0800786d 	.word	0x0800786d
 8007844:	08007887 	.word	0x08007887
 8007848:	080078f1 	.word	0x080078f1
 800784c:	08007917 	.word	0x08007917
 8007850:	0800794f 	.word	0x0800794f
 8007854:	08007979 	.word	0x08007979
 8007858:	080079cb 	.word	0x080079cb
 800785c:	080079ed 	.word	0x080079ed
 8007860:	08007a29 	.word	0x08007a29
 8007864:	08007a4f 	.word	0x08007a4f
 8007868:	08007a8d 	.word	0x08007a8d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f103 0110 	add.w	r1, r3, #16
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	795b      	ldrb	r3, [r3, #5]
 8007876:	461a      	mov	r2, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f943 	bl	8007b04 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	761a      	strb	r2, [r3, #24]
      break;
 8007884:	e139      	b.n	8007afa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	795b      	ldrb	r3, [r3, #5]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fcc5 	bl	800821c <USBH_LL_GetURBState>
 8007892:	4603      	mov	r3, r0
 8007894:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d11e      	bne.n	80078da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7c1b      	ldrb	r3, [r3, #16]
 80078a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	8adb      	ldrh	r3, [r3, #22]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80078ae:	7b7b      	ldrb	r3, [r7, #13]
 80078b0:	2b80      	cmp	r3, #128	; 0x80
 80078b2:	d103      	bne.n	80078bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2203      	movs	r2, #3
 80078b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078ba:	e115      	b.n	8007ae8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2205      	movs	r2, #5
 80078c0:	761a      	strb	r2, [r3, #24]
      break;
 80078c2:	e111      	b.n	8007ae8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80078c4:	7b7b      	ldrb	r3, [r7, #13]
 80078c6:	2b80      	cmp	r3, #128	; 0x80
 80078c8:	d103      	bne.n	80078d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2209      	movs	r2, #9
 80078ce:	761a      	strb	r2, [r3, #24]
      break;
 80078d0:	e10a      	b.n	8007ae8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2207      	movs	r2, #7
 80078d6:	761a      	strb	r2, [r3, #24]
      break;
 80078d8:	e106      	b.n	8007ae8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d003      	beq.n	80078e8 <USBH_HandleControl+0xcc>
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	f040 8100 	bne.w	8007ae8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	220b      	movs	r2, #11
 80078ec:	761a      	strb	r2, [r3, #24]
      break;
 80078ee:	e0fb      	b.n	8007ae8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6899      	ldr	r1, [r3, #8]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	899a      	ldrh	r2, [r3, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	791b      	ldrb	r3, [r3, #4]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f93a 	bl	8007b82 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2204      	movs	r2, #4
 8007912:	761a      	strb	r2, [r3, #24]
      break;
 8007914:	e0f1      	b.n	8007afa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	791b      	ldrb	r3, [r3, #4]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fc7d 	bl	800821c <USBH_LL_GetURBState>
 8007922:	4603      	mov	r3, r0
 8007924:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d102      	bne.n	8007932 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2209      	movs	r2, #9
 8007930:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b05      	cmp	r3, #5
 8007936:	d102      	bne.n	800793e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007938:	2303      	movs	r3, #3
 800793a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800793c:	e0d6      	b.n	8007aec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b04      	cmp	r3, #4
 8007942:	f040 80d3 	bne.w	8007aec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	220b      	movs	r2, #11
 800794a:	761a      	strb	r2, [r3, #24]
      break;
 800794c:	e0ce      	b.n	8007aec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6899      	ldr	r1, [r3, #8]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	899a      	ldrh	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	795b      	ldrb	r3, [r3, #5]
 800795a:	2001      	movs	r0, #1
 800795c:	9000      	str	r0, [sp, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f8ea 	bl	8007b38 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800796a:	b29a      	uxth	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2206      	movs	r2, #6
 8007974:	761a      	strb	r2, [r3, #24]
      break;
 8007976:	e0c0      	b.n	8007afa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	795b      	ldrb	r3, [r3, #5]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fc4c 	bl	800821c <USBH_LL_GetURBState>
 8007984:	4603      	mov	r3, r0
 8007986:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d103      	bne.n	8007996 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2207      	movs	r2, #7
 8007992:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007994:	e0ac      	b.n	8007af0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b05      	cmp	r3, #5
 800799a:	d105      	bne.n	80079a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	220c      	movs	r2, #12
 80079a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079a2:	2303      	movs	r3, #3
 80079a4:	73fb      	strb	r3, [r7, #15]
      break;
 80079a6:	e0a3      	b.n	8007af0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d103      	bne.n	80079b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2205      	movs	r2, #5
 80079b2:	761a      	strb	r2, [r3, #24]
      break;
 80079b4:	e09c      	b.n	8007af0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	f040 8099 	bne.w	8007af0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	220b      	movs	r2, #11
 80079c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80079c4:	2302      	movs	r3, #2
 80079c6:	73fb      	strb	r3, [r7, #15]
      break;
 80079c8:	e092      	b.n	8007af0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	791b      	ldrb	r3, [r3, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	2100      	movs	r1, #0
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f8d5 	bl	8007b82 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079de:	b29a      	uxth	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2208      	movs	r2, #8
 80079e8:	761a      	strb	r2, [r3, #24]

      break;
 80079ea:	e086      	b.n	8007afa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	791b      	ldrb	r3, [r3, #4]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fc12 	bl	800821c <USBH_LL_GetURBState>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d105      	bne.n	8007a0e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	220d      	movs	r2, #13
 8007a06:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a0c:	e072      	b.n	8007af4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	d103      	bne.n	8007a1c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	220b      	movs	r2, #11
 8007a18:	761a      	strb	r2, [r3, #24]
      break;
 8007a1a:	e06b      	b.n	8007af4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d168      	bne.n	8007af4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a22:	2303      	movs	r3, #3
 8007a24:	73fb      	strb	r3, [r7, #15]
      break;
 8007a26:	e065      	b.n	8007af4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	795b      	ldrb	r3, [r3, #5]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	9200      	str	r2, [sp, #0]
 8007a30:	2200      	movs	r2, #0
 8007a32:	2100      	movs	r1, #0
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f87f 	bl	8007b38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	220a      	movs	r2, #10
 8007a4a:	761a      	strb	r2, [r3, #24]
      break;
 8007a4c:	e055      	b.n	8007afa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	795b      	ldrb	r3, [r3, #5]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fbe1 	bl	800821c <USBH_LL_GetURBState>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d105      	bne.n	8007a70 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	220d      	movs	r2, #13
 8007a6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a6e:	e043      	b.n	8007af8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d103      	bne.n	8007a7e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2209      	movs	r2, #9
 8007a7a:	761a      	strb	r2, [r3, #24]
      break;
 8007a7c:	e03c      	b.n	8007af8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d139      	bne.n	8007af8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	220b      	movs	r2, #11
 8007a88:	761a      	strb	r2, [r3, #24]
      break;
 8007a8a:	e035      	b.n	8007af8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	7e5b      	ldrb	r3, [r3, #25]
 8007a90:	3301      	adds	r3, #1
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	765a      	strb	r2, [r3, #25]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7e5b      	ldrb	r3, [r3, #25]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d806      	bhi.n	8007aae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007aac:	e025      	b.n	8007afa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ab4:	2106      	movs	r1, #6
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	795b      	ldrb	r3, [r3, #5]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f90c 	bl	8007ce4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	791b      	ldrb	r3, [r3, #4]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f906 	bl	8007ce4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae2:	e00a      	b.n	8007afa <USBH_HandleControl+0x2de>

    default:
      break;
 8007ae4:	bf00      	nop
 8007ae6:	e008      	b.n	8007afa <USBH_HandleControl+0x2de>
      break;
 8007ae8:	bf00      	nop
 8007aea:	e006      	b.n	8007afa <USBH_HandleControl+0x2de>
      break;
 8007aec:	bf00      	nop
 8007aee:	e004      	b.n	8007afa <USBH_HandleControl+0x2de>
      break;
 8007af0:	bf00      	nop
 8007af2:	e002      	b.n	8007afa <USBH_HandleControl+0x2de>
      break;
 8007af4:	bf00      	nop
 8007af6:	e000      	b.n	8007afa <USBH_HandleControl+0x2de>
      break;
 8007af8:	bf00      	nop
  }

  return status;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af04      	add	r7, sp, #16
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b12:	79f9      	ldrb	r1, [r7, #7]
 8007b14:	2300      	movs	r3, #0
 8007b16:	9303      	str	r3, [sp, #12]
 8007b18:	2308      	movs	r3, #8
 8007b1a:	9302      	str	r3, [sp, #8]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	2300      	movs	r3, #0
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	2300      	movs	r3, #0
 8007b26:	2200      	movs	r2, #0
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 fb46 	bl	80081ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af04      	add	r7, sp, #16
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4611      	mov	r1, r2
 8007b44:	461a      	mov	r2, r3
 8007b46:	460b      	mov	r3, r1
 8007b48:	80fb      	strh	r3, [r7, #6]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b5c:	7979      	ldrb	r1, [r7, #5]
 8007b5e:	7e3b      	ldrb	r3, [r7, #24]
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	88fb      	ldrh	r3, [r7, #6]
 8007b64:	9302      	str	r3, [sp, #8]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2200      	movs	r2, #0
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fb21 	bl	80081ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b088      	sub	sp, #32
 8007b86:	af04      	add	r7, sp, #16
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	461a      	mov	r2, r3
 8007b90:	460b      	mov	r3, r1
 8007b92:	80fb      	strh	r3, [r7, #6]
 8007b94:	4613      	mov	r3, r2
 8007b96:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b98:	7979      	ldrb	r1, [r7, #5]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9303      	str	r3, [sp, #12]
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	9302      	str	r3, [sp, #8]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	2300      	movs	r3, #0
 8007bac:	2201      	movs	r2, #1
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fb03 	bl	80081ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007bb4:	2300      	movs	r3, #0

}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b088      	sub	sp, #32
 8007bc2:	af04      	add	r7, sp, #16
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	461a      	mov	r2, r3
 8007bcc:	460b      	mov	r3, r1
 8007bce:	80fb      	strh	r3, [r7, #6]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007be2:	7979      	ldrb	r1, [r7, #5]
 8007be4:	7e3b      	ldrb	r3, [r7, #24]
 8007be6:	9303      	str	r3, [sp, #12]
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	9302      	str	r3, [sp, #8]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	9301      	str	r3, [sp, #4]
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 fade 	bl	80081ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af04      	add	r7, sp, #16
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	4611      	mov	r1, r2
 8007c14:	461a      	mov	r2, r3
 8007c16:	460b      	mov	r3, r1
 8007c18:	80fb      	strh	r3, [r7, #6]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c1e:	7979      	ldrb	r1, [r7, #5]
 8007c20:	2300      	movs	r3, #0
 8007c22:	9303      	str	r3, [sp, #12]
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	9302      	str	r3, [sp, #8]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	2302      	movs	r3, #2
 8007c32:	2201      	movs	r2, #1
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 fac0 	bl	80081ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af04      	add	r7, sp, #16
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	4608      	mov	r0, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	461a      	mov	r2, r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	70fb      	strb	r3, [r7, #3]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70bb      	strb	r3, [r7, #2]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c5e:	7878      	ldrb	r0, [r7, #1]
 8007c60:	78ba      	ldrb	r2, [r7, #2]
 8007c62:	78f9      	ldrb	r1, [r7, #3]
 8007c64:	8b3b      	ldrh	r3, [r7, #24]
 8007c66:	9302      	str	r3, [sp, #8]
 8007c68:	7d3b      	ldrb	r3, [r7, #20]
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	7c3b      	ldrb	r3, [r7, #16]
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	4603      	mov	r3, r0
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa53 	bl	800811e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa72 	bl	800817c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f836 	bl	8007d20 <USBH_GetFreePipe>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007cb8:	89fb      	ldrh	r3, [r7, #14]
 8007cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00a      	beq.n	8007cd8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	89fb      	ldrh	r3, [r7, #14]
 8007cc6:	f003 030f 	and.w	r3, r3, #15
 8007cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	33e0      	adds	r3, #224	; 0xe0
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007cd8:	89fb      	ldrh	r3, [r7, #14]
 8007cda:	b2db      	uxtb	r3, r3
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	2b0f      	cmp	r3, #15
 8007cf4:	d80d      	bhi.n	8007d12 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	33e0      	adds	r3, #224	; 0xe0
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	33e0      	adds	r3, #224	; 0xe0
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	73fb      	strb	r3, [r7, #15]
 8007d30:	e00f      	b.n	8007d52 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	33e0      	adds	r3, #224	; 0xe0
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	e007      	b.n	8007d5c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	73fb      	strb	r3, [r7, #15]
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	2b0f      	cmp	r3, #15
 8007d56:	d9ec      	bls.n	8007d32 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	490e      	ldr	r1, [pc, #56]	; (8007da8 <MX_USB_HOST_Init+0x40>)
 8007d70:	480e      	ldr	r0, [pc, #56]	; (8007dac <MX_USB_HOST_Init+0x44>)
 8007d72:	f7fe fba5 	bl	80064c0 <USBH_Init>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d7c:	f7f8 ffe2 	bl	8000d44 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d80:	490b      	ldr	r1, [pc, #44]	; (8007db0 <MX_USB_HOST_Init+0x48>)
 8007d82:	480a      	ldr	r0, [pc, #40]	; (8007dac <MX_USB_HOST_Init+0x44>)
 8007d84:	f7fe fc2a 	bl	80065dc <USBH_RegisterClass>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d8e:	f7f8 ffd9 	bl	8000d44 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d92:	4806      	ldr	r0, [pc, #24]	; (8007dac <MX_USB_HOST_Init+0x44>)
 8007d94:	f7fe fcae 	bl	80066f4 <USBH_Start>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d9e:	f7f8 ffd1 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007da2:	bf00      	nop
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	08007dc9 	.word	0x08007dc9
 8007dac:	20001188 	.word	0x20001188
 8007db0:	2000000c 	.word	0x2000000c

08007db4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007db8:	4802      	ldr	r0, [pc, #8]	; (8007dc4 <MX_USB_HOST_Process+0x10>)
 8007dba:	f7fe fcab 	bl	8006714 <USBH_Process>
}
 8007dbe:	bf00      	nop
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20001188 	.word	0x20001188

08007dc8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d819      	bhi.n	8007e10 <USBH_UserProcess+0x48>
 8007ddc:	a201      	add	r2, pc, #4	; (adr r2, 8007de4 <USBH_UserProcess+0x1c>)
 8007dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de2:	bf00      	nop
 8007de4:	08007e11 	.word	0x08007e11
 8007de8:	08007e01 	.word	0x08007e01
 8007dec:	08007e11 	.word	0x08007e11
 8007df0:	08007e09 	.word	0x08007e09
 8007df4:	08007df9 	.word	0x08007df9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007df8:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <USBH_UserProcess+0x58>)
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	701a      	strb	r2, [r3, #0]
  break;
 8007dfe:	e008      	b.n	8007e12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e00:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <USBH_UserProcess+0x58>)
 8007e02:	2202      	movs	r2, #2
 8007e04:	701a      	strb	r2, [r3, #0]
  break;
 8007e06:	e004      	b.n	8007e12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <USBH_UserProcess+0x58>)
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	701a      	strb	r2, [r3, #0]
  break;
 8007e0e:	e000      	b.n	8007e12 <USBH_UserProcess+0x4a>

  default:
  break;
 8007e10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	20001560 	.word	0x20001560

08007e24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08a      	sub	sp, #40	; 0x28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e2c:	f107 0314 	add.w	r3, r7, #20
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	605a      	str	r2, [r3, #4]
 8007e36:	609a      	str	r2, [r3, #8]
 8007e38:	60da      	str	r2, [r3, #12]
 8007e3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e44:	d147      	bne.n	8007ed6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e46:	2300      	movs	r3, #0
 8007e48:	613b      	str	r3, [r7, #16]
 8007e4a:	4b25      	ldr	r3, [pc, #148]	; (8007ee0 <HAL_HCD_MspInit+0xbc>)
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	4a24      	ldr	r2, [pc, #144]	; (8007ee0 <HAL_HCD_MspInit+0xbc>)
 8007e50:	f043 0301 	orr.w	r3, r3, #1
 8007e54:	6313      	str	r3, [r2, #48]	; 0x30
 8007e56:	4b22      	ldr	r3, [pc, #136]	; (8007ee0 <HAL_HCD_MspInit+0xbc>)
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	613b      	str	r3, [r7, #16]
 8007e60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e70:	f107 0314 	add.w	r3, r7, #20
 8007e74:	4619      	mov	r1, r3
 8007e76:	481b      	ldr	r0, [pc, #108]	; (8007ee4 <HAL_HCD_MspInit+0xc0>)
 8007e78:	f7f9 fb76 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e82:	2302      	movs	r3, #2
 8007e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e8e:	230a      	movs	r3, #10
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e92:	f107 0314 	add.w	r3, r7, #20
 8007e96:	4619      	mov	r1, r3
 8007e98:	4812      	ldr	r0, [pc, #72]	; (8007ee4 <HAL_HCD_MspInit+0xc0>)
 8007e9a:	f7f9 fb65 	bl	8001568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e9e:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <HAL_HCD_MspInit+0xbc>)
 8007ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea2:	4a0f      	ldr	r2, [pc, #60]	; (8007ee0 <HAL_HCD_MspInit+0xbc>)
 8007ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea8:	6353      	str	r3, [r2, #52]	; 0x34
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <HAL_HCD_MspInit+0xbc>)
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb2:	4a0b      	ldr	r2, [pc, #44]	; (8007ee0 <HAL_HCD_MspInit+0xbc>)
 8007eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8007eba:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <HAL_HCD_MspInit+0xbc>)
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	2100      	movs	r1, #0
 8007eca:	2043      	movs	r0, #67	; 0x43
 8007ecc:	f7f9 fa8f 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ed0:	2043      	movs	r0, #67	; 0x43
 8007ed2:	f7f9 faa8 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	3728      	adds	r7, #40	; 0x28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	40023800 	.word	0x40023800
 8007ee4:	40020000 	.word	0x40020000

08007ee8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe ffeb 	bl	8006ed2 <USBH_LL_IncTimer>
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff f823 	bl	8006f5e <USBH_LL_Connect>
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff f82c 	bl	8006f8c <USBH_LL_Disconnect>
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70fb      	strb	r3, [r7, #3]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe ffdd 	bl	8006f26 <USBH_LL_PortEnabled>
}
 8007f6c:	bf00      	nop
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe ffdd 	bl	8006f42 <USBH_LL_PortDisabled>
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d12a      	bne.n	8007ff8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fa2:	4a18      	ldr	r2, [pc, #96]	; (8008004 <USBH_LL_Init+0x74>)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a15      	ldr	r2, [pc, #84]	; (8008004 <USBH_LL_Init+0x74>)
 8007fae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fb2:	4b14      	ldr	r3, [pc, #80]	; (8008004 <USBH_LL_Init+0x74>)
 8007fb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fb8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007fba:	4b12      	ldr	r3, [pc, #72]	; (8008004 <USBH_LL_Init+0x74>)
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fc0:	4b10      	ldr	r3, [pc, #64]	; (8008004 <USBH_LL_Init+0x74>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fc6:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <USBH_LL_Init+0x74>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <USBH_LL_Init+0x74>)
 8007fce:	2202      	movs	r2, #2
 8007fd0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fd2:	4b0c      	ldr	r3, [pc, #48]	; (8008004 <USBH_LL_Init+0x74>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007fd8:	480a      	ldr	r0, [pc, #40]	; (8008004 <USBH_LL_Init+0x74>)
 8007fda:	f7f9 fc7a 	bl	80018d2 <HAL_HCD_Init>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007fe4:	f7f8 feae 	bl	8000d44 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007fe8:	4806      	ldr	r0, [pc, #24]	; (8008004 <USBH_LL_Init+0x74>)
 8007fea:	f7fa f85e 	bl	80020aa <HAL_HCD_GetCurrentFrame>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7fe ff5e 	bl	8006eb4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20001564 	.word	0x20001564

08008008 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800801e:	4618      	mov	r0, r3
 8008020:	f7f9 ffcd 	bl	8001fbe <HAL_HCD_Start>
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f95c 	bl	80082e8 <USBH_Get_USB_Status>
 8008030:	4603      	mov	r3, r0
 8008032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008034:	7bbb      	ldrb	r3, [r7, #14]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008054:	4618      	mov	r0, r3
 8008056:	f7f9 ffd5 	bl	8002004 <HAL_HCD_Stop>
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f941 	bl	80082e8 <USBH_Get_USB_Status>
 8008066:	4603      	mov	r3, r0
 8008068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800806a:	7bbb      	ldrb	r3, [r7, #14]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800807c:	2301      	movs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008086:	4618      	mov	r0, r3
 8008088:	f7fa f81d 	bl	80020c6 <HAL_HCD_GetCurrentSpeed>
 800808c:	4603      	mov	r3, r0
 800808e:	2b02      	cmp	r3, #2
 8008090:	d00c      	beq.n	80080ac <USBH_LL_GetSpeed+0x38>
 8008092:	2b02      	cmp	r3, #2
 8008094:	d80d      	bhi.n	80080b2 <USBH_LL_GetSpeed+0x3e>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <USBH_LL_GetSpeed+0x2c>
 800809a:	2b01      	cmp	r3, #1
 800809c:	d003      	beq.n	80080a6 <USBH_LL_GetSpeed+0x32>
 800809e:	e008      	b.n	80080b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]
    break;
 80080a4:	e008      	b.n	80080b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080a6:	2301      	movs	r3, #1
 80080a8:	73fb      	strb	r3, [r7, #15]
    break;
 80080aa:	e005      	b.n	80080b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080ac:	2302      	movs	r3, #2
 80080ae:	73fb      	strb	r3, [r7, #15]
    break;
 80080b0:	e002      	b.n	80080b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80080b2:	2301      	movs	r3, #1
 80080b4:	73fb      	strb	r3, [r7, #15]
    break;
 80080b6:	bf00      	nop
  }
  return  speed;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080d8:	4618      	mov	r0, r3
 80080da:	f7f9 ffb0 	bl	800203e <HAL_HCD_ResetPort>
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 f8ff 	bl	80082e8 <USBH_Get_USB_Status>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800810a:	78fa      	ldrb	r2, [r7, #3]
 800810c:	4611      	mov	r1, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f7f9 ffb7 	bl	8002082 <HAL_HCD_HC_GetXferCount>
 8008114:	4603      	mov	r3, r0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800811e:	b590      	push	{r4, r7, lr}
 8008120:	b089      	sub	sp, #36	; 0x24
 8008122:	af04      	add	r7, sp, #16
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	461a      	mov	r2, r3
 800812c:	4603      	mov	r3, r0
 800812e:	70fb      	strb	r3, [r7, #3]
 8008130:	460b      	mov	r3, r1
 8008132:	70bb      	strb	r3, [r7, #2]
 8008134:	4613      	mov	r3, r2
 8008136:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008146:	787c      	ldrb	r4, [r7, #1]
 8008148:	78ba      	ldrb	r2, [r7, #2]
 800814a:	78f9      	ldrb	r1, [r7, #3]
 800814c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800814e:	9302      	str	r3, [sp, #8]
 8008150:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	f897 3020 	ldrb.w	r3, [r7, #32]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	4623      	mov	r3, r4
 800815e:	f7f9 fc1a 	bl	8001996 <HAL_HCD_HC_Init>
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 f8bd 	bl	80082e8 <USBH_Get_USB_Status>
 800816e:	4603      	mov	r3, r0
 8008170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008172:	7bbb      	ldrb	r3, [r7, #14]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	bd90      	pop	{r4, r7, pc}

0800817c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f7f9 fc8a 	bl	8001ab4 <HAL_HCD_HC_Halt>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 f89e 	bl	80082e8 <USBH_Get_USB_Status>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081ba:	b590      	push	{r4, r7, lr}
 80081bc:	b089      	sub	sp, #36	; 0x24
 80081be:	af04      	add	r7, sp, #16
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	4608      	mov	r0, r1
 80081c4:	4611      	mov	r1, r2
 80081c6:	461a      	mov	r2, r3
 80081c8:	4603      	mov	r3, r0
 80081ca:	70fb      	strb	r3, [r7, #3]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70bb      	strb	r3, [r7, #2]
 80081d0:	4613      	mov	r3, r2
 80081d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081e2:	787c      	ldrb	r4, [r7, #1]
 80081e4:	78ba      	ldrb	r2, [r7, #2]
 80081e6:	78f9      	ldrb	r1, [r7, #3]
 80081e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081ec:	9303      	str	r3, [sp, #12]
 80081ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081f0:	9302      	str	r3, [sp, #8]
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	9301      	str	r3, [sp, #4]
 80081f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	4623      	mov	r3, r4
 80081fe:	f7f9 fc7d 	bl	8001afc <HAL_HCD_HC_SubmitRequest>
 8008202:	4603      	mov	r3, r0
 8008204:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f86d 	bl	80082e8 <USBH_Get_USB_Status>
 800820e:	4603      	mov	r3, r0
 8008210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008212:	7bbb      	ldrb	r3, [r7, #14]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	bd90      	pop	{r4, r7, pc}

0800821c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f7f9 ff11 	bl	800205a <HAL_HCD_HC_GetURBState>
 8008238:	4603      	mov	r3, r0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008254:	2b01      	cmp	r3, #1
 8008256:	d103      	bne.n	8008260 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	4618      	mov	r0, r3
 800825c:	f000 f870 	bl	8008340 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008260:	20c8      	movs	r0, #200	; 0xc8
 8008262:	f7f8 ffc5 	bl	80011f0 <HAL_Delay>
  return USBH_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
 800827c:	4613      	mov	r3, r2
 800827e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008286:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	212c      	movs	r1, #44	; 0x2c
 800828e:	fb01 f303 	mul.w	r3, r1, r3
 8008292:	4413      	add	r3, r2
 8008294:	333b      	adds	r3, #59	; 0x3b
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d009      	beq.n	80082b0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800829c:	78fb      	ldrb	r3, [r7, #3]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	212c      	movs	r1, #44	; 0x2c
 80082a2:	fb01 f303 	mul.w	r3, r1, r3
 80082a6:	4413      	add	r3, r2
 80082a8:	3354      	adds	r3, #84	; 0x54
 80082aa:	78ba      	ldrb	r2, [r7, #2]
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	e008      	b.n	80082c2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082b0:	78fb      	ldrb	r3, [r7, #3]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	212c      	movs	r1, #44	; 0x2c
 80082b6:	fb01 f303 	mul.w	r3, r1, r3
 80082ba:	4413      	add	r3, r2
 80082bc:	3355      	adds	r3, #85	; 0x55
 80082be:	78ba      	ldrb	r2, [r7, #2]
 80082c0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7f8 ff89 	bl	80011f0 <HAL_Delay>
}
 80082de:	bf00      	nop
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d817      	bhi.n	800832c <USBH_Get_USB_Status+0x44>
 80082fc:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <USBH_Get_USB_Status+0x1c>)
 80082fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008302:	bf00      	nop
 8008304:	08008315 	.word	0x08008315
 8008308:	0800831b 	.word	0x0800831b
 800830c:	08008321 	.word	0x08008321
 8008310:	08008327 	.word	0x08008327
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
    break;
 8008318:	e00b      	b.n	8008332 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800831a:	2302      	movs	r3, #2
 800831c:	73fb      	strb	r3, [r7, #15]
    break;
 800831e:	e008      	b.n	8008332 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
    break;
 8008324:	e005      	b.n	8008332 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008326:	2302      	movs	r3, #2
 8008328:	73fb      	strb	r3, [r7, #15]
    break;
 800832a:	e002      	b.n	8008332 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800832c:	2302      	movs	r3, #2
 800832e:	73fb      	strb	r3, [r7, #15]
    break;
 8008330:	bf00      	nop
  }
  return usb_status;
 8008332:	7bfb      	ldrb	r3, [r7, #15]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d102      	bne.n	800835a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]
 8008358:	e001      	b.n	800835e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800835a:	2301      	movs	r3, #1
 800835c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	461a      	mov	r2, r3
 8008362:	2101      	movs	r1, #1
 8008364:	4803      	ldr	r0, [pc, #12]	; (8008374 <MX_DriverVbusFS+0x34>)
 8008366:	f7f9 fa9b 	bl	80018a0 <HAL_GPIO_WritePin>
}
 800836a:	bf00      	nop
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	40020800 	.word	0x40020800

08008378 <malloc>:
 8008378:	4b02      	ldr	r3, [pc, #8]	; (8008384 <malloc+0xc>)
 800837a:	4601      	mov	r1, r0
 800837c:	6818      	ldr	r0, [r3, #0]
 800837e:	f000 b82b 	b.w	80083d8 <_malloc_r>
 8008382:	bf00      	nop
 8008384:	20000078 	.word	0x20000078

08008388 <free>:
 8008388:	4b02      	ldr	r3, [pc, #8]	; (8008394 <free+0xc>)
 800838a:	4601      	mov	r1, r0
 800838c:	6818      	ldr	r0, [r3, #0]
 800838e:	f000 b8f3 	b.w	8008578 <_free_r>
 8008392:	bf00      	nop
 8008394:	20000078 	.word	0x20000078

08008398 <sbrk_aligned>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	4e0e      	ldr	r6, [pc, #56]	; (80083d4 <sbrk_aligned+0x3c>)
 800839c:	460c      	mov	r4, r1
 800839e:	6831      	ldr	r1, [r6, #0]
 80083a0:	4605      	mov	r5, r0
 80083a2:	b911      	cbnz	r1, 80083aa <sbrk_aligned+0x12>
 80083a4:	f000 f8ac 	bl	8008500 <_sbrk_r>
 80083a8:	6030      	str	r0, [r6, #0]
 80083aa:	4621      	mov	r1, r4
 80083ac:	4628      	mov	r0, r5
 80083ae:	f000 f8a7 	bl	8008500 <_sbrk_r>
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	d00a      	beq.n	80083cc <sbrk_aligned+0x34>
 80083b6:	1cc4      	adds	r4, r0, #3
 80083b8:	f024 0403 	bic.w	r4, r4, #3
 80083bc:	42a0      	cmp	r0, r4
 80083be:	d007      	beq.n	80083d0 <sbrk_aligned+0x38>
 80083c0:	1a21      	subs	r1, r4, r0
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 f89c 	bl	8008500 <_sbrk_r>
 80083c8:	3001      	adds	r0, #1
 80083ca:	d101      	bne.n	80083d0 <sbrk_aligned+0x38>
 80083cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80083d0:	4620      	mov	r0, r4
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	2000186c 	.word	0x2000186c

080083d8 <_malloc_r>:
 80083d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083dc:	1ccd      	adds	r5, r1, #3
 80083de:	f025 0503 	bic.w	r5, r5, #3
 80083e2:	3508      	adds	r5, #8
 80083e4:	2d0c      	cmp	r5, #12
 80083e6:	bf38      	it	cc
 80083e8:	250c      	movcc	r5, #12
 80083ea:	2d00      	cmp	r5, #0
 80083ec:	4607      	mov	r7, r0
 80083ee:	db01      	blt.n	80083f4 <_malloc_r+0x1c>
 80083f0:	42a9      	cmp	r1, r5
 80083f2:	d905      	bls.n	8008400 <_malloc_r+0x28>
 80083f4:	230c      	movs	r3, #12
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	2600      	movs	r6, #0
 80083fa:	4630      	mov	r0, r6
 80083fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008400:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80084d4 <_malloc_r+0xfc>
 8008404:	f000 f868 	bl	80084d8 <__malloc_lock>
 8008408:	f8d8 3000 	ldr.w	r3, [r8]
 800840c:	461c      	mov	r4, r3
 800840e:	bb5c      	cbnz	r4, 8008468 <_malloc_r+0x90>
 8008410:	4629      	mov	r1, r5
 8008412:	4638      	mov	r0, r7
 8008414:	f7ff ffc0 	bl	8008398 <sbrk_aligned>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	4604      	mov	r4, r0
 800841c:	d155      	bne.n	80084ca <_malloc_r+0xf2>
 800841e:	f8d8 4000 	ldr.w	r4, [r8]
 8008422:	4626      	mov	r6, r4
 8008424:	2e00      	cmp	r6, #0
 8008426:	d145      	bne.n	80084b4 <_malloc_r+0xdc>
 8008428:	2c00      	cmp	r4, #0
 800842a:	d048      	beq.n	80084be <_malloc_r+0xe6>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	4631      	mov	r1, r6
 8008430:	4638      	mov	r0, r7
 8008432:	eb04 0903 	add.w	r9, r4, r3
 8008436:	f000 f863 	bl	8008500 <_sbrk_r>
 800843a:	4581      	cmp	r9, r0
 800843c:	d13f      	bne.n	80084be <_malloc_r+0xe6>
 800843e:	6821      	ldr	r1, [r4, #0]
 8008440:	1a6d      	subs	r5, r5, r1
 8008442:	4629      	mov	r1, r5
 8008444:	4638      	mov	r0, r7
 8008446:	f7ff ffa7 	bl	8008398 <sbrk_aligned>
 800844a:	3001      	adds	r0, #1
 800844c:	d037      	beq.n	80084be <_malloc_r+0xe6>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	442b      	add	r3, r5
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	f8d8 3000 	ldr.w	r3, [r8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d038      	beq.n	80084ce <_malloc_r+0xf6>
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	42a2      	cmp	r2, r4
 8008460:	d12b      	bne.n	80084ba <_malloc_r+0xe2>
 8008462:	2200      	movs	r2, #0
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	e00f      	b.n	8008488 <_malloc_r+0xb0>
 8008468:	6822      	ldr	r2, [r4, #0]
 800846a:	1b52      	subs	r2, r2, r5
 800846c:	d41f      	bmi.n	80084ae <_malloc_r+0xd6>
 800846e:	2a0b      	cmp	r2, #11
 8008470:	d917      	bls.n	80084a2 <_malloc_r+0xca>
 8008472:	1961      	adds	r1, r4, r5
 8008474:	42a3      	cmp	r3, r4
 8008476:	6025      	str	r5, [r4, #0]
 8008478:	bf18      	it	ne
 800847a:	6059      	strne	r1, [r3, #4]
 800847c:	6863      	ldr	r3, [r4, #4]
 800847e:	bf08      	it	eq
 8008480:	f8c8 1000 	streq.w	r1, [r8]
 8008484:	5162      	str	r2, [r4, r5]
 8008486:	604b      	str	r3, [r1, #4]
 8008488:	4638      	mov	r0, r7
 800848a:	f104 060b 	add.w	r6, r4, #11
 800848e:	f000 f829 	bl	80084e4 <__malloc_unlock>
 8008492:	f026 0607 	bic.w	r6, r6, #7
 8008496:	1d23      	adds	r3, r4, #4
 8008498:	1af2      	subs	r2, r6, r3
 800849a:	d0ae      	beq.n	80083fa <_malloc_r+0x22>
 800849c:	1b9b      	subs	r3, r3, r6
 800849e:	50a3      	str	r3, [r4, r2]
 80084a0:	e7ab      	b.n	80083fa <_malloc_r+0x22>
 80084a2:	42a3      	cmp	r3, r4
 80084a4:	6862      	ldr	r2, [r4, #4]
 80084a6:	d1dd      	bne.n	8008464 <_malloc_r+0x8c>
 80084a8:	f8c8 2000 	str.w	r2, [r8]
 80084ac:	e7ec      	b.n	8008488 <_malloc_r+0xb0>
 80084ae:	4623      	mov	r3, r4
 80084b0:	6864      	ldr	r4, [r4, #4]
 80084b2:	e7ac      	b.n	800840e <_malloc_r+0x36>
 80084b4:	4634      	mov	r4, r6
 80084b6:	6876      	ldr	r6, [r6, #4]
 80084b8:	e7b4      	b.n	8008424 <_malloc_r+0x4c>
 80084ba:	4613      	mov	r3, r2
 80084bc:	e7cc      	b.n	8008458 <_malloc_r+0x80>
 80084be:	230c      	movs	r3, #12
 80084c0:	603b      	str	r3, [r7, #0]
 80084c2:	4638      	mov	r0, r7
 80084c4:	f000 f80e 	bl	80084e4 <__malloc_unlock>
 80084c8:	e797      	b.n	80083fa <_malloc_r+0x22>
 80084ca:	6025      	str	r5, [r4, #0]
 80084cc:	e7dc      	b.n	8008488 <_malloc_r+0xb0>
 80084ce:	605b      	str	r3, [r3, #4]
 80084d0:	deff      	udf	#255	; 0xff
 80084d2:	bf00      	nop
 80084d4:	20001868 	.word	0x20001868

080084d8 <__malloc_lock>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__malloc_lock+0x8>)
 80084da:	f000 b84b 	b.w	8008574 <__retarget_lock_acquire_recursive>
 80084de:	bf00      	nop
 80084e0:	200019ac 	.word	0x200019ac

080084e4 <__malloc_unlock>:
 80084e4:	4801      	ldr	r0, [pc, #4]	; (80084ec <__malloc_unlock+0x8>)
 80084e6:	f000 b846 	b.w	8008576 <__retarget_lock_release_recursive>
 80084ea:	bf00      	nop
 80084ec:	200019ac 	.word	0x200019ac

080084f0 <memset>:
 80084f0:	4402      	add	r2, r0
 80084f2:	4603      	mov	r3, r0
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d100      	bne.n	80084fa <memset+0xa>
 80084f8:	4770      	bx	lr
 80084fa:	f803 1b01 	strb.w	r1, [r3], #1
 80084fe:	e7f9      	b.n	80084f4 <memset+0x4>

08008500 <_sbrk_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4d06      	ldr	r5, [pc, #24]	; (800851c <_sbrk_r+0x1c>)
 8008504:	2300      	movs	r3, #0
 8008506:	4604      	mov	r4, r0
 8008508:	4608      	mov	r0, r1
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	f7f8 fd8c 	bl	8001028 <_sbrk>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d102      	bne.n	800851a <_sbrk_r+0x1a>
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	b103      	cbz	r3, 800851a <_sbrk_r+0x1a>
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	200019a8 	.word	0x200019a8

08008520 <__errno>:
 8008520:	4b01      	ldr	r3, [pc, #4]	; (8008528 <__errno+0x8>)
 8008522:	6818      	ldr	r0, [r3, #0]
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	20000078 	.word	0x20000078

0800852c <__libc_init_array>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	4d0d      	ldr	r5, [pc, #52]	; (8008564 <__libc_init_array+0x38>)
 8008530:	4c0d      	ldr	r4, [pc, #52]	; (8008568 <__libc_init_array+0x3c>)
 8008532:	1b64      	subs	r4, r4, r5
 8008534:	10a4      	asrs	r4, r4, #2
 8008536:	2600      	movs	r6, #0
 8008538:	42a6      	cmp	r6, r4
 800853a:	d109      	bne.n	8008550 <__libc_init_array+0x24>
 800853c:	4d0b      	ldr	r5, [pc, #44]	; (800856c <__libc_init_array+0x40>)
 800853e:	4c0c      	ldr	r4, [pc, #48]	; (8008570 <__libc_init_array+0x44>)
 8008540:	f000 f88a 	bl	8008658 <_init>
 8008544:	1b64      	subs	r4, r4, r5
 8008546:	10a4      	asrs	r4, r4, #2
 8008548:	2600      	movs	r6, #0
 800854a:	42a6      	cmp	r6, r4
 800854c:	d105      	bne.n	800855a <__libc_init_array+0x2e>
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	f855 3b04 	ldr.w	r3, [r5], #4
 8008554:	4798      	blx	r3
 8008556:	3601      	adds	r6, #1
 8008558:	e7ee      	b.n	8008538 <__libc_init_array+0xc>
 800855a:	f855 3b04 	ldr.w	r3, [r5], #4
 800855e:	4798      	blx	r3
 8008560:	3601      	adds	r6, #1
 8008562:	e7f2      	b.n	800854a <__libc_init_array+0x1e>
 8008564:	08008694 	.word	0x08008694
 8008568:	08008694 	.word	0x08008694
 800856c:	08008694 	.word	0x08008694
 8008570:	08008698 	.word	0x08008698

08008574 <__retarget_lock_acquire_recursive>:
 8008574:	4770      	bx	lr

08008576 <__retarget_lock_release_recursive>:
 8008576:	4770      	bx	lr

08008578 <_free_r>:
 8008578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800857a:	2900      	cmp	r1, #0
 800857c:	d044      	beq.n	8008608 <_free_r+0x90>
 800857e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008582:	9001      	str	r0, [sp, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f1a1 0404 	sub.w	r4, r1, #4
 800858a:	bfb8      	it	lt
 800858c:	18e4      	addlt	r4, r4, r3
 800858e:	f7ff ffa3 	bl	80084d8 <__malloc_lock>
 8008592:	4a1e      	ldr	r2, [pc, #120]	; (800860c <_free_r+0x94>)
 8008594:	9801      	ldr	r0, [sp, #4]
 8008596:	6813      	ldr	r3, [r2, #0]
 8008598:	b933      	cbnz	r3, 80085a8 <_free_r+0x30>
 800859a:	6063      	str	r3, [r4, #4]
 800859c:	6014      	str	r4, [r2, #0]
 800859e:	b003      	add	sp, #12
 80085a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085a4:	f7ff bf9e 	b.w	80084e4 <__malloc_unlock>
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d908      	bls.n	80085be <_free_r+0x46>
 80085ac:	6825      	ldr	r5, [r4, #0]
 80085ae:	1961      	adds	r1, r4, r5
 80085b0:	428b      	cmp	r3, r1
 80085b2:	bf01      	itttt	eq
 80085b4:	6819      	ldreq	r1, [r3, #0]
 80085b6:	685b      	ldreq	r3, [r3, #4]
 80085b8:	1949      	addeq	r1, r1, r5
 80085ba:	6021      	streq	r1, [r4, #0]
 80085bc:	e7ed      	b.n	800859a <_free_r+0x22>
 80085be:	461a      	mov	r2, r3
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	b10b      	cbz	r3, 80085c8 <_free_r+0x50>
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	d9fa      	bls.n	80085be <_free_r+0x46>
 80085c8:	6811      	ldr	r1, [r2, #0]
 80085ca:	1855      	adds	r5, r2, r1
 80085cc:	42a5      	cmp	r5, r4
 80085ce:	d10b      	bne.n	80085e8 <_free_r+0x70>
 80085d0:	6824      	ldr	r4, [r4, #0]
 80085d2:	4421      	add	r1, r4
 80085d4:	1854      	adds	r4, r2, r1
 80085d6:	42a3      	cmp	r3, r4
 80085d8:	6011      	str	r1, [r2, #0]
 80085da:	d1e0      	bne.n	800859e <_free_r+0x26>
 80085dc:	681c      	ldr	r4, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	6053      	str	r3, [r2, #4]
 80085e2:	440c      	add	r4, r1
 80085e4:	6014      	str	r4, [r2, #0]
 80085e6:	e7da      	b.n	800859e <_free_r+0x26>
 80085e8:	d902      	bls.n	80085f0 <_free_r+0x78>
 80085ea:	230c      	movs	r3, #12
 80085ec:	6003      	str	r3, [r0, #0]
 80085ee:	e7d6      	b.n	800859e <_free_r+0x26>
 80085f0:	6825      	ldr	r5, [r4, #0]
 80085f2:	1961      	adds	r1, r4, r5
 80085f4:	428b      	cmp	r3, r1
 80085f6:	bf04      	itt	eq
 80085f8:	6819      	ldreq	r1, [r3, #0]
 80085fa:	685b      	ldreq	r3, [r3, #4]
 80085fc:	6063      	str	r3, [r4, #4]
 80085fe:	bf04      	itt	eq
 8008600:	1949      	addeq	r1, r1, r5
 8008602:	6021      	streq	r1, [r4, #0]
 8008604:	6054      	str	r4, [r2, #4]
 8008606:	e7ca      	b.n	800859e <_free_r+0x26>
 8008608:	b003      	add	sp, #12
 800860a:	bd30      	pop	{r4, r5, pc}
 800860c:	20001868 	.word	0x20001868

08008610 <roundf>:
 8008610:	ee10 0a10 	vmov	r0, s0
 8008614:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008618:	3a7f      	subs	r2, #127	; 0x7f
 800861a:	2a16      	cmp	r2, #22
 800861c:	dc15      	bgt.n	800864a <roundf+0x3a>
 800861e:	2a00      	cmp	r2, #0
 8008620:	da08      	bge.n	8008634 <roundf+0x24>
 8008622:	3201      	adds	r2, #1
 8008624:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008628:	d101      	bne.n	800862e <roundf+0x1e>
 800862a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800862e:	ee00 3a10 	vmov	s0, r3
 8008632:	4770      	bx	lr
 8008634:	4907      	ldr	r1, [pc, #28]	; (8008654 <roundf+0x44>)
 8008636:	4111      	asrs	r1, r2
 8008638:	4208      	tst	r0, r1
 800863a:	d0fa      	beq.n	8008632 <roundf+0x22>
 800863c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008640:	4113      	asrs	r3, r2
 8008642:	4403      	add	r3, r0
 8008644:	ea23 0301 	bic.w	r3, r3, r1
 8008648:	e7f1      	b.n	800862e <roundf+0x1e>
 800864a:	2a80      	cmp	r2, #128	; 0x80
 800864c:	d1f1      	bne.n	8008632 <roundf+0x22>
 800864e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008652:	4770      	bx	lr
 8008654:	007fffff 	.word	0x007fffff

08008658 <_init>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	bf00      	nop
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr

08008664 <_fini>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	bf00      	nop
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr
